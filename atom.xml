<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StarBugs Weekly 星巴哥技術週刊</title>
  <icon>https://weekly.starbugs.dev/img/logo.jpg</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weekly.starbugs.dev/"/>
  <updated>2021-07-12T14:03:17.234Z</updated>
  <id>https://weekly.starbugs.dev/</id>
  
  <author>
    <name>StarBugs Weekly Editors</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第 89 期 - 微解封後，也要繼續手手勤洗洗，病毒遠離你喔！</title>
    <link href="https://weekly.starbugs.dev/2021/07/13/89-keep-virus-away-from-you/"/>
    <id>https://weekly.starbugs.dev/2021/07/13/89-keep-virus-away-from-you/</id>
    <published>2021-07-13T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="淺談-Shamir-私鑰分割演算法：切一切再拼回來"><a href="#淺談-Shamir-私鑰分割演算法：切一切再拼回來" class="headerlink" title="淺談 Shamir 私鑰分割演算法：切一切再拼回來"></a><a href="https://medium.com/starbugs/introduction-to-shamirs-secret-sharing-adf713e6430d" target="_blank" rel="noopener">淺談 Shamir 私鑰分割演算法：切一切再拼回來</a></h3><p>大家好我是 Larry，這週的專欄要跟大家分享一個很有趣的密碼學演算法 - Shamir’s Secret Sharing，他可以用來把 secret 分割成 n 份，並且你只需要其中 k 份就可以重組回來，這代表你可以把真的很重要的 secret 分散存在許多不同的地方，也就可以大幅降低被洩露出去的風險。重點是這個演算法只需要國中的數學，所以還不趕快進來看看嗎～</p><h2 id="資訊安全"><a href="#資訊安全" class="headerlink" title="資訊安全"></a>資訊安全</h2><h3 id="利用-Cookie-特性進行的-DoS-攻擊：Cookie-炸彈"><a href="#利用-Cookie-特性進行的-DoS-攻擊：Cookie-炸彈" class="headerlink" title="利用 Cookie 特性進行的 DoS 攻擊：Cookie 炸彈"></a><a href="https://blog.huli.tw/2021/07/10/cookie-bomb/" target="_blank" rel="noopener">利用 Cookie 特性進行的 DoS 攻擊：Cookie 炸彈</a></h3><p>雖然知道大部分伺服器會因為 payload 太大而拒絕請求，但想不到這個特性可以搭配 cookie bomb 用來進行 DOS 攻擊，只能說資安這領域真是太有趣了～</p><h3 id="為什麼忘記密碼時只能重設，不把舊密碼告訴我？"><a href="#為什麼忘記密碼時只能重設，不把舊密碼告訴我？" class="headerlink" title="為什麼忘記密碼時只能重設，不把舊密碼告訴我？"></a><a href="https://link.medium.com/gUjnv4W0Ohb" target="_blank" rel="noopener">為什麼忘記密碼時只能重設，不把舊密碼告訴我？</a></h3><p>對啊為什麼不把舊密碼告訴我，三不五時在那邊重設不是很麻煩嗎？其實是因為網站根本不會儲存你的原始密碼，那不存密碼有什麼好處呢？看完這篇文章就會知道啦</p><h3 id="一次搞懂密碼學中的三兄弟-—-Encode、Encrypt-跟-Hash"><a href="#一次搞懂密碼學中的三兄弟-—-Encode、Encrypt-跟-Hash" class="headerlink" title="一次搞懂密碼學中的三兄弟 — Encode、Encrypt 跟 Hash"></a><a href="https://medium.com/starbugs/what-are-encoding-encrypt-and-hashing-4b03d40e7b0c" target="_blank" rel="noopener">一次搞懂密碼學中的三兄弟 — Encode、Encrypt 跟 Hash</a></h3><p>想要學習密碼學，一定要先把編碼、加密跟雜湊三個東西搞清楚，所以在這邊我（自肥）推薦這篇自己的文章，把這三個概念搞懂之後再去看其他更深入的文章才不會越看越亂</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="JavaScript-Template-Literals-amp-Tag-Functions-for-Beginners"><a href="#JavaScript-Template-Literals-amp-Tag-Functions-for-Beginners" class="headerlink" title="JavaScript: Template Literals &amp; Tag Functions for Beginners"></a><a href="https://codeburst.io/javascript-template-literals-tag-functions-for-beginners-758a041160e1" target="_blank" rel="noopener">JavaScript: Template Literals &amp; Tag Functions for Beginners</a></h3><p>這個真的太有趣了，最近在看一些奇怪的 JavaScript 寫法時發現了這個 function call 的寫法，但其實也是自己見識太淺薄才不知道原來可以這樣寫，簡單來說就是利用 template literals 的方式進行 function call，讀者不妨也可以試著將自己的程式碼改寫成這樣，就能完美的達到 ninja code 的精神了(X</p><h3 id="jsfuck"><a href="#jsfuck" class="headerlink" title="jsfuck"></a><a href="https://github.com/aemkei/jsfuck?fbclid=IwAR1ovUOUGH2dZOBoUwLQKPlsXoyKrGwV7V3_mCc_GZaWnryxLL90J4URo6g#readme" target="_blank" rel="noopener">jsfuck</a></h3><p>我真的是太晚才知道這個網站了XD 沒想到 JavaScript 有這麼多奇奇怪怪的技巧可以達到一樣的事情，這資訊量大到讓我很難一時之間可以接受，有興趣的讀者不妨來看一下一些有趣的寫法，看完之後我只能說我自己實在是太不懂 JavaScript 了XD</p><h3 id="10-GitHub-repositories-to-become-a-better-JavaScript-Developer"><a href="#10-GitHub-repositories-to-become-a-better-JavaScript-Developer" class="headerlink" title="10 GitHub repositories to become a better JavaScript Developer"></a><a href="https://dev.to/pb/10-github-repositories-which-will-help-you-to-become-a-better-javascript-developer-5om" target="_blank" rel="noopener">10 GitHub repositories to become a better JavaScript Developer</a></h3><p>想要成為一個更進步的 JavaScript 開發者，有很多小細節是必須要學會的，這篇文章提供了 10 種可以幫助自己在 JavaScript 的開發上更進步的文件，想要更了解一些大神們的寫法不妨可以把這些 repo 都收藏起來了。</p><h3 id="How-to-Sort-Array-Elements-An-Essential-Guide"><a href="#How-to-Sort-Array-Elements-An-Essential-Guide" class="headerlink" title="How to Sort Array Elements: An Essential Guide"></a><a href="https://hackernoon.com/how-to-sort-array-elements-an-essential-guide-s41w370r" target="_blank" rel="noopener">How to Sort Array Elements: An Essential Guide</a></h3><p>排序是指對一堆資料進行有意義的排列過程，在文章中就是介紹 JavaScript 對 Array 排序的各種方法，包含以常見的數字（0-9）、字母（A-Z 的字典排序）等等排序，也展示了實務上最常拿到的裝著 Object 的 Array 做排序的例子。</p><h3 id="Is-everything-in-JavaScript-an-Object"><a href="#Is-everything-in-JavaScript-an-Object" class="headerlink" title="Is everything in JavaScript an Object?"></a><a href="https://dev.to/mayankav/is-everything-in-javascript-an-object-1alg" target="_blank" rel="noopener">Is everything in JavaScript an Object?</a></h3><p>「在 JavaScript 裡的一切都是物件嗎？」，作者先是直接宣告一個 String，再用 new String 建立另外一個 String Object，並解釋兩者之間的差別，這對於為什麼一般的 String 可以像 Object 一樣使用 Prototype 上的功能，但當你直接對它的屬性賦值時卻又沒有任何效用。</p><h3 id="【学不动了就回家喂猪】尤大大新活-petite-vue-尝鲜"><a href="#【学不动了就回家喂猪】尤大大新活-petite-vue-尝鲜" class="headerlink" title="【学不动了就回家喂猪】尤大大新活 petite-vue 尝鲜"></a><a href="https://juejin.cn/post/6983328034443132935" target="_blank" rel="noopener">【学不动了就回家喂猪】尤大大新活 petite-vue 尝鲜</a></h3><p><a href="https://github.com/vuejs/petite-vue" target="_blank" rel="noopener">petite-vue</a>，提供了和 Vue 相似的開發思維和語法，且 petite-vue 不只是更輕量化的 Vue，在 <a href="https://github.com/vuejs/petite-vue#comparison-with-standard-vue" target="_blank" rel="noopener">petite-vue 的 README.md</a> 中，作者還特別強調 petite-vue 是在使用像 <a href="https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA" target="_blank" rel="noopener">Progressive Enhancement</a> 特定情況時的最佳實踐！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="New-Google-Scorecards-Tool-Scans-Open-Source-Software-for-More-Security-Risks"><a href="#New-Google-Scorecards-Tool-Scans-Open-Source-Software-for-More-Security-Risks" class="headerlink" title="New Google Scorecards Tool Scans Open-Source Software for More Security Risks"></a><a href="https://thehackernews.com/2021/07/new-google-scorecards-tool-scans-open.html" target="_blank" rel="noopener">New Google Scorecards Tool Scans Open-Source Software for More Security Risks</a></h3><p>Google 推出了新版的 Scorecards，他是一個可以針對開源軟體專案自動產生出風險分數的自動安全工具，其實不僅在編譯階段，甚至在 Dockerfiles 或是 CI/CD 的工作流程中，將任何擁有相依套件地方的版本固定都是很有用的做法，Scorecards 可以針對這些固定版的的相依套件去做檢查，用以避免類似於最近 CodeCov 的惡意相依性攻擊</p><p>Google 同時指出從大量被分析的開源專案中可以發現到，其中很多專案並沒有持續進行模糊測試，而且也沒有定義提報安全漏洞的規範，甚至沒有去固定相依套件的版本，所以除了這些關鍵的開源專案需要透過改善來加強安全性之外，大家也必須要提高對於資安風險的危機意識</p><h3 id="Localstack-with-Terraform-and-Docker-for-running-AWS-locally"><a href="#Localstack-with-Terraform-and-Docker-for-running-AWS-locally" class="headerlink" title="Localstack with Terraform and Docker for running AWS locally"></a><a href="https://dev.to/mrwormhole/localstack-with-terraform-and-docker-for-running-aws-locally-3a6d" target="_blank" rel="noopener">Localstack with Terraform and Docker for running AWS locally</a></h3><p>一般來說使用 IaC 工具 Terraform 來管理 AWS 資源時，執行 <code>~$ terraform apply</code> 之後，就會在 AWS 上建立出對應的雲端資源，那有沒有辦法在本地端做出假的 AWS 資源呢？答案是可以的！利用 Localstack 這個工具，並且在 <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/guides/custom-service-endpoints" target="_blank" rel="noopener">Terraform AWS Provider 的 endpoints</a> 中指定不同 AWS 服務到本地端點，就可以利用 Localstack 在本地端建立出假造的 AWS 雲端資源，這篇文章便是舉例使用此種方式來讓程式可以在本地端做完測試，而不用真的在 AWS 上建立一堆服務，算是個省時間又省錢的做法！</p><h3 id="Difftastic"><a href="#Difftastic" class="headerlink" title="Difftastic"></a><a href="https://github.com/wilfred/difftastic" target="_blank" rel="noopener">Difftastic</a></h3><p>Difftastic 是一個可以根據程式語法來讓檔案做解構性比較的工具 (目前還在實驗階段中)，Parsing 檔案的靈感主要來自於 <a href="https://github.com/comby-tools/comby" target="_blank" rel="noopener">Comby</a>，所以可以用來處理多種程式語言，而在 Diffing 的部分是根據 <a href="https://fazzone.github.io/autochrome.html" target="_blank" rel="noopener">Autochrome 專案</a> 來實作，因為 Difftastic 將 diff 當作是圖像搜尋問題，它利用 Dijkstra 演算法來找出最小的 diff，而 Printing 出檔案比較的結果則可以參考範例圖片，感覺完成之後應該是個不賴的程式語言比較工具</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3 id=&quot;淺談-Shamir-私鑰分割演算法：切一切再拼回來&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第 88 期 - 有微解封，不知道有沒有微開發？</title>
    <link href="https://weekly.starbugs.dev/2021/07/06/88-public-cloud-network-security/"/>
    <id>https://weekly.starbugs.dev/2021/07/06/88-public-cloud-network-security/</id>
    <published>2021-07-06T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Public-Cloud-Network-兩三事-沒有最安全只有更安全"><a href="#Public-Cloud-Network-兩三事-沒有最安全只有更安全" class="headerlink" title="Public Cloud Network 兩三事 - 沒有最安全只有更安全"></a><a href="https://medium.com/starbugs/public-cloud-network-%E5%85%A9%E4%B8%89%E4%BA%8B-%E6%B2%92%E6%9C%89%E6%9C%80%E5%AE%89%E5%85%A8%E5%8F%AA%E6%9C%89%E6%9B%B4%E5%AE%89%E5%85%A8-a6b3eee059cc" target="_blank" rel="noopener">Public Cloud Network 兩三事 - 沒有最安全只有更安全</a></h3><p>使用 Public Cloud 要如何規劃網路架構才算安全呢？其實端看組織的資源與要求，剛好最近花了一些時間在整理網路相關的工作任務，趁著這個機會把自己透過工作碰到學到的 Public Cloud 網路議題給整理成文章，透過簡易的情境設計對應到不同公司的規模或是需求之下，可以選擇什麼樣的解決方案與替代做法，讓大家可以用最短的時間獲得最多的知識</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="10-CSS-things-I-wish-I-knew-when-I-was-a-beginner"><a href="#10-CSS-things-I-wish-I-knew-when-I-was-a-beginner" class="headerlink" title="10 CSS things I wish I knew when I was a beginner"></a><a href="https://levelup.gitconnected.com/10-css-things-i-wish-i-knew-when-i-was-a-beginner-68ba4b5b3da8" target="_blank" rel="noopener">10 CSS things I wish I knew when I was a beginner</a></h3><p>文中中提到一些滿基本的觀念，當然還是有些爭議的內容，像是文章中有提到要淘汰 Bootstrap 這點，其實想要快速開發網頁還是會希望從一個方便好用的 UI 框架開始 😂。另外我覺得滿有趣的是他所提到 RWD 的 desktop first 和 mobile first 的區別和看法，大家可以先思考，然後再點進去看看原因和你想的一不一樣！ 🙌</p><h3 id="JavaScript-How-to-Redirect-to-Another-Webpage"><a href="#JavaScript-How-to-Redirect-to-Another-Webpage" class="headerlink" title="JavaScript: How to Redirect to Another Webpage"></a><a href="https://stackabuse.com/javascript-how-to-redirect-to-another-webpage" target="_blank" rel="noopener">JavaScript: How to Redirect to Another Webpage</a></h3><p>在開發網頁的時候，為了更好的使用者體驗，通常都會需要幫使用者重新導向新的頁面，但是在 JavaScript 能夠達到相同功能的方式在文章中就介紹了 <code>location.href</code>、<code>windows.location</code>、<code>location.assign()</code> 和 <code>location.replace()</code> 四種，這四種又有什麼不同呢？到底該用哪的方式會最適合使用者？</p><h3 id="三种前端实现VR全景看房的方案！说不定哪天就用得上！"><a href="#三种前端实现VR全景看房的方案！说不定哪天就用得上！" class="headerlink" title="三种前端实现VR全景看房的方案！说不定哪天就用得上！"></a><a href="https://juejin.cn/post/6973865268426571784" target="_blank" rel="noopener">三种前端实现VR全景看房的方案！说不定哪天就用得上！</a></h3><p>一直覺得在網頁前端顯示的 VR 實景展示超帥，但是都沒有機會好好瞭解到底該如何在前端中加入 VR 實景。而在這篇文章中，作者就舉出了三種方案實現 VR 技術，可以看看要把哪一個方案加入你的口袋名單！</p><h3 id="The-trouble-with-TypeScript-enums"><a href="#The-trouble-with-TypeScript-enums" class="headerlink" title="The trouble with TypeScript enums"></a><a href="https://thoughtbot.com/blog/the-trouble-with-typescript-enums" target="_blank" rel="noopener">The trouble with TypeScript enums</a></h3><p>很多人開始使用 typescript 後總是會遇到很多 type error，這篇文章介紹了關於使用 enum 時會遇到的 type error 以及如何解決，有遇到任何跟 enum 有關的問題的讀者都不妨可以藉由這個文章找到解答喔~</p><h3 id="JavaScript-Tips-and-Best-Practices"><a href="#JavaScript-Tips-and-Best-Practices" class="headerlink" title="JavaScript Tips and Best Practices"></a><a href="https://dev.to/apoorvtyagi/javascript-tips-and-best-practices-48ma" target="_blank" rel="noopener">JavaScript Tips and Best Practices</a></h3><p>這篇文章真的蠻厲害的，介紹了很多 JavaScript 不同的寫法以及一些比較好閱讀的 coding style 來幫助工程師們進行 JavaScript 的撰寫，有興趣改變自己寫法的讀者不妨可以收藏起來日後可以閱讀。</p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="Reducing-Memory-Allocations-in-Golang"><a href="#Reducing-Memory-Allocations-in-Golang" class="headerlink" title="Reducing Memory Allocations in Golang"></a><a href="https://chris124567.github.io/2021-06-21-go-performance/" target="_blank" rel="noopener">Reducing Memory Allocations in Golang</a></h3><p>這篇文章完美示範了怎麼對你的 Go 程式做 profile，並且著手去改善 memory allocation 的次數。雖然一般情況下 Go 寫出來的程式效能都還不錯，但真的需要調整時就需要用 pprof 下去分析了</p><h3 id="How-to-correctly-use-Basic-Authentication-in-Go"><a href="#How-to-correctly-use-Basic-Authentication-in-Go" class="headerlink" title="How to correctly use Basic Authentication in Go"></a><a href="https://www.alexedwards.net/blog/basic-authentication-in-go" target="_blank" rel="noopener">How to correctly use Basic Authentication in Go</a></h3><p>這篇文章介紹了什麼是 basic authentication（就是輸入網址後需要打帳號密碼那種驗證方式），並且教你怎麼在 Go 裡面實作，雖然這種方式現在已經比較少見，但有時想保護自己的網頁時還是不錯的選擇</p><h3 id="Contributing-the-Go-Compiler-Adding-New-Tilde-Operator"><a href="#Contributing-the-Go-Compiler-Adding-New-Tilde-Operator" class="headerlink" title="Contributing the Go Compiler: Adding New Tilde (~) Operator"></a><a href="https://medium.com/trendyol-tech/contributing-the-go-compiler-adding-new-tilde-operator-f66d0c6cff7" target="_blank" rel="noopener">Contributing the Go Compiler: Adding New Tilde (~) Operator</a></h3><p>這篇文非常非常的長，內容主要在講說怎麼加一個新的 operator 到 Go 的編譯器中，如果想了解 Go 編譯器的原理這篇真的不錯（但可能要讀兩三個小時就是XD）</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="不用拘泥於程式只能寫到幾歲，而是以後還需要工程師嗎？！"><a href="#不用拘泥於程式只能寫到幾歲，而是以後還需要工程師嗎？！" class="headerlink" title="不用拘泥於程式只能寫到幾歲，而是以後還需要工程師嗎？！"></a><a href="https://github.blog/2021-06-29-introducing-github-copilot-ai-pair-programmer/" target="_blank" rel="noopener">不用拘泥於程式只能寫到幾歲，而是以後還需要工程師嗎？！</a></h3><p>標題下得有點危言聳聽，其實是想要提 GitHub 推出了 AI Pair Programmer 的服務 - GitHub Copilot，他可以根據你正在寫的程式碼對某幾行或是整個 Function 提出建議，讓工程師可以更快發現更多的選擇來解決問題，撰寫測試和不透過 Google 搜尋就知道想要整合的 API 要如何使用</p><p>而這個服務的底層是使用 OpenAI Codex，他是一個使用 OpenAI 建立出來的 AI 系統，因為他使用廣大的公開程式碼做訓練，所以比 GPT-3 更能夠勝任產生程式碼的工作，而在目前的 Technical Preview 版本中，主要是針對 #Python, #JavaScript, #TypeScript, #Ruby 和 #Go 這幾種語言在訓練，有興趣的人現在可以報名加入 waitlist 中</p><h3 id="Top-10-Useful-GitHub-Browser-Extensions"><a href="#Top-10-Useful-GitHub-Browser-Extensions" class="headerlink" title="Top 10 Useful GitHub Browser Extensions"></a><a href="https://dev.to/abanoub7asaad/top-10-useful-github-browser-extensions-2k2d" target="_blank" rel="noopener">Top 10 Useful GitHub Browser Extensions</a></h3><p>這篇文章介紹了十個可以用來增加開發者使用 GitHub 時的生產力的 Chrome Extension，看完介紹後，有幾個真的令我感到腦洞大開，迫不期待安裝來使用！</p><ol><li><a href="https://github.com/ovity/octotree" target="_blank" rel="noopener">Octotree</a>: 直接讓瀏覽器多出 Repository 的檔案瀏覽功能，讓開發者在 Code Review 跟找檔案的時候來的更方便</li><li><a href="https://github.com/softvar/enhanced-github" target="_blank" rel="noopener">Enhanced GitHub</a>: 顯示整個 Repostiroy 和每個檔案的大小，並且加上下載連結跟複製檔案內容的按鈕</li><li><a href="https://github.com/noam3127/github-code-folding" target="_blank" rel="noopener">GitHub Code Folding</a>: 可以直接在 GitHub 網頁上使用折疊功能，把不需要看到的程式碼所屬的 Code Block 藏起來</li><li><a href="https://github.com/sourcegraph/sourcegraph/tree/main/client/browser" target="_blank" rel="noopener">Sourcegraph</a>: 直接找到程式碼中該函釋定義或是參照的程式碼在哪裡 (目前可以使用在 Go, java, TypeScript, JavaScript 跟 Python)</li><li><a href="https://github.com/tanmayrajani/notifications-preview-github" target="_blank" rel="noopener">Notifications Preview for GitHub</a>: 讓 GitHub 通知功能更好用，顯示通知個數，預覽通知內容，並可以在預覽時標示為已讀或是不再訂閱該通知</li><li><a href="https://github.com/homerchen19/github-file-icons" target="_blank" rel="noopener">File Icons for GitHub and GitLab</a>: 給予程式碼檔案不同的 ICON</li><li><a href="https://github.com/OctoLinker/OctoLinker" target="_blank" rel="noopener">OctoLinker</a>: 對於程式碼中 include, require 和 import 的 library 提供超連結，讓使用者直接點過去看</li><li><a href="https://github.com/jasonlong/isometric-contributions" target="_blank" rel="noopener">GitHub Isometric Contributions</a>: 可以把 GitHub 的 Contribution 圖轉換成不一樣的顯示方式，甚至變成 3D 的</li><li><a href="https://github.com/N1ck/gifs-for-github" target="_blank" rel="noopener">GIFs for GitHub</a>: 讓開發者更方便搜尋 GIPHY 中的 GIF 圖檔加在回覆裡</li><li><a href="https://github.com/sindresorhus/refined-github" target="_blank" rel="noopener">Refined GitHub</a>: 讓 GitHub 更好用的 Extension，例如讓空白可視化，按一鍵就可以 Merge Conflict，看到有哪些人在 Comment 按下表情符號，讓你在 PR 或是 Issue 中把不必要的 Comment 隱藏起來，在程式碼中把 Issue/PR 連結起來…等</li></ol><h3 id="FinOps-for-Kubernetes-Insufficient-–-or-nonexistent-–-Kubernetes-cost-monitoring-is-causing-overspend"><a href="#FinOps-for-Kubernetes-Insufficient-–-or-nonexistent-–-Kubernetes-cost-monitoring-is-causing-overspend" class="headerlink" title="FinOps for Kubernetes: Insufficient – or nonexistent – Kubernetes cost monitoring is causing overspend"></a><a href="https://www.cncf.io/blog/2021/06/29/finops-for-kubernetes-insufficient-or-nonexistent-kubernetes-cost-monitoring-is-causing-overspend/" target="_blank" rel="noopener">FinOps for Kubernetes: Insufficient – or nonexistent – Kubernetes cost monitoring is causing overspend</a></h3><p>根據 CNCF 的調查，去年有 68% 的人表示他們花在 Kubernetes 相關的成本增加了，而且其中一半的表示一整年增加超過了 20%，這樣的趨勢其實是在預期中的，因為有越來越多的組織採用的 Cloud Native 架構並跟著擴展 K8s 環境；不過根據報告同時也揭露了上升的成本其實跟使用者無法精確且有效的監控或是預測 K8s 成本有關，這造成了不必要的過度花費；<a href="https://blog.kubecost.com/blog/wasteful-kubernetes-spending/" target="_blank" rel="noopener">Kubecost</a> 也順道趁著這個機會來推廣大家使用它節省在 K8s 相關的開銷，Loft.sh 也發了篇<a href="https://loft.sh/blog/the-cost-of-managed-kubernetes-a-comparison/" target="_blank" rel="noopener">文章</a>比較各家 K8s 託管服務的價錢</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3 id=&quot;Public-Cloud-Network-兩三事-沒有最安全只有更安全&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第 87 期 - 我要成為海碼王！</title>
    <link href="https://weekly.starbugs.dev/2021/06/29/87-one-piece-coder/"/>
    <id>https://weekly.starbugs.dev/2021/06/29/87-one-piece-coder/</id>
    <published>2021-06-29T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Mac-快速分割視窗，用-Rectangle-就對了"><a href="#Mac-快速分割視窗，用-Rectangle-就對了" class="headerlink" title="Mac 快速分割視窗，用 Rectangle 就對了"></a><a href="https://medium.com/starbugs/592ed40405e3" target="_blank" rel="noopener">Mac 快速分割視窗，用 Rectangle 就對了</a></h3><p>視窗的移動和切換, 對於一個開發者來說, 能懶則懶. 蘋果雖然有內建可以將視窗分為兩半的操作方式, 但是用滑鼠來操作, 需要把手移開鍵盤。如果這時候一個可以用快速鍵來分割畫面的軟體就太棒了。</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="前端開發者也可以懂的基礎-System-Design"><a href="#前端開發者也可以懂的基礎-System-Design" class="headerlink" title="前端開發者也可以懂的基礎 System Design"></a><a href="https://medium.com/starbugs/5468e0f43033" target="_blank" rel="noopener">前端開發者也可以懂的基礎 System Design</a></h3><p>前陣子在與朋友一起籌組的後端開發線上分享會 BESG 有成員分享了 TinyURL 的系統設計 (System Design)，剛好也看到了知名 YouTuber Terry 關於 Google 系統設計面試的影片，了解到在美國的資訊業，不論你是前端、後端、資料工程師還是 DevOps，System Design 系統設計幾乎都是面試時的必考題。有人可能會覺得，反正那是國外的狀況 …</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="🧑‍💻-How-I-developed-my-portfolio-for-a-month-🗓-Demo-🍿"><a href="#🧑‍💻-How-I-developed-my-portfolio-for-a-month-🗓-Demo-🍿" class="headerlink" title="🧑‍💻 How I developed my portfolio for a month 🗓 + Demo 🍿"></a><a href="https://dev.to/kerthin/how-i-developed-my-portfolio-for-a-month-demo-3ee7" target="_blank" rel="noopener">🧑‍💻 How I developed my portfolio for a month 🗓 + Demo 🍿</a></h3><p>身為開發者為自己做一個展示火力的個人網站應該是很正常的事情吧？但是在做個人網站時該考慮哪些事情呢？作者把它從開始規劃、決定技術、和每階段的開發狀況都寫下說明以及它想在網頁上表達的事情，我覺得內容非常棒！然後在看的過程中我只想問，從頭像到完成動畫之間到底發生了什麼？😂</p><h3 id="How-to-display-content-in-multiple-columns-using-CSS"><a href="#How-to-display-content-in-multiple-columns-using-CSS" class="headerlink" title="How to display content in multiple columns using CSS"></a><a href="https://kritika-pattalam.hashnode.dev/how-to-display-content-in-multiple-columns-using-css" target="_blank" rel="noopener">How to display content in multiple columns using CSS</a></h3><p>文章裡介紹了如何用 CSS 的 <code>column</code> 讓文章變成多欄顯示，以及使用 <code>orphans</code> 和 <code>widows</code> 做更細微的設定，如果對這些屬性還不熟悉，可以看看此篇作者解釋和範例！</p><h3 id="Reading-Clean-Code-Week-1"><a href="#Reading-Clean-Code-Week-1" class="headerlink" title="Reading Clean Code: Week 1"></a><a href="https://levelup.gitconnected.com/reading-clean-code-week-1-a4df2c392e66" target="_blank" rel="noopener">Reading Clean Code: Week 1</a></h3><p>這篇是作者閱讀 Clean Code 所記錄下來的讀書心得，而且作者還選了自己的一個專案，然後藉由從 Clean Code 中讀到的觀念來重構程式碼，如果對 <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?dchild=1&keywords=clean+code&qid=1622646055&sr=8-1" target="_blank" rel="noopener">Clean Code</a> 這本書有興趣的話，不妨可以和作者一起讀哦！依照文章最後的意思，作者是會週更的。 😂</p><h3 id="cssbattle"><a href="#cssbattle" class="headerlink" title="cssbattle"></a><a href="https://cssbattle.dev/" target="_blank" rel="noopener">cssbattle</a></h3><p>這個網站真的蠻屌的很推薦所有的前端工程師可以上去玩玩看，透過寫 html + css 的方式來達到目標的視覺畫面，然後比誰寫的 code 字數最少，不得不說透過這個網站可以了解很多不同的切版技巧，可以學到很多前端大神的思考方式。</p><h3 id="esbuild"><a href="#esbuild" class="headerlink" title="esbuild"></a><a href="https://esbuild.github.io/" target="_blank" rel="noopener">esbuild</a></h3><p>esbuild 算是近期蠻多人都在討論的前端打包套件，而且 esbuild 強調的就是打包速度飛快，比大家都在用 webpack 還快很多，的確看到一些介紹以及網路上的 DEMO 真的都比 webpack 快，但 webpack 厲害的地方就在於有很多可以玩的 plugin，不知道 esbuild 之後會不會也有那麼多 plugin 可以玩就是了XD</p><h3 id="monaco-editor"><a href="#monaco-editor" class="headerlink" title="monaco-editor"></a><a href="https://microsoft.github.io/monaco-editor/" target="_blank" rel="noopener">monaco-editor</a></h3><p>這個編輯器真的很酷是微軟自己做的線上編輯器，個人真的覺得比 Draft.js 好用很多(真的不曉得前陣子自己在那邊研究 Draft.js 那麼久到底在幹嘛哈哈哈)，而且這個編輯器其實就是 base on 微軟最有名的 vs code 編輯器底下的產物，所以編輯邏輯其實就跟 vs code 差不多算是可以無痛上手，最近如果有興趣再研究編輯器的不妨可以考慮看看這款套件，至於 Draft.js 就隨便他了哈哈哈哈。</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="Top-20-Dockerfile-best-practices"><a href="#Top-20-Dockerfile-best-practices" class="headerlink" title="Top 20 Dockerfile best practices"></a><a href="https://sysdig.com/blog/dockerfile-best-practices/" target="_blank" rel="noopener">Top 20 Dockerfile best practices</a></h3><p>看過那麼多篇 dockerfile security 的文章，這篇大概是講得最全面的了，如果上線之前不知道該怎麼讓自己的 image 更安全的話，看這篇就對了！</p><h3 id="Build-images-with-BuildKit"><a href="#Build-images-with-BuildKit" class="headerlink" title="Build images with BuildKit"></a><a href="https://docs.docker.com/develop/develop-images/build_enhancements/" target="_blank" rel="noopener">Build images with BuildKit</a></h3><p>Docker 自 18.09 以後就開始支援 buildkit，除了 log 更好看之外，還新增了一些其他的 feature，而且啟用的方式也超簡單，所以很推薦使用哦～</p><h3 id="用-docker-compose-優雅關閉服務"><a href="#用-docker-compose-優雅關閉服務" class="headerlink" title="用 docker-compose 優雅關閉服務"></a><a href="https://blog.wu-boy.com/2021/06/graceful-stop-service-using-docker-compose-in-golang/" target="_blank" rel="noopener">用 docker-compose 優雅關閉服務</a></h3><p>怎麼讓服務 gracefully shutdown 一直以來都是個很重要的問題，而 appleboy 這篇文章講到了怎麼在 docker-compose.yml 裡面自己設置 signal 跟 timeout，在部署、更新大量 container 時還滿實用的</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="JavaScript-What-is-short-circuit-evaluation"><a href="#JavaScript-What-is-short-circuit-evaluation" class="headerlink" title="JavaScript: What is short-circuit evaluation?"></a><a href="https://codeburst.io/javascript-what-is-short-circuit-evaluation-ff22b2f5608c" target="_blank" rel="noopener">JavaScript: What is short-circuit evaluation?</a></h3><p>說真的 JavaScript 總是有很多奇怪的寫法來達到想要的結果，由於以前寫 C++ 寫久了，所以一開始在寫 JS 看到都會覺得 <code>&amp;&amp;</code>、<code>||</code> 這個運算子就會直覺的認為只會返回不林子，殊不知 JS 的這兩個運算子能做的事情非常多而且非常奇妙，以後有想要進行邏輯取值的時候不妨都可以利用這種方式來寫，可以讓你的程式碼瞬間少了好幾行看起來很乾淨XD</p><h3 id="这些-JS-的新语法有点东西啊"><a href="#这些-JS-的新语法有点东西啊" class="headerlink" title="这些 JS 的新语法有点东西啊"></a><a href="https://juejin.cn/post/6976070529388118030" target="_blank" rel="noopener">这些 JS 的新语法有点东西啊</a></h3><p>作者整理了一些在 tc39 上的有趣提案，其中包含了現在滿常被討論的 <code>.at</code> 外，還有已經在第四階段的 Top-level <code>await</code>，之後使用 <code>await</code> 時甚至不需要放到 <code>async</code> 裡面，但其中最讓我感到噁心的還是 「管道运算符（The Pipeline Operator）」，還有其他有趣又實用的提案，大家一起看看吧！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="5-GitHub-Projects-to-make-you-a-better-DevOps-Engineer-⚡"><a href="#5-GitHub-Projects-to-make-you-a-better-DevOps-Engineer-⚡" class="headerlink" title="5 GitHub Projects to make you a better DevOps Engineer ⚡"></a><a href="https://dev.to/ankit01oss/5-github-projects-to-make-you-a-better-devops-engineer-2fkl" target="_blank" rel="noopener">5 GitHub Projects to make you a better DevOps Engineer ⚡</a></h3><p>DevOps 這個領域具有相當地挑戰性，需要不斷地學習，因此作者在此推薦五個 GitHub 專案，讓有興趣的人可以找到方向深入研究</p><ol><li><p><a href="https://github.com/trimstray/the-book-of-secret-knowledge" target="_blank" rel="noopener">The book of secret knowledge</a>: 收集了作者每天工作會用到的工具，從 CLI, GUI, Web 到網路…等相關工具清單一應俱全，看完覺得自己也應該來弄一個類似的 Repository 幫助自己越來越不行的記憶力</p></li><li><p><a href="https://github.com/binhnguyennus/awesome-scalability" target="_blank" rel="noopener">Awesome Scalability</a>: 收集了各種有關於大型系統的 Scalable, Reliable 和效能相關的文章，而且很多都是滿有名且大型的組織，相當的具有指標跟參考意義</p></li><li><p><a href="https://github.com/bregman-arie/devops-exercises" target="_blank" rel="noopener">DevOps Exercises</a>: 包含了各式各樣有關於 DevOps 和 SRE 技術領域的問題跟練習題，自己感覺很適合拿來當面試題目使用XD</p></li><li><p><a href="https://github.com/trimstray/test-your-sysadmin-skills" target="_blank" rel="noopener">Test your sysadmin skills</a>: 專門用來考  Linux 系統管理者的問題大補帖，跟上面一樣適合拿來當面試問題使用！</p></li><li><p><a href="https://github.com/upgundecha/howtheysre" target="_blank" rel="noopener">How they SRE</a>: 這個我記得我之前介紹過，這個 Repository 收集了世界上軟體技術相關的大型公司如何去培養自己的 Site Reliability Engineering</p></li></ol><h3 id="SLOs-should-be-easy-say-hi-to-Sloth"><a href="#SLOs-should-be-easy-say-hi-to-Sloth" class="headerlink" title="SLOs should be easy, say hi to Sloth"></a><a href="https://itnext.io/slos-should-be-easy-say-hi-to-sloth-9c8a225df0d4" target="_blank" rel="noopener">SLOs should be easy, say hi to Sloth</a></h3><p>每年都有比較熱門的技術詞彙，例如 2017 Cryptocurrency 和 Blockchain，2018 Observability 和 Tracing， 2019 Service Mesh，2020 GitOps，而作者認為 2021 就是 SLO 啦！這篇文章主要介紹他開發的 Sloth 專案 (一個可以讓 Prometheus 產生 SLO 的最簡單方式) 的心路歷程</p><p>而作者會開發出來這個專案的最主要原因在於…他在 2018 年讀到 Google 經典 SRE 巨作後知道了 SLO 的觀念，不過每次他在跟朋友討論到時都會發現，大家雖然都已經知道，但好像沒有人已經做得很好，都還在很努力地看怎麼應用或是將它實踐在日常的工作上的階段中，在這幾年經歷了在沒有 SLO 的公司嘗試導入 SLO，或是在已經應用 SLO 公司的工作經驗後，他決定把自己在 2018 年的一些開發和導入經驗開源出來成為 Sloth 專案，其中包含了 K8s Operator 和 CLI 工具來輕鬆的整合 Prometheus Stack，讓 SRE 可以經鬆的導入跟實踐 SLO！</p><h3 id="Announcing-etcd-3-5"><a href="#Announcing-etcd-3-5" class="headerlink" title="Announcing etcd 3.5"></a><a href="https://etcd.io/blog/2021/announcing-etcd-3.5/" target="_blank" rel="noopener">Announcing etcd 3.5</a></h3><p>有使用過 Kubernetes 的人應該都有聽過 etcd 這個 Key-Vaule 儲存系統，他最近發佈了 3.5，距離 3.4 也已經過了兩年，在這段期間隨著使用的人越來越多，穩定和可靠度當然成為了官方的開發重點項目，讓我們來瞧瞧看歷經了兩年時間的累積，etcd 完成了哪些事情，讓他們覺得夠格推出 3.5 這一版！</p><ul><li><p>Security: 畢竟 etcd 負責儲存處理不少機敏資訊，所以加強安全性是最高優先權的工作， 因此官方早在 2020 年就請了第三方幫忙做安全稽核，並且把發現的安全問題不管大小都修復掉</p></li><li><p>Features: 改成使用 <a href="https://github.com/uber-go/zap" target="_blank" rel="noopener">zap</a> 來處理 Log，並且也預設支援 Log Rotation，在對於昂貴的請求也可以記錄更詳細的資訊；然後在 Rollbak 功能下了些功夫，gRPC gateway endpoint 現在換成使用 /v3/*，在 etcd client 現在也換成使用新的 gRPC 版本 1.32.0</p></li><li><p>Performance: 最多使用 etcd 的人，其實都是 K8s 的使用者，而當 K8s API 在 Reflector Cache 找不到想找的資源時，就會去查找整個 Keyspace，這會造成 etcd 的回應時間變久，所以官方詳細的去調查造成這個問題的原因 (主要是跟記憶體使用率相關)，最後嘗試將記憶體的在最高峰時的使用量減半 (雖然改的程式碼不多，但修掉了這個困擾大家好幾年的問題)，然後也花了很大的心血改善了 Transaction 的效能，讓 K8s API 在新增和修改資源的速度可以更快</p></li><li><p>Others: 一開始有提到 etcd 的可靠和正確性相當地重要，所以官方將上個版本中被提出來的嚴重 Bug 都修掉了，而且在監控，測試，開發者體驗跟社群方面都做了不少事情，更詳細資訊可以參閱原文</p></li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3 id=&quot;Mac-快速分割視窗，用-Rectangle-就對了&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第 86 期 - 雨下整夜，Bug 溢出就像雨水</title>
    <link href="https://weekly.starbugs.dev/2021/06/22/86-raining-all-night-my-buf-overflow-like-rainwater/"/>
    <id>https://weekly.starbugs.dev/2021/06/22/86-raining-all-night-my-buf-overflow-like-rainwater/</id>
    <published>2021-06-22T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="用簡單的-CSS-和-JavaScript-輕鬆製造視差滾動（Parallax-Scrolling）"><a href="#用簡單的-CSS-和-JavaScript-輕鬆製造視差滾動（Parallax-Scrolling）" class="headerlink" title="用簡單的 CSS 和 JavaScript 輕鬆製造視差滾動（Parallax Scrolling）"></a><a href="https://medium.com/starbugs/%E7%94%A8%E7%B0%A1%E5%96%AE%E7%9A%84-css-%E5%92%8C-javascript-%E8%BC%95%E9%AC%86%E8%A3%BD%E9%80%A0%E8%A6%96%E5%B7%AE%E6%BB%BE%E5%8B%95-parallax-scrolling-4e22af7c1c0" target="_blank" rel="noopener">用簡單的 CSS 和 JavaScript 輕鬆製造視差滾動（Parallax Scrolling）</a></h3><p>前一陣子在練習切版的時候，突然發現視差滾動在 Landing Page 上的出現率還滿高的，於是就想練習切一些關於視差滾動的頁面，本來是要直接用 ScrollMagic 的，但想說機會難得，就來了解一下它的原理，殊不知實作起來還滿容易的，一起看看怎麼處理的吧！</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="lodash-如何正確的-import-lodash"><a href="#lodash-如何正確的-import-lodash" class="headerlink" title="lodash | 如何正確的 import lodash"></a><a href="https://medium.com/starbugs/the-correct-way-to-import-lodash-libraries-bdf613235927" target="_blank" rel="noopener">lodash | 如何正確的 import lodash</a></h3><p>通常前端都會導入一些好用的第三方套件，但是有時候導入的套件並非是基於 es module 進行開發，webpack 沒辦法發揮 tree shaking 的功能，在 import 時一不注意就會載入一堆沒有必要的 function。在這篇文章中以 lodash 作為舉例，目前 lodash 本身並不是使用 es module。所以如果在意 bundle size 的大小，就要特別注意在 import lodash 的方式。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="5-Awesome-CSS-tricks-every-developer-should-know"><a href="#5-Awesome-CSS-tricks-every-developer-should-know" class="headerlink" title="5 Awesome CSS tricks every developer should know"></a><a href="https://dev.to/sumeet16/5-awesome-css-tricks-every-developer-should-know-2n5k" target="_blank" rel="noopener">5 Awesome CSS tricks every developer should know</a></h3><p>文章中介紹一些關於使用 CSS 的技巧，包含了可以讓使用者體驗更好的 Smooth scrolling，以及該如何設置圖片的大小、將自己喜愛的圖片或 icon 設置成鼠標、用 flex 更好的做水平和垂直置中，還有更容易控制內容行數的 <code>-webkit-line-clamp</code>，以上語法將來可能都可以成為你的排版小幫手！</p><h3 id="Be-the-boss-of-your-CSS-styles-with-Tailwind-CSS"><a href="#Be-the-boss-of-your-CSS-styles-with-Tailwind-CSS" class="headerlink" title="Be the boss of your CSS styles with Tailwind CSS"></a><a href="https://victoriaadedayo.hashnode.dev/be-the-boss-of-your-css-styles-with-tailwind-css-ckpxniz4o08il92s1huob0phr" target="_blank" rel="noopener">Be the boss of your CSS styles with Tailwind CSS</a></h3><p>Tailwind 是一個主張實用至上的 CSS 框架，它提供了很多實用且風格一致的介面，甚至是讓你不需要寫任何自己的 CSS，而且你也不用害怕被 Tailwind 綁死，因為如果你想做些修改，仍然可以做擴充、調整和改變！一起跟著文章作者入門 Tailwind 吧！</p><h3 id="React-18：新的-SSR-架構解決了什麼問題？"><a href="#React-18：新的-SSR-架構解決了什麼問題？" class="headerlink" title="React 18：新的 SSR 架構解決了什麼問題？"></a><a href="https://jigsawye.com/2021/06/10/react-18-new-ssr-architecture?fbclid=IwAR3bQq_W6HNFcNh9X0WOfAy9x544aJagDo4t7YyDX5nyqp0NcCbMtIndno4" target="_blank" rel="noopener">React 18：新的 SSR 架構解決了什麼問題？</a></h3><p>拜技術的進步所賜，SSR 可以說是越來越普及了，早期在 React 中想要使用 SSR 可以利用 <a href="https://nextjs.org/docs/getting-started" target="_blank" rel="noopener">Next.js</a> 這個套件，但 SSR 有一個非常嚴重的缺陷就是會讓整體的網頁在渲染的過程中一定會比 CSR 來的慢，因為 server 端會先抓取該內容所需的資料並且繪製出來，但最新的 React 18 帶來了新的 SSR 架構，讓未來 SSR 的渲染速度不會再繼續慢下去了。</p><h3 id="Develop-amp-test-React-components-in-isolation"><a href="#Develop-amp-test-React-components-in-isolation" class="headerlink" title="Develop &amp; test React components in isolation"></a><a href="https://dev.to/dhaiwat10/develop-test-react-components-in-isolation-3714" target="_blank" rel="noopener">Develop &amp; test React components in isolation</a></h3><p>之前在推薦 React component testing 的時候都會推薦 React testing library，沒想到也可以利用 storybook 進行 testing，而且這樣還能順便看到該元件的表現行為也算是蠻一舉兩得的，這篇文章介紹了如何利用 storybook 進行 testing 有興趣的讀者不妨可以收藏起來看~</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="從-V8-bytecode-探討-let-與-var-的效能問題"><a href="#從-V8-bytecode-探討-let-與-var-的效能問題" class="headerlink" title="從 V8 bytecode 探討 let 與 var 的效能問題"></a><a href="https://blog.huli.tw/2020/02/20/let-vs-var-bytecode/" target="_blank" rel="noopener">從 V8 bytecode 探討 let 與 var 的效能問題</a></h3><p>忘了之前有沒有分享過這篇，但我真心覺得這個研究還有趣的，如果對 let 跟 var 在 V8 引擎中的行為有興趣，而且也不排斥看一些 V8 bytecode，那真的一定要讀讀這篇</p><h3 id="What’s-New-in-RxJS-7"><a href="#What’s-New-in-RxJS-7" class="headerlink" title="What’s New in RxJS 7"></a><a href="https://link.medium.com/kmHrZy0Fggb" target="_blank" rel="noopener">What’s New in RxJS 7</a></h3><p>作為 reactive programming 在 JS 裡面的代表性函式庫，RxJS 已經要發佈第七個版本了，這個版本除了檔案更小、速度更快、更節省記憶體之外，用法上也有做出一些調整，如果最近有打算把 RxJS 從 6 升到 7 的話可以參考看看這篇～</p><h3 id="A-Comprehensive-Guide-To-JavaScript-Design-Patterns"><a href="#A-Comprehensive-Guide-To-JavaScript-Design-Patterns" class="headerlink" title="A Comprehensive Guide To JavaScript Design Patterns"></a><a href="https://www.lambdatest.com/blog/comprehensive-guide-to-javascript-design-patterns/" target="_blank" rel="noopener">A Comprehensive Guide To JavaScript Design Patterns</a></h3><p>如果你最近想學設計模式，而且你又剛好會寫 JS，那就來看看這篇吧～這篇文章雖然很長，但他從設計模式的分類開始講起，給你一個整體的概念，接著才下去細講每個模式，而且在講解時除了提供範例之外還有附圖，全部看完（雖然可能要很久XD）一定會有很多收穫</p><h3 id="JavaScript-What-is-short-circuit-evaluation"><a href="#JavaScript-What-is-short-circuit-evaluation" class="headerlink" title="JavaScript: What is short-circuit evaluation?"></a><a href="https://codeburst.io/javascript-what-is-short-circuit-evaluation-ff22b2f5608c" target="_blank" rel="noopener">JavaScript: What is short-circuit evaluation?</a></h3><p>說真的 JavaScript 總是有很多奇怪的寫法來達到想要的結果，由於以前寫 C++ 寫久了，所以一開始在寫 JS 看到都會覺得 <code>&amp;&amp;</code>、<code>||</code> 這個運算子就會直覺的認為只會返回不林子，殊不知 JS 的這兩個運算子能做的事情非常多而且非常奇妙，以後有想要進行邏輯取值的時候不妨都可以利用這種方式來寫，可以讓你的程式碼瞬間少了好幾行看起來很乾淨XD</p><h3 id="这些-JS-的新语法有点东西啊"><a href="#这些-JS-的新语法有点东西啊" class="headerlink" title="这些 JS 的新语法有点东西啊"></a><a href="https://juejin.cn/post/6976070529388118030" target="_blank" rel="noopener">这些 JS 的新语法有点东西啊</a></h3><p>作者整理了一些在 tc39 上的有趣提案，其中包含了現在滿常被討論的 <code>.at</code> 外，還有已經在第四階段的 Top-level <code>await</code>，之後使用 <code>await</code> 時甚至不需要放到 <code>async</code> 裡面，但其中最讓我感到噁心的還是 「管道运算符（The Pipeline Operator）」，還有其他有趣又實用的提案，大家一起看看吧！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="CURL-BYE-BYE-TRAVIS-CI"><a href="#CURL-BYE-BYE-TRAVIS-CI" class="headerlink" title="CURL: BYE BYE TRAVIS CI"></a><a href="https://daniel.haxx.se/blog/2021/06/14/bye-bye-travis-ci/" target="_blank" rel="noopener">CURL: BYE BYE TRAVIS CI</a></h3><p>CURL 這個 Project 從 2013/10/17 在 Merge 某一個 Config 檔案時開始使用 Travis CI，正式取代了由自願者幫忙架設的 Autobuild 系統，以免費服務來說 Travis CI 真的提供了一個很棒的服務，過了四年到 2017 時，CURL 依然使用 Travis，這時候每一個 Commit 差不多有 10 個 Job 需要運行，到 2019 時變成 30 個左右，他依然表現良好，而且 Travis 官方甚至協助讓 CURL 可以比其他開源軟體運行更多平行化的 Job</p><p>不過到了 2021 時，每一個 Commit 最多可以跑到 100 個 Job，這次遇到了 travis-ci.org 搬家到 travis-ci.com 的事情，CURL 的作者不諱言不知道官方為什麼要這樣做之外，這次多的規則中，規定了開源專案不能接受商業公司或是組織的贊助，所以決定了 CURL 無法繼續使用 Travis CI，而且也開始沒有再收到來自 Travis 官方的免費 Credit</p><p>這時候來自 Zuul CI 和 Circle CI 開始協助幫忙把本來運行在 Travis CI 的 Job 搬家到他們的平台上，總算在 2021/06/14 將所有的 Job 從 Travis CI 搬走，有人說為什麼不乾脆付錢就好了，但 CURL 作者覺得 Travis CI 不再視 CURL 為開源專案這件事情讓他無法接受，而且現在市面上還有免費的就先擋著用，等到未來逼不得以需要付錢時再說了！</p><h3 id="Design-Patterns-Top-5-Techniques-for-Implementing-Fault-Tolerance-in-Distributed-Systems"><a href="#Design-Patterns-Top-5-Techniques-for-Implementing-Fault-Tolerance-in-Distributed-Systems" class="headerlink" title="Design Patterns: Top 5 Techniques for Implementing Fault Tolerance in Distributed Systems"></a><a href="https://levelup.gitconnected.com/design-patterns-top-5-techniques-for-implementing-fault-tolerance-in-distributed-systems-81bef4408c3b" target="_blank" rel="noopener">Design Patterns: Top 5 Techniques for Implementing Fault Tolerance in Distributed Systems</a></h3><p>過去四十年來許多在系統設計中監控和容錯的技術不斷地被開發，使用和改進，所以作者想要透過此篇文章介紹在分散系統中，讓自己的應用服務跟其他服務進行溝通時，需要使用到哪些技術，才仍夠讓自己的應用服務具備容錯性和監控能力</p><p>首先從什麼是分散式系統開始介紹起，接著細談容錯性是什麼，以及為什麼需要它，然後進入重點談到各種解決 Pattern 是想要解決什麼樣的問題，跟如何去實作，而且都畫了精美的架構圖來解釋，是很值得一看的文章，想要了解各種分散式系統容錯性設計 Pattern 的人趕緊打開原文參閱詳細內容吧！</p><ul><li>Acknowledgement</li><li>Circuit Breaker Pattern</li><li>Roll Forward</li><li>Roll Back</li><li>Active Replication Pattern</li></ul><h3 id="My-Top-12-Web-Tools-To-Make-Developers’-Life-Easier"><a href="#My-Top-12-Web-Tools-To-Make-Developers’-Life-Easier" class="headerlink" title="My Top 12 Web Tools To Make Developers’ Life Easier"></a><a href="https://betterprogramming.pub/my-top-12-web-tools-to-make-developers-life-easier-a8794be85d7f" target="_blank" rel="noopener">My Top 12 Web Tools To Make Developers’ Life Easier</a></h3><p>在這個網路時代，開發人員每天在工作上所面臨的常見問題，幾乎都可以在網路上找到解決問題的線上工具，而在這篇文章中，作者想要介紹 12 個他最愛用，而且可以讓 Developer 生活更簡單的線上工具</p><ol><li><a href="https://regex101.com/" target="_blank" rel="noopener">Regex</a>: 協助開發者驗證正規表示</li><li><a href="https://crontab.cronhub.io/" target="_blank" rel="noopener">Crontab</a>: 驗證 Crontab 的寫法有沒有問題</li><li><a href="https://www.epochconverter.com/" target="_blank" rel="noopener">EpochConverter</a>: 轉換人類時間跟 Unix Timestamp</li><li><a href="https://www.urlencoder.org/" target="_blank" rel="noopener">URL-Encoder</a>: Encode 跟 Decode 會在網址使用到的字串</li><li><a href="https://jwt.io/" target="_blank" rel="noopener">JWT</a>: 讓開發者可以解碼，驗證跟產生 JWT</li><li><a href="https://jsonformatter.curiousconcept.com/" target="_blank" rel="noopener">JSONFormatter and Validator</a>: 驗證 JSON 格式，並且印出漂亮格式的 JSON</li><li><a href="https://text-compare.com/" target="_blank" rel="noopener">Text Compare!</a>: 幫忙比對字串的不同之處</li><li><a href="https://www.flaticon.com/" target="_blank" rel="noopener">flaticon</a>: 提供免費的 ICON 讓 Web, iOS, Android 和 Desktop 應用使用</li><li><a href="https://www.freepik.com/" target="_blank" rel="noopener">freepik</a>: 跟 flation 有點像，可以提供免費的圖片</li><li><a href="https://chir.ag/projects/name-that-color/" target="_blank" rel="noopener">Name That Color</a>: 給予顏色最接近的名稱</li><li><a href="https://cloudconvert.com/" target="_blank" rel="noopener">Cloud Convert</a>: 協助各種影片格式轉檔</li><li><a href="https://appicon.co/" target="_blank" rel="noopener">App Icon</a>: 專門給 Mobile App 工程師拿來產生各種尺寸 ICON 的工具</li></ol><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3 id=&quot;用簡單的-CSS-和-JavaScript-輕鬆製造視差滾動（Parallax-Scrolling）&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第 85 期 - 南粽北粽，都沒有我的肉重！</title>
    <link href="https://weekly.starbugs.dev/2021/06/15/85-got-fatter-this-weekend/"/>
    <id>https://weekly.starbugs.dev/2021/06/15/85-got-fatter-this-weekend/</id>
    <published>2021-06-15T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="從作業系統的角度來談為什麼需要「虛擬記憶體」"><a href="#從作業系統的角度來談為什麼需要「虛擬記憶體」" class="headerlink" title="從作業系統的角度來談為什麼需要「虛擬記憶體」"></a><a href="https://larry850806.medium.com/why-do-os-need-virtual-memory-b47d6eeecbce" target="_blank" rel="noopener">從作業系統的角度來談為什麼需要「虛擬記憶體」</a></h3><p>大家好我是 Larry，因為上個月的專欄「<a href="https://medium.com/starbugs/do-you-understand-htop-ffb72b3d5629" target="_blank" rel="noopener">你一定用過 htop，但你有看懂每個欄位嗎？</a>」發佈出去之後有太多人來問我 Virtual Memory 到底是做什麼用的，所以就決定應觀眾要求寫一篇文章講 Virtual Memory 帶來的種種好處。雖然這篇文章的內容比較底層一點，但我盡量把它寫得淺顯易懂，所以就算你聽都沒聽過「虛擬記憶體」也可以進來看看哦～</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="Storybook-用-addon-controls-打造更好的-storybook-體驗"><a href="#Storybook-用-addon-controls-打造更好的-storybook-體驗" class="headerlink" title="Storybook | 用 addon-controls 打造更好的 storybook 體驗"></a><a href="https://medium.com/starbugs/storybook-addon-controls-tutorial-857c58e20e45" target="_blank" rel="noopener">Storybook | 用 addon-controls 打造更好的 storybook 體驗</a></h3><p>在 2020 年以前使用 React storybook 時，想要動態操作 component 的 props 通常都是使用 <code>addon-knobs</code> 這個套件，但現在他的競爭者 <code>addon-controls</code> 出現了！除了下載次數急起直追外，<code>addon-controls</code> 也被 storybook 官方認列於 essential addons 中，因此有在用 storybook 的朋友們快來看看這個新崛起的 addon 該怎麼用吧～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="一探那些令人興奮的-React-18-三大新-features，auto-batching，startTransition，Suspense-SSR"><a href="#一探那些令人興奮的-React-18-三大新-features，auto-batching，startTransition，Suspense-SSR" class="headerlink" title="一探那些令人興奮的 React 18 三大新 features，auto batching，startTransition，Suspense SSR"></a><a href="https://jason-memo.dev/posts/react-18/" target="_blank" rel="noopener">一探那些令人興奮的 React 18 三大新 features，auto batching，startTransition，Suspense SSR</a></h3><p>上週才剛看到一篇關於 Server Component 的概念介紹，緊接著 React 就推出 <a href="https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html" target="_blank" rel="noopener">18 新版本的發布計畫</a>了！在這個新版本裡包含了三個主要的新功能，分別是 <a href="https://github.com/reactwg/react-18/discussions/21" target="_blank" rel="noopener">automatic batching</a>、<a href="https://github.com/reactwg/react-18/discussions/41" target="_blank" rel="noopener">startTransition</a> 和 <a href="https://github.com/reactwg/react-18/discussions/37" target="_blank" rel="noopener">New Suspense SSR</a>，有興趣可以瞭解看看這些功能對我們會有什麼影響！ 🙌</p><h3 id="My-3-tips-about-Flexbox-that-will-make-your-CSS-better"><a href="#My-3-tips-about-Flexbox-that-will-make-your-CSS-better" class="headerlink" title="My 3 tips about Flexbox that will make your CSS better"></a><a href="https://dev.to/melnik909/my-3-tips-about-flexbox-that-will-make-your-css-better-50g6" target="_blank" rel="noopener">My 3 tips about Flexbox that will make your CSS better</a></h3><p>文中介紹了幾種在使用 Flexbox 排版的技巧，其中把 <code>justify-content: space-between</code> 當作 <code>column-gap</code> 的設置，就是一個很常見的誤用，這可能會導致最後一排的元素不依照你期望的想法排列對齊。</p><h3 id="透過XSS取得localstorage和cookie上的資料"><a href="#透過XSS取得localstorage和cookie上的資料" class="headerlink" title="透過XSS取得localstorage和cookie上的資料"></a><a href="https://blog.yyisyou.tw/3da8aedb/?fbclid=IwAR12GJ3D2L4uOeiRxv3X5D8-XUGgbndpdzXKJMRLLDCg-JDh5X5zZvT_N48" target="_blank" rel="noopener">透過XSS取得localstorage和cookie上的資料</a></h3><p>XSS（Cross-site scripting）是利用把惡意程式碼寫入你的網站執行的攻擊方式，文章介紹了幾種利用 XSS 取得存在 localstorage 或 cookie 內的 token 的方式。並解釋為什麼「該把 token 存在 localstorage 還是 cookie？」這個問題是假議題，因為不管存在哪裡都取得到啊！ 😆</p><h3 id="husky"><a href="#husky" class="headerlink" title="husky"></a><a href="https://typicode.github.io/husky/#/" target="_blank" rel="noopener">husky</a></h3><p>推薦一個不錯的套件，這個套件可以讓你在每一次的 commit 或者是 push 的時候進行 lint 的檢查或 run test file 等等功能，讓你的程式碼在進行下一階段的開發或者 build 的時候不會遇到一些小問題的 bug，算是蠻不錯用的套件~</p><h3 id="How-YOU-can-use-React-Testing-Library-to-test-component-surface"><a href="#How-YOU-can-use-React-Testing-Library-to-test-component-surface" class="headerlink" title="How YOU can use React Testing Library to test component surface"></a><a href="https://dev.to/itnext/how-you-can-use-react-testing-library-to-test-component-surface-49pm" target="_blank" rel="noopener">How YOU can use React Testing Library to test component surface</a></h3><p>最近在練習寫一些 unit test 的時候，為了寫 React component 的 unit test 所以選了 <a href="https://testing-library.com/docs/react-testing-library/intro/" target="_blank" rel="noopener">react testing library</a> 這個套件，這篇文章介紹了如何寫 component 的 unit test，未來有需要寫測試的讀者不妨可以來參考這篇文章的教學~</p><h3 id="Mocking-methods-which-are-not-implemented-in-JSDOM"><a href="#Mocking-methods-which-are-not-implemented-in-JSDOM" class="headerlink" title="Mocking methods which are not implemented in JSDOM"></a><a href="https://jestjs.io/docs/manual-mocks#mocking-methods-which-are-not-implemented-in-jsdom" target="_blank" rel="noopener">Mocking methods which are not implemented in JSDOM</a></h3><p>這篇算是蠻有趣的，最近在寫測試的時候發現 jest 原生不支援 <code>window.matchMedia()</code> 這個全域的 method，所以在進行裝置大小比對的時候就會噴錯，連 jest 官方自己都出來寫一篇文章來說明如何解決這個問題，但 jest 官方為何不直接修改程式碼把這個 method 加進去就好呢XDD</p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="Top-5-Lessons-I-learned-while-working-with-Go-for-two-years"><a href="#Top-5-Lessons-I-learned-while-working-with-Go-for-two-years" class="headerlink" title="Top 5 Lessons I learned while working with Go for two years"></a><a href="https://sayedalesawy.hashnode.dev/top-5-lessons-i-learned-while-working-with-go-for-two-years" target="_blank" rel="noopener">Top 5 Lessons I learned while working with Go for two years</a></h3><p>這篇文章是作者寫了兩年的 Go 之後給出的 best practice，包括怎麼寫出 thread safe 的程式、記得要設定 timeout 等等，整篇看完覺得收穫不少</p><h3 id="Building-your-own-Ngrok-in-130-lines"><a href="#Building-your-own-Ngrok-in-130-lines" class="headerlink" title="Building your own Ngrok in 130 lines"></a><a href="https://dev.to/progrium/building-your-own-ngrok-in-130-lines-2lif" target="_blank" rel="noopener">Building your own Ngrok in 130 lines</a></h3><p>ngrok 這工具應該大家都用過，他可以讓外部連線進到內網來。而這篇文章就要教你怎麼用 go 自己寫一個 ngrok，雖然重複造輪子有點浪費時間，不過藉此了解一下 ngrok 的原理還是不錯的～</p><h3 id="The-other-sync-package"><a href="#The-other-sync-package" class="headerlink" title="The other sync package"></a><a href="https://ketansingh.me/posts/golang-x-sync/" target="_blank" rel="noopener">The other sync package</a></h3><p>除了大家都很熟悉的 sync 之外，Go 還有另外一個 package 叫做 <code>golang.org/x/sync</code>，他裡面提供了一些比較少見的功能像是 semaphore 跟 errgroup，而且這篇文章也有提供範例應該看完就知道怎麼用了～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Announcing-HashiCorp-Terraform-1-0-General-Availability"><a href="#Announcing-HashiCorp-Terraform-1-0-General-Availability" class="headerlink" title="Announcing HashiCorp Terraform 1.0 General Availability"></a><a href="https://www.hashicorp.com/blog/announcing-hashicorp-terraform-1-0-general-availability" target="_blank" rel="noopener">Announcing HashiCorp Terraform 1.0 General Availability</a></h3><p>廣泛被大家使用的 IaC 工具 Terraform 在最近版號突然從 0.15 跳到 1.0 啦！而是什麼原因讓官方不是推出 0.16 呢？主要是因為他已經被很多人穩定的在 Production 環境上使用，再來是主要的使用需求都已經被滿足，最後就是良好的使用者體驗，讓我們順便來看看 1.0 這個里程碑的推出的具體內容:</p><ul><li><p>Terraform State 向下相容: 以前每次升級 Terraform，State 就會被更著升級，假如使用比較舊版本的 Terraform 就會被警告，State 的版本比較新，不過 0.14, 0.15 和 1.0 目前都已經可以向下相容 0.12.30, 0.13.6, 0.14.0, 0.15.0 和 1.0.x 所產生的 State 了，</p></li><li><p>升級體驗的改善: 從 0.15 開始，使用者想要升級 Terraform 將不再伴隨著痛苦，因為升級完之後，既有的工作流程還是可以正常運行，就像沒有升級的感覺一樣，不再需要為了升級到 1.0.x 而去更新周邊的工具，重構…等</p></li><li><p>擴展維護週期: 所有 1.x 版本將會擁有至少 18 個月的維護週期，這意味著官方會持續為 1.x 花費資源跟時間修復 Bug 和發佈新的功能</p></li><li><p>Terraform Plugin SDK v1 產品壽命結束: Terraform Plugin SDK 是讓開發者用來實作 Terraform Provider 的框架，官方會在 2021/07/31 停止支援 version 1 的發佈，Terraform CLI 和 Cloud 的使用者不會受到影響，但是官方鼓勵 Terraform Provider 的開發維護者開始升級到 version 2</p></li></ul><h3 id="AWS-announces-the-general-availability-of-AWS-Proton"><a href="#AWS-announces-the-general-availability-of-AWS-Proton" class="headerlink" title="AWS announces the general availability of AWS Proton"></a><a href="https://aws.amazon.com/about-aws/whats-new/2021/06/aws-announces-the-general-availability-of-aws-proton/" target="_blank" rel="noopener">AWS announces the general availability of AWS Proton</a></h3><p>AWS 最近推出一個叫做 Proton (質子) 的新功能，主要是為了管理 Container 和 Serverless 的應用程式，讓開發者可以在這個 IaC 盛行的時代裡，只需要寫好程式碼，然後透過使用 Proton ，就可以把安裝，部署和監控都一次搞定，但這樣一來維運平台的人要怎麼管理呢？ Proton 同時也讓維運人員還是可以保持一致性地進行管理方式，而且不會降低開發者的生產力，所以在 GA 的同時也支援了兩個最重要的功能，分別是可以使用跨帳號架構，並且在 API 內可以使用 IAM condition context keys</p><h3 id="Flagsmith"><a href="#Flagsmith" class="headerlink" title="Flagsmith"></a><a href="https://github.com/Flagsmith/flagsmith" target="_blank" rel="noopener">Flagsmith</a></h3><p>Flagsmith 是一個開源的 Feature Flag 和 Remote Config 服務，他讓應用服務可以跨越網站，行動裝置和後端來建立和管理 Features Flag，只要在應用服務中加上ㄧ小段程式碼，Flagsmith 就可以隨著不同的環境或是使用者將功能進行開關，而他主要支援以下的功能:</p><ul><li>Feature Flag</li><li>Remoet Config</li><li>A/B 或是多變量測試</li><li>方便組織管理</li><li>容易跟既有工具整合</li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3 id=&quot;從作業系統的角度來談為什麼需要「虛擬記憶體」&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第 84 期 - 一路跟小孩 WFH 到暑假嘍!</title>
    <link href="https://weekly.starbugs.dev/2021/06/08/84-internal-dns-server/"/>
    <id>https://weekly.starbugs.dev/2021/06/08/84-internal-dns-server/</id>
    <published>2021-06-08T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="網址怎麼查不到？-DNS-管理的常見問題"><a href="#網址怎麼查不到？-DNS-管理的常見問題" class="headerlink" title="網址怎麼查不到？- DNS 管理的常見問題"></a><a href="https://medium.com/starbugs/%E7%B6%B2%E5%9D%80%E6%80%8E%E9%BA%BC%E6%9F%A5%E4%B8%8D%E5%88%B0-dns-%E7%AE%A1%E7%90%86%E7%9A%84%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C-4fcc61e1e1e6" target="_blank" rel="noopener">網址怎麼查不到？- DNS 管理的常見問題</a></h3><p>通常公司有規劃自己區域網路的話，其中一定會有 Internal DNS Server，當地端的 DNS Server 想要查詢到雲端的 Private Zone，或是雲端的 DNS Server想要查詢到地端的 Private Zone 時該怎麼做？希望透過這篇文章分享的概念，可以讓正在規劃公司內部網路架構的人不用像我當年一樣自己慢慢摸索 T_T</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="想學習-AWS-卻又不知道從何下手？初探-AWS-雲端架構"><a href="#想學習-AWS-卻又不知道從何下手？初探-AWS-雲端架構" class="headerlink" title="想學習 AWS 卻又不知道從何下手？初探 AWS 雲端架構"></a><a href="https://medium.com/starbugs/%E6%83%B3%E5%AD%B8%E7%BF%92-aws-%E5%8D%BB%E5%8F%88%E4%B8%8D%E7%9F%A5%E9%81%93%E5%BE%9E%E4%BD%95%E4%B8%8B%E6%89%8B-%E5%88%9D%E6%8E%A2-aws-%E9%9B%B2%E7%AB%AF%E6%9E%B6%E6%A7%8B-2c8d3093b10c" target="_blank" rel="noopener">想學習 AWS 卻又不知道從何下手？初探 AWS 雲端架構</a></h3><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="React-新概念-—-Server-Components"><a href="#React-新概念-—-Server-Components" class="headerlink" title="React 新概念 — Server Components"></a><a href="https://link.medium.com/Ycm6riY5Rgb" target="_blank" rel="noopener">React 新概念 — Server Components</a></h3><p>文中介紹了 React 團隊公布的最新的實驗性概念 React Server Components，Server Components 可以用來解決前端打包的 Bundle.js 資源檔太大和與 Server 來回請求次數太多的問題，雖然 Server Components 與當前主流的前後端分離有點不太一致，但是對於要針對 Client 的效能優化來說，還是個可以研究的方向。</p><h3 id="Future-of-CSS-Container-Query"><a href="#Future-of-CSS-Container-Query" class="headerlink" title="Future of CSS - Container Query"></a><a href="https://dev.to/suprabhasupi/future-of-css-container-query-4ma4" target="_blank" rel="noopener">Future of CSS - Container Query</a></h3><p>在現階段如果要做 RWD（Responsive Web Design）的話，都會需要使用 @media 判斷目前 window 的大小，來調整頁面中 element 的顯示方式，但在未來可能會出現 @container，讓開發者可以根據某個 container 的大小做調整。</p><h3 id="Design-Patterns-In-JavaScript"><a href="#Design-Patterns-In-JavaScript" class="headerlink" title="Design Patterns In JavaScript"></a><a href="https://dev.to/twinfred/design-patterns-in-javascript-1l2l" target="_blank" rel="noopener">Design Patterns In JavaScript</a></h3><p>如果你很喜歡使用設計模式來解決一些常見的問題，但卻不曉得該如何在 JavaScript 中使用的話可以參考這篇文章，作者詳細介紹了每個設計模式在 JavaScript 的使用範例，可惜的是少了一些實用的情境和上下文，所以如果本身就設計模式還不太熟的讀者，可以先了解設計模式想解決的問題後，再回來看這篇文章。</p><h3 id="現代前端工程化-基於-Monorepo-的-lerna"><a href="#現代前端工程化-基於-Monorepo-的-lerna" class="headerlink" title="現代前端工程化-基於 Monorepo 的 lerna"></a><a href="https://www.gushiciku.cn/pl/gQR9/zh-tw" target="_blank" rel="noopener">現代前端工程化-基於 Monorepo 的 lerna</a></h3><p>現代的前端開發越來越複雜，在管理一個大型專案上部分專案都會使用 monorepo 的方式來管理，最有名的就是 lerna 這個套件，這篇文章講述了 lerna 這個套件在管理 monorepo 上的一些相關知識，有興趣的讀者可以收藏起來日後閱讀。</p><h3 id="Frontity"><a href="#Frontity" class="headerlink" title="Frontity"></a><a href="https://docs.frontity.org/" target="_blank" rel="noopener">Frontity</a></h3><p>這是個看起來相當有趣的專案，利用 wordpress 當作 CMS 而且可以自己手動刻畫面，而且還是基於 React.js 做出來的套件，感覺日後會有很多可玩性這邊可以推薦讀者做後續的觀察XD</p><h3 id="JavaScript-—-async-await-的-race-condition"><a href="#JavaScript-—-async-await-的-race-condition" class="headerlink" title="JavaScript — async/await 的 race condition"></a><a href="https://toy9986619.medium.com/javascript-async-await-%E7%9A%84-race-condition-20927705569" target="_blank" rel="noopener">JavaScript — async/await 的 race condition</a></h3><p>在非同步中難免都會遇到 race condition 的問題，畢竟很有可能多個 request 在同一個時間點回傳 response 過來去做同一件事情的修改，這篇文章講述了 JavaScript 中的非同步 race condition 問題，有興趣的讀者可以收藏起來看~</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="What-is-the-difference-between-0-0-0-0-127-0-0-1-and-localhost"><a href="#What-is-the-difference-between-0-0-0-0-127-0-0-1-and-localhost" class="headerlink" title="What is the difference between 0.0.0.0, 127.0.0.1 and localhost?"></a><a href="https://stackoverflow.com/a/20778887" target="_blank" rel="noopener">What is the difference between 0.0.0.0, 127.0.0.1 and localhost?</a></h3><p>前幾天跟朋友討論到 server 監聽 127.0.0.1/0.0.0.0/localhost 三者的行為有什麼不同，想說應該也有很多人不太清楚，所以後來在 StackOverflow 上找了一篇不錯的問答，有相同疑惑的話可以參考看看～</p><h3 id="利用-Apps-Script-讓-Google-表單回覆自動產出-Google-文件"><a href="#利用-Apps-Script-讓-Google-表單回覆自動產出-Google-文件" class="headerlink" title="利用 Apps Script 讓 Google 表單回覆自動產出 Google 文件"></a><a href="https://harryuan-65.medium.com/%E5%88%A9%E7%94%A8apps-script-%E8%AE%93-google-%E8%A1%A8%E5%96%AE%E5%9B%9E%E8%A6%86%E8%87%AA%E5%8B%95%E7%94%A2%E5%87%BAgoogle-%E6%96%87%E4%BB%B6-26bf9dacddb6" target="_blank" rel="noopener">利用 Apps Script 讓 Google 表單回覆自動產出 Google 文件</a></h3><p>身為最愛偷懶的工程師，當然什麼事情都要儘量自動化。這篇文章示範了怎麼用 Google 提供的 App Script(很像 JS) 在表單送出時，自動產生出一個文件檔，非常有趣而且也實際解決了作者的問題～</p><h3 id="淺談-HTTP-3-與-QUIC"><a href="#淺談-HTTP-3-與-QUIC" class="headerlink" title="淺談 HTTP/3 與 QUIC"></a><a href="https://link.medium.com/Y6Jx7ZtwTgb" target="_blank" rel="noopener">淺談 HTTP/3 與 QUIC</a></h3><p>雖然還有很多網站連 HTTP2 都沒用上，但近幾年來 HTTP3 也越來成熟了，所以快趁現在來了解一下 HTTP3 以及其底層的 QUIC 吧～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Using-Kubernetes-to-rethink-your-system-architecture-and-ease-technical-debt"><a href="#Using-Kubernetes-to-rethink-your-system-architecture-and-ease-technical-debt" class="headerlink" title="Using Kubernetes to rethink your system architecture and ease technical debt"></a><a href="https://stackoverflow.blog/2021/05/19/rethinking-system-architecture-can-kubernetes-help-to-solve-rewrite-anxiety/" target="_blank" rel="noopener">Using Kubernetes to rethink your system architecture and ease technical debt</a></h3><p>開發人員以把程式重寫而聞名，特別是當他們無法理解交接到手上的軟體是如何運作的時候，但是有經驗的開發人員應該要知道，除非真的有其必要性，不然應該避免把整個程式重新撰寫，因為重寫的過程通常會涉及很多複雜的問題，而且也有可能在過程中引入新的問題；<strong>文章一開頭是這樣講沒錯，但後來整個系統後來還是被翻掉了XD</strong> 在文章中的 Pusher 資深工程師很詳細講述如何分析複雜系統的故事，然後嘗試重建既有系統到 K8s 時面臨的挑戰，最主要想讓讀者知道，在考量更換架構的風險和好處時，可能會需要多次嘗試才能找到最適合的解決方案，並且去說服其他人為什麼要這樣做</p><h3 id="Chaos-Experimentation-an-open-source-framework-built-on-top-of-Envoy-Proxy"><a href="#Chaos-Experimentation-an-open-source-framework-built-on-top-of-Envoy-Proxy" class="headerlink" title="Chaos Experimentation, an open-source framework built on top of Envoy Proxy"></a><a href="https://eng.lyft.com/chaos-experimentation-an-open-source-framework-built-on-top-of-envoy-proxy-df87519ed681" target="_blank" rel="noopener">Chaos Experimentation, an open-source framework built on top of Envoy Proxy</a></h3><p>線上應用服務一定會壞掉，而這只是時間早晚的問題，而不是運氣好不好，而且在分散式系統的架構下，微服務間互相依賴，也造成越來越難知道當某個服務運行不正常，回應時間變久或是成功率下降時，整體服務會是什麼樣的反應，而提早發現這些問題得答案便是 Chaos Engineering 可以幫上忙的地方；而因為 Lyft 所有服務的運行都會透過 Envoy Proxy，所以他們開源了一個構築於 Envoy Proxy 之上的 Chaos Experimentation Framework，讓開發人員可以更簡單的透過這個框架來實現 Chaos Engineering，想要知道具體內容的話，千萬不要錯過精彩的文章內容</p><h3 id="Infrastructure-as-code-platform-Oak9-raises-5-9M"><a href="#Infrastructure-as-code-platform-Oak9-raises-5-9M" class="headerlink" title="Infrastructure-as-code platform Oak9 raises $5.9M"></a><a href="https://venturebeat.com/2021/06/02/infrastructure-as-code-platform-oak9-raises-5-9m/" target="_blank" rel="noopener">Infrastructure-as-code platform Oak9 raises $5.9M</a></h3><p>Oak9 是一個專注於 Infrastructure as Code 安全的服務平台，他在最近的種子輪募資到將近六百萬的美金，看來隨著 IaC 的普及，這類型的工具的需求越來越高，其實從  Deloitte 在 2017 年的一項調查中顯示只有 42% 的受訪者對於他們組織在於管理網路安全風險方面具有信心，而且這幾年來雖然每間公司都逐漸增加資安的投資用以應對分散式 IT 架構還有在家工作的挑戰，但 IDG 表示還是有將近 80% 的資深 IT 從業人員認為自己的組織缺乏應對網路攻擊的防禦能力，所以 Oak9 可以拿到募資也不意外，因為他希望透過整合在軟體開發生命週期中為 Cloud Native 應用服務強化其安全性，並且分析 Infrastructure as Code，藉由不中斷地監控來協助維護各種雲端資源的安全性，讓 IT 從業人員可以對於自己的負責管理的服務更有信心</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3 id=&quot;網址怎麼查不到？-DNS-管理的常見問題&quot;&gt;&lt;a href=&quot;#網址怎麼查不到？-DNS-管理的常見問題&quot;
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第 83 期 - Stay Home, Stay Safe.</title>
    <link href="https://weekly.starbugs.dev/2021/06/01/83-stay-home-stay-safe/"/>
    <id>https://weekly.starbugs.dev/2021/06/01/83-stay-home-stay-safe/</id>
    <published>2021-06-01T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Macbook-膨脹的災情了嘛？Aldente-幫你自動斷電"><a href="#Macbook-膨脹的災情了嘛？Aldente-幫你自動斷電" class="headerlink" title="Macbook 膨脹的災情了嘛？Aldente 幫你自動斷電"></a><a href="https://medium.com/starbugs/%E4%BD%A0%E9%81%87%E5%88%B0-macbook-%E8%86%A8%E8%84%B9%E7%9A%84%E7%81%BD%E6%83%85%E4%BA%86%E5%98%9B-aldente-%E5%B9%AB%E4%BD%A0%E8%87%AA%E5%8B%95%E6%96%B7%E9%9B%BB-c35fd8a96b0b" target="_blank" rel="noopener">Macbook 膨脹的災情了嘛？Aldente 幫你自動斷電</a></h3><p>大約 2018 開始的 Macbook 開始邁向輕薄，但也是從這時候開始，開始有著電池膨脹的災情。看著身旁同事的筆電逐一膨脹送修，慶幸自己的筆電沒有遇到這種災情。<br>但，好景不長，從 2019 購入到現在約莫兩年多， 我的筆電電池終究是膨脹了…</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Learn-CSS-By-Playing-Games-👾"><a href="#Learn-CSS-By-Playing-Games-👾" class="headerlink" title="Learn CSS By Playing Games 👾"></a><a href="https://dev.to/suprabhasupi/learn-css-by-playing-games-1a36" target="_blank" rel="noopener">Learn CSS By Playing Games 👾</a></h3><p>最近玩魔物獵人常常就算放空了，手指還是反射性地做迴避或攻擊的動作。那如果說把學習 CSS 的各種技巧也都變成遊戲，然後一直玩下去是不是之後看到什麼版型配置也都可以反射性地想到如何解決。 😂</p><h3 id="Back-to-Basic-Should-we-use-Flexbox-or-Grid"><a href="#Back-to-Basic-Should-we-use-Flexbox-or-Grid" class="headerlink" title="Back to Basic: Should we use Flexbox or Grid?"></a><a href="https://dev.to/theodorusclarence/back-to-basic-should-we-use-flexbox-or-grid-1h9i" target="_blank" rel="noopener">Back to Basic: Should we use Flexbox or Grid?</a></h3><p>看了許多教學文章並學會 Flex 和 Gird 後，反而搞不太清楚什麼時候該使用 Flex，什麼時候又該使用 Grid 嗎？在這篇文章和留言裡面的總結是「如果你用 Flex 太複雜，就使用 Grid。Grid 可以是 Flex 的父項，反之亦然。」</p><h3 id="What-is-Vite-and-how-to-use-it-with-React"><a href="#What-is-Vite-and-how-to-use-it-with-React" class="headerlink" title="What is Vite and how to use it with React"></a><a href="https://wakanai.io/what-is-vite-and-how-to-use-it-with-react/" target="_blank" rel="noopener">What is Vite and how to use it with React</a></h3><p>這篇文章從零建構一個 React 的專案，並且使用 Vite 來協助打包專案以及處理開發中必不可缺的 Hot Module Replacement，看起來非常簡單，大家有興趣可以試試看。 🙌</p><h3 id="Throttling-vs-Debouncing-an-interesting-analogy"><a href="#Throttling-vs-Debouncing-an-interesting-analogy" class="headerlink" title="Throttling vs Debouncing - an interesting analogy"></a><a href="https://dev.to/mayankav/throttling-vs-debouncing-29e8" target="_blank" rel="noopener">Throttling vs Debouncing - an interesting analogy</a></h3><p>在前端開發中難免跟事件綁定脫離不了關係，有時候為了效能會採用 debounce 的方式來處理，最有名的方法就是 lodash 的 <a href="https://lodash.com/docs/4.17.11#debounce" target="_blank" rel="noopener">debounce</a>，這篇文章分析了兩種處理事件的方法，有興趣的讀者不妨可以收藏起來日後可以閱讀。</p><h3 id="重新認識-Pixel、DPI-PPI-以及像素密度"><a href="#重新認識-Pixel、DPI-PPI-以及像素密度" class="headerlink" title="重新認識 Pixel、DPI / PPI 以及像素密度"></a><a href="https://blog.infolink.com.tw/2021/rediscover-pixel-dpi-ppi-and-pixel-density/?fbclid=IwAR2zz3FN7k-q9FVMlpqeR79UtuFeEtacjCZjLAwmuQ7ko3ctkLuRlWX6Vrw" target="_blank" rel="noopener">重新認識 Pixel、DPI / PPI 以及像素密度</a></h3><p>身為一個前端工程師很常會遇到圖片像素的問題，或者是每個元素之間的 Pixel 距離，這篇文章介紹了幾個在網頁中常用單位，有興趣的讀者也可以收藏起來。</p><h3 id="How-To-Use-Mobile-App-ASO-And-SEO-For-Your-App-Promotion"><a href="#How-To-Use-Mobile-App-ASO-And-SEO-For-Your-App-Promotion" class="headerlink" title="How To Use Mobile App ASO And SEO For Your App Promotion"></a><a href="https://dev.to/krowser/how-to-use-mobile-app-aso-and-seo-for-your-app-promotion-36pg" target="_blank" rel="noopener">How To Use Mobile App ASO And SEO For Your App Promotion</a></h3><p>在 Google 宣布 AMP is dead 之後還有哪些方法可以提供手機版的 SEO 呢？這篇文章敘述了幾個可以提升 SEO 的方法。</p><h2 id="Web-Security"><a href="#Web-Security" class="headerlink" title="Web Security"></a>Web Security</h2><h3 id="CORS-完全手冊（一）：為什麼會發生-CORS-錯誤？"><a href="#CORS-完全手冊（一）：為什麼會發生-CORS-錯誤？" class="headerlink" title="CORS 完全手冊（一）：為什麼會發生 CORS 錯誤？"></a><a href="https://blog.huli.tw/2021/02/19/cors-guide-1/" target="_blank" rel="noopener">CORS 完全手冊（一）：為什麼會發生 CORS 錯誤？</a></h3><p>這一份由胡立寫的 CORS 總共有六篇，內容真的紮實到不行，除了詳細說明 CORS 錯誤的原理之外，還帶著你思考瀏覽器究竟為什麼要做這樣的限制，真的是不可多得的一系列好文。</p><h3 id="防止-XSS-可能比想像中困難"><a href="#防止-XSS-可能比想像中困難" class="headerlink" title="防止 XSS 可能比想像中困難"></a><a href="https://blog.huli.tw/2021/05/25/prevent-xss-is-not-that-easy/" target="_blank" rel="noopener">防止 XSS 可能比想像中困難</a></h3><p>這篇同樣是由胡立大大寫的文章，內容主要在講述一個看似安全的網站，究竟是哪邊沒處理好導致有 XSS 的漏洞，分析的過程稍微有點複雜但也很有趣。</p><h3 id="跨出成為駭客的第一步，來打打看-CTF-Web-吧！"><a href="#跨出成為駭客的第一步，來打打看-CTF-Web-吧！" class="headerlink" title="跨出成為駭客的第一步，來打打看 CTF Web 吧！"></a><a href="https://medium.com/starbugs/ctf-the-first-step-to-becoming-a-hacker-a56eb8820fac" target="_blank" rel="noopener">跨出成為駭客的第一步，來打打看 CTF Web 吧！</a></h3><p>既然都說到 Web Security 了，那就不得不偷渡一下自己介紹 CTF 的文章XD。對我來說打 CTF 除了滿足當駭客的成就感之外，更重要的是知道怎麼攻擊之後，能用攻擊者的思維來檢視自己做的網站，如果連自己身為開發者都沒辦法攻下自家的網站，那才能說自家的網站是安全的對吧！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Argo-rollouts-1-0-released"><a href="#Argo-rollouts-1-0-released" class="headerlink" title="Argo rollouts 1.0 released!"></a><a href="https://www.cncf.io/blog/2021/05/27/argo-rollouts-1-0-released/" target="_blank" rel="noopener">Argo rollouts 1.0 released!</a></h3><p>Argo Rollouts 發布 1.0 啦！不過他是做什麼的啊XD Argo Rollouts 是專門用來補足原生 Kubernetes Deployment 功能不足的部署控制工具，他可以讓 K8s Deployment 具有更多的部署策略，例如 Blue/Green，Canary，Analysis 和 Experiment 部署策略，而他通常會和 Argo CD 一起搭配使用；不過他真的想達成的目標是成為 K8s Deployment Resource 的替代方案，提供應用服務一個更好的生命週管理機制，讓使用者可以利用各種適合自己的策略來進行部署，進而降低部署的風險，並且擁有部署期間自動中斷或是 Rollback 回上一個穩定版本的能力！</p><h3 id="Announcing-Tech-Preview-of-Consul-Service-Mesh-for-Amazon-ECS"><a href="#Announcing-Tech-Preview-of-Consul-Service-Mesh-for-Amazon-ECS" class="headerlink" title="Announcing Tech Preview of Consul Service Mesh for Amazon ECS"></a><a href="https://www.hashicorp.com/blog/announcing-consul-service-mesh-for-amazon-ecs" target="_blank" rel="noopener">Announcing Tech Preview of Consul Service Mesh for Amazon ECS</a></h3><p>使用 AWS ECS 的開發者們現在可以選擇 HashiCorp Consul 來作為 Service Mesh 的解決方案嘍！不過大家先不要太激動，因為還只是在 Tech Preview 的階段而已，他可以讓開發者先部署在非生產環境做測試看看，這篇文章先稍微介紹如何把 HashiCorp Consul 跟 ECS 整合再一起，緊接著手把手的使用 Terraform 來講解要怎麼部署，有興趣試試看的人不要錯過了！</p><h3 id="Fairwinds-Releases-Polaris-4-0-Provides-Support-for-All-Kubernetes-Resources"><a href="#Fairwinds-Releases-Polaris-4-0-Provides-Support-for-All-Kubernetes-Resources" class="headerlink" title="Fairwinds Releases Polaris 4.0, Provides Support for All Kubernetes Resources"></a><a href="https://www.fairwinds.com/news/fairwinds-releases-polaris-4.0" target="_blank" rel="noopener">Fairwinds Releases Polaris 4.0, Provides Support for All Kubernetes Resources</a></h3><p>感覺用來幫 K8s 做健康檢查的工具越來越多了，這次要介紹的解決方案叫做 Polaris，他在最近發佈了 4.0 版，他會自動地去幫忙檢查並且確保 K8s 內的 Pod 和 Controllers 有根據 Best Practices 來做設定，跟 <a href="https://github.com/derailed/popeye" target="_blank" rel="noopener">Popeye</a> 有點像，幫助 K8s 的維運人員避開可能遇到的問題，而在最新發佈的版本中，他支援了 K8s 的各種資源種類，包含 Ingress, Service 和 ClusterRole，增加根據 metadata 去做客製化檢查的能力，並且支援跨資源的檢查功能，例如確保所有的 Deployment 都有 HPA </p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3 id=&quot;Macbook-膨脹的災情了嘛？Aldente-幫你自動斷電&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第 82 期 - Work from home 不孤單，我們陪你</title>
    <link href="https://weekly.starbugs.dev/2021/05/25/82-we-work-from-home-together/"/>
    <id>https://weekly.starbugs.dev/2021/05/25/82-we-work-from-home-together/</id>
    <published>2021-05-25T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="React-為太龐大的程式碼做-Lazy-Loading-和-Code-Splitting"><a href="#React-為太龐大的程式碼做-Lazy-Loading-和-Code-Splitting" class="headerlink" title="React | 為太龐大的程式碼做 Lazy Loading 和 Code Splitting"></a><a href="https://medium.com/starbugs/react-%E7%82%BA%E5%A4%AA%E9%BE%90%E5%A4%A7%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC%E5%81%9A-lazy-loading-%E5%92%8C-code-splitting-7384626a6e0d" target="_blank" rel="noopener">React | 為太龐大的程式碼做 Lazy Loading 和 Code Splitting</a></h3><p>不曉得大家在使用 React 或是 Vue（抱歉我只用過這兩種前端框架，沒有要排擠的意思 😂）寫完程式要打包的時候，會不會遇到打包後的 JavaScript 太肥大了，讓網頁下載資源的時間變長，導致畫面出現在網頁的速度也跟著變慢。Lazy loading 和 code splitting 就是為了解決編譯後的打包檔太大的問題所存在的。雖然大部分人可能不會馬上遇到打包後的檔案太大的情況，但是遇到的話該如何優化呢？一起看看文章吧！ 🙌</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="How-to-Use-CSS-Selectors-to-Style-Your-Web-Page"><a href="#How-to-Use-CSS-Selectors-to-Style-Your-Web-Page" class="headerlink" title="How to Use CSS Selectors to Style Your Web Page"></a><a href="https://www.freecodecamp.org/news/use-css-selectors-to-style-webpage/" target="_blank" rel="noopener">How to Use CSS Selectors to Style Your Web Page</a></h3><p>把 CSS 中常用的選擇器分成「簡單選擇器」、「組合選擇器」、「偽類選擇器」、「偽元素選擇器」和「屬性選擇器」，並仔細介紹它們的功能，大家可以先把這篇存起來，之後使用到時再打開找自己需要的，不然看過一次可能很快就會忘了。 😂</p><h3 id="Top-10-Chrome-DevTools-tips-amp-tricks"><a href="#Top-10-Chrome-DevTools-tips-amp-tricks" class="headerlink" title="Top 10 Chrome DevTools tips &amp; tricks"></a><a href="https://dev.to/areknawo/top-10-chrome-devtools-tips-tricks-2b8g" target="_blank" rel="noopener">Top 10 Chrome DevTools tips &amp; tricks</a></h3><p>本篇文章介紹了 Chrome DevTools 提供給開發者的各種好用功能，也許這些功能可以大大的減少你在查找 Bug 或是調整前端畫面的時間。</p><h3 id="The-future-of-Internet-Explorer-on-Windows-10-is-in-Microsoft-Edge"><a href="#The-future-of-Internet-Explorer-on-Windows-10-is-in-Microsoft-Edge" class="headerlink" title="The future of Internet Explorer on Windows 10 is in Microsoft Edge"></a><a href="https://blogs.windows.com/windowsexperience/2021/05/19/the-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge/?fbclid=IwAR1-Y4O6Zn75V1Hj9cUbWX2tYUxNRDDF0x9bqVc0bwRalJHfMUWY-MazDOM" target="_blank" rel="noopener">The future of Internet Explorer on Windows 10 is in Microsoft Edge</a></h3><p>微軟將要把瀏覽器的主力通通放到 Edge 上了，因此會在 2022 年 6 月 15 日開始停止 IE 的使用（身為前端工程師，讓我歡呼一下 🎉），文章中描述了幾個將 IE 淘汰的原因（各位可以撇開私仇，從專業的角度了解一下 😂）。</p><h3 id="Google-AMP-is-dead-AMP-pages-no-longer-get-preferential-treatment-in-Google-search"><a href="#Google-AMP-is-dead-AMP-pages-no-longer-get-preferential-treatment-in-Google-search" class="headerlink" title="Google AMP is dead! AMP pages no longer get preferential treatment in Google search"></a><a href="https://plausible.io/blog/google-amp" target="_blank" rel="noopener">Google AMP is dead! AMP pages no longer get preferential treatment in Google search</a></h3><p>Google 終於要終止 AMP 專案了 🎉，以前很多新聞平台為了讓自己的新聞稿曝光率增加都會利用 amp 的方式讓手機可以快速的閱讀靜態網站的內容，所以很多大型公司為了讓自己的網站可以增加 Google 的自然搜尋都會要求前端工程師改寫網站成 amp 的模式，不過最近 Google 要終止這個專案了前端工程師們終於可以減少學習的技能了XD</p><h3 id="nth-of-type-amp-nth-last-of-type-你覺得燒腦但其實根本不燒腦的選取器趴兔"><a href="#nth-of-type-amp-nth-last-of-type-你覺得燒腦但其實根本不燒腦的選取器趴兔" class="headerlink" title=":nth-of-type() &amp; :nth-last-of-type() - 你覺得燒腦但其實根本不燒腦的選取器趴兔"></a><a href="https://ithelp.ithome.com.tw/articles/10227242" target="_blank" rel="noopener">:nth-of-type() &amp; :nth-last-of-type() - 你覺得燒腦但其實根本不燒腦的選取器趴兔</a></h3><p>會突然分享這篇文章的原因是因為最近看了一個 <a href="https://codepen.io/bad_printer/pen/abbdBVW?fbclid=IwAR0g2eadFlYV1cASg4BSGyIv4oPsCCEh2x4vTynx4a530JCsx0bHpC7FEw4" target="_blank" rel="noopener">codepen</a>，沒想到竟然會有多個元素同時一個選擇器選到，後來才知道原來 CSS 選擇器也可以利用數學公式的原理這樣玩真的太特別了！</p><h3 id="Array-prototype-flat"><a href="#Array-prototype-flat" class="headerlink" title="Array.prototype.flat()"></a><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="noopener">Array.prototype.flat()</a></h3><p>最近在看新的 ES10 的功能中，發現了一個正在實驗性但是很好用的陣列操作 method，flat 簡單來說就是壓平的意思，可以幫助一個複雜的多維陣列壓平成一個一維陣列，目前基本上主流的瀏覽器都支援這個方法了，如果之後開發上有需要做到類似的操作不妨使用原生的方法就好，不用再額外引用 lodash 的 <a href="https://lodash.com/docs/4.17.15#flatten" target="_blank" rel="noopener">flattern</a> 了XD</p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="Comprehensive-Guide-to-Dates-and-Times-in-Go"><a href="#Comprehensive-Guide-to-Dates-and-Times-in-Go" class="headerlink" title="Comprehensive Guide to Dates and Times in Go"></a><a href="https://qvault.io/golang/golang-date-time/" target="_blank" rel="noopener">Comprehensive Guide to Dates and Times in Go</a></h3><p>常常被時區、時間差、日期輸出格式搞到很煩嗎？這篇文章整理了 Go 裡面各種跟時間的函數，教你怎麼在各種格式之間轉來轉去</p><h3 id="Graceful-Shutdowns-in-Golang-with-signal-NotifyContext"><a href="#Graceful-Shutdowns-in-Golang-with-signal-NotifyContext" class="headerlink" title="Graceful Shutdowns in Golang with signal.NotifyContext"></a><a href="https://millhouse.dev/posts/graceful-shutdowns-in-golang-with-signal-notify-context" target="_blank" rel="noopener">Graceful Shutdowns in Golang with signal.NotifyContext</a></h3><p>對於一個 API server 來說，除了流量要扛得住之外，在 server 即將要關閉時做 Gracefully shutdown 也是非常重要的事情。而這篇文章提供了一個很簡單的範例，教你怎麼用 <code>signal.NotifyContext</code> 在收到 signal 時開始 gracefully shutdown，而不是直接就把 server 關掉</p><h3 id="Go-Package-CI-CD-with-GitHub-Actions"><a href="#Go-Package-CI-CD-with-GitHub-Actions" class="headerlink" title="Go Package CI/CD with GitHub Actions"></a><a href="https://dev.to/jidicula/go-package-ci-cd-with-github-actions-350o" target="_blank" rel="noopener">Go Package CI/CD with GitHub Actions</a></h3><p>因為 Github Action 對於開源專案是完全免費的，而且跟 Github 的整合非常好，所以很多開源專案也紛紛從 Travis/Circle CI 轉過來。如果你手邊剛好也有 Go 的開源專案想要使用 Github Action 的話這篇是不錯的例子，不管是執行 Lint、Test 還是跨平台編譯這篇都寫得很清楚，懶得自己動手的話也可以借他的腳本過來改一改～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Kubernetes-6-open-source-tools-to-put-your-cluster-to-the-test"><a href="#Kubernetes-6-open-source-tools-to-put-your-cluster-to-the-test" class="headerlink" title="Kubernetes: 6 open source tools to put your cluster to the test"></a><a href="https://enterprisersproject.com/article/2021/5/kubernetes-6-open-source-tools-to-test-clusters" target="_blank" rel="noopener">Kubernetes: 6 open source tools to put your cluster to the test</a></h3><p>K8s 生態系中有很多蓬勃發展的工具可以用來協助使用者，這篇文章介紹了六個用來測試 K8s Cluster 和在其中應用程式的好用工具:</p><ul><li><a href="https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/" target="_blank" rel="noopener">Kubernetes Dashboard</a>: 大家都知道可以用來管理 Cluster 的 Admin Console</li><li><a href="https://github.com/asobti/kube-monkey" target="_blank" rel="noopener">Kube-monkey</a>: 把 Netflix 的 Chaos Monkey 改成專門運行在 K8s 中的版本</li><li><a href="https://github.com/aquasecurity/kube-hunter" target="_blank" rel="noopener">Kube-hunter</a>: 用來對  K8s Cluster 做滲透測試用以發現資安弱點的工具</li><li><a href="https://www.projectquay.io/" target="_blank" rel="noopener">Project Quay</a>: Quay 不只是 Container Image Registry，同時也可以幫忙掃描 Image 有沒有什麼 Vulnerability</li><li><a href="https://github.com/cloud-bulldozer/kube-burner" target="_blank" rel="noopener">Kube-burner</a>: 對 K8s Cluster 做壓力測試，例如一次建立很多的資源，然後再同時刪除掉</li><li><a href="https://github.com/aquasecurity/kube-bench" target="_blank" rel="noopener">Kube-bench</a>: 檢查 K8s Clustser 是否符合 CIS Kubernetes Benchmark</li></ul><h3 id="Introducing-AWS-App-Runner"><a href="#Introducing-AWS-App-Runner" class="headerlink" title="Introducing AWS App Runner"></a><a href="https://aws.amazon.com/blogs/containers/introducing-aws-app-runner/" target="_blank" rel="noopener">Introducing AWS App Runner</a></h3><p>AWS 最近發佈的一個新的服務叫做 App Runner，號稱用來運行容器化 Web 服務的最簡單方式，使用他就不用再去管什麼 K8s, 不用設定 Pipeline，也不用去優化 Load Balancer，或是需要擔心 TLS 憑證是不是要過期了，當然也沒有伺服器需要管理，只需要把 Container 丟進去就可以跑了，然後再根據運行時間去算錢！</p><h3 id="The-Architecture-of-Uber’s-API-gateway"><a href="#The-Architecture-of-Uber’s-API-gateway" class="headerlink" title="The Architecture of Uber’s API gateway"></a><a href="https://eng.uber.com/architecture-api-gateway/" target="_blank" rel="noopener">The Architecture of Uber’s API gateway</a></h3><p>API Gateway 是微服務架構中不可缺少的一環，因為他可以為所有的應用程式提供單一個入口，並且提供一個介面來取得資料，商業邏輯和功能性，他也是一個用來實作許多高階功能的地方，例如 routing，protocol 的轉換，Rate Limiting, Load Shedding，處理 Header，安全審核，使用者存取控制…等；而這篇文章是想要深入探討 Uber 自己使用的 API Gateway 系統內的每個技術元件，推薦給有使用微服務架構的人參考看看</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3 id=&quot;React-為太龐大的程式碼做-Lazy-Loading-和-Code-Splitting&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第 81 期 - 防疫期間與星巴哥一起在家耍廢、技術學會！</title>
    <link href="https://weekly.starbugs.dev/2021/05/18/81-stay-at-home-with-starbugs/"/>
    <id>https://weekly.starbugs.dev/2021/05/18/81-stay-at-home-with-starbugs/</id>
    <published>2021-05-18T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="你一定用過-htop，但你有看懂每個欄位嗎？"><a href="#你一定用過-htop，但你有看懂每個欄位嗎？" class="headerlink" title="你一定用過 htop，但你有看懂每個欄位嗎？"></a><a href="https://medium.com/starbugs/do-you-understand-htop-ffb72b3d5629" target="_blank" rel="noopener">你一定用過 htop，但你有看懂每個欄位嗎？</a></h3><p>大家好我是 Larry，這週的專欄要跟大家詳細介紹 htop 中每個指標如 Load Acerage、Resident、Time+ 所代表的意義。文章比較長如果一次看不完也沒關係，可以收藏起來等哪天用到 htop 時再回來複習就好了～</p><h2 id="作業系統"><a href="#作業系統" class="headerlink" title="作業系統"></a>作業系統</h2><h3 id="Linux-的記憶體快取功能：系統把記憶體用光了？"><a href="#Linux-的記憶體快取功能：系統把記憶體用光了？" class="headerlink" title="Linux 的記憶體快取功能：系統把記憶體用光了？"></a><a href="https://blog.gtwang.org/linux/linux-cache-memory-linux/" target="_blank" rel="noopener">Linux 的記憶體快取功能：系統把記憶體用光了？</a></h3><p>看到電腦的記憶體快用完了千萬不要緊張，說不定是被系統借去做其他事了，因為 Linux 會把沒用到的記憶體借去做快取，不只可以提昇系統效能，而且還幾乎沒有副作用哦</p><h3 id="htop-explained"><a href="#htop-explained" class="headerlink" title="htop explained"></a><a href="https://peteris.rocks/blog/htop/" target="_blank" rel="noopener">htop explained</a></h3><p>這篇文章非常非常長，他仔細介紹了 htop 裡面的資訊是從哪邊取得的，整篇看完差不多也知道怎麼自己寫一個 htop 了XD</p><h3 id="Operating-System-Virtual-Memory"><a href="#Operating-System-Virtual-Memory" class="headerlink" title="Operating System - Virtual Memory"></a><a href="https://www.tutorialspoint.com/operating_system/os_virtual_memory.htm" target="_blank" rel="noopener">Operating System - Virtual Memory</a></h3><p>虛擬記憶體（Virtual Memory）是系統在做記憶體管理時非常重要的概念，而且這篇文章也寫得很淺顯易懂，就算完全沒有作業系統的背景知識也能看懂哦～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="做了一夜动画，让大家十分钟搞懂Webpack"><a href="#做了一夜动画，让大家十分钟搞懂Webpack" class="headerlink" title="做了一夜动画，让大家十分钟搞懂Webpack"></a><a href="https://juejin.cn/post/6961961165656326152" target="_blank" rel="noopener">做了一夜动画，让大家十分钟搞懂Webpack</a></h3><p>標題檔的部分在做了一夜動畫，但是 Webpack 的講解真的非常清楚！一步步把 Webpack 如何把專案裡的 JavaScript 全都整理成一份的過程，有興趣的話可以花些時間了解一下！</p><h3 id="Absolutely-Relative-CSS-Length-Units"><a href="#Absolutely-Relative-CSS-Length-Units" class="headerlink" title="Absolutely Relative CSS Length Units"></a><a href="https://levelup.gitconnected.com/absolutely-relative-css-length-units-fd990575ddb2" target="_blank" rel="noopener">Absolutely Relative CSS Length Units</a></h3><p>文中介紹了在 CSS 中常見的幾個長度的單位，像是代表絕對單位的 <code>px</code>、相對單位的 <code>em</code> 和 <code>rem</code> 或是與瀏覽器視窗有關係的 <code>vw</code>、<code>vh</code>、<code>vmin</code> 和 <code>vmax</code>，一起看看這些單位間有什麼不同吧！</p><h3 id="Why-do-you-need-to-know-about-the-JavaScript-Array-at-method"><a href="#Why-do-you-need-to-know-about-the-JavaScript-Array-at-method" class="headerlink" title="Why do you need to know about the JavaScript Array at() method?"></a><a href="https://blog.greenroots.info/why-do-you-need-to-know-about-the-javascript-array-at-method-ckoskkkee0ftmbws1ag0b4udt" target="_blank" rel="noopener">Why do you need to know about the JavaScript Array at() method?</a></h3><p>如果要在 JavaScript 中的 Array 取得某個元素大家通常都會使用中括號 <code>[]</code>，但用 <code>[]</code> 的話如果要取得最後一個元素，就得用 <code>arr[arr.length - 1]</code> 這種不直觀的寫法。而文章中介紹了全新用來取得 Array 元素的方法 <code>at(index)</code>，雖然該方法還沒有正式實裝到現有版本，但還是可以用 <a href="https://github.com/es-shims/Array.prototype.at" target="_blank" rel="noopener">polyfill</a> 早用早享受！</p><h3 id="variable-undefined-vs-typeof-variable-“undefined”-in-JavaScript"><a href="#variable-undefined-vs-typeof-variable-“undefined”-in-JavaScript" class="headerlink" title="variable === undefined vs. typeof variable === “undefined” in JavaScript"></a><a href="https://www.geeksforgeeks.org/variable-undefined-vs-typeof-variable-undefined-in-javascript/" target="_blank" rel="noopener">variable === undefined vs. typeof variable === “undefined” in JavaScript</a></h3><p>以往在比對某變數的值是否為 <code>undefined</code> 的時候都是直接用 <code>variable === undefined</code> 的方式，但其實還有另一種 <code>typeof variable === &#39;undefined&#39;</code> 的判斷方式，這兩種判斷方式最主要的差異在哪呢？這篇文章有完整的介紹可以參考。</p><h3 id="The-history-of-“typeof-null”"><a href="#The-history-of-“typeof-null”" class="headerlink" title="The history of “typeof null”"></a><a href="https://2ality.com/2013/10/typeof-null.html" target="_blank" rel="noopener">The history of “typeof null”</a></h3><p>這個真的是最近踩到的雷，在做物件的值是否為 null 的比對時，結果發現即便 value 為 null，但 <code>typeof null === &#39;object&#39;</code> 也會是 true，這真的是太怪了，於是就去翻 JavaScript 會把 null 的 type 定義為 null 就看到這篇，有興趣的讀者可以看一看但結論就是 <code>typeof null === &#39;object&#39;</code> 是 JavaScript 的 bug XD</p><h3 id="Introduction-To-Polyfills-amp-Their-Usage"><a href="#Introduction-To-Polyfills-amp-Their-Usage" class="headerlink" title="Introduction To Polyfills &amp; Their Usage"></a><a href="https://medium.com/beginners-guide-to-mobile-web-development/introduction-to-polyfills-their-usage-9cd6db4b1923" target="_blank" rel="noopener">Introduction To Polyfills &amp; Their Usage</a></h3><p>相信身為一個前端工程師很常遇到一些新的 method 是無法在舊的瀏覽器當中實現，這就是因為瀏覽器沒有去實作這個 method 的原因，這時候我們就必須要寫 polyfill，那 polyfill 要怎麼寫呢？這篇文章有詳細的介紹。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="5-Linux-commands-I-never-use"><a href="#5-Linux-commands-I-never-use" class="headerlink" title="5 Linux commands I never use"></a><a href="https://www.redhat.com/sysadmin/5-never-use-linux-commands" target="_blank" rel="noopener">5 Linux commands I never use</a></h3><p>這邊文章還滿有趣的，因為通常寫文章的人都會介紹正面的東西，例如最好用，最省時間，最省資源…等，不過這邊竟然是介紹最無用的 Command XD 大家覺得有道理嗎？！</p><ul><li>arch: 取得電腦的架構</li><li>arpaname: 取得 ARPA Name</li><li>bc: 互動式計算器</li><li>dumpkeys: 將鍵盤的對照表寫到標準輸出之中</li><li>uname: 取得當前電腦和作業系統的名稱、版本及其他細節</li></ul><h3 id="Automating-tagging-and-versioning-of-Terraform-modules"><a href="#Automating-tagging-and-versioning-of-Terraform-modules" class="headerlink" title="Automating tagging and versioning of Terraform modules"></a><a href="https://itnext.io/automating-tagging-and-versioning-of-terraform-modules-or-any-language-3a271966c63c" target="_blank" rel="noopener">Automating tagging and versioning of Terraform modules</a></h3><p>這篇文章很值得一讀，在解釋怎麼管理一個 Terraform Module Git Repositroy，裡面提到了版號要怎麼訂，Commit Message 的格式要怎麼寫比較好，並且怎麼把這些規矩融入到 CI Pipeline 中，最後再提到怎麼自動化產生 Change Log, 其實不只是 Terraform Modlue，其他的程式語言應該也可以參考</p><h3 id="karmada"><a href="#karmada" class="headerlink" title="karmada"></a><a href="https://github.com/karmada-io/karmada" target="_blank" rel="noopener">karmada</a></h3><p>在一個組織裡要管理多個 K8s Cluster 已經是無法逃避的一件事情，這邊想要介紹的工具叫做 Karmada，是用來管理跨雲的多重 K8s Cluster 開源方案，他跟原生的 K8s API 相容，可以避免 Vendor Lock-in，讓管理可以集中化，而且可以讓 Workload 在多組 Cluster 間找到最適合自己的居所，而這個專案有些基本觀念主要是來自 Federation v1 跟 v2，有興趣的人可以參考看看</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3 id=&quot;你一定用過-htop，但你有看懂每個欄位嗎？&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第 80 期 - 世界為我而轉動！</title>
    <link href="https://weekly.starbugs.dev/2021/05/11/80-argo-cd-applicationset-controller/"/>
    <id>https://weekly.starbugs.dev/2021/05/11/80-argo-cd-applicationset-controller/</id>
    <published>2021-05-11T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Argo-CD-ApplicationSet-Controller-世界為我而轉動！"><a href="#Argo-CD-ApplicationSet-Controller-世界為我而轉動！" class="headerlink" title="Argo CD ApplicationSet Controller: 世界為我而轉動！"></a><a href="https://medium.com/starbugs/argo-cd-applicationset-controller-%E4%B8%96%E7%95%8C%E7%82%BA%E6%88%91%E8%80%8C%E8%BD%89%E5%8B%95-a837f9392298" target="_blank" rel="noopener">Argo CD ApplicationSet Controller: 世界為我而轉動！</a></h3><p>想要一次性自動地在所有管理的 Kubernetes Cluster 安裝好 Prometheus，或是在某一座 Kubernetes Cluster 內快速地 Bootstrap N 個 Namespace，有這些需求的人千萬不要錯過，由 Argo 新推出的 Argo CD ApplicationSet Controller，它讓使用者在單個 YAML 檔案內像是寫 For Loop 程式，隨需求一次性地建立大量的 Application，就讓我們使用實際範例來看它如何解放 Kubernetes 維運人員的雙手與時間</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="Gatsby-簡單兩個步驟，讓你把-Gatsby-個人網站變成-PWA！"><a href="#Gatsby-簡單兩個步驟，讓你把-Gatsby-個人網站變成-PWA！" class="headerlink" title="Gatsby | 簡單兩個步驟，讓你把 Gatsby 個人網站變成 PWA！"></a><a href="https://medium.com/starbugs/gatsby-%E7%B0%A1%E5%96%AE%E5%85%A9%E5%80%8B%E6%AD%A5%E9%A9%9F-%E8%AE%93%E4%BD%A0%E6%8A%8A-gatsby-%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99%E8%AE%8A%E6%88%90-pwa-450a07668fef" target="_blank" rel="noopener">Gatsby | 簡單兩個步驟，讓你把 Gatsby 個人網站變成 PWA！</a></h3><h3 id="前端開發者該負責寫-API-Endpoints-嗎？The-Backend-For-Frontend-Pattern-BFF-In-Microservices-World"><a href="#前端開發者該負責寫-API-Endpoints-嗎？The-Backend-For-Frontend-Pattern-BFF-In-Microservices-World" class="headerlink" title="前端開發者該負責寫 API Endpoints 嗎？The Backend For Frontend Pattern (BFF) In Microservices World"></a><a href="https://medium.com/starbugs/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC%E8%80%85%E8%A9%B2%E8%B2%A0%E8%B2%AC%E5%AF%AB-api-endpoints-%E5%97%8E-the-backend-for-frontend-pattern-bff-in-microservices-world-1368362c141c" target="_blank" rel="noopener">前端開發者該負責寫 API Endpoints 嗎？The Backend For Frontend Pattern (BFF) In Microservices World</a></h3><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Lazy-loading-using-the-Intersection-Observer-API"><a href="#Lazy-loading-using-the-Intersection-Observer-API" class="headerlink" title="Lazy loading using the Intersection Observer API"></a><a href="https://blog.logrocket.com/lazy-loading-using-the-intersection-observer-api/" target="_blank" rel="noopener">Lazy loading using the Intersection Observer API</a></h3><p>在前端處理圖片載入優化的效能時，Lazy loading 會是其中一個改善使用者體驗的選擇之一，而在文章裡面作者就使用了 Intersection Observer API 來實現 Lazy Loading！</p><h3 id="How-To-Use-Web-Worker"><a href="#How-To-Use-Web-Worker" class="headerlink" title="How To Use Web Worker"></a><a href="https://blog.bibekkakati.me/how-to-use-web-worker" target="_blank" rel="noopener">How To Use Web Worker</a></h3><p>透過 Web Worker API 可以產生一個在背景執行的 worker，這樣就不會讓同步執行的 JavaScript 因為執行比較長時間的程式碼產生應用程式沒有回應狀況。文章中解釋了一些關於 Worker 的基本操作。</p><h3 id="How-To-Use-Vibration-API-in-Your-Website"><a href="#How-To-Use-Vibration-API-in-Your-Website" class="headerlink" title="How To Use Vibration API in Your Website"></a><a href="https://dev.to/bibekkakati/how-to-use-vibration-api-in-your-website-4dp4" target="_blank" rel="noopener">How To Use Vibration API in Your Website</a></h3><p>Vibration API 可以透過 Web 對使用者的設備傳達震動的反應，雖然目前只能在 Android 上的 Chrome 上使用，但是相信 Web 就快要可以征服世界了 😂</p><h3 id="街口前端視覺搭建系統-創始篇"><a href="#街口前端視覺搭建系統-創始篇" class="headerlink" title="街口前端視覺搭建系統-創始篇"></a><a href="https://medium.com/jkopay-frontend/%E8%A1%97%E5%8F%A3%E5%89%8D%E7%AB%AF%E8%A6%96%E8%A6%BA%E6%90%AD%E5%BB%BA%E7%B3%BB%E7%B5%B1-%E5%89%B5%E5%A7%8B%E7%AF%87-e849f713fbe0" target="_blank" rel="noopener">街口前端視覺搭建系統-創始篇</a></h3><p>這篇真的蠻值得一看的，很多大公司為了方便管理自己的前台頁面內容都會設計一個後台給需求端使用，這篇文章敘述了一個好的後台會先從什麼樣的基礎架構進行撰寫，非常值得收藏起來看。</p><h3 id="TypeScript-中的-any-和-unknown"><a href="#TypeScript-中的-any-和-unknown" class="headerlink" title="TypeScript 中的 any 和 unknown"></a><a href="https://abstreamace.com/sglab/2021/05/06/typescript-%e4%b8%ad%e7%9a%84-any-%e5%92%8c-unknown/?fbclid=IwAR1t-VVVt4TsyBfv-AHDb9aJ_Qy-IBk0zqFDWyeX3DcMZpp27jUNDgPIL9Q" target="_blank" rel="noopener">TypeScript 中的 any 和 unknown</a></h3><p>TypeScipt 大家都知道要針對各個變數進行型別的定義，有的時候為了方便就會把變數型態定義成 any，因為 any 就不會做任何的型別檢查回到 JavaScript 的懷抱，但這種寫法其實不是個很好的寫法所以後來 TS 又推出了 unknown，這篇文章講述了 any 以及 unknown 的差別，但我覺得既然都花時間用 TS 了就乖乖把型別定義好吧XD</p><h3 id="重新認識-Pixel、DPI-PPI-以及像素密度"><a href="#重新認識-Pixel、DPI-PPI-以及像素密度" class="headerlink" title="重新認識 Pixel、DPI / PPI 以及像素密度"></a><a href="https://blog.infolink.com.tw/2021/rediscover-pixel-dpi-ppi-and-pixel-density/?fbclid=IwAR0fGyhFL0jVnq9hQjEmwE_cYvhGcOJbb-LzGUSXDLAqLUdsHwdIVZjPkwk" target="_blank" rel="noopener">重新認識 Pixel、DPI / PPI 以及像素密度</a></h3><p>在前端的生態圈相信大家很常都會為了圖片的像素而搞到心煩意亂，尤其是轉成 canvas 的時候總是覺得圖片糊糊的，這其實就跟 DPI 有很大的關聯性，這篇文章就在講述圖片的像素、DPI 等等觀念，讓你可以更了解圖片的原理。</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="How-JavaScript-Works"><a href="#How-JavaScript-Works" class="headerlink" title="How JavaScript Works"></a><a href="https://suprabhasupi.hashnode.dev/how-javascript-works" target="_blank" rel="noopener">How JavaScript Works</a></h3><p>這篇文章圖解了 JS 引擎裡面是怎麼執行 JS 的，而且也簡單講了 Heap、Stack、GC 大概的輪廓，就算是 JS 初學者也看得懂哦～</p><h3 id="寫一個簡單堪用的-ESLint-plugin"><a href="#寫一個簡單堪用的-ESLint-plugin" class="headerlink" title="寫一個簡單堪用的 ESLint plugin"></a><a href="https://blog.techbridge.cc/2021/03/20/write-your-own-eslint-plugin/" target="_blank" rel="noopener">寫一個簡單堪用的 ESLint plugin</a></h3><p>寫一個 ESLint plugin 其實沒有想像中難。胡立這篇文中介紹了他們在專案中遇到的問題，並且自己寫了一個堪用的 ESLint plugin 來解決他。雖然大部分人不會需要自己寫 ESLint plugin，但了解一下 plugin 內部是怎麼運作還是滿有趣的～</p><h3 id="Solving-a-Mystery-Behavior-of-parseInt-in-JavaScript"><a href="#Solving-a-Mystery-Behavior-of-parseInt-in-JavaScript" class="headerlink" title="Solving a Mystery Behavior of parseInt() in JavaScript"></a><a href="https://dmitripavlutin.com/parseint-mystery-javascript/" target="_blank" rel="noopener">Solving a Mystery Behavior of parseInt() in JavaScript</a></h3><p>這篇文章也很好玩，一般來說 JS 的 parseInt 如果輸入小於 1 的數（像是 <code>parseInt(0.5)</code>），那就會回傳 0，但作者卻意外發現 <code>parseInt(0.0000005)</code> 會回傳 5！究竟是為什麼呢？</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="CNCF-Technology-Radar-Highlights-HashiCorp-Vault’s-Broad-Multi-Cloud-Adoption"><a href="#CNCF-Technology-Radar-Highlights-HashiCorp-Vault’s-Broad-Multi-Cloud-Adoption" class="headerlink" title="CNCF Technology Radar Highlights HashiCorp Vault’s Broad Multi-Cloud Adoption"></a><a href="https://www.hashicorp.com/blog/cncf-technology-radar-highlights-vault-broad-multi-cloud-adoption" target="_blank" rel="noopener">CNCF Technology Radar Highlights HashiCorp Vault’s Broad Multi-Cloud Adoption</a></h3><p>Secret Management 在這兩三年來逐漸被受到重視，在最近 CNCF 所發佈的 Technology Radar 裡便提到 HashiCorp Vault 是目前最被廣泛且推薦使用的解決方案，而且他跟 K8s 的整合方式也越來越多元，除了 1) 可以整合 <a href="https://www.vaultproject.io/docs/auth/kubernetes" target="_blank" rel="noopener">K8s Authentication</a> 直接存取之外，2) 也可以透過 <a href="https://www.hashicorp.com/blog/injecting-vault-secrets-into-kubernetes-pods-via-a-sidecar" target="_blank" rel="noopener">SideCar 的方式</a>來 Inject Vault 存取的 Credentials，最近還宣佈可以透過 <a href="https://www.hashicorp.com/blog/retrieve-hashicorp-vault-secrets-with-kubernetes-csi" target="_blank" rel="noopener">Kubernetes CSI</a> 來存取，這麼多方便的整合方式，怪不得會成為目前 Secert Management 的第一把交椅</p><h3 id="5-must-read-books-for-DevOps-and-SRE"><a href="#5-must-read-books-for-DevOps-and-SRE" class="headerlink" title="5 must-read books for DevOps and SRE"></a><a href="https://www.learnsteps.com/5-must-read-books-for-devops-and-sre/" target="_blank" rel="noopener">5 must-read books for DevOps and SRE</a></h3><p>聽說是 DevOps 和 SRE 領域必讀的五本書籍，自己只有看過其中一兩本 (掩面而逃</p><ul><li><a href="https://www.amazon.in/gp/product/9352135245/" target="_blank" rel="noopener">Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems</a></li><li><a href="https://www.amazon.in/gp/product/1942788290/" target="_blank" rel="noopener">The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win</a></li><li><a href="https://www.amazon.in/Computer-Networking-Top-Down-Kurose-James/dp/9332585490/" target="_blank" rel="noopener">Computer Networking | A Top-Down Approach</a></li><li><a href="https://www.amazon.in/gp/product/9332573905/" target="_blank" rel="noopener">Computer Systems: A Programmer’s Perspective</a></li><li><a href="https://www.amazon.in/gp/product/B01DCPXKZ6/" target="_blank" rel="noopener">Site Reliability Engineering: How Google Runs Production Systems</a></li></ul><h3 id="Introducing-Kubewarden-an-Open-Source-Policy-Engine"><a href="#Introducing-Kubewarden-an-Open-Source-Policy-Engine" class="headerlink" title="Introducing Kubewarden, an Open Source Policy Engine"></a><a href="https://community.suse.com/posts/introducing-kubewarden-an-open-source-policy-engine" target="_blank" rel="noopener">Introducing Kubewarden, an Open Source Policy Engine</a></h3><p>說到 Policy Engine 時，自己最先想到的是 Open Policy Agent，而最近有另外一套叫做 Kubewarden 的同等級解決方案也推了出來，它是特別針對 Kubernetes 而來 ，不免俗地也一樣透過 Admission Control 來達成 Policy as Code 的目的，樂見於這個領域有越來越多的競爭者，但也希望可以有越來越多現成的 Policy 可以直接套用XD</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3 id=&quot;Argo-CD-ApplicationSet-Controller-世界為我而轉動！&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第 79 期 - 裁判:看我一眼？給你一個技術犯規！</title>
    <link href="https://weekly.starbugs.dev/2021/05/04/79-technical-fault-is-for-you/"/>
    <id>https://weekly.starbugs.dev/2021/05/04/79-technical-fault-is-for-you/</id>
    <published>2021-05-04T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="學程式平台大比較-Udemy、Cousera、EDX、Youtube-超級比一比"><a href="#學程式平台大比較-Udemy、Cousera、EDX、Youtube-超級比一比" class="headerlink" title="學程式平台大比較 | Udemy、Cousera、EDX、Youtube 超級比一比"></a><a href="https://medium.com/starbugs/c7cb920a9c67" target="_blank" rel="noopener">學程式平台大比較 | Udemy、Cousera、EDX、Youtube 超級比一比</a></h3><p>今天來比較的是學程式的平台，想要「學程式」或是已經是軟體相關從業人員想要「更新自己技術能力」，通常我們會透過購買線上課程，合理分配自己的時間學習。<br>這次挑選的都是英文授課的平台，因為，軟體相關產業，例如：PM 產品經理、UI / UX 設計師或是最常見的軟體開發者，都是一個可以跨國的職業，那麼英文就是很重要的因素了 …</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="CONTENT-AWARE-IMAGE-RESIZING-IN-JAVASCRIPT"><a href="#CONTENT-AWARE-IMAGE-RESIZING-IN-JAVASCRIPT" class="headerlink" title="CONTENT-AWARE IMAGE RESIZING IN JAVASCRIPT"></a><a href="https://trekhleb.dev/blog/2021/content-aware-image-resizing-in-javascript/" target="_blank" rel="noopener">CONTENT-AWARE IMAGE RESIZING IN JAVASCRIPT</a></h3><p>這篇文章太震撼我了，在看文章的時候都快忘記截稿當下是可憐的禮拜天晚上。作者在文章裡面解釋如何用演算法的 Dynamic Programming 實現 Seam Carving Algorithm，Seam Carving Algorithm 會去偵測圖片的內容，並且在調整圖片大小的時候裁掉相對不重要的區塊，文章裡不只有提供 Demo，還有完整的程式碼和解釋，不看看真的太可惜了！</p><h3 id="How-JavaScript-Works-🤷🏻‍"><a href="#How-JavaScript-Works-🤷🏻‍" class="headerlink" title="How JavaScript Works 🤷🏻‍"></a><a href="https://suprabhasupi.hashnode.dev/how-javascript-works" target="_blank" rel="noopener">How JavaScript Works 🤷🏻‍</a></h3><p>從運行原理中了解 JavaScript，從瀏覽器如何讀懂我們寫下的 JavaScript、JavaScript 執行的方式、內存的處理到 JavaScript 與瀏覽器的 Web API 運作方式。</p><h3 id="Using-the-PDF-Embed-API-with-Vue-js"><a href="#Using-the-PDF-Embed-API-with-Vue-js" class="headerlink" title="Using the PDF Embed API with Vue.js"></a><a href="https://www.raymondcamden.com/2021/02/17/using-the-pdf-embed-api-with-vuejs" target="_blank" rel="noopener">Using the PDF Embed API with Vue.js</a></h3><p>透過 Adobe 提供的 JavaScript API，就可以讓網頁變成簡單的 PDF 閱讀器，而作者在文章內提出一種將它導入 Vue.js 專案的方法。</p><h3 id="Solving-the-classic-Two-Sum-and-Three-Sum-Problem-in-JavaScript"><a href="#Solving-the-classic-Two-Sum-and-Three-Sum-Problem-in-JavaScript" class="headerlink" title="Solving the classic Two-Sum and Three-Sum Problem in JavaScript"></a><a href="https://paulrohan.medium.com/solving-the-classic-two-sum-and-three-sum-problem-in-javascript-7d5d1d47db03" target="_blank" rel="noopener">Solving the classic Two-Sum and Three-Sum Problem in JavaScript</a></h3><p>最近在練習演算法的時候有看到兩個經典的題目：Two Sum 以及 Three Sum，兩個其實都可以用暴力解解出來，但這篇文章使用了其他種方式讓整個時間複雜度降低，有興趣的讀者不妨也可以用這個方法來解決這兩種題目。</p><h3 id="Understanding-Currying-in-JavaScript"><a href="#Understanding-Currying-in-JavaScript" class="headerlink" title="Understanding Currying in JavaScript"></a><a href="https://blog.bitsrc.io/understanding-currying-in-javascript-ceb2188c339" target="_blank" rel="noopener">Understanding Currying in JavaScript</a></h3><p>Functional Programming 有一個非常重要的觀念叫：Curring，其實 JavaScript 本身有非常多的 method 都是用到 Currying 的觀念完成，這篇文章教大家了解 JavaScript 中的 Curring。</p><h3 id="Curry-and-Function-Composition"><a href="#Curry-and-Function-Composition" class="headerlink" title="Curry and Function Composition"></a><a href="https://medium.com/javascript-scene/curry-and-function-composition-2c208d774983" target="_blank" rel="noopener">Curry and Function Composition</a></h3><p>這篇文章動手舉例了非常多的 Currying 的例子，並告訴讀者為什麼 Currying Function 是非常好用的，雖然我覺得實務上真的很難達到所有的 Function 都 Currying 就是了😂</p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="Faster-Python-with-Go-shared-objects"><a href="#Faster-Python-with-Go-shared-objects" class="headerlink" title="Faster Python with Go shared objects"></a><a href="https://blog.kchung.co/faster-python-with-go-shared-objects/" target="_blank" rel="noopener">Faster Python with Go shared objects</a></h3><p>嫌 Python 效能太差，但是又覺得編譯式語言寫起來很麻煩嗎？這篇文章教你怎麼把 Go 程式碼編譯成 Shared Objects 格式讓 Python 拿去用，如此一來就可以平常寫 Python，哪天遇到需要大量計算的效能瓶頸時就用 Go 來實作，實作完再包裝成 Python 的 function 就好了～</p><h3 id="time-rate-package"><a href="#time-rate-package" class="headerlink" title="time/rate package"></a><a href="https://pjchender.blogspot.com/2020/11/go-pkg-timerate-package.html" target="_blank" rel="noopener">time/rate package</a></h3><p>在 Go 裡面要開一個 Goroutine 非常簡單，但也因此衍伸出另一個問題 - 限流。譬如說你要發 HTTP 請求使用別人的 API，Go 可以輕易讓你做到每秒發上百個請求，但通常 API 都會有流量限制，所以你不可能真的同時把上百個請求發出去，否則一定會馬上被加進黑名單。</p><p>這時候就可以用 Go 內建的 time/rate 來做限流，不管是簡單的需求如「每秒最多發三個請求」，或是複雜的「每秒發起一個請求、同時最多有五個未完成的請求」都可以輕易做到哦～</p><h3 id="那些年我們追的-Goroutine-Pool"><a href="#那些年我們追的-Goroutine-Pool" class="headerlink" title="那些年我們追的 Goroutine Pool"></a><a href="https://medium.com/17media-tech/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E5%80%91%E8%BF%BD%E7%9A%84-goroutine-pool-e8d211757ee" target="_blank" rel="noopener">那些年我們追的 Goroutine Pool</a></h3><p>雖然在 Go 裡面啟動、銷毀一個 goroutine 非常簡單快速，而且每個 goroutine 跟 thread 比起來也是非常輕量，但萬一 goroutine 的數量達到十萬甚至百萬時還是會造成效能問題。因此 17Live 團隊在遇到這問題時決定自己實作了一個 goroutine pool，而這篇文章中也講到了為什麼他們會遇到這個問題以及他們 goroutine pool 的架構，不長但很值得一讀的一篇文章</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Linux-File-System-Types-Explained-Which-One-Should-You-Use"><a href="#Linux-File-System-Types-Explained-Which-One-Should-You-Use" class="headerlink" title="Linux File System Types Explained, Which One Should You Use"></a><a href="https://linuxiac.com/linux-file-system-types-explained-which-one-should-you-use/" target="_blank" rel="noopener">Linux File System Types Explained, Which One Should You Use</a></h3><p>看完這篇文章才知道原來 Linux 支援這麼多種檔案系統，自己只對常用的 ext4 比較熟一點點，沒想到還有 XFS, Btrfs, ZFS 和 Resier4，文中詳細的介紹每一種檔案系統的功能和優勢，讓使用者可以針對自己的需求，選擇適合的檔案系統來使用</p><h3 id="Updating-Kubernetes-CA-certificates-the-hard-way"><a href="#Updating-Kubernetes-CA-certificates-the-hard-way" class="headerlink" title="Updating Kubernetes CA certificates the hard way"></a><a href="https://deezer.io/updating-kubernetes-ca-certificates-the-hard-way-f9518108791d" target="_blank" rel="noopener">Updating Kubernetes CA certificates the hard way</a></h3><p>在 2017 年時 Deezer 使用 Ansible 完成了架設 K8s 的工作，而其中內部使用到的 K8s CA Certificate 已經到了快要過期的時候了，而為什麼會拖到最後一刻，才想來做這件事情呢？因為更新 K8s 內部使用到的 CA Certificate 並不是個簡單的工作，所以 Deezer 想要找出一個可以線上更新，而且不影響使用者的方法，從一開始需要考量的要點一個一個談起，並且在途中順便整合了 HashiCorp Vault，最後總算成功完成任務，推薦給自架 K8s 的維運人員</p><h3 id="Introducing-git-xargs-an-open-source-tool-to-update-multiple-GitHub-repos"><a href="#Introducing-git-xargs-an-open-source-tool-to-update-multiple-GitHub-repos" class="headerlink" title="Introducing git-xargs: an open source tool to update multiple GitHub repos"></a><a href="https://blog.gruntwork.io/introducing-git-xargs-an-open-source-tool-to-update-multiple-github-repos-753f9f3675ec" target="_blank" rel="noopener">Introducing git-xargs: an open source tool to update multiple GitHub repos</a></h3><p>大家應該都有相當多的 Repository 需要管理，而且這些 Repository 當中其實會有一些同樣的檔案，例如 License 檔案, CI/CD Pipleline YAML 檔案…等，每次要修改這些檔案就會有點煩悶，所以 gruntwork 開源了一個 CLI 工具叫做 git-xargs，讓使用者使用它來同時修改多 Git Repository，進而增進工作效率，事半功倍</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3 id=&quot;學程式平台大比較-Udemy、Cousera、EDX、Youtube-超級比一比&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第 78 期 - 認命吧！有一好，就沒兩好！</title>
    <link href="https://weekly.starbugs.dev/2021/04/27/78-k8s-multi-tenancy/"/>
    <id>https://weekly.starbugs.dev/2021/04/27/78-k8s-multi-tenancy/</id>
    <published>2021-04-27T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Multi-Tenancy-Kubernetes-Cluster-Part-1-認命吧！有一好，就沒兩好！"><a href="#Multi-Tenancy-Kubernetes-Cluster-Part-1-認命吧！有一好，就沒兩好！" class="headerlink" title="Multi-Tenancy Kubernetes Cluster Part 1: 認命吧！有一好，就沒兩好！"></a><a href="https://medium.com/starbugs/multi-tenancy-kubernetes-cluster-part-1-%E8%AA%8D%E5%91%BD%E5%90%A7-%E6%9C%89%E4%B8%80%E5%A5%BD-%E5%B0%B1%E6%B2%92%E5%85%A9%E5%A5%BD-3eddb75eeb4c" target="_blank" rel="noopener">Multi-Tenancy Kubernetes Cluster Part 1: 認命吧！有一好，就沒兩好！</a></h3><p>大家知道其實 Multi-Tenancy 還有分軟的 (Soft) 跟硬的 (Hard) 嗎？那 K8s 到底是哪一種呢？而現在大家為了安全性和可用性都會使用 Multi-Cluster 的做法，但也因此導致維運和管理成本節節上升，那有沒有什麼比較好的解決方案呢？就讓我們透過這篇文章，來了解目前 K8s 在 Multi-Tenancy 所遇到的問題和相對應的解決方案</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Javascript-非同步-amp-Event-Loop！10-分鐘輕鬆圖解學習！"><a href="#Javascript-非同步-amp-Event-Loop！10-分鐘輕鬆圖解學習！" class="headerlink" title="Javascript 非同步 &amp; Event Loop！10 分鐘輕鬆圖解學習！"></a><a href="https://chan-chan-dev.com/js/Async/async-sync-intro/2534378084/" target="_blank" rel="noopener">Javascript 非同步 &amp; Event Loop！10 分鐘輕鬆圖解學習！</a></h3><p>程式碼搭配簡潔的插圖把 JavaScript 的 Call Stack 和 Callback Queue 講解的很清楚，讀完後不只有了 Event loop 的概念，也理解了 Queue 和 Stack 的資料結構！</p><h3 id="What-is-JavaScript-Map"><a href="#What-is-JavaScript-Map" class="headerlink" title="What is JavaScript Map?"></a><a href="https://javascript.plainenglish.io/what-is-javascript-map-8172bc42265a" target="_blank" rel="noopener">What is JavaScript Map?</a></h3><p>在 JavaScript 中有許多開發者會直接把 Object 當作 Map 來使用，但是如果把 Object 當作 Map 還是會有一些潛在的缺點，例如 Object 總是會將 Key 轉換成 String。不過在 ES6 的時候 JavaScript 就引入了一種新的 Map，能讓 key 和 value 的對應更加容易！</p><h3 id="The-Best-Free-Resources-To-Learn-Web-Development"><a href="#The-Best-Free-Resources-To-Learn-Web-Development" class="headerlink" title="The Best Free Resources To Learn Web Development"></a><a href="https://hackernoon.com/the-best-free-resources-to-learn-web-development-0bo334x" target="_blank" rel="noopener">The Best Free Resources To Learn Web Development</a></h3><p>如果你是剛走入 Web 開發的初學者，你一定會對眾多複雜的技術感到不知所措，如果要購買線上課程又擔心自己會看不懂，以及錢錢不開心，而這篇文章列出許多對初學者學習 Web 友善的網站或是 Youtuber 頻道，重點是它們都是免費的！如果想要學程式順便熟悉英文，可以參考看看！ 🙌</p><h3 id="徹底搞懂Javascript閉包，柯里化，手寫代碼！"><a href="#徹底搞懂Javascript閉包，柯里化，手寫代碼！" class="headerlink" title="徹底搞懂Javascript閉包，柯里化，手寫代碼！"></a><a href="https://www.readfog.com/a/1631928679665864704?fbclid=IwAR05cBuC424-e-AfKsKtATftSgKUea4EYF8oHIJV5nj24xataysrqoenoKY" target="_blank" rel="noopener">徹底搞懂Javascript閉包，柯里化，手寫代碼！</a></h3><p>JavaScript 的閉包可以說是非常重要的觀念，透過閉包的特性我們可以輕鬆的保存 function 內部變數的值，也因為這樣的特性就可以輕鬆地達到 functional programming 內非常重要的 currying，這篇文章深入帶大家了解閉包以及科里化的流程。</p><h3 id="CSS3-Cubic-Bezier"><a href="#CSS3-Cubic-Bezier" class="headerlink" title="CSS3 Cubic Bezier"></a><a href="https://www.oxxostudio.tw/articles/201406/css-cubic-bezier.html" target="_blank" rel="noopener">CSS3 Cubic Bezier</a></h3><p>最近在研究 css animation 時發現想要讓元素可以忽快忽慢的移動到指定位置可以透過貝茲曲線(cubic bezier)的方式達成，這篇文章深入理解 css animation 是如何利用貝茲曲線達到這些移動效果。</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="Golang-for-Node-js-Developers"><a href="#Golang-for-Node-js-Developers" class="headerlink" title="Golang for Node.js Developers"></a><a href="https://github.com/miguelmota/golang-for-nodejs-developers" target="_blank" rel="noopener">Golang for Node.js Developers</a></h3><p>這個 repository 整理了一堆 Node.js 跟 Go 的範例程式碼，如果你已經會寫 JS 了想來學 Go，因為 Go 真的很簡單好學，看完這個 repo 的 README 應該就差不多會了XD</p><h3 id="Must-Bookmarks-to-become-good-in-Go"><a href="#Must-Bookmarks-to-become-good-in-Go" class="headerlink" title="Must-Bookmarks to become good in Go"></a><a href="https://dev.to/rubenwap/must-bookmarks-to-become-good-in-go-ln8" target="_blank" rel="noopener">Must-Bookmarks to become good in Go</a></h3><p>如果 Go 已經學到一定程度，想繼續深入的話這篇整理了很多學習資源，包括怎麼寫出高效率的程式、用好指標跟做 profiling 等等，應該夠看好幾個禮拜了XD</p><h3 id="Gotchas-in-the-Go-Network-Packages-Defaults"><a href="#Gotchas-in-the-Go-Network-Packages-Defaults" class="headerlink" title="Gotchas in the Go Network Packages Defaults"></a><a href="https://martin.baillie.id/wrote/gotchas-in-the-go-network-packages-defaults/" target="_blank" rel="noopener">Gotchas in the Go Network Packages Defaults</a></h3><p>Go 的 network package 有一些預設行為，如果不熟的話可能會不小心被雷到，像預設的 http request 是沒有 timeout 的、而且預設會開啟 keep alive。這篇文章把這些 Go 的預設行為整理起來，如果有一些奇怪的 bug 一直解不掉，不妨可以看看這篇</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Grafana-Loki-and-Tempo-will-be-relicensed-to-AGPLv3"><a href="#Grafana-Loki-and-Tempo-will-be-relicensed-to-AGPLv3" class="headerlink" title="Grafana, Loki, and Tempo will be relicensed to AGPLv3"></a><a href="https://grafana.com/blog/2021/04/20/grafana-loki-tempo-relicensing-to-agplv3/" target="_blank" rel="noopener">Grafana, Loki, and Tempo will be relicensed to AGPLv3</a></h3><p>這幾年因為 AWS 推出了很多使用者喜愛的開源軟體託管服務，因而讓社群這邊群情激憤，紛紛開始改變授權的 License，之前吵得最兇的為 <a href="https://www.elastic.co/pricing/faq/licensing" target="_blank" rel="noopener">Elastic</a>，然後 AWS 也順便把原來自己開源的 Open Distro for ElasticSearch 正名為 <a href="https://aws.amazon.com/blogs/opensource/introducing-opensearch/" target="_blank" rel="noopener">OpenSearch</a>；而隨著 <a href="https://www.infoq.com/news/2021/01/aws-grafana-prometheus/" target="_blank" rel="noopener">AWS 推出託管的 Prometheus 和 Grafana</a> 之後，Grafana Labs 也跳出來把 Grafana，Loki 和 Tempo 的 License 改成 AGPLv3，不知道未來 AWS 是不是又會搞個 OpenMetric 出來?!</p><h3 id="Airbnb-Deploys-125-000-Times-per-Year-with-Multicluster-Kubernetes"><a href="#Airbnb-Deploys-125-000-Times-per-Year-with-Multicluster-Kubernetes" class="headerlink" title="Airbnb Deploys 125,000+ Times per Year with Multicluster Kubernetes"></a><a href="https://www.altoros.com/blog/airbnb-deploys-125000-times-per-year-with-multicluster-kubernetes/" target="_blank" rel="noopener">Airbnb Deploys 125,000+ Times per Year with Multicluster Kubernetes</a></h3><p>Airbnb 在一開始時，小小的工程團隊構築了 Ruby on Rails 的單體服務，但是隨著公司規模越來越大，問題逐漸因為人員和程式模組上的相依性而發生，而且單體服務在橫向擴充上也不容易，所以他們開始進行改造，從使用 AWS EC2 轉型成 SOA (service-oriented architecture) 開始，然後再接著導入 MicroService，並且建立的 Code Repoistory 的模板，避免工程師重造輪子；後來當然不意外的使用的 K8s，在 2018 初時，他們的 Production Cluster 已經有將近 450 個節點，在 2018 底時，節點個數翻倍成 900 個，他們也開始擔心 Eted 是不是會撐不住，而且公司內節點數量一直翻倍再成長，所以他們後來開始往 Multi-Cluster 的方向前進，並且還做到多個 Cluster 間 Workload 的同步，感覺還滿精彩的，想要知道更詳細的內容也可以看他們在 <a href="https://www.youtube.com/watch?v=ay7NibpRAYU" target="_blank" rel="noopener">KubeCon 分享的影片</a></p><h3 id="Announcing-Pulumi-3-0"><a href="#Announcing-Pulumi-3-0" class="headerlink" title="Announcing Pulumi 3.0"></a><a href="https://www.pulumi.com/blog/pulumi-3-0/" target="_blank" rel="noopener">Announcing Pulumi 3.0</a></h3><p>Pulumi 在 IaC 領域裡雖然起步的比較晚，但是追趕的速度還滿快的，從一開始到現在都維持著每一年發布一個大版號更新，最近發布的 3.0 裡，提供了 Pulumi Automation API，讓開發者可以把 IaC 加到 Node.js, Python, Go 和  .NET 用以達成自動化；早期都是直接利用 Terraform 的 Provider 來做事情，現在有持續在構築自己的 Provider 生態圈，包含 Pulumi 原生的 Azure Providers (GA) 和 Google Cloud Provider (Preview)，很樂於見到 Pulumi 的蓬勃發展，畢竟有競爭才會有進步！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第 77 期 - 解了一個 bug，還有千千萬萬個 bug</title>
    <link href="https://weekly.starbugs.dev/2021/04/20/77-so-many-bugs-QQ/"/>
    <id>https://weekly.starbugs.dev/2021/04/20/77-so-many-bugs-QQ/</id>
    <published>2021-04-20T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="想更快算出費氏數列嗎？來看看矩陣快速冪吧！"><a href="#想更快算出費氏數列嗎？來看看矩陣快速冪吧！" class="headerlink" title="想更快算出費氏數列嗎？來看看矩陣快速冪吧！"></a><a href="https://medium.com/starbugs/find-nth-fibonacci-number-by-fast-doubling-6ac2857a7834" target="_blank" rel="noopener">想更快算出費氏數列嗎？來看看矩陣快速冪吧！</a></h3><p>大家好，我是 Larry。這週的專欄「想更快算出費氏數列嗎？來看看矩陣快速冪吧！」要跟大家介紹如何用矩陣乘法來計算費氏數列，並且用快速冪的技巧把他加速到 O(log(n))。</p><p>雖然矩陣乘法聽起來就很恐怖，不過我有畫了很多精美的圖來幫助理解，所以整體來說應該不會太難讀，也祝福大家都可以在學習演算法的過程中找到樂趣～</p><h2 id="演算法"><a href="#演算法" class="headerlink" title="演算法"></a>演算法</h2><h3 id="基礎電腦科學：演算法概要"><a href="#基礎電腦科學：演算法概要" class="headerlink" title="基礎電腦科學：演算法概要"></a><a href="https://blog.techbridge.cc/2019/03/01/computer-science-algorithm-introduction/" target="_blank" rel="noopener">基礎電腦科學：演算法概要</a></h3><p>剛開始在學習程式時很常聽到「演算法」這個名詞，但演算法到底是什麼呢？TechBridge 的這篇文章用很淺顯易懂的例子介紹了何謂「演算法」，以及必須要滿足哪些條件才可以叫做一個演算法，如果是剛開始學習寫程式的朋友們很推薦看看這一篇～</p><h3 id="從時間複雜度認識常見演算法"><a href="#從時間複雜度認識常見演算法" class="headerlink" title="從時間複雜度認識常見演算法"></a><a href="https://medium.com/appworks-school/%E5%88%9D%E5%AD%B8%E8%80%85%E5%AD%B8%E6%BC%94%E7%AE%97%E6%B3%95-%E5%BE%9E%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6%E8%AA%8D%E8%AD%98%E5%B8%B8%E8%A6%8B%E6%BC%94%E7%AE%97%E6%B3%95-%E4%B8%80-b46fece65ba5" target="_blank" rel="noopener">從時間複雜度認識常見演算法</a></h3><p>初學演算法時常常會聽到有人說這個演算法的複雜度是 O(1)/O(n)/O(nlog(n))，那這個複雜度究竟代表什麼，各個複雜度又有什麼常見的演算法呢？這篇文章用了很多例子來講解各個複雜度究竟怎麼回事，想要更直觀的了解時間複雜度的話就看這篇了～</p><h3 id="Counting-Sort-amp-Radix-Sort"><a href="#Counting-Sort-amp-Radix-Sort" class="headerlink" title="Counting Sort &amp; Radix Sort"></a><a href="https://medium.com/nerd-for-tech/counting-sort-radix-sort-ccd9f77a00a2" target="_blank" rel="noopener">Counting Sort &amp; Radix Sort</a></h3><p>一般我們所說到的排序演算法如 BubbleSort/MergeSort/QuickSort 多半是「比較排序」，也就是要透過各個元素之間的比較大小來進行排序，而這類比較排序的最佳時間複雜度就是 O(nlog(n))。那除了比較排序之外其實還有另外一類「非比較排序」，也就是不需要進行元素間的比較就可以排出順序，雖然聽起來很神奇（不比較究竟要怎麼排XD），不過在特定條件之下確實是可以做到的哦～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="CSS-property，让不可能变可能"><a href="#CSS-property，让不可能变可能" class="headerlink" title="CSS @property，让不可能变可能"></a><a href="https://juejin.cn/post/6951201528543707150" target="_blank" rel="noopener">CSS @property，让不可能变可能</a></h3><p>CSS @property 是 CSS 最新的特性，它可以讓你先定義 property（例如顏色、長度等）並在之後做使用。而文章中也用一些例子解釋 CSS @property 和一般的自定義變數的差異在哪裡，以及有哪些之前無法實現的效果可以透過 CSS @property 解決。</p><h3 id="Toggle-dark-light-mode-by-clapping-your-hands"><a href="#Toggle-dark-light-mode-by-clapping-your-hands" class="headerlink" title="Toggle dark/light mode by clapping your hands"></a><a href="https://dev.to/devdevcharlie/toggle-dark-light-mode-by-clapping-your-hands-li7" target="_blank" rel="noopener">Toggle dark/light mode by clapping your hands</a></h3><p>使用 TensorFlow.js 開發一個 Chrome 擴充功能，讓網站可以辨識拍手的聲音去執行對應的動作！像是文章裡就是去切換網站的主題顏色，Demo 效果實在是太厲害，心裡想著找時間也來試試看好了！😂</p><h3 id="How-to-Build-a-Chess-Clock-with-JavaScript-and-setInterval"><a href="#How-to-Build-a-Chess-Clock-with-JavaScript-and-setInterval" class="headerlink" title="How to Build a Chess Clock with JavaScript and setInterval"></a><a href="https://www.freecodecamp.org/news/how-to-build-a-chess-clock-with-javascript-and-setinterval/" target="_blank" rel="noopener">How to Build a Chess Clock with JavaScript and setInterval</a></h3><p>利用 JavaScript 中的 setInterval 來製作在西洋棋中互相讀秒倒數的功能，來看看筆者是如何一步步建構整個應用程式的！</p><h3 id="当浏览器切换到其他标签页或者最小化时，你的js定时器还准时吗？"><a href="#当浏览器切换到其他标签页或者最小化时，你的js定时器还准时吗？" class="headerlink" title="当浏览器切换到其他标签页或者最小化时，你的js定时器还准时吗？"></a><a href="https://juejin.cn/post/6899796711401586695" target="_blank" rel="noopener">当浏览器切换到其他标签页或者最小化时，你的js定时器还准时吗？</a></h3><p>這個議題真的太有趣了，當使用者沒有 focus 在頁面的時候 JS 的 <code>setInterval()</code> 或 <code>setTimeout()</code> 還會準時嗎？我一直以為會是準時的，沒想到瀏覽器為了效能會自動把定時器的時間拉長。</p><h3 id="ES2021-ES12-令人期待的新特性"><a href="#ES2021-ES12-令人期待的新特性" class="headerlink" title="ES2021-ES12 令人期待的新特性"></a><a href="https://www.readfog.com/a/1633008867120091136" target="_blank" rel="noopener">ES2021-ES12 令人期待的新特性</a></h3><p>轉眼間 ECMAScript 也要進入第 12 版了，透過這篇文章可以帶大家了解新的 ECMAScript 到底加入了哪些新的功能，想當年我開始寫的時候還是 ES5 呢！真的是時代的眼淚😂</p><h3 id="10-CSS-BORDER-ANIMATION-EXAMPLE"><a href="#10-CSS-BORDER-ANIMATION-EXAMPLE" class="headerlink" title="10+ CSS BORDER ANIMATION EXAMPLE"></a><a href="https://dev.to/mike37/10-css-border-animation-example-4jjf" target="_blank" rel="noopener">10+ CSS BORDER ANIMATION EXAMPLE</a></h3><p>隨著瀏覽器越來越進步，能用網頁實現的東西也越來越多，前端工程師也要開始學習一些動畫讓自己的網頁越來越炫砲，這篇文章介紹了 10 種讓 <code>border</code> 變得很炫炮的方式。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="KDash"><a href="#KDash" class="headerlink" title="KDash"></a><a href="https://github.com/kdash-rs/kdash" target="_blank" rel="noopener">KDash</a></h3><p>雖然 K8s 本身有 UI Dashboard 可以透過 Browser 來操控 K8s 的相關資源，也有 <a href="https://k8slens.dev/" target="_blank" rel="noopener">Lens</a> 這種 Desktop UI IDE，可是對於喜歡使用 Terminal 的人來說，其實更喜歡的是像 <a href="https://github.com/derailed/k9s" target="_blank" rel="noopener">K9s</a> 這種 Terminal UI 工具，大多數習慣於 Terminal 工作的開發維運人員應該都會安裝，而最近我發現有另外一套也是 K8s Managed Terminal UI 工具叫做 KDash，看起來感覺也是滿好用的，不過現在還在 Beta 前期開發階段，希望未來功能可以越來越完整，讓離不開 Terminal 的人多可以多一個選擇</p><h3 id="Managing-network-devices-with-Golang-using-Netrasp"><a href="#Managing-network-devices-with-Golang-using-Netrasp" class="headerlink" title="Managing network devices with Golang using Netrasp"></a><a href="https://networklore.com/hello-netrasp/" target="_blank" rel="noopener">Managing network devices with Golang using Netrasp</a></h3><p>在網路設備的世界裡，可以怎麼達成 Infrastructure as Code 呢？以前我知道 Ansible 有 <a href="https://docs.ansible.com/ansible/2.9/modules/list_of_network_modules.htmlv" target="_blank" rel="noopener">Network Module</a>，後來隨著 Terraform 的盛行，也有很多網路設備廠商開發對應的 Terraform Provider，這兩天看到有一個叫做 Netrasp 的 Golang Library 也可以達成一樣的事情，看了一下這篇介紹文章，發現真的跟寫程式沒什麼兩樣，假如本身就是 Golang 好手，而又有管理網路設備需求的話，就可以考慮看看這個工具</p><h3 id="Awesome-GHA-Snippets"><a href="#Awesome-GHA-Snippets" class="headerlink" title="Awesome GHA Snippets"></a><a href="https://github.com/yengoteam/awesome-gha-snippets" target="_blank" rel="noopener">Awesome GHA Snippets</a></h3><p>早年大家對於 CI/CD Framework 的印象都停留在像 Jenkins 那種獨立於 Version Controler Service 的做法，但近年來隨著 GitLab CI/CD 的流行，以及 GitHub Action 的推出，大家也越來越習慣這樣的做法，畢竟如此一來可以少掉整合獨立系統所會遇到的一堆問題，使用起來也直覺很多，而這個 Repository 把常用的 GitHub Action 設定檔整理再一起，讓有需要撰寫的人可以直接拿來複製貼上稍微修改一下就可以使用！感謝這些超級佛心的社群熱血人士</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3 id=&quot;想更快算出費氏數列嗎？來看看矩陣快速冪吧！&quot;&gt;&lt;a href=&quot;#想更快算出費氏數列嗎？來看看矩陣快速冪吧！&quot;
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第 76 期 - 自己挖的洞自己填</title>
    <link href="https://weekly.starbugs.dev/2021/04/13/76-gatsby-comment-github-issue/"/>
    <id>https://weekly.starbugs.dev/2021/04/13/76-gatsby-comment-github-issue/</id>
    <published>2021-04-13T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Gatsby-用-utterances-替-Gatsby-的-Blog-網站申裝-GitHub-Issue-留言功能"><a href="#Gatsby-用-utterances-替-Gatsby-的-Blog-網站申裝-GitHub-Issue-留言功能" class="headerlink" title="Gatsby | 用 utterances 替 Gatsby 的 Blog 網站申裝 GitHub Issue 留言功能"></a><a href="https://medium.com/starbugs/gatsby-%E7%94%A8-utterances-%E6%9B%BF-gatsby-%E7%9A%84-blog-%E7%B6%B2%E7%AB%99%E7%94%B3%E8%A3%9D-github-issue-%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD-e8593318e5a3" target="_blank" rel="noopener">Gatsby | 用 utterances 替 Gatsby 的 Blog 網站申裝 GitHub Issue 留言功能</a></h3><p>Hi！大家好，我是神 Q 超人！忘記是在去年還是前年，我曾經分享過如何使用 Gatsby 打造自己的 Blog（在這裡），可以在上面寫寫文章發佈分享。但我有個想完成的小 feature 被遺失在那篇文章，一直沒有去達成，<strong>那就是所有的文章都少了留言的功能！</strong> 自己挖的洞只好自己填起來，那現在就來分享一下該怎麼在 Gatsby 中加上留言功能吧！ 🙌</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Insert-JavaScript-Into-HTML-Script-Tag-In-JavaScript"><a href="#Insert-JavaScript-Into-HTML-Script-Tag-In-JavaScript" class="headerlink" title="Insert JavaScript Into HTML - Script Tag In JavaScript"></a><a href="https://cloudaffle.com/post/insert-javascript-in-html" target="_blank" rel="noopener">Insert JavaScript Into HTML - Script Tag In JavaScript</a></h3><p>雖然隨著前端 frameworks 的興起，現在的開發者普遍都會使用 webpack 之類的打包工具，再透過打包網站需要用到的套件，比較碰不到一直寫 script 標籤一直爽的狀況，這也讓我們與 script 標籤慢慢變得陌生，而這篇文章介紹了 script 標籤的各個屬性，大家可以瞭解看看！</p><h3 id="JavaScript-Switch-Statement-–-With-JS-Switch-Case-Example-Code"><a href="#JavaScript-Switch-Statement-–-With-JS-Switch-Case-Example-Code" class="headerlink" title="JavaScript Switch Statement – With JS Switch Case Example Code"></a><a href="https://www.freecodecamp.org/news/javascript-switch-statement-with-js-switch-case-example-code/" target="_blank" rel="noopener">JavaScript Switch Statement – With JS Switch Case Example Code</a></h3><p>介紹 switch 的基本用法和使用時需要注意的事情，也在最後比較了 switch 和 if…else 兩者的不同和使用情境！</p><h3 id="5-JavaSript-GitHub-Repositories-for-Interview-Prep-📝"><a href="#5-JavaSript-GitHub-Repositories-for-Interview-Prep-📝" class="headerlink" title="5 JavaSript GitHub Repositories for Interview Prep!📝"></a><a href="https://dev.to/prnvbirajdar/5-javasript-github-repositories-for-interview-prep-306h" target="_blank" rel="noopener">5 JavaSript GitHub Repositories for Interview Prep!📝</a></h3><p>雖然標題是說給準備面試的 5 個 Repositories 啦（看來外國人也習慣面試前抱佛腳 😂），但推薦的每個 Respositories 都涵蓋了相當的質量，除了知名的 You Don’t Know JS 外，其他的 Respositories 也充分的講解了有關 JavaScript 的基礎和底層知識，還有用 JavaScript 來解釋常見的資料結構及演算法，滿山滿谷的大秘寶大家衝啊！ 🔥</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="What’s-new-in-SocketIO-4"><a href="#What’s-new-in-SocketIO-4" class="headerlink" title="What’s new in SocketIO 4?"></a><a href="https://ably.com/blog/whats-new-in-socketio-4" target="_blank" rel="noopener">What’s new in SocketIO 4?</a></h3><p>不久前 socket.io 發佈了新版本 v4，雖然沒有太大的變化，不過還是有一些小小的改進，有在用 socket.io 的朋友們趕快參考他的 migration guide 升級上去吧～</p><h3 id="17LIVE-Next-Gen-Database-選型分析"><a href="#17LIVE-Next-Gen-Database-選型分析" class="headerlink" title="17LIVE Next-Gen Database 選型分析"></a><a href="https://medium.com/17media-tech/17live-next-gen-database-%E9%81%B8%E5%9E%8B%E5%88%86%E6%9E%90-7a72b976cd2b" target="_blank" rel="noopener">17LIVE Next-Gen Database 選型分析</a></h3><p>俗話說「DB 選得好，開發沒煩惱」，要選擇一個資料庫系統除了要評估效能之外，還要仔細考慮開發時的需求（需不需要 join、強一致性等等），今天就一起來看看 17LIVE 在做資料庫選型時的心路歷程吧</p><h3 id="当浏览器切换到其他标签页或者最小化时，你的-js-定时器还准时吗？"><a href="#当浏览器切换到其他标签页或者最小化时，你的-js-定时器还准时吗？" class="headerlink" title="当浏览器切换到其他标签页或者最小化时，你的 js 定时器还准时吗？"></a><a href="https://juejin.cn/post/6899796711401586695" target="_blank" rel="noopener">当浏览器切换到其他标签页或者最小化时，你的 js 定时器还准时吗？</a></h3><p>說真的我從來沒去想過切換瀏覽器分頁時 setInterval 跟 setTimeout 會不會準的問題 XD，感覺頻率應該不能太高否則會影響效能，而這篇文章有實際到各個瀏覽器去測試，文章不長推薦大家都可以讀一讀增廣見聞</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="How-we-use-metamonitoring-Prometheus-servers-to-monitor-all-other-Prometheus-servers-at-Grafana-Labs"><a href="#How-we-use-metamonitoring-Prometheus-servers-to-monitor-all-other-Prometheus-servers-at-Grafana-Labs" class="headerlink" title="How we use metamonitoring Prometheus servers to monitor all other Prometheus servers at Grafana Labs"></a><a href="https://grafana.com/blog/2021/04/08/how-we-use-metamonitoring-prometheus-servers-to-monitor-all-other-prometheus-servers-at-grafana-labs/" target="_blank" rel="noopener">How we use metamonitoring Prometheus servers to monitor all other Prometheus servers at Grafana Labs</a></h3><p>大家都知道要幫線上應用服務設定好監控，這樣一來應用服務出問題的時候就可以馬上知道，不過大家有沒有被人問過一個問題，就是那誰要幫你監控你的監控服務？！(好繞口令XD) 我自己就曾經被客戶問過這個問題XD Grafana Lab 稱這樣的概念叫做 metamonitoring，而這篇文章就是想要解釋他們如何透過少數幾個分散在各處地理區域的 metamonitoring Prometheus 來監控所有其他的 Prometheus！</p><h3 id="Argo-Workflows-3-0-Released"><a href="#Argo-Workflows-3-0-Released" class="headerlink" title="Argo Workflows 3.0 Released!"></a><a href="https://www.cncf.io/blog/2021/04/02/argo-workflows-3-0-released/" target="_blank" rel="noopener">Argo Workflows 3.0 Released!</a></h3><p>Argo 家族中的專案 Argo Workflows 最近發佈了 3.0，底下列出三項重點更新，其他的可以參考官方更詳細的 <a href="https://blog.argoproj.io/argo-workflows-v3-0-4d0b69f15a6e" target="_blank" rel="noopener">Release Note</a></p><ul><li>特別強化 UI 並且讓他更簡易使用 (話說 ArgoCD 的 UI 真的滿厲害的)</li><li>讓 Controller 達到 High-Availability，減少 Down Time 的發生</li><li>在 Artifact 方面，讓使用者可以設定 Namespace 的預設 Repository，而且以後只需要在 Manifests 中設定 Key，非 Key 的部分則會從 Repository 中獲得 (翻成中文好怪XD)</li></ul><h3 id="Fast-Docker"><a href="#Fast-Docker" class="headerlink" title="Fast-Docker"></a><a href="https://github.com/omerbsezer/Fast-Docker" target="_blank" rel="noopener">Fast-Docker</a></h3><p>最後來介紹一個叫做 Fast-Docker 的 GitHub Repository，裡面涵蓋了所有 Docker 的細節 (Dockerfile, Image, Container, Commands, Volumes, Docker-Compose, Networks, Swarm, Stack)，包含了可能的範例和使用情境，感覺很適合新手上路！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第 75 期 - 連假結束，收心上班去。</title>
    <link href="https://weekly.starbugs.dev/2021/04/06/75-vacation-is-over/"/>
    <id>https://weekly.starbugs.dev/2021/04/06/75-vacation-is-over/</id>
    <published>2021-04-06T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Git-Blame-出我的名字？等一等-我是冤枉的-feat-版本控制-Git-簡介"><a href="#Git-Blame-出我的名字？等一等-我是冤枉的-feat-版本控制-Git-簡介" class="headerlink" title="Git Blame 出我的名字？等一等 我是冤枉的 feat. 版本控制 Git 簡介"></a><a href="https://medium.com/starbugs/ec2c5b8fee69" target="_blank" rel="noopener">Git Blame 出我的名字？等一等 我是冤枉的 feat. 版本控制 Git 簡介</a></h3><p>是不是有發生過，明明想要整理一下程式碼風格，卻讓協作者用 <code>git blame</code> 指令看看是誰開發的，發現程式碼上面的名字是你，但其實你將程式碼稍作整理。並非原始的開發者，發生這種情形，請把這篇貼給協作者看，釐清究竟問題的產生，是怎麼造成的。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Mutability-Vs-Immutability-In-JavaScript"><a href="#Mutability-Vs-Immutability-In-JavaScript" class="headerlink" title="Mutability Vs Immutability In JavaScript"></a><a href="https://cloudaffle.com/post/mutability-vs-immutability-javascript" target="_blank" rel="noopener">Mutability Vs Immutability In JavaScript</a></h3><p>從 JavaScript 的 Primitive Types 和 Reference Types 開始，循序漸進說到 Mutability 與 Immutability 的差異，如果沒搞懂這些基本，那在 JavaScript 的執行中可能會寫出許多奇妙的 Side Effect。</p><h3 id="我常用的设计模式"><a href="#我常用的设计模式" class="headerlink" title="我常用的设计模式"></a><a href="https://juejin.cn/post/6947575368282800136#heading-10" target="_blank" rel="noopener">我常用的设计模式</a></h3><p>在學習程式的路上常常會聽到設計模式，但每次學了都不曉得可以用在哪裡，這篇文章介紹了幾個平常常見的設計模式和實作方法，讓各位可以更了解設計模式，別再說設計模式只是物件導向的專利啦！ 😂</p><h3 id="Every-CSS-Background-Property-Illustrated-and-Explained-with-Code-Examples-🎖️"><a href="#Every-CSS-Background-Property-Illustrated-and-Explained-with-Code-Examples-🎖️" class="headerlink" title="Every CSS Background Property Illustrated and Explained with Code Examples 🎖️"></a><a href="https://www.freecodecamp.org/news/learn-css-background-properties/" target="_blank" rel="noopener">Every CSS Background Property Illustrated and Explained with Code Examples 🎖️</a></h3><p>這篇真是關於 CSS 的 Background 屬性一口氣全說完（要很大的一口氣 😂）！</p><h3 id="【無障礙網頁祕技】介面設計大補丸"><a href="#【無障礙網頁祕技】介面設計大補丸" class="headerlink" title="【無障礙網頁祕技】介面設計大補丸"></a><a href="https://medium.com/as-a-product-designer/%E7%84%A1%E9%9A%9C%E7%A4%99%E7%B6%B2%E9%A0%81%E7%A5%95%E6%8A%80-%E4%BB%8B%E9%9D%A2%E8%A8%AD%E8%A8%88%E5%A4%A7%E8%A3%9C%E4%B8%B8-9640dc1fde2b" target="_blank" rel="noopener">【無障礙網頁祕技】介面設計大補丸</a></h3><p>近期無障礙網頁設計越來越多人在討論，因為網頁其實非常不利於身障者操作，即便已經用了各種語義化標籤也沒辦法達到更好的使用者體驗，因此無障礙網頁設計漸漸有了雛型出來，這篇文章解釋了如何完美設計出一個無障礙網頁，有興趣的讀者不妨收藏起來閱讀。</p><h3 id="React-設計模式-—-複合元件-Compound-Component"><a href="#React-設計模式-—-複合元件-Compound-Component" class="headerlink" title="React 設計模式 — 複合元件 ( Compound Component )"></a><a href="https://moojing.medium.com/react-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-%E8%A4%87%E5%90%88%E5%85%83%E4%BB%B6-compound-component-9e7420e55327" target="_blank" rel="noopener">React 設計模式 — 複合元件 ( Compound Component )</a></h3><p>在 React 中可以透過 <code>props.children</code> 的方式來自身的元件變得更彈性，透過 <code>children</code> 的傳遞可以讓元件與元件之間的耦合性降低，這篇文章介紹了如何使用這種方式來創造出耦合性低的複合式元件。</p><h3 id="How-To-Apply-SOLID-Principles-To-Clean-Your-Code-in-React"><a href="#How-To-Apply-SOLID-Principles-To-Clean-Your-Code-in-React" class="headerlink" title="How To Apply SOLID Principles To Clean Your Code in React"></a><a href="https://betterprogramming.pub/how-to-apply-solid-principles-to-clean-your-code-in-react-cdfd5e0a9cea" target="_blank" rel="noopener">How To Apply SOLID Principles To Clean Your Code in React</a></h3><p>SOLID 是一種非常多人使用的設計模式，透過低耦合高內聚的方式來達到完美的 clean code 效果，但要如何在 React 中實現呢？這篇文章就在教讀者如何將 SOLID 設計模式導入 React 中。</p><h2 id="資料分析"><a href="#資料分析" class="headerlink" title="資料分析"></a>資料分析</h2><h3 id="資料前處理必須要做的事-資料清理與型態調整"><a href="#資料前處理必須要做的事-資料清理與型態調整" class="headerlink" title="資料前處理必須要做的事 - 資料清理與型態調整"></a><a href="https://blog.v123582.tw/2020/12/04/%E8%B3%87%E6%96%99%E5%89%8D%E8%99%95%E7%90%86%E5%BF%85%E9%A0%88%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B-%E8%B3%87%E6%96%99%E6%B8%85%E7%90%86%E8%88%87%E5%9E%8B%E6%85%8B%E8%AA%BF%E6%95%B4/" target="_blank" rel="noopener">資料前處理必須要做的事 - 資料清理與型態調整</a></h3><p>資料分析並不只是把資料抓一抓、程式跑一跑就可以得到結果。因為很多網路上爬來、下載到的資料都會有缺失，或是有一些值明顯不合理，這樣的資料會導致模型無法正確運作，所以在真正分析之前都會需要做資料清洗，才能確保資料是可用的</p><h3 id="簡明-Python-Pandas-入門教學"><a href="#簡明-Python-Pandas-入門教學" class="headerlink" title="簡明 Python Pandas 入門教學"></a><a href="https://blog.techbridge.cc/2020/09/21/python-pandas-zen-tutorial/" target="_blank" rel="noopener">簡明 Python Pandas 入門教學</a></h3><p>說到用 Python 做資料分析就不得不提 pandas 這個 library。pandas 提供的 DataFrame 就像 Excel 的試算表一樣，可以讓你很方便的讀取、搜尋、儲存資料，而且因為底層是用 numpy 實作的所以效能也很不錯，是做資料分析必備的工具之一</p><h3 id="資料視覺化-Matplotlib-Seaborn-Plotly"><a href="#資料視覺化-Matplotlib-Seaborn-Plotly" class="headerlink" title="資料視覺化(Matplotlib, Seaborn, Plotly)"></a><a href="https://medium.com/jameslearningnote/%E8%B3%87%E6%96%99%E5%88%86%E6%9E%90-%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92-%E7%AC%AC2-5%E8%AC%9B-%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96-matplotlib-seaborn-plotly-75cd353d6d3f" target="_blank" rel="noopener">資料視覺化(Matplotlib, Seaborn, Plotly)</a></h3><p>做完資料分析之後，最後一步就是把資料視覺化，畢竟大家都喜歡看漂亮的圖。但 Python 用來做視覺化的 lib 就有好幾套，一起來看看他們各有什麼優缺點吧～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="K8s-1-21-下週就要發布嘍"><a href="#K8s-1-21-下週就要發布嘍" class="headerlink" title="K8s 1.21 下週就要發布嘍!"></a><a href="https://sysdig.com/blog/whats-new-kubernetes-1-21/" target="_blank" rel="noopener">K8s 1.21 下週就要發布嘍!</a></h3><p>這版多個幾個新功能，例如…<br>☸ 在 Kubelet 的生態系裡多了 Memory Manager<br>☸ Pod affinity/anti-affinity 新增了 namespaceSelector<br>☸ Scheduler 分配 Pod 時會先查看 Nominated Nodes<br>☸ 當 Deployment 在做 Scale Down 時候可以選擇 Pod 被砍掉的順序<br>☸ 平行化 Job 的 Pod 可以加上 Completion Index<br>☸ Network Policy 可以在單一條 Rule 設定 Port 的範圍</p><p>但同時也有個不幸的消息，從 1.8 開始被引進的 Pod Security Policy 宣布要在被淘汰掉，預計在 1.25 時完全移除掉 T_T</p><h3 id="Infrastructure-as-Code-也可以測試嗎？！"><a href="#Infrastructure-as-Code-也可以測試嗎？！" class="headerlink" title="Infrastructure as Code 也可以測試嗎？！"></a><a href="https://github.com/hashicorp/terraform/pull/27873" target="_blank" rel="noopener">Infrastructure as Code 也可以測試嗎？！</a></h3><p>其實是可以的啦～ 除了行之有年的 <strong>Terratest</strong>,  <strong>Kitchen</strong> 和 <strong>Server Spec</strong> 之類的工具之外，最近在看 <strong>Terraform</strong> 0.15 Change Log 的時候，發現以後會多一個 CLI Command 叫做 Terraform Test，執行他的話就會對 tests 這個資料夾內的 Terraform 程式碼執行 plan &amp; apply，到時候再來試用看看 = =+ 對於不寫 Golang 的人應該是個不錯的選擇</p><h3 id="Kubecost-raises-5-5-million-to-help-teams-monitor-and-reduce-their-Kubernetes-spend"><a href="#Kubecost-raises-5-5-million-to-help-teams-monitor-and-reduce-their-Kubernetes-spend" class="headerlink" title="Kubecost raises $5.5 million to help teams monitor and reduce their Kubernetes spend"></a><a href="http://blog.kubecost.com/blog/announcing-kubecost-first-round/" target="_blank" rel="noopener">Kubecost raises $5.5 million to help teams monitor and reduce their Kubernetes spend</a></h3><p>大家還記得在 2019 年 Kubecost 推出了能夠讓開發者們將 K8s 環境中資源利用與真實花費給視覺化呈現的開源專案嗎？！如今他們已經成長為一個團隊，並且獲得第一輪 550 萬美金的投資，而在這兩年間已經有數以千計的公司使用他們的服務，統計起來大家差不多在 K8s 上面花了超過十億美金，而有了這筆投資之後將可以讓團隊開始提供監控和最佳化 K8s 花費的服務，想要瞭解更多的話，可以到他們的<a href="https://www.kubecost.com/" target="_blank" rel="noopener"><strong>官方網頁</strong></a>參觀</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3 id=&quot;Git-Blame-出我的名字？等一等-我是冤枉的-feat-版本控制-Git-簡介&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第 74 期 - 有個 Bug 卡了和 Ever Given 一樣久，但還好損失的金額沒有一樣多</title>
    <link href="https://weekly.starbugs.dev/2021/03/30/74-I-have-a-difficult-bug-as-same-as-ever-given/"/>
    <id>https://weekly.starbugs.dev/2021/03/30/74-I-have-a-difficult-bug-as-same-as-ever-given/</id>
    <published>2021-03-30T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="來征服資料結構與演算法吧-一直解-Linked-List-一直爽-feat-JavaScript"><a href="#來征服資料結構與演算法吧-一直解-Linked-List-一直爽-feat-JavaScript" class="headerlink" title="來征服資料結構與演算法吧 | 一直解 Linked List 一直爽 feat. JavaScript"></a><a href="https://medium.com/starbugs/%E4%BE%86%E5%BE%81%E6%9C%8D%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E8%88%87%E6%BC%94%E7%AE%97%E6%B3%95%E5%90%A7-%E4%B8%80%E7%9B%B4%E8%A7%A3-linked-list-%E4%B8%80%E7%9B%B4%E7%88%BD-feat-javascript-310e42bf555e" target="_blank" rel="noopener">來征服資料結構與演算法吧 | 一直解 Linked List 一直爽 feat. JavaScript</a></h3><p>Hi！大家好，我是神 Q 超人！在同一個系列中之前有分享有 <a href="https://medium.com/starbugs/%E4%BE%86%E5%BE%81%E6%9C%8D%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E8%88%87%E6%BC%94%E7%AE%97%E6%B3%95%E5%90%A7-%E9%97%9C%E6%96%BC-linked-list-%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9-feat-javascript-ff0ed89c326d" target="_blank" rel="noopener">關於 Linked List 這數據結構的基本用法</a>，也有用兩個在 Leetcode 上的題目讓大家練習操作，而打鐵要趁熱（其實也過了一個月了 😂）！這一篇會把我覺得一些有趣的題目都收錄，搭配上之前提過的基本概念來解析，讓大家可以更理解 Linked List，也順便給自己複習一下。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="函数式编程的那些事"><a href="#函数式编程的那些事" class="headerlink" title="函数式编程的那些事"></a><a href="https://juejin.cn/post/6944872588019499044" target="_blank" rel="noopener">函数式编程的那些事</a></h3><p>使用簡單的例子帶入函式編程的主題，一開始先是比較了函式編程和物件導向的差異，接著帶入在 JavaScript 的函式執行原理，最後又總結了幾個函式編程內的常見方法，文章內知識量相當豐富！</p><h3 id="Icon-systems-for-the-web-an-in-depth-guide"><a href="#Icon-systems-for-the-web-an-in-depth-guide" class="headerlink" title="Icon systems for the web - an in-depth guide"></a><a href="https://codeadrian.hashnode.dev/icon-systems-for-the-web-an-in-depth-guide" target="_blank" rel="noopener">Icon systems for the web - an in-depth guide</a></h3><p>Icon 在網頁上可以說是不可或缺的元素，但你知道 Icon 呈現在網頁上有哪幾種實現方式嗎？比較常見的可能有 SVG 或是 Icon font，那這些不同的方式又有哪些優缺點呢？看看作者怎麼說吧！</p><h3 id="CSS-Position-Property-Explained"><a href="#CSS-Position-Property-Explained" class="headerlink" title="CSS Position Property Explained!"></a><a href="https://dev.to/surajondev/css-position-property-explained-3eg7" target="_blank" rel="noopener">CSS Position Property Explained!</a></h3><p>用簡單的動畫解釋 CSS Position 的每種設置的效果，讓你之後不用再選來選去，還可能搞不清楚它們之間的差別！</p><h3 id="淺談-Tailwind-CSS"><a href="#淺談-Tailwind-CSS" class="headerlink" title="淺談 Tailwind CSS"></a><a href="https://medium.com/@hayato.chang/%E6%B7%BA%E8%AB%87-tailwind-css-4153d86eb661" target="_blank" rel="noopener">淺談 Tailwind CSS</a></h3><p><a href="https://tailwindcss.com/" target="_blank" rel="noopener">Tailwind CSS</a>算是近期蠻熱門 CSS 框架，用了這個框架的好處是可以讓你的元件不用一直去寫 CSS 檔來覆蓋原先的樣式，而且也可以客製化每個元件的表現型態，但缺點就是你的元件會有非常長的 className 就是了XD</p><h3 id="你真的懂-Event-Loop-嗎"><a href="#你真的懂-Event-Loop-嗎" class="headerlink" title="你真的懂 Event Loop 嗎"></a><a href="https://johnnywang1994.github.io/book/articles/js/event-loop.html#%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83-runtime-concept" target="_blank" rel="noopener">你真的懂 Event Loop 嗎</a></h3><p>這篇文章完整的解釋了整個 JavaScript 的非同步運作流程，讓你可以更了解 JavaScript 的非同步世界，很適合給剛接觸 JavaScript 的讀者閱讀。</p><h3 id="The-Ultimate-Guide-To-Writing-Self-Documenting-Code"><a href="#The-Ultimate-Guide-To-Writing-Self-Documenting-Code" class="headerlink" title="The Ultimate Guide To Writing Self-Documenting Code"></a><a href="https://javascript.plainenglish.io/the-ultimate-guide-to-writing-self-documenting-code-998ea9a38bd3" target="_blank" rel="noopener">The Ultimate Guide To Writing Self-Documenting Code</a></h3><p>命名一直是寫程式非常有趣的探討話題，要如何命名才能讓後人可以直接搞懂這個 function 或是這個 variable 的功能真的是一門很大的學問，透過這篇文章可以更幫助讀者進行變數以及函式的命名。</p><h2 id="Node-JS"><a href="#Node-JS" class="headerlink" title="Node.JS"></a>Node.JS</h2><h3 id="Why-I-Prefer-Makefiles-Over-package-json-Scripts"><a href="#Why-I-Prefer-Makefiles-Over-package-json-Scripts" class="headerlink" title="Why I Prefer Makefiles Over package.json Scripts"></a><a href="https://spin.atomicobject.com/2021/03/22/makefiles-vs-package-json-scripts/" target="_blank" rel="noopener">Why I Prefer Makefiles Over package.json Scripts</a></h3><p>雖然 npm 允許開發者在 package.json 裡面寫一些腳本，但如果腳本包含多個指令就要一直用 &amp;&amp; 接下去，若指令之間有相依性那更是難以管理，所以這篇文章的作者認為某些時候可以用 Makefile 來取代 npm script，不管是在開發還是維護上都會比較簡單。</p><h3 id="How-To-Secure-Node-js-Applications-with-a-Content-Security-Policy"><a href="#How-To-Secure-Node-js-Applications-with-a-Content-Security-Policy" class="headerlink" title="How To Secure Node.js Applications with a Content Security Policy"></a><a href="https://www.digitalocean.com/community/tutorials/how-to-secure-node-js-applications-with-a-content-security-policy" target="_blank" rel="noopener">How To Secure Node.js Applications with a Content Security Policy</a></h3><p>Content Security Policy(CSP) 幾乎是現在網站必備的安全性 Header 了，除了可以預防 XSS 之外，還可以避免網站不小心載入一些奇怪的資源（之前很多網站被惡搞都是被載入外部 CSS），對 CSP 還不熟悉的話真的要快來看看了～</p><h3 id="The-4-Types-of-Memory-Leaks-in-Node-js-and-How-to-Avoid-Them"><a href="#The-4-Types-of-Memory-Leaks-in-Node-js-and-How-to-Avoid-Them" class="headerlink" title="The 4 Types of Memory Leaks in Node.js and How to Avoid Them"></a><a href="https://betterprogramming.pub/the-4-types-of-memory-leaks-in-node-js-and-how-to-avoid-them-with-the-help-of-clinic-js-part-1-3f0c0afda268" target="_blank" rel="noopener">The 4 Types of Memory Leaks in Node.js and How to Avoid Them</a></h3><p>這篇文章說明了四種在 Node.JS 中最容易發生 memory leak 的情況，而且也介紹了 Clinic.js 跟 autocannon 兩個工具用來做 loadtest 及分析，如果懷疑自己的寫的程式有 memory leak 但不知道怎麼進行測試，看完這篇應該就有點概念了～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="The-Evolution-of-Distributed-Systems-on-Kubernetes"><a href="#The-Evolution-of-Distributed-Systems-on-Kubernetes" class="headerlink" title="The Evolution of Distributed Systems on Kubernetes"></a><a href="https://www.infoq.com/articles/distributed-systems-kubernetes/" target="_blank" rel="noopener">The Evolution of Distributed Systems on Kubernetes</a></h3><p>在 K8s 上演化的分散式系統，這個標題滿抽象的XD 文章內容則是先點出分散式應用程式應該要具備的必要元素：Lifecycle Management, Advanced Networking, Resource Binding, Stateful Abstraction，接著指出傳統 Monolithic 架構為什麼無法滿足這些需求，並且說明 Cloud-Native 下的 MicroService 架構如何滿足這些需求，所以 K8s 現在才會這麼地火紅，整篇看完有點像是考試在寫申論題一樣XD 但對於很多功能為什麼會存在可以有更深入與全面的了解</p><h3 id="How-to-build-an-elastic-search-cluster-for-production"><a href="#How-to-build-an-elastic-search-cluster-for-production" class="headerlink" title="How to build an elastic search cluster for production?"></a><a href="https://www.cncf.io/blog/2021/03/25/how-to-build-an-elastic-search-cluster-for-production/" target="_blank" rel="noopener">How to build an elastic search cluster for production?</a></h3><p>此篇如何在 Production 環境架設 ElasticSearch 的文章來自於 Padok 的 SRE，一開始先從 ES 的各種不同節點介紹起，解釋為什麼需要 N / 2 + 1 個 Master 節點，接著詳述要如何規劃機器的記憶體，硬碟與 CPU 資源，最後再提到 Sharding 對於效能的影響，有需要在 Production 環境自己架設 ES 的人建議可以參考這篇文章的一些經驗談</p><h3 id="Incident-Metrics-in-SRE-Google-Site-Reliability-Engineering"><a href="#Incident-Metrics-in-SRE-Google-Site-Reliability-Engineering" class="headerlink" title="Incident Metrics in SRE - Google - Site Reliability Engineering"></a><a href="https://sre.google/resources/practices-and-processes/incident-metrics-in-sre/" target="_blank" rel="noopener">Incident Metrics in SRE - Google - Site Reliability Engineering</a></h3><p>大概看完這篇論文在心中冒出的第一個感想是…要多常出事才能寫完這篇論文呢?! 文章點出以往用來衡量處理 Incident 有沒有改善的指標：mean time to recovery (MTTR) 或是 mean time to mitigation (MTTM) 其實是不準確的，所以論文裡使用了 Google 和其他兩間匿名公司的數據，利用 Monte Carlo 來證明使用 MTTR 或是 MTTR 來分析 Production Incident 是不太適合的，並在最後提出一些作者認為比較好的量測方式</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3 id=&quot;來征服資料結構與演算法吧-一直解-Linked-List-一直爽-feat-JavaScript&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第 73 期 - 天氣太冷，好想泡溫泉</title>
    <link href="https://weekly.starbugs.dev/2021/03/23/73-I-need-hot-spring/"/>
    <id>https://weekly.starbugs.dev/2021/03/23/73-I-need-hot-spring/</id>
    <published>2021-03-23T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="身為-Rust-開發者，一定要知道的十個超實用-Macro"><a href="#身為-Rust-開發者，一定要知道的十個超實用-Macro" class="headerlink" title="身為 Rust 開發者，一定要知道的十個超實用 Macro"></a><a href="https://medium.com/starbugs/ten-must-know-rust-macros-f17b9252876e" target="_blank" rel="noopener">身為 Rust 開發者，一定要知道的十個超實用 Macro</a></h3><p>Larry 我寫 Rust 也寫了好一陣子了，真心覺得雖然 Rust 有一些地方不太討喜，但還是有很多不錯的優點，像是變數所有權、Macro、零成本抽象化等等。而今天我就要來跟大家介紹十個超厲害、超實用、不學會後悔的 macro，不管你是剛在學 Rust 還是已經有開發經驗，都很適合看看這篇哦</p><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><h3 id="6-useful-Rust-macros-that-you-might-not-have-seen-before"><a href="#6-useful-Rust-macros-that-you-might-not-have-seen-before" class="headerlink" title="6 useful Rust macros that you might not have seen before"></a><a href="https://blog.usejournal.com/6-useful-rust-macros-that-you-might-not-have-seen-before-59d1386f7bc5" target="_blank" rel="noopener">6 useful Rust macros that you might not have seen before</a></h3><p>因為整個 Rust 生態系的 macro 實在太多，每個人喜歡的都不太一樣。所以除了我推薦的十個之外，這篇的作者也分享了六個 Rust macro，而且跟我講的十個完全沒有交集XD，真的是很有趣。</p><h3 id="Macros-in-Rust-A-tutorial-with-examples"><a href="#Macros-in-Rust-A-tutorial-with-examples" class="headerlink" title="Macros in Rust: A tutorial with examples"></a><a href="https://blog.logrocket.com/macros-in-rust-a-tutorial-with-examples/" target="_blank" rel="noopener">Macros in Rust: A tutorial with examples</a></h3><p>如果覺得別人寫的 macro 用不順手，或是想到一個絕妙的點子想要把它寫成 macro，但卻不知從何下手。那可以來看看這篇，這篇文章用了超多例子教你怎麼寫出各式各樣的 macro。</p><h3 id="Why-is-a-Rust-executable-large"><a href="#Why-is-a-Rust-executable-large" class="headerlink" title="Why is a Rust executable large?"></a><a href="https://lifthrasiir.github.io/rustlog/why-is-a-rust-executable-large.html" target="_blank" rel="noopener">Why is a Rust executable large?</a></h3><p>在這週的專欄中有提到展開 macro 會讓 Rust 的執行檔變肥，但除了 macro 之外其實還有很多其他的原因，如果想知道為什麼 Rust 執行檔會這麼肥，或是想要透過調整編譯器設定降低執行檔大小，都可以參考看看這篇哦～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="一起理解-HTML-當中的-form-data"><a href="#一起理解-HTML-當中的-form-data" class="headerlink" title="一起理解 HTML 當中的 form-data"></a><a href="https://blog.kalan.dev/2021-03-13-html-form-data/?fbclid=IwAR3bUOexknKpIluPAw2wyT32Vzsssy8auXAZwBEqfcvlruEGmwqIDBAwXEQ" target="_blank" rel="noopener">一起理解 HTML 當中的 form-data</a></h3><p><code>multipart/form-data</code> 最大的好處就是可以將不同類型的資料（例如使用者輸入的文字、上傳的檔案或圖片）透過在 <code>&lt;form&gt;</code> 標籤上定義 action 和 method，把整個表單的資料都抓起來一起在一次請求中送出，它是如何做到這件事情的呢？來看看作者如何分析及實作吧！</p><h3 id="HTML-Bold-Text-Tutorial-–-How-to-Use-the-lt-b-gt-Tag"><a href="#HTML-Bold-Text-Tutorial-–-How-to-Use-the-lt-b-gt-Tag" class="headerlink" title="HTML Bold Text Tutorial – How to Use the &lt;b&gt; Tag"></a><a href="https://www.freecodecamp.org/news/html-bold-text-tutorial-how-to-use-the-b-tag/" target="_blank" rel="noopener">HTML Bold Text Tutorial – How to Use the &lt;b&gt; Tag</a></h3><p>你知道 HTML 中的 <code>&lt;b&gt;</code> 和 <code>&lt;strong&gt;</code> 標籤的差異在哪裡嗎？雖然兩者最後顯示在畫面上都是粗體的樣子，不過他們在語義上可是大大的不同，另外在 <a href="https://stackoverflow.com/questions/271743/whats-the-difference-between-b-and-strong-i-and-em" target="_blank" rel="noopener">What’s the difference between &lt;b&gt; and &lt;strong&gt;, &lt;i&gt; and &lt;em&gt;?</a> 此篇問答的最佳解答中也提到，雖然我們「看」起來相同，但是對於像是 <a href="https://freedomscientific.github.io/VFO-standards-support/html.html" target="_blank" rel="noopener">Jaws</a> 此類針對盲人的閱讀器，就會有所差異！也提到了 HTML 從來都不是關於樣式的設定，它是用來描述這段文字的語意如何，而不是在於它該如何顯示。</p><h3 id="Pure-vs-Impure-Functions"><a href="#Pure-vs-Impure-Functions" class="headerlink" title="Pure vs Impure Functions"></a><a href="https://dev.to/sanspanic/pure-vs-impure-functions-50aj" target="_blank" rel="noopener">Pure vs Impure Functions</a></h3><p>在軟體工程的世界中充滿著一堆領域內的用詞，搞到有時候連最簡單的一個名詞都要思考很久，而這篇文章簡單的描述了有關純與不純函式的差別到底在哪，也替大家常在 JavaScript 內時常用的原生方法做分類與比較。</p><h3 id="Microtask-v-s-Marcotask"><a href="#Microtask-v-s-Marcotask" class="headerlink" title="Microtask v.s. Marcotask"></a><a href="https://javascript.info/event-loop" target="_blank" rel="noopener">Microtask v.s. Marcotask</a></h3><p>在 JS 的非同步中，除了大家最熟悉的 event loop 外，其實在 event loop 中還有兩個很重要的觀念，分別是 microtask 以及 marcotask，搞懂這兩個觀念後就可以更深入了解 JS 的非同步了！</p><h3 id="Caching-clash-useSWR-vs-react-query"><a href="#Caching-clash-useSWR-vs-react-query" class="headerlink" title="Caching clash: useSWR() vs. react-query"></a><a href="https://blog.logrocket.com/caching-clash-useswr-vs-react-query/" target="_blank" rel="noopener">Caching clash: useSWR() vs. react-query</a></h3><p>現在的前端開發越來越強調 cache，有了 cache 的幫助不但可以降低 data fetching 的次數同時也可以降低網頁重新渲染的次數，這篇文章提到 React 兩個非常有名用來做 cache 的套件，如果有讀者需要做 cache 機制不妨可以參考這篇文章。</p><h3 id="使用-JSON-LD-處理-SEO"><a href="#使用-JSON-LD-處理-SEO" class="headerlink" title="使用 JSON-LD 處理 SEO"></a><a href="https://z3388638.medium.com/%E4%BD%BF%E7%94%A8-json-ld-%E8%99%95%E7%90%86-seo-%E4%B8%A6%E8%AE%93-google-%E9%87%9D%E5%B0%8D%E4%B8%8D%E5%90%8C%E5%BD%A2%E5%BC%8F%E7%B6%B2%E7%AB%99%E5%81%9A%E7%8D%A8%E7%89%B9%E7%9A%84%E6%90%9C%E5%B0%8B%E7%B5%90%E6%9E%9C%E5%91%88%E7%8F%BE-9c74783c017a" target="_blank" rel="noopener">使用 JSON-LD 處理 SEO</a></h3><p>每次用 google 搜尋新聞的時候都會看到一些比較不一樣的搜尋結果，不再只是單純的 Link 跟 Description 而已，後來研究了一下才知道原來是 <a href="https://json-ld.org/" target="_blank" rel="noopener">JSON-LD</a> 的結構化資料，這篇文章闡述了如何利用 JSON-LD 處理 SEO 問題，有興趣的讀者不妨可以收藏起來日後可以拿來看XD</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="REST-vs-GraphQL-vs-gRPC"><a href="#REST-vs-GraphQL-vs-gRPC" class="headerlink" title="REST vs. GraphQL vs. gRPC"></a><a href="https://www.danhacks.com/software/grpc-rest-graphql.html" target="_blank" rel="noopener">REST vs. GraphQL vs. gRPC</a></h3><p>記得在兩週前有提到一篇不錯的<a href="https://blog.bitsrc.io/apis-vs-websockets-vs-webhooks-what-to-choose-5942b73aeb9b" target="_blank" rel="noopener">文章</a>，再跟大家比較 API, WebSocket 和 WebHook 有什麼不同，以及該如何替自己的服務從中挑選適合的協定；而今天這篇文章則是要跟大家介紹 REST, GraphQL 和 gRPC 各有什麼優缺點，讓使用者未來在替自己的應用服務做選擇時可以當個依據</p><h3 id="SRE-vs-Platform-Engineering"><a href="#SRE-vs-Platform-Engineering" class="headerlink" title="SRE vs Platform Engineering"></a><a href="https://blog.getambassador.io/the-rise-of-cloud-native-engineering-organizations-1a244581bda5" target="_blank" rel="noopener">SRE vs Platform Engineering</a></h3><p>過去這十年來，整個 IT 產業一直在透過一些最佳準則逐漸地往 Cloud Native 的方向在前進，例如: 持續交付，容器化和觀測系統…等，而在此同時組織也開始產生變化，不再以龐大的部門來開發和發布產品，取而代之的是比較小而且相依性低的開發團隊，而且其中還產生了兩種新的角色，分別是 Site Reliability 和 Platform Engineering，而這篇文章就要帶大家來看看這兩種新的角色分別負責什麼樣的任務，彼此間又有何不同？</p><h3 id="Differences-Between-Git-Merge-and-Rebase-—-and-Why-You-Should-Care"><a href="#Differences-Between-Git-Merge-and-Rebase-—-and-Why-You-Should-Care" class="headerlink" title="Differences Between Git Merge and Rebase — and Why You Should Care"></a><a href="https://betterprogramming.pub/differences-between-git-merge-and-rebase-and-why-you-should-care-ae41d96237b6" target="_blank" rel="noopener">Differences Between Git Merge and Rebase — and Why You Should Care</a></h3><p>不管你的專案使用的是哪一種 Git Flow，你一定需要透過 Merge 或是 Rebase 來將 Branch 中變更的程式碼整合再一起，而作者在這篇文章中透過精美的動畫，把 Merge 和 Rebase 操作中產生的變化鉅細彌遺地展現出來，並且同時也把這兩種 Git 操作的不同之處詳細地記錄下來，真的是超級用心的！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3 id=&quot;身為-Rust-開發者，一定要知道的十個超實用-Macro&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第 72 期 - 謎之聲對 Connection 說道：你已經死了！</title>
    <link href="https://weekly.starbugs.dev/2021/03/16/72-connection_reset_by_peer/"/>
    <id>https://weekly.starbugs.dev/2021/03/16/72-connection_reset_by_peer/</id>
    <published>2021-03-16T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="謎之聲對-Connection-說道-你已經死了！"><a href="#謎之聲對-Connection-說道-你已經死了！" class="headerlink" title="謎之聲對 Connection 說道: 你已經死了！"></a><a href="https://medium.com/starbugs/%E8%AC%8E%E4%B9%8B%E8%81%B2%E5%B0%8D-connection-%E8%AA%AA%E9%81%93-%E4%BD%A0%E5%B7%B2%E7%B6%93%E6%AD%BB%E4%BA%86-b53d27c7ecb7" target="_blank" rel="noopener">謎之聲對 Connection 說道: 你已經死了！</a></h3><p>身為一個 Server Side 網路應用提供者，假如來存取的 Client Side 遇到問題該怎麼辦呢？直接跟他說，這一定是你的問題，我這邊都好好的 (大誤)，此文以自己最近遇到的一個 Connection Reset by Peer 議題來當作例子</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="How-well-do-you-know-“this”"><a href="#How-well-do-you-know-“this”" class="headerlink" title="How well do you know “this”?"></a><a href="https://anmshpndy.com/how-well-do-you-know-this?ref=hackernoon.com" target="_blank" rel="noopener">How well do you know “this”?</a></h3><p>在剛開始學習 JavaScript 的時候總是會讓人搞不懂當前的 <code>this</code> 到底是代表什麼，但其實只需要掌握幾種使用情況和關鍵字，<code>this</code> 就再也難不倒你啦！</p><h3 id="Announcing-the-New-TypeScript-Handbook"><a href="#Announcing-the-New-TypeScript-Handbook" class="headerlink" title="Announcing the New TypeScript Handbook"></a><a href="https://devblogs.microsoft.com/typescript/announcing-the-new-typescript-handbook/" target="_blank" rel="noopener">Announcing the New TypeScript Handbook</a></h3><p>微軟從 2018 年開始的新 TypeScript 指南已經超過的 beta 版本，成為學習 TypeScript 的主要資源啦！新的指南不在解釋 JavaScript 的細節，並著重在漸進式教學（避免使用尚未說明的 TypeScript 功能）、同步範例程式碼和 TypeScript 的版本（確保所有的範例程式碼都是最新的），還把一些平常不常使用的語法另外移到手冊的參考篇章裡，避免初學者過早讀到而產生「這到底可以用在哪裡？」等問題而停止學習。</p><h3 id="CSS-Modules-vs-CSS-in-JS-Who-wins"><a href="#CSS-Modules-vs-CSS-in-JS-Who-wins" class="headerlink" title="CSS Modules vs CSS-in-JS. Who wins?"></a><a href="https://dev.to/alexsergey/css-modules-vs-css-in-js-who-wins-3n25" target="_blank" rel="noopener">CSS Modules vs CSS-in-JS. Who wins?</a></h3><p>如果有接觸過 React，那對使用 CSS 的 CSS Modules 和 CSS-in-JS 兩種方法一定不陌生，然後就會開始考慮到底該使用哪一種才是對的？優缺點各是什麼？到底該投入哪個陣營？為什麼已經從三大框架抉擇完後還需要繼續抉擇？等等前端人生上的哲學問題，但是即使他們是那麼不同的兩種方式，但這個抉擇其實一點都不重要，不論你最後選了什麼都沒存在對錯，兩種寫法都還是各有存在的意義。</p><h3 id="jQuery-3-6-0-Released"><a href="#jQuery-3-6-0-Released" class="headerlink" title="jQuery 3.6.0 Released!"></a><a href="https://blog.jquery.com/2021/03/02/jquery-3-6-0-released/" target="_blank" rel="noopener">jQuery 3.6.0 Released!</a></h3><p>看到這則消息算是蠻感動的，想當年第一次學前端用的 Library 就是 JQuery，轉眼間現在的前端都是以各式各樣的 Framework 為主，幾乎沒有人在用 JQuery 了，想要從 JQuery 轉型的專案也都漸漸用 Vue 取代了，沒想到這個骨灰級的 Library 竟然還在更新推出新的 Release，看來我大 JQuery 還可以再戰 10 年XD</p><h3 id="Cheatsheet-XSS-that-works-in-2021"><a href="#Cheatsheet-XSS-that-works-in-2021" class="headerlink" title="Cheatsheet: XSS that works in 2021"></a><a href="https://netsec.expert/posts/xss-in-2021/?fbclid=IwAR1I8TbUtMSgasaxBjRxmRCpuFfEokwIkyHFyq3LweF4X4uDCZMPRmH81JQ#v3" target="_blank" rel="noopener">Cheatsheet: XSS that works in 2021</a></h3><p>現在的前端開發基本上 Framework 已經實作了許多 XSS 攻擊的基本防範，但只要是程式碼就一定會有漏洞，這篇文章直接舉例了在 2021 年中還可以用哪些方式來進行 XSS 攻擊，看完之後真的覺得前端好可怕是時候要準備離開前端領域了(X</p><h3 id="Testing-Library"><a href="#Testing-Library" class="headerlink" title="Testing Library"></a><a href="https://testing-library.com/docs/" target="_blank" rel="noopener">Testing Library</a></h3><p>最近剛好在研究前端的 e2e testing，由於因為自身的懶惰所以幾乎都用 create-react-app 進行基礎架構建設，而 testing library 剛好可以完美的支援 create-react-app 的專案，有了這套完美的工具，0接下來就可以開始好好研究 e2e testing 了。</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="Which-backend-language-to-learn-in-2020"><a href="#Which-backend-language-to-learn-in-2020" class="headerlink" title="Which backend language to learn in 2020?"></a><a href="https://mxx.news/backend-language-to-learn-in-2020-comparing-community-job-market-cloud-support-and-performance" target="_blank" rel="noopener">Which backend language to learn in 2020?</a></h3><p>如果最近想要開始學習後端開發，但不知道該學什麼語言的話，可以看看這篇文章。這篇文比較了 Python、Node.js、Java、Go 等等比較熱門的語言，個別分析他們的社群活躍程度跟工作機會，雖然已經是去年的文章，不過還是值得刊考看看</p><h3 id="Top-Serverless-Computing-Platforms-in-2020"><a href="#Top-Serverless-Computing-Platforms-in-2020" class="headerlink" title="Top Serverless Computing Platforms in 2020"></a><a href="https://blog.bitsrc.io/a-review-of-top-serverless-computing-platforms-in-2020-f8df4c1ff39f" target="_blank" rel="noopener">Top Serverless Computing Platforms in 2020</a></h3><p>因為 Serverless Computing 實在太過方便（雖然貴了點XD），近年來許多公司在開發初期時都會直接選用 Serverless 服務如 AWS Lambda、GCP Cloud Functions進行部署。而這篇文章就是把目前三家最大的 Serverless 服務拿出來比一比，讓你知道該怎麼選</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="初階-DevOps-SRE-工程師是如何煉成的"><a href="#初階-DevOps-SRE-工程師是如何煉成的" class="headerlink" title="初階 DevOps/SRE 工程師是如何煉成的"></a><a href="https://tech-blog.jameshsu.csie.org/post/devops-entry-level-sre-road/" target="_blank" rel="noopener">初階 DevOps/SRE 工程師是如何煉成的</a></h3><p>多後端開發者在後端待久了之後都會想往 DevOps/SRE 領域發展，而這篇文章剛好就講了想成為一個 SRE 工程師大概需要哪些技能，而且也包含了作者自己的心得，很棒的一篇文章！</p><h3 id="ConsoleMe-A-Central-Control-Plane-for-AWS-Permissions-and-Access"><a href="#ConsoleMe-A-Central-Control-Plane-for-AWS-Permissions-and-Access" class="headerlink" title="ConsoleMe: A Central Control Plane for AWS Permissions and Access"></a><a href="https://netflixtechblog.com/consoleme-a-central-control-plane-for-aws-permissions-and-access-fd09afdd60a8" target="_blank" rel="noopener">ConsoleMe: A Central Control Plane for AWS Permissions and Access</a></h3><p>雲端已經進入爆炸時代，現在越來越容易動態地創建基礎架構，組織內的每個 Group 都在建立他們自己的系統和自動化機制，這樣的風氣替提供了許多讓產品創新的機會，但是管理這麼多系統，讓他們確保適當的安全認證和授權已經成為不可被忽視的問題，Netflix 身為 AWS 的重度使用者，當然會遇到這方面的挑戰，因此在 AWS re:Invent 2020 裏 Netflix 開源了兩個用來管理 AWS 多重帳號存取與權限控制的工具，分別是 ConsoleMe 和用來與它互動的 CLI 輔助工具 Weep，有興趣的人可以參考當初的<a href="https://www.youtube.com/watch?v=fXNRYcNyw0c&t=5s" target="_blank" rel="noopener">發表影片</a></p><h3 id="Git-Cheat-Sheet-–-50-Git-Commands-You-Should-Know"><a href="#Git-Cheat-Sheet-–-50-Git-Commands-You-Should-Know" class="headerlink" title="Git Cheat Sheet – 50 Git Commands You Should Know"></a><a href="https://www.freecodecamp.org/news/git-cheat-sheet/" target="_blank" rel="noopener">Git Cheat Sheet – 50 Git Commands You Should Know</a></h3><p>自己 Git 也用好幾年了，但好像每天怎麼用，都還是那幾個而已 (羞)，趕快來看看這篇 50 個一定要知道的 Git Command，複習一下有哪一些 Command 其實是可以學起來，加速自己平日開發的速度！ </p><h3 id="Hassle-free-multi-tenant-K8S-clusters-management-using-Argo-CD"><a href="#Hassle-free-multi-tenant-K8S-clusters-management-using-Argo-CD" class="headerlink" title="Hassle-free multi-tenant K8S clusters management using Argo CD"></a><a href="https://blog.argoproj.io/hassle-free-multi-tenant-k8s-clusters-management-using-argo-cd-7dd35619046a" target="_blank" rel="noopener">Hassle-free multi-tenant K8S clusters management using Argo CD</a></h3><p>Argo CD 算是目前在 K8s GitOps Flow 最被廣泛使用的工具了，因為其提供了方便的 UI 和 CLI 介面，使用 CRD 深入地整合進到 K8s 中，不過同一座 K8s 叢集當中，除了有開發者負責需要將應用服務部署到 K8s 中之外，還有其他的維運人員也需要一起使用或是管理 K8s 叢集，而 Argo CD 同樣也可以幫助到他們的日常工作，這篇文章就是想要跟大家說明如何透過 Argo CD 來在多個 K8s 叢集的基礎之下，建立一個 Multi-Tenant 的平台</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3 id=&quot;謎之聲對-Connection-說道-你已經死了！&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第 71 期 - 天竺鼠車車開車囉</title>
    <link href="https://weekly.starbugs.dev/2021/03/09/71-pui-pui/"/>
    <id>https://weekly.starbugs.dev/2021/03/09/71-pui-pui/</id>
    <published>2021-03-09T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="電腦科學入門-Crash-Course"><a href="#電腦科學入門-Crash-Course" class="headerlink" title="電腦科學入門 Crash Course"></a><a href="https://medium.com/starbugs/%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8%E5%85%A5%E9%96%80-crash-course-cba334ddfb0c" target="_blank" rel="noopener">電腦科學入門 Crash Course</a></h3><p>今天來介紹一下 Crash Course 。Crash Course 是 Youtube 一億美元原創計畫的所創造的頻道之一 。由葛林兄弟所創立。內容以人文、科學系列向外延伸。截至今日已經有 1200萬的訂閱者。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="也許您的網站其實並不需要使用圖片輪播（Slider）功能，分析-8-個明顯的缺點"><a href="#也許您的網站其實並不需要使用圖片輪播（Slider）功能，分析-8-個明顯的缺點" class="headerlink" title="也許您的網站其實並不需要使用圖片輪播（Slider）功能，分析 8 個明顯的缺點"></a><a href="https://wp-valley.com/opinion-on-sliders" target="_blank" rel="noopener">也許您的網站其實並不需要使用圖片輪播（Slider）功能，分析 8 個明顯的缺點</a></h3><p>本篇文章從效能、SEO、需求或 RWD 版面等…各個角度來看圖片輪播在中小型網站使用的看法，並且用了許多目前大家隨處可看見的圖片輪播網站當做例子，分成幾個主題解釋它們為何能夠使用，以及你為什麼可能不需要。</p><h3 id="CSS-Grid-Cheat-Sheet-Illustrated-in-2021🎖️"><a href="#CSS-Grid-Cheat-Sheet-Illustrated-in-2021🎖️" class="headerlink" title="CSS Grid Cheat Sheet Illustrated in 2021🎖️"></a><a href="https://dev.to/joyshaheb/css-grid-cheat-sheet-illustrated-in-2021-1a3" target="_blank" rel="noopener">CSS Grid Cheat Sheet Illustrated in 2021🎖️</a></h3><p>如果你看了 MDN 或其他教學的文件卻始終搞不太清楚如何使用 CSS 中的 Grid，那我猜應該是少了可愛的獨角獸，快來給這清楚明瞭又可愛的獨角獸一次機會！ 😂</p><h3 id="JS中的EventLoop、宏任务、微任务"><a href="#JS中的EventLoop、宏任务、微任务" class="headerlink" title="JS中的EventLoop、宏任务、微任务"></a><a href="https://juejin.cn/post/6936630572936593422" target="_blank" rel="noopener">JS中的EventLoop、宏任务、微任务</a></h3><p>當你在面試前端工程師時，對方起手先列出了一堆 <code>setTimeout</code>、<code>Promise</code>、<code>async</code>、<code>await</code> 要問你執行順序時，大概有 870％ 都是想考有關 Event loop 的概念，為了不要和當初被電到不行的我一樣 😂，趁這機會一次搞懂吧！</p><h3 id="innerText、innerHTML、textContent、outerHTML-的差別"><a href="#innerText、innerHTML、textContent、outerHTML-的差別" class="headerlink" title="innerText、innerHTML、textContent、outerHTML 的差別"></a><a href="https://orandigo.github.io/blog/2020/03/22/20200322-innerText-innerHTML-textContent-outerHTML/" target="_blank" rel="noopener">innerText、innerHTML、textContent、outerHTML 的差別</a></h3><p>最近在研究以前 DOM 的 API 時，以往我只會用 <code>innerHTML</code> 但後來發現這個 method 其實存在了蠻多資安風險，後來有了 sanitise 的觀念後知道其實還有 <code>textContent</code> 的做法可以讓整個 injection 更安全一點，這篇文章講述了幾個最原始用來 inject html 的方法。</p><h3 id="Linked-lists-in-the-wild-React-Hooks"><a href="#Linked-lists-in-the-wild-React-Hooks" class="headerlink" title="Linked lists in the wild: React Hooks"></a><a href="https://dev.to/wuz/linked-lists-in-the-wild-react-hooks-3ep8" target="_blank" rel="noopener">Linked lists in the wild: React Hooks</a></h3><p>以往真的覺得演算法在前端開發完全沒有太直接的利益關係，畢竟前端要求的很多都是對於 DOM 的操作要熟悉，後來才知道 React Hooks 其實內部是用 linked-list 實作的。</p><h3 id="Before-You-memo"><a href="#Before-You-memo" class="headerlink" title="Before You memo()"></a><a href="https://overreacted.io/before-you-memo/" target="_blank" rel="noopener">Before You memo()</a></h3><p>在 React 中有一句話非常經典：優化必須要花很多成本，有時候自己以為的優化其實只會拖垮整個效能，像在 class component 時期有一個 <code>PureComponent</code> 以及現在 Hook 的 <code>memo()</code> 都是讓 component 優化的方法，但在使用這些方法之前不妨先看一下此 component 是否真的適用這些優化方法。</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="Remove-source-path-from-Go’s-panic-stack-trace"><a href="#Remove-source-path-from-Go’s-panic-stack-trace" class="headerlink" title="Remove source path from Go’s panic stack trace"></a><a href="https://johnpili.com/remove-source-path-from-gos-panic-stack-trace/" target="_blank" rel="noopener">Remove source path from Go’s panic stack trace</a></h3><p>這篇文章很短，主要講說平常在 Go 裡面呼叫 panic 時，程式會把整個完整的路徑輸出出來，但有時路徑太長反而會不容易看，而這時就可以在編譯時加個 <code>-trimpath</code>，輸出的路徑就會簡潔很多～</p><h3 id="Life-of-an-HTTP-request-in-a-Go-server"><a href="#Life-of-an-HTTP-request-in-a-Go-server" class="headerlink" title="Life of an HTTP request in a Go server"></a><a href="https://eli.thegreenplace.net/2021/life-of-an-http-request-in-a-go-server" target="_blank" rel="noopener">Life of an HTTP request in a Go server</a></h3><p>平常在用 Go 架 HTTP server 時，很少人會仔細去研究一個請求從進來到出去到底經過了哪些關卡。不過現在有人幫你研究完寫成文章了，雖然文有點長但寫得滿好的，看完真的可以更了解 Go 內建的 http package 是怎麼處理請求</p><h3 id="Go-internals-invariance-and-memory-layout-of-slices"><a href="#Go-internals-invariance-and-memory-layout-of-slices" class="headerlink" title="Go internals: invariance and memory layout of slices"></a><a href="https://eli.thegreenplace.net/2021/go-internals-invariance-and-memory-layout-of-slices/" target="_blank" rel="noopener">Go internals: invariance and memory layout of slices</a></h3><p>這篇文章跟第二篇是同一個作者，不過這篇更硬一點，主要是在介紹 Go slice 在記憶體內長什麼樣子，建議至少有寫過一些 Go 再來看，不然可能會完全看不懂他在分析什麼XD</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Testing-HashiCorp-Terraform"><a href="#Testing-HashiCorp-Terraform" class="headerlink" title="Testing HashiCorp Terraform"></a><a href="https://www.hashicorp.com/blog/testing-hashicorp-terraform" target="_blank" rel="noopener">Testing HashiCorp Terraform</a></h3><p>雖然在執行 <code>terraform apply</code> 之前可以透過 <code>terraform validate</code> 和 <code>terraform plan</code> 稍微檢查一下，不過這樣就夠了嗎？大家都希望把變更在生產環境執行之前可以快速先發現問題，讓 <code>terraform apply</code> 的執行更有信心，所以這篇文章想要跟大家談談如何達成這個目標，一路從 Unit Test 介紹起，接著談到 Contract Tests, Integration Tests, End-to-End Tests…等</p><h3 id="Spectral-raises-6-2M-for-its-DevSecOps-service"><a href="#Spectral-raises-6-2M-for-its-DevSecOps-service" class="headerlink" title="Spectral raises $6.2M for its DevSecOps service"></a><a href="https://techcrunch.com/2021/02/17/spectral-raises-6-2m-for-its-devsecops-service/" target="_blank" rel="noopener">Spectral raises $6.2M for its DevSecOps service</a></h3><p>DevSecOps 的議題在最近兩三年還滿熱門的，Spectral 最近除了為大家帶來他的 Code Scanner 服務之外，也宣布獲得 620 萬美金的投資，這間新創公司希望可以從程式碼和日誌就發現潛藏的資安漏洞，例如找出寫在程式碼中的 API Key 和其他機敏資訊，除此之外，也可以找出有資安問題的錯誤組態設定…等，對這些議題有興趣的人，可以看看他們是如何實作這些功能的</p><h3 id="Introduction-to-k3d-Run-K3s-in-Docker"><a href="#Introduction-to-k3d-Run-K3s-in-Docker" class="headerlink" title="Introduction to k3d: Run K3s in Docker"></a><a href="https://www.suse.com/c/introduction-k3d-run-k3s-docker-src/" target="_blank" rel="noopener">Introduction to k3d: Run K3s in Docker</a></h3><p>因為 K8s 的盛行，越來越多 Kxx 的工具如雨後春筍般冒出，這次的工具叫做 K8d，他讓使用者可以利用最輕盈的 K8s Distribution - K3s (單一個 Binary 檔案，而且只需要 512 MB 的 Ram) 在有安裝 Docker 的電腦就將 K8s Cluster 給運行起來；而此工具最主要的目的是希望讓 K8s 的本地端開發可以又輕鬆又節省資源！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3 id=&quot;電腦科學入門-Crash-Course&quot;&gt;&lt;a href=&quot;#電腦科學入門-Crash-Course&quot;
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第 70 期 - 天上的 Bug 笑地上的工程師</title>
    <link href="https://weekly.starbugs.dev/2021/03/02/70-the-bugs-in-the-sky-smile-at-developers-on-the-ground/"/>
    <id>https://weekly.starbugs.dev/2021/03/02/70-the-bugs-in-the-sky-smile-at-developers-on-the-ground/</id>
    <published>2021-03-02T00:00:00.000Z</published>
    <updated>2021-07-12T14:03:17.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="來征服資料結構與演算法吧-關於-Linked-List-的基本介紹-feat-JavaScript"><a href="#來征服資料結構與演算法吧-關於-Linked-List-的基本介紹-feat-JavaScript" class="headerlink" title="來征服資料結構與演算法吧 | 關於 Linked List 的基本介紹 feat. JavaScript"></a><a href="https://medium.com/starbugs/%E4%BE%86%E5%BE%81%E6%9C%8D%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E8%88%87%E6%BC%94%E7%AE%97%E6%B3%95%E5%90%A7-%E9%97%9C%E6%96%BC-linked-list-%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9-feat-javascript-ff0ed89c326d" target="_blank" rel="noopener">來征服資料結構與演算法吧 | 關於 Linked List 的基本介紹 feat. JavaScript</a></h3><p>不曉得大家會不會和我一樣，每一次打開 LeetCode 看到什麼 Linked List 或是 Tree 的題目，腦袋就直接當機，呈現失智狀態。雖然要完全搞懂得花一番功夫，但學會後絕對是想忘也忘不掉啦（畢竟是曾經那麼苦惱的記憶 😂）！本篇文章就來分享關於 Linked List 的學習心得和一些相關題目的解析方式。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Maximally-optimizing-image-loading-for-the-web-in-2021"><a href="#Maximally-optimizing-image-loading-for-the-web-in-2021" class="headerlink" title="Maximally optimizing image loading for the web in 2021"></a><a href="https://www.industrialempathy.com/posts/image-optimizations/" target="_blank" rel="noopener">Maximally optimizing image loading for the web in 2021</a></h3><p>如果你正愁著該如何優化圖片載入的速度，或是不想要破壞使用者的操作體驗，那一定不能錯過這一篇！文章裡提到了 8 種載入圖片的方式，來看看哪種最適合應用到你的網頁上！</p><h3 id="A-beginner’s-guide-to-applying-color-in-UI-design"><a href="#A-beginner’s-guide-to-applying-color-in-UI-design" class="headerlink" title="A beginner’s guide to applying color in UI design"></a><a href="https://dev.to/georgedoescode/a-beginner-s-guide-to-applying-color-in-ui-design-3904" target="_blank" rel="noopener">A beginner’s guide to applying color in UI design</a></h3><p>這是一篇非常棒的文章！作者用一個簡單的 Product card，一步步解釋該如何配色可以讓整個畫面更協調，整個過程包含了確定主題、如何利用陰影，以及尋找一個單一的原色到應用！雖然一步一步往下看會覺得 Product card 沒什麼變化，但是當你看到最後，再往上滑到修改前的樣子，就會有「哇！那麼神奇！」的感覺！</p><h3 id="Add-A-Little-Whimsy-to-Your-Forms"><a href="#Add-A-Little-Whimsy-to-Your-Forms" class="headerlink" title="Add A Little Whimsy to Your Forms"></a><a href="https://dev.to/jh3y/add-a-little-whimsy-to-your-forms-2c1f" target="_blank" rel="noopener">Add A Little Whimsy to Your Forms</a></h3><p>這篇不算是什麼技術分享的文章，但是卻能給人滿滿的歡樂！有時候我們在做作品時總是一成不變的在切版、寫 JS 串 API 或是前端操作邏輯，那些看起來很有趣的作品早就已經是像公式一樣的存在了，但也許今天你只要小小的加入一些有趣的元素，例如在填寫完表單，並按下送出按鈕時噴射出七彩的紙屑怎麼樣？我們在做的東西，應該是更有趣的才對，對吧？😊</p><h3 id="Promise-中的三兄弟-all-race-allSettled"><a href="#Promise-中的三兄弟-all-race-allSettled" class="headerlink" title="Promise 中的三兄弟 .all(), .race(), .allSettled()"></a><a href="https://juejin.cn/post/6844903912592375821" target="_blank" rel="noopener">Promise 中的三兄弟 .all(), .race(), .allSettled()</a></h3><p>為了要在 Promise 陣列中可以順利回傳資料回來，以前都會用 <code>Promise.all</code> 但這個 method 有個問題就是要全部的 Promise 都 resolved 才會回傳值，可是現在很多網站如果都用這種方式來取得資料的話可能會讓使用者體驗下降，因此後來官方又推出了一個 <code>Promise.allSettled</code>，這個方法是會把 Promise array 中所有的 Promise 都執行完畢，即便有 Promise 被 rejected 也會回傳，這樣就可以針對一些錯誤的資料做例外處理了非常方便。</p><h3 id="Moment-Timezone"><a href="#Moment-Timezone" class="headerlink" title="Moment Timezone"></a><a href="https://momentjs.com/timezone/docs/" target="_blank" rel="noopener">Moment Timezone</a></h3><p>有時候在對接一些 API 時會需要傳入跟時間相關的 query string，假如產品是架設在雲端機器上那就一定會有時差問題，這時候就必須要考慮 timezone 了，而大家最常用的時間套件 <a href="https://momentjs.com/" target="_blank" rel="noopener">moment.js</a> 也有針對 timezone 做 plugin，這樣就可以無痛使用 moment.js 來處理 server time 跟 client time 的時差問題了。</p><h3 id="React-app中常見的跨站攻擊漏洞"><a href="#React-app中常見的跨站攻擊漏洞" class="headerlink" title="React app中常見的跨站攻擊漏洞"></a><a href="https://medium.com/frochu/%E5%9C%A8react-app%E4%B8%AD%E6%9C%80%E7%82%BA%E5%B8%B8%E8%A6%8B%E7%9A%84%E8%B7%A8%E7%AB%99%E6%94%BB%E6%93%8A%E6%BC%8F%E6%B4%9E-2fdd95f08466" target="_blank" rel="noopener">React app中常見的跨站攻擊漏洞</a></h3><p>以前我一直以為 React 已經完美的防範 XSS 攻擊了，直到我看到這篇文章才知道原來如果今天用的是 Isomorphic Rendering，就有可能會讓黑客有機可趁了，這時候就需要用到 <a href="https://github.com/apostrophecms/sanitize-html" target="_blank" rel="noopener">sanitize-html</a> 的方式來解析 html </p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="用-10-分鐘了解-Go-語言-context-package-使用場景及介紹"><a href="#用-10-分鐘了解-Go-語言-context-package-使用場景及介紹" class="headerlink" title="用 10 分鐘了解 Go 語言 context package 使用場景及介紹"></a><a href="https://blog.wu-boy.com/2020/05/understant-golang-context-in-10-minutes/" target="_blank" rel="noopener">用 10 分鐘了解 Go 語言 context package 使用場景及介紹</a></h3><p>很多人（包括我）在初學 Go 時都會不知道 context 是做什麼用的，碰到參數需要傳 context 的情況就直接用 ‘context.Background()` 矇混過去XD，而這篇文章解釋了為什麼會需要 context，看完後除了會用 context 之外，也不會再覺得官方為什麼要把這樣種奇怪的寫法納入標準</p><h3 id="Go-is-not-an-easy-language"><a href="#Go-is-not-an-easy-language" class="headerlink" title="Go is not an easy language"></a><a href="https://www.arp242.net/go-easy.html" target="_blank" rel="noopener">Go is not an easy language</a></h3><p>雖然 Go 被認為是個很簡單、易學的程式語言，但這篇文章認為那僅有在實現簡單的功能時是這樣，如果想要寫出高效能的程式，那很多時候程式碼就沒辦法那麼直觀，甚至會變得有點複雜</p><h3 id="50-Shades-of-Go-Traps-Gotchas-and-Common-Mistakes"><a href="#50-Shades-of-Go-Traps-Gotchas-and-Common-Mistakes" class="headerlink" title="50 Shades of Go: Traps, Gotchas, and Common Mistakes"></a><a href="http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/" target="_blank" rel="noopener">50 Shades of Go: Traps, Gotchas, and Common Mistakes</a></h3><p>這篇文章列出了 50 個在寫 Go 時最常犯的小錯誤，看了一下真的有一些我自己也犯過的錯XD，建議大家都可以看看（不想看英文的話文章最上方有中文翻譯的連結）</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="APIs-vs-WebSockets-vs-WebHooks-What-to-Choose"><a href="#APIs-vs-WebSockets-vs-WebHooks-What-to-Choose" class="headerlink" title="APIs vs. WebSockets vs. WebHooks: What to Choose?"></a><a href="https://blog.bitsrc.io/apis-vs-websockets-vs-webhooks-what-to-choose-5942b73aeb9b" target="_blank" rel="noopener">APIs vs. WebSockets vs. WebHooks: What to Choose?</a></h3><p>當 Client 和 Server 要進行溝通時，可以使用 API, WebSocket 或是 WebHook 這三種的其中一種，雖然這三種都可以達成溝通的目的，但其實彼此之間有很大的不同點，所以作者透過這篇文章來討論這三種方法是如何運行，以及如何根據使用情境來選擇三者之中最合適的方法</p><h3 id="50-Reasons-Kubernetes-Sucks"><a href="#50-Reasons-Kubernetes-Sucks" class="headerlink" title="50 Reasons Kubernetes Sucks"></a><a href="https://www.teamblind.com/post/50-Reasons-Kubernetes-Sucks-S77O8VZ8" target="_blank" rel="noopener">50 Reasons Kubernetes Sucks</a></h3><p>有人覺得其實 K8s 根本就不是一個好的平台，但卻沒有人敢站出來說，所以作者條列了 50 個為什麼他覺得 K8s 很爛的原因，例如：API 總是進行不相容的大改動，Service Meshes 根本是把垃圾構築在一堆垃圾上面，有種你用兩年前的版本來更新看看…等，老實說自己看完覺得有些不無道理</p><h3 id="Kubecost"><a href="#Kubecost" class="headerlink" title="Kubecost"></a><a href="https://github.com/kubecost/cost-model" target="_blank" rel="noopener">Kubecost</a></h3><p>本週最後不免俗要來介紹個人看到滿有趣的開源工具叫做 Kubecost，它提供的模型可以讓使用 Kubernetes 的團隊了解目前 K8s 資源使用情況，而且他還可以直接把這些資源所反映的真實成本根據不同的應用服務，團隊或是部門…等給計算出來，很簡單的就可以知道目前 K8s 燒錢的狀況XD</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;本週專欄&quot;&gt;&lt;a href=&quot;#本週專欄&quot; class=&quot;headerlink&quot; title=&quot;本週專欄&quot;&gt;&lt;/a&gt;本週專欄&lt;/h2&gt;&lt;h3 id=&quot;來征服資料結構與演算法吧-關於-Linked-List-的基本介紹-feat-JavaScript&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
