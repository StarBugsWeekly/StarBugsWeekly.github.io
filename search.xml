<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第 89 期 - 微解封後，也要繼續手手勤洗洗，病毒遠離你喔！</title>
      <link href="/2021/07/13/89-keep-virus-away-from-you/"/>
      <url>/2021/07/13/89-keep-virus-away-from-you/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="淺談-Shamir-私鑰分割演算法：切一切再拼回來"><a href="#淺談-Shamir-私鑰分割演算法：切一切再拼回來" class="headerlink" title="淺談 Shamir 私鑰分割演算法：切一切再拼回來"></a><a href="https://medium.com/starbugs/introduction-to-shamirs-secret-sharing-adf713e6430d" target="_blank" rel="noopener">淺談 Shamir 私鑰分割演算法：切一切再拼回來</a></h3><p>大家好我是 Larry，這週的專欄要跟大家分享一個很有趣的密碼學演算法 - Shamir’s Secret Sharing，他可以用來把 secret 分割成 n 份，並且你只需要其中 k 份就可以重組回來，這代表你可以把真的很重要的 secret 分散存在許多不同的地方，也就可以大幅降低被洩露出去的風險。重點是這個演算法只需要國中的數學，所以還不趕快進來看看嗎～</p><h2 id="資訊安全"><a href="#資訊安全" class="headerlink" title="資訊安全"></a>資訊安全</h2><h3 id="利用-Cookie-特性進行的-DoS-攻擊：Cookie-炸彈"><a href="#利用-Cookie-特性進行的-DoS-攻擊：Cookie-炸彈" class="headerlink" title="利用 Cookie 特性進行的 DoS 攻擊：Cookie 炸彈"></a><a href="https://blog.huli.tw/2021/07/10/cookie-bomb/" target="_blank" rel="noopener">利用 Cookie 特性進行的 DoS 攻擊：Cookie 炸彈</a></h3><p>雖然知道大部分伺服器會因為 payload 太大而拒絕請求，但想不到這個特性可以搭配 cookie bomb 用來進行 DOS 攻擊，只能說資安這領域真是太有趣了～</p><h3 id="為什麼忘記密碼時只能重設，不把舊密碼告訴我？"><a href="#為什麼忘記密碼時只能重設，不把舊密碼告訴我？" class="headerlink" title="為什麼忘記密碼時只能重設，不把舊密碼告訴我？"></a><a href="https://link.medium.com/gUjnv4W0Ohb" target="_blank" rel="noopener">為什麼忘記密碼時只能重設，不把舊密碼告訴我？</a></h3><p>對啊為什麼不把舊密碼告訴我，三不五時在那邊重設不是很麻煩嗎？其實是因為網站根本不會儲存你的原始密碼，那不存密碼有什麼好處呢？看完這篇文章就會知道啦</p><h3 id="一次搞懂密碼學中的三兄弟-—-Encode、Encrypt-跟-Hash"><a href="#一次搞懂密碼學中的三兄弟-—-Encode、Encrypt-跟-Hash" class="headerlink" title="一次搞懂密碼學中的三兄弟 — Encode、Encrypt 跟 Hash"></a><a href="https://medium.com/starbugs/what-are-encoding-encrypt-and-hashing-4b03d40e7b0c" target="_blank" rel="noopener">一次搞懂密碼學中的三兄弟 — Encode、Encrypt 跟 Hash</a></h3><p>想要學習密碼學，一定要先把編碼、加密跟雜湊三個東西搞清楚，所以在這邊我（自肥）推薦這篇自己的文章，把這三個概念搞懂之後再去看其他更深入的文章才不會越看越亂</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="JavaScript-Template-Literals-amp-Tag-Functions-for-Beginners"><a href="#JavaScript-Template-Literals-amp-Tag-Functions-for-Beginners" class="headerlink" title="JavaScript: Template Literals &amp; Tag Functions for Beginners"></a><a href="https://codeburst.io/javascript-template-literals-tag-functions-for-beginners-758a041160e1" target="_blank" rel="noopener">JavaScript: Template Literals &amp; Tag Functions for Beginners</a></h3><p>這個真的太有趣了，最近在看一些奇怪的 JavaScript 寫法時發現了這個 function call 的寫法，但其實也是自己見識太淺薄才不知道原來可以這樣寫，簡單來說就是利用 template literals 的方式進行 function call，讀者不妨也可以試著將自己的程式碼改寫成這樣，就能完美的達到 ninja code 的精神了(X</p><h3 id="jsfuck"><a href="#jsfuck" class="headerlink" title="jsfuck"></a><a href="https://github.com/aemkei/jsfuck?fbclid=IwAR1ovUOUGH2dZOBoUwLQKPlsXoyKrGwV7V3_mCc_GZaWnryxLL90J4URo6g#readme" target="_blank" rel="noopener">jsfuck</a></h3><p>我真的是太晚才知道這個網站了XD 沒想到 JavaScript 有這麼多奇奇怪怪的技巧可以達到一樣的事情，這資訊量大到讓我很難一時之間可以接受，有興趣的讀者不妨來看一下一些有趣的寫法，看完之後我只能說我自己實在是太不懂 JavaScript 了XD</p><h3 id="10-GitHub-repositories-to-become-a-better-JavaScript-Developer"><a href="#10-GitHub-repositories-to-become-a-better-JavaScript-Developer" class="headerlink" title="10 GitHub repositories to become a better JavaScript Developer"></a><a href="https://dev.to/pb/10-github-repositories-which-will-help-you-to-become-a-better-javascript-developer-5om" target="_blank" rel="noopener">10 GitHub repositories to become a better JavaScript Developer</a></h3><p>想要成為一個更進步的 JavaScript 開發者，有很多小細節是必須要學會的，這篇文章提供了 10 種可以幫助自己在 JavaScript 的開發上更進步的文件，想要更了解一些大神們的寫法不妨可以把這些 repo 都收藏起來了。</p><h3 id="How-to-Sort-Array-Elements-An-Essential-Guide"><a href="#How-to-Sort-Array-Elements-An-Essential-Guide" class="headerlink" title="How to Sort Array Elements: An Essential Guide"></a><a href="https://hackernoon.com/how-to-sort-array-elements-an-essential-guide-s41w370r" target="_blank" rel="noopener">How to Sort Array Elements: An Essential Guide</a></h3><p>排序是指對一堆資料進行有意義的排列過程，在文章中就是介紹 JavaScript 對 Array 排序的各種方法，包含以常見的數字（0-9）、字母（A-Z 的字典排序）等等排序，也展示了實務上最常拿到的裝著 Object 的 Array 做排序的例子。</p><h3 id="Is-everything-in-JavaScript-an-Object"><a href="#Is-everything-in-JavaScript-an-Object" class="headerlink" title="Is everything in JavaScript an Object?"></a><a href="https://dev.to/mayankav/is-everything-in-javascript-an-object-1alg" target="_blank" rel="noopener">Is everything in JavaScript an Object?</a></h3><p>「在 JavaScript 裡的一切都是物件嗎？」，作者先是直接宣告一個 String，再用 new String 建立另外一個 String Object，並解釋兩者之間的差別，這對於為什麼一般的 String 可以像 Object 一樣使用 Prototype 上的功能，但當你直接對它的屬性賦值時卻又沒有任何效用。</p><h3 id="【学不动了就回家喂猪】尤大大新活-petite-vue-尝鲜"><a href="#【学不动了就回家喂猪】尤大大新活-petite-vue-尝鲜" class="headerlink" title="【学不动了就回家喂猪】尤大大新活 petite-vue 尝鲜"></a><a href="https://juejin.cn/post/6983328034443132935" target="_blank" rel="noopener">【学不动了就回家喂猪】尤大大新活 petite-vue 尝鲜</a></h3><p><a href="https://github.com/vuejs/petite-vue" target="_blank" rel="noopener">petite-vue</a>，提供了和 Vue 相似的開發思維和語法，且 petite-vue 不只是更輕量化的 Vue，在 <a href="https://github.com/vuejs/petite-vue#comparison-with-standard-vue" target="_blank" rel="noopener">petite-vue 的 README.md</a> 中，作者還特別強調 petite-vue 是在使用像 <a href="https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA" target="_blank" rel="noopener">Progressive Enhancement</a> 特定情況時的最佳實踐！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="New-Google-Scorecards-Tool-Scans-Open-Source-Software-for-More-Security-Risks"><a href="#New-Google-Scorecards-Tool-Scans-Open-Source-Software-for-More-Security-Risks" class="headerlink" title="New Google Scorecards Tool Scans Open-Source Software for More Security Risks"></a><a href="https://thehackernews.com/2021/07/new-google-scorecards-tool-scans-open.html" target="_blank" rel="noopener">New Google Scorecards Tool Scans Open-Source Software for More Security Risks</a></h3><p>Google 推出了新版的 Scorecards，他是一個可以針對開源軟體專案自動產生出風險分數的自動安全工具，其實不僅在編譯階段，甚至在 Dockerfiles 或是 CI/CD 的工作流程中，將任何擁有相依套件地方的版本固定都是很有用的做法，Scorecards 可以針對這些固定版的的相依套件去做檢查，用以避免類似於最近 CodeCov 的惡意相依性攻擊</p><p>Google 同時指出從大量被分析的開源專案中可以發現到，其中很多專案並沒有持續進行模糊測試，而且也沒有定義提報安全漏洞的規範，甚至沒有去固定相依套件的版本，所以除了這些關鍵的開源專案需要透過改善來加強安全性之外，大家也必須要提高對於資安風險的危機意識</p><h3 id="Localstack-with-Terraform-and-Docker-for-running-AWS-locally"><a href="#Localstack-with-Terraform-and-Docker-for-running-AWS-locally" class="headerlink" title="Localstack with Terraform and Docker for running AWS locally"></a><a href="https://dev.to/mrwormhole/localstack-with-terraform-and-docker-for-running-aws-locally-3a6d" target="_blank" rel="noopener">Localstack with Terraform and Docker for running AWS locally</a></h3><p>一般來說使用 IaC 工具 Terraform 來管理 AWS 資源時，執行 <code>~$ terraform apply</code> 之後，就會在 AWS 上建立出對應的雲端資源，那有沒有辦法在本地端做出假的 AWS 資源呢？答案是可以的！利用 Localstack 這個工具，並且在 <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/guides/custom-service-endpoints" target="_blank" rel="noopener">Terraform AWS Provider 的 endpoints</a> 中指定不同 AWS 服務到本地端點，就可以利用 Localstack 在本地端建立出假造的 AWS 雲端資源，這篇文章便是舉例使用此種方式來讓程式可以在本地端做完測試，而不用真的在 AWS 上建立一堆服務，算是個省時間又省錢的做法！</p><h3 id="Difftastic"><a href="#Difftastic" class="headerlink" title="Difftastic"></a><a href="https://github.com/wilfred/difftastic" target="_blank" rel="noopener">Difftastic</a></h3><p>Difftastic 是一個可以根據程式語法來讓檔案做解構性比較的工具 (目前還在實驗階段中)，Parsing 檔案的靈感主要來自於 <a href="https://github.com/comby-tools/comby" target="_blank" rel="noopener">Comby</a>，所以可以用來處理多種程式語言，而在 Diffing 的部分是根據 <a href="https://fazzone.github.io/autochrome.html" target="_blank" rel="noopener">Autochrome 專案</a> 來實作，因為 Difftastic 將 diff 當作是圖像搜尋問題，它利用 Dijkstra 演算法來找出最小的 diff，而 Printing 出檔案比較的結果則可以參考範例圖片，感覺完成之後應該是個不賴的程式語言比較工具</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 88 期 - 有微解封，不知道有沒有微開發？</title>
      <link href="/2021/07/06/88-public-cloud-network-security/"/>
      <url>/2021/07/06/88-public-cloud-network-security/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Public-Cloud-Network-兩三事-沒有最安全只有更安全"><a href="#Public-Cloud-Network-兩三事-沒有最安全只有更安全" class="headerlink" title="Public Cloud Network 兩三事 - 沒有最安全只有更安全"></a><a href="https://medium.com/starbugs/public-cloud-network-%E5%85%A9%E4%B8%89%E4%BA%8B-%E6%B2%92%E6%9C%89%E6%9C%80%E5%AE%89%E5%85%A8%E5%8F%AA%E6%9C%89%E6%9B%B4%E5%AE%89%E5%85%A8-a6b3eee059cc" target="_blank" rel="noopener">Public Cloud Network 兩三事 - 沒有最安全只有更安全</a></h3><p>使用 Public Cloud 要如何規劃網路架構才算安全呢？其實端看組織的資源與要求，剛好最近花了一些時間在整理網路相關的工作任務，趁著這個機會把自己透過工作碰到學到的 Public Cloud 網路議題給整理成文章，透過簡易的情境設計對應到不同公司的規模或是需求之下，可以選擇什麼樣的解決方案與替代做法，讓大家可以用最短的時間獲得最多的知識</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="10-CSS-things-I-wish-I-knew-when-I-was-a-beginner"><a href="#10-CSS-things-I-wish-I-knew-when-I-was-a-beginner" class="headerlink" title="10 CSS things I wish I knew when I was a beginner"></a><a href="https://levelup.gitconnected.com/10-css-things-i-wish-i-knew-when-i-was-a-beginner-68ba4b5b3da8" target="_blank" rel="noopener">10 CSS things I wish I knew when I was a beginner</a></h3><p>文中中提到一些滿基本的觀念，當然還是有些爭議的內容，像是文章中有提到要淘汰 Bootstrap 這點，其實想要快速開發網頁還是會希望從一個方便好用的 UI 框架開始 😂。另外我覺得滿有趣的是他所提到 RWD 的 desktop first 和 mobile first 的區別和看法，大家可以先思考，然後再點進去看看原因和你想的一不一樣！ 🙌</p><h3 id="JavaScript-How-to-Redirect-to-Another-Webpage"><a href="#JavaScript-How-to-Redirect-to-Another-Webpage" class="headerlink" title="JavaScript: How to Redirect to Another Webpage"></a><a href="https://stackabuse.com/javascript-how-to-redirect-to-another-webpage" target="_blank" rel="noopener">JavaScript: How to Redirect to Another Webpage</a></h3><p>在開發網頁的時候，為了更好的使用者體驗，通常都會需要幫使用者重新導向新的頁面，但是在 JavaScript 能夠達到相同功能的方式在文章中就介紹了 <code>location.href</code>、<code>windows.location</code>、<code>location.assign()</code> 和 <code>location.replace()</code> 四種，這四種又有什麼不同呢？到底該用哪的方式會最適合使用者？</p><h3 id="三种前端实现VR全景看房的方案！说不定哪天就用得上！"><a href="#三种前端实现VR全景看房的方案！说不定哪天就用得上！" class="headerlink" title="三种前端实现VR全景看房的方案！说不定哪天就用得上！"></a><a href="https://juejin.cn/post/6973865268426571784" target="_blank" rel="noopener">三种前端实现VR全景看房的方案！说不定哪天就用得上！</a></h3><p>一直覺得在網頁前端顯示的 VR 實景展示超帥，但是都沒有機會好好瞭解到底該如何在前端中加入 VR 實景。而在這篇文章中，作者就舉出了三種方案實現 VR 技術，可以看看要把哪一個方案加入你的口袋名單！</p><h3 id="The-trouble-with-TypeScript-enums"><a href="#The-trouble-with-TypeScript-enums" class="headerlink" title="The trouble with TypeScript enums"></a><a href="https://thoughtbot.com/blog/the-trouble-with-typescript-enums" target="_blank" rel="noopener">The trouble with TypeScript enums</a></h3><p>很多人開始使用 typescript 後總是會遇到很多 type error，這篇文章介紹了關於使用 enum 時會遇到的 type error 以及如何解決，有遇到任何跟 enum 有關的問題的讀者都不妨可以藉由這個文章找到解答喔~</p><h3 id="JavaScript-Tips-and-Best-Practices"><a href="#JavaScript-Tips-and-Best-Practices" class="headerlink" title="JavaScript Tips and Best Practices"></a><a href="https://dev.to/apoorvtyagi/javascript-tips-and-best-practices-48ma" target="_blank" rel="noopener">JavaScript Tips and Best Practices</a></h3><p>這篇文章真的蠻厲害的，介紹了很多 JavaScript 不同的寫法以及一些比較好閱讀的 coding style 來幫助工程師們進行 JavaScript 的撰寫，有興趣改變自己寫法的讀者不妨可以收藏起來日後可以閱讀。</p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="Reducing-Memory-Allocations-in-Golang"><a href="#Reducing-Memory-Allocations-in-Golang" class="headerlink" title="Reducing Memory Allocations in Golang"></a><a href="https://chris124567.github.io/2021-06-21-go-performance/" target="_blank" rel="noopener">Reducing Memory Allocations in Golang</a></h3><p>這篇文章完美示範了怎麼對你的 Go 程式做 profile，並且著手去改善 memory allocation 的次數。雖然一般情況下 Go 寫出來的程式效能都還不錯，但真的需要調整時就需要用 pprof 下去分析了</p><h3 id="How-to-correctly-use-Basic-Authentication-in-Go"><a href="#How-to-correctly-use-Basic-Authentication-in-Go" class="headerlink" title="How to correctly use Basic Authentication in Go"></a><a href="https://www.alexedwards.net/blog/basic-authentication-in-go" target="_blank" rel="noopener">How to correctly use Basic Authentication in Go</a></h3><p>這篇文章介紹了什麼是 basic authentication（就是輸入網址後需要打帳號密碼那種驗證方式），並且教你怎麼在 Go 裡面實作，雖然這種方式現在已經比較少見，但有時想保護自己的網頁時還是不錯的選擇</p><h3 id="Contributing-the-Go-Compiler-Adding-New-Tilde-Operator"><a href="#Contributing-the-Go-Compiler-Adding-New-Tilde-Operator" class="headerlink" title="Contributing the Go Compiler: Adding New Tilde (~) Operator"></a><a href="https://medium.com/trendyol-tech/contributing-the-go-compiler-adding-new-tilde-operator-f66d0c6cff7" target="_blank" rel="noopener">Contributing the Go Compiler: Adding New Tilde (~) Operator</a></h3><p>這篇文非常非常的長，內容主要在講說怎麼加一個新的 operator 到 Go 的編譯器中，如果想了解 Go 編譯器的原理這篇真的不錯（但可能要讀兩三個小時就是XD）</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="不用拘泥於程式只能寫到幾歲，而是以後還需要工程師嗎？！"><a href="#不用拘泥於程式只能寫到幾歲，而是以後還需要工程師嗎？！" class="headerlink" title="不用拘泥於程式只能寫到幾歲，而是以後還需要工程師嗎？！"></a><a href="https://github.blog/2021-06-29-introducing-github-copilot-ai-pair-programmer/" target="_blank" rel="noopener">不用拘泥於程式只能寫到幾歲，而是以後還需要工程師嗎？！</a></h3><p>標題下得有點危言聳聽，其實是想要提 GitHub 推出了 AI Pair Programmer 的服務 - GitHub Copilot，他可以根據你正在寫的程式碼對某幾行或是整個 Function 提出建議，讓工程師可以更快發現更多的選擇來解決問題，撰寫測試和不透過 Google 搜尋就知道想要整合的 API 要如何使用</p><p>而這個服務的底層是使用 OpenAI Codex，他是一個使用 OpenAI 建立出來的 AI 系統，因為他使用廣大的公開程式碼做訓練，所以比 GPT-3 更能夠勝任產生程式碼的工作，而在目前的 Technical Preview 版本中，主要是針對 #Python, #JavaScript, #TypeScript, #Ruby 和 #Go 這幾種語言在訓練，有興趣的人現在可以報名加入 waitlist 中</p><h3 id="Top-10-Useful-GitHub-Browser-Extensions"><a href="#Top-10-Useful-GitHub-Browser-Extensions" class="headerlink" title="Top 10 Useful GitHub Browser Extensions"></a><a href="https://dev.to/abanoub7asaad/top-10-useful-github-browser-extensions-2k2d" target="_blank" rel="noopener">Top 10 Useful GitHub Browser Extensions</a></h3><p>這篇文章介紹了十個可以用來增加開發者使用 GitHub 時的生產力的 Chrome Extension，看完介紹後，有幾個真的令我感到腦洞大開，迫不期待安裝來使用！</p><ol><li><a href="https://github.com/ovity/octotree" target="_blank" rel="noopener">Octotree</a>: 直接讓瀏覽器多出 Repository 的檔案瀏覽功能，讓開發者在 Code Review 跟找檔案的時候來的更方便</li><li><a href="https://github.com/softvar/enhanced-github" target="_blank" rel="noopener">Enhanced GitHub</a>: 顯示整個 Repostiroy 和每個檔案的大小，並且加上下載連結跟複製檔案內容的按鈕</li><li><a href="https://github.com/noam3127/github-code-folding" target="_blank" rel="noopener">GitHub Code Folding</a>: 可以直接在 GitHub 網頁上使用折疊功能，把不需要看到的程式碼所屬的 Code Block 藏起來</li><li><a href="https://github.com/sourcegraph/sourcegraph/tree/main/client/browser" target="_blank" rel="noopener">Sourcegraph</a>: 直接找到程式碼中該函釋定義或是參照的程式碼在哪裡 (目前可以使用在 Go, java, TypeScript, JavaScript 跟 Python)</li><li><a href="https://github.com/tanmayrajani/notifications-preview-github" target="_blank" rel="noopener">Notifications Preview for GitHub</a>: 讓 GitHub 通知功能更好用，顯示通知個數，預覽通知內容，並可以在預覽時標示為已讀或是不再訂閱該通知</li><li><a href="https://github.com/homerchen19/github-file-icons" target="_blank" rel="noopener">File Icons for GitHub and GitLab</a>: 給予程式碼檔案不同的 ICON</li><li><a href="https://github.com/OctoLinker/OctoLinker" target="_blank" rel="noopener">OctoLinker</a>: 對於程式碼中 include, require 和 import 的 library 提供超連結，讓使用者直接點過去看</li><li><a href="https://github.com/jasonlong/isometric-contributions" target="_blank" rel="noopener">GitHub Isometric Contributions</a>: 可以把 GitHub 的 Contribution 圖轉換成不一樣的顯示方式，甚至變成 3D 的</li><li><a href="https://github.com/N1ck/gifs-for-github" target="_blank" rel="noopener">GIFs for GitHub</a>: 讓開發者更方便搜尋 GIPHY 中的 GIF 圖檔加在回覆裡</li><li><a href="https://github.com/sindresorhus/refined-github" target="_blank" rel="noopener">Refined GitHub</a>: 讓 GitHub 更好用的 Extension，例如讓空白可視化，按一鍵就可以 Merge Conflict，看到有哪些人在 Comment 按下表情符號，讓你在 PR 或是 Issue 中把不必要的 Comment 隱藏起來，在程式碼中把 Issue/PR 連結起來…等</li></ol><h3 id="FinOps-for-Kubernetes-Insufficient-–-or-nonexistent-–-Kubernetes-cost-monitoring-is-causing-overspend"><a href="#FinOps-for-Kubernetes-Insufficient-–-or-nonexistent-–-Kubernetes-cost-monitoring-is-causing-overspend" class="headerlink" title="FinOps for Kubernetes: Insufficient – or nonexistent – Kubernetes cost monitoring is causing overspend"></a><a href="https://www.cncf.io/blog/2021/06/29/finops-for-kubernetes-insufficient-or-nonexistent-kubernetes-cost-monitoring-is-causing-overspend/" target="_blank" rel="noopener">FinOps for Kubernetes: Insufficient – or nonexistent – Kubernetes cost monitoring is causing overspend</a></h3><p>根據 CNCF 的調查，去年有 68% 的人表示他們花在 Kubernetes 相關的成本增加了，而且其中一半的表示一整年增加超過了 20%，這樣的趨勢其實是在預期中的，因為有越來越多的組織採用的 Cloud Native 架構並跟著擴展 K8s 環境；不過根據報告同時也揭露了上升的成本其實跟使用者無法精確且有效的監控或是預測 K8s 成本有關，這造成了不必要的過度花費；<a href="https://blog.kubecost.com/blog/wasteful-kubernetes-spending/" target="_blank" rel="noopener">Kubecost</a> 也順道趁著這個機會來推廣大家使用它節省在 K8s 相關的開銷，Loft.sh 也發了篇<a href="https://loft.sh/blog/the-cost-of-managed-kubernetes-a-comparison/" target="_blank" rel="noopener">文章</a>比較各家 K8s 託管服務的價錢</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 87 期 - 我要成為海碼王！</title>
      <link href="/2021/06/29/87-one-piece-coder/"/>
      <url>/2021/06/29/87-one-piece-coder/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Mac-快速分割視窗，用-Rectangle-就對了"><a href="#Mac-快速分割視窗，用-Rectangle-就對了" class="headerlink" title="Mac 快速分割視窗，用 Rectangle 就對了"></a><a href="https://medium.com/starbugs/592ed40405e3" target="_blank" rel="noopener">Mac 快速分割視窗，用 Rectangle 就對了</a></h3><p>視窗的移動和切換, 對於一個開發者來說, 能懶則懶. 蘋果雖然有內建可以將視窗分為兩半的操作方式, 但是用滑鼠來操作, 需要把手移開鍵盤。如果這時候一個可以用快速鍵來分割畫面的軟體就太棒了。</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="前端開發者也可以懂的基礎-System-Design"><a href="#前端開發者也可以懂的基礎-System-Design" class="headerlink" title="前端開發者也可以懂的基礎 System Design"></a><a href="https://medium.com/starbugs/5468e0f43033" target="_blank" rel="noopener">前端開發者也可以懂的基礎 System Design</a></h3><p>前陣子在與朋友一起籌組的後端開發線上分享會 BESG 有成員分享了 TinyURL 的系統設計 (System Design)，剛好也看到了知名 YouTuber Terry 關於 Google 系統設計面試的影片，了解到在美國的資訊業，不論你是前端、後端、資料工程師還是 DevOps，System Design 系統設計幾乎都是面試時的必考題。有人可能會覺得，反正那是國外的狀況 …</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="🧑‍💻-How-I-developed-my-portfolio-for-a-month-🗓-Demo-🍿"><a href="#🧑‍💻-How-I-developed-my-portfolio-for-a-month-🗓-Demo-🍿" class="headerlink" title="🧑‍💻 How I developed my portfolio for a month 🗓 + Demo 🍿"></a><a href="https://dev.to/kerthin/how-i-developed-my-portfolio-for-a-month-demo-3ee7" target="_blank" rel="noopener">🧑‍💻 How I developed my portfolio for a month 🗓 + Demo 🍿</a></h3><p>身為開發者為自己做一個展示火力的個人網站應該是很正常的事情吧？但是在做個人網站時該考慮哪些事情呢？作者把它從開始規劃、決定技術、和每階段的開發狀況都寫下說明以及它想在網頁上表達的事情，我覺得內容非常棒！然後在看的過程中我只想問，從頭像到完成動畫之間到底發生了什麼？😂</p><h3 id="How-to-display-content-in-multiple-columns-using-CSS"><a href="#How-to-display-content-in-multiple-columns-using-CSS" class="headerlink" title="How to display content in multiple columns using CSS"></a><a href="https://kritika-pattalam.hashnode.dev/how-to-display-content-in-multiple-columns-using-css" target="_blank" rel="noopener">How to display content in multiple columns using CSS</a></h3><p>文章裡介紹了如何用 CSS 的 <code>column</code> 讓文章變成多欄顯示，以及使用 <code>orphans</code> 和 <code>widows</code> 做更細微的設定，如果對這些屬性還不熟悉，可以看看此篇作者解釋和範例！</p><h3 id="Reading-Clean-Code-Week-1"><a href="#Reading-Clean-Code-Week-1" class="headerlink" title="Reading Clean Code: Week 1"></a><a href="https://levelup.gitconnected.com/reading-clean-code-week-1-a4df2c392e66" target="_blank" rel="noopener">Reading Clean Code: Week 1</a></h3><p>這篇是作者閱讀 Clean Code 所記錄下來的讀書心得，而且作者還選了自己的一個專案，然後藉由從 Clean Code 中讀到的觀念來重構程式碼，如果對 <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?dchild=1&keywords=clean+code&qid=1622646055&sr=8-1" target="_blank" rel="noopener">Clean Code</a> 這本書有興趣的話，不妨可以和作者一起讀哦！依照文章最後的意思，作者是會週更的。 😂</p><h3 id="cssbattle"><a href="#cssbattle" class="headerlink" title="cssbattle"></a><a href="https://cssbattle.dev/" target="_blank" rel="noopener">cssbattle</a></h3><p>這個網站真的蠻屌的很推薦所有的前端工程師可以上去玩玩看，透過寫 html + css 的方式來達到目標的視覺畫面，然後比誰寫的 code 字數最少，不得不說透過這個網站可以了解很多不同的切版技巧，可以學到很多前端大神的思考方式。</p><h3 id="esbuild"><a href="#esbuild" class="headerlink" title="esbuild"></a><a href="https://esbuild.github.io/" target="_blank" rel="noopener">esbuild</a></h3><p>esbuild 算是近期蠻多人都在討論的前端打包套件，而且 esbuild 強調的就是打包速度飛快，比大家都在用 webpack 還快很多，的確看到一些介紹以及網路上的 DEMO 真的都比 webpack 快，但 webpack 厲害的地方就在於有很多可以玩的 plugin，不知道 esbuild 之後會不會也有那麼多 plugin 可以玩就是了XD</p><h3 id="monaco-editor"><a href="#monaco-editor" class="headerlink" title="monaco-editor"></a><a href="https://microsoft.github.io/monaco-editor/" target="_blank" rel="noopener">monaco-editor</a></h3><p>這個編輯器真的很酷是微軟自己做的線上編輯器，個人真的覺得比 Draft.js 好用很多(真的不曉得前陣子自己在那邊研究 Draft.js 那麼久到底在幹嘛哈哈哈)，而且這個編輯器其實就是 base on 微軟最有名的 vs code 編輯器底下的產物，所以編輯邏輯其實就跟 vs code 差不多算是可以無痛上手，最近如果有興趣再研究編輯器的不妨可以考慮看看這款套件，至於 Draft.js 就隨便他了哈哈哈哈。</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="Top-20-Dockerfile-best-practices"><a href="#Top-20-Dockerfile-best-practices" class="headerlink" title="Top 20 Dockerfile best practices"></a><a href="https://sysdig.com/blog/dockerfile-best-practices/" target="_blank" rel="noopener">Top 20 Dockerfile best practices</a></h3><p>看過那麼多篇 dockerfile security 的文章，這篇大概是講得最全面的了，如果上線之前不知道該怎麼讓自己的 image 更安全的話，看這篇就對了！</p><h3 id="Build-images-with-BuildKit"><a href="#Build-images-with-BuildKit" class="headerlink" title="Build images with BuildKit"></a><a href="https://docs.docker.com/develop/develop-images/build_enhancements/" target="_blank" rel="noopener">Build images with BuildKit</a></h3><p>Docker 自 18.09 以後就開始支援 buildkit，除了 log 更好看之外，還新增了一些其他的 feature，而且啟用的方式也超簡單，所以很推薦使用哦～</p><h3 id="用-docker-compose-優雅關閉服務"><a href="#用-docker-compose-優雅關閉服務" class="headerlink" title="用 docker-compose 優雅關閉服務"></a><a href="https://blog.wu-boy.com/2021/06/graceful-stop-service-using-docker-compose-in-golang/" target="_blank" rel="noopener">用 docker-compose 優雅關閉服務</a></h3><p>怎麼讓服務 gracefully shutdown 一直以來都是個很重要的問題，而 appleboy 這篇文章講到了怎麼在 docker-compose.yml 裡面自己設置 signal 跟 timeout，在部署、更新大量 container 時還滿實用的</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="JavaScript-What-is-short-circuit-evaluation"><a href="#JavaScript-What-is-short-circuit-evaluation" class="headerlink" title="JavaScript: What is short-circuit evaluation?"></a><a href="https://codeburst.io/javascript-what-is-short-circuit-evaluation-ff22b2f5608c" target="_blank" rel="noopener">JavaScript: What is short-circuit evaluation?</a></h3><p>說真的 JavaScript 總是有很多奇怪的寫法來達到想要的結果，由於以前寫 C++ 寫久了，所以一開始在寫 JS 看到都會覺得 <code>&amp;&amp;</code>、<code>||</code> 這個運算子就會直覺的認為只會返回不林子，殊不知 JS 的這兩個運算子能做的事情非常多而且非常奇妙，以後有想要進行邏輯取值的時候不妨都可以利用這種方式來寫，可以讓你的程式碼瞬間少了好幾行看起來很乾淨XD</p><h3 id="这些-JS-的新语法有点东西啊"><a href="#这些-JS-的新语法有点东西啊" class="headerlink" title="这些 JS 的新语法有点东西啊"></a><a href="https://juejin.cn/post/6976070529388118030" target="_blank" rel="noopener">这些 JS 的新语法有点东西啊</a></h3><p>作者整理了一些在 tc39 上的有趣提案，其中包含了現在滿常被討論的 <code>.at</code> 外，還有已經在第四階段的 Top-level <code>await</code>，之後使用 <code>await</code> 時甚至不需要放到 <code>async</code> 裡面，但其中最讓我感到噁心的還是 「管道运算符（The Pipeline Operator）」，還有其他有趣又實用的提案，大家一起看看吧！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="5-GitHub-Projects-to-make-you-a-better-DevOps-Engineer-⚡"><a href="#5-GitHub-Projects-to-make-you-a-better-DevOps-Engineer-⚡" class="headerlink" title="5 GitHub Projects to make you a better DevOps Engineer ⚡"></a><a href="https://dev.to/ankit01oss/5-github-projects-to-make-you-a-better-devops-engineer-2fkl" target="_blank" rel="noopener">5 GitHub Projects to make you a better DevOps Engineer ⚡</a></h3><p>DevOps 這個領域具有相當地挑戰性，需要不斷地學習，因此作者在此推薦五個 GitHub 專案，讓有興趣的人可以找到方向深入研究</p><ol><li><p><a href="https://github.com/trimstray/the-book-of-secret-knowledge" target="_blank" rel="noopener">The book of secret knowledge</a>: 收集了作者每天工作會用到的工具，從 CLI, GUI, Web 到網路…等相關工具清單一應俱全，看完覺得自己也應該來弄一個類似的 Repository 幫助自己越來越不行的記憶力</p></li><li><p><a href="https://github.com/binhnguyennus/awesome-scalability" target="_blank" rel="noopener">Awesome Scalability</a>: 收集了各種有關於大型系統的 Scalable, Reliable 和效能相關的文章，而且很多都是滿有名且大型的組織，相當的具有指標跟參考意義</p></li><li><p><a href="https://github.com/bregman-arie/devops-exercises" target="_blank" rel="noopener">DevOps Exercises</a>: 包含了各式各樣有關於 DevOps 和 SRE 技術領域的問題跟練習題，自己感覺很適合拿來當面試題目使用XD</p></li><li><p><a href="https://github.com/trimstray/test-your-sysadmin-skills" target="_blank" rel="noopener">Test your sysadmin skills</a>: 專門用來考  Linux 系統管理者的問題大補帖，跟上面一樣適合拿來當面試問題使用！</p></li><li><p><a href="https://github.com/upgundecha/howtheysre" target="_blank" rel="noopener">How they SRE</a>: 這個我記得我之前介紹過，這個 Repository 收集了世界上軟體技術相關的大型公司如何去培養自己的 Site Reliability Engineering</p></li></ol><h3 id="SLOs-should-be-easy-say-hi-to-Sloth"><a href="#SLOs-should-be-easy-say-hi-to-Sloth" class="headerlink" title="SLOs should be easy, say hi to Sloth"></a><a href="https://itnext.io/slos-should-be-easy-say-hi-to-sloth-9c8a225df0d4" target="_blank" rel="noopener">SLOs should be easy, say hi to Sloth</a></h3><p>每年都有比較熱門的技術詞彙，例如 2017 Cryptocurrency 和 Blockchain，2018 Observability 和 Tracing， 2019 Service Mesh，2020 GitOps，而作者認為 2021 就是 SLO 啦！這篇文章主要介紹他開發的 Sloth 專案 (一個可以讓 Prometheus 產生 SLO 的最簡單方式) 的心路歷程</p><p>而作者會開發出來這個專案的最主要原因在於…他在 2018 年讀到 Google 經典 SRE 巨作後知道了 SLO 的觀念，不過每次他在跟朋友討論到時都會發現，大家雖然都已經知道，但好像沒有人已經做得很好，都還在很努力地看怎麼應用或是將它實踐在日常的工作上的階段中，在這幾年經歷了在沒有 SLO 的公司嘗試導入 SLO，或是在已經應用 SLO 公司的工作經驗後，他決定把自己在 2018 年的一些開發和導入經驗開源出來成為 Sloth 專案，其中包含了 K8s Operator 和 CLI 工具來輕鬆的整合 Prometheus Stack，讓 SRE 可以經鬆的導入跟實踐 SLO！</p><h3 id="Announcing-etcd-3-5"><a href="#Announcing-etcd-3-5" class="headerlink" title="Announcing etcd 3.5"></a><a href="https://etcd.io/blog/2021/announcing-etcd-3.5/" target="_blank" rel="noopener">Announcing etcd 3.5</a></h3><p>有使用過 Kubernetes 的人應該都有聽過 etcd 這個 Key-Vaule 儲存系統，他最近發佈了 3.5，距離 3.4 也已經過了兩年，在這段期間隨著使用的人越來越多，穩定和可靠度當然成為了官方的開發重點項目，讓我們來瞧瞧看歷經了兩年時間的累積，etcd 完成了哪些事情，讓他們覺得夠格推出 3.5 這一版！</p><ul><li><p>Security: 畢竟 etcd 負責儲存處理不少機敏資訊，所以加強安全性是最高優先權的工作， 因此官方早在 2020 年就請了第三方幫忙做安全稽核，並且把發現的安全問題不管大小都修復掉</p></li><li><p>Features: 改成使用 <a href="https://github.com/uber-go/zap" target="_blank" rel="noopener">zap</a> 來處理 Log，並且也預設支援 Log Rotation，在對於昂貴的請求也可以記錄更詳細的資訊；然後在 Rollbak 功能下了些功夫，gRPC gateway endpoint 現在換成使用 /v3/*，在 etcd client 現在也換成使用新的 gRPC 版本 1.32.0</p></li><li><p>Performance: 最多使用 etcd 的人，其實都是 K8s 的使用者，而當 K8s API 在 Reflector Cache 找不到想找的資源時，就會去查找整個 Keyspace，這會造成 etcd 的回應時間變久，所以官方詳細的去調查造成這個問題的原因 (主要是跟記憶體使用率相關)，最後嘗試將記憶體的在最高峰時的使用量減半 (雖然改的程式碼不多，但修掉了這個困擾大家好幾年的問題)，然後也花了很大的心血改善了 Transaction 的效能，讓 K8s API 在新增和修改資源的速度可以更快</p></li><li><p>Others: 一開始有提到 etcd 的可靠和正確性相當地重要，所以官方將上個版本中被提出來的嚴重 Bug 都修掉了，而且在監控，測試，開發者體驗跟社群方面都做了不少事情，更詳細資訊可以參閱原文</p></li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 86 期 - 雨下整夜，Bug 溢出就像雨水</title>
      <link href="/2021/06/22/86-raining-all-night-my-buf-overflow-like-rainwater/"/>
      <url>/2021/06/22/86-raining-all-night-my-buf-overflow-like-rainwater/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="用簡單的-CSS-和-JavaScript-輕鬆製造視差滾動（Parallax-Scrolling）"><a href="#用簡單的-CSS-和-JavaScript-輕鬆製造視差滾動（Parallax-Scrolling）" class="headerlink" title="用簡單的 CSS 和 JavaScript 輕鬆製造視差滾動（Parallax Scrolling）"></a><a href="https://medium.com/starbugs/%E7%94%A8%E7%B0%A1%E5%96%AE%E7%9A%84-css-%E5%92%8C-javascript-%E8%BC%95%E9%AC%86%E8%A3%BD%E9%80%A0%E8%A6%96%E5%B7%AE%E6%BB%BE%E5%8B%95-parallax-scrolling-4e22af7c1c0" target="_blank" rel="noopener">用簡單的 CSS 和 JavaScript 輕鬆製造視差滾動（Parallax Scrolling）</a></h3><p>前一陣子在練習切版的時候，突然發現視差滾動在 Landing Page 上的出現率還滿高的，於是就想練習切一些關於視差滾動的頁面，本來是要直接用 ScrollMagic 的，但想說機會難得，就來了解一下它的原理，殊不知實作起來還滿容易的，一起看看怎麼處理的吧！</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="lodash-如何正確的-import-lodash"><a href="#lodash-如何正確的-import-lodash" class="headerlink" title="lodash | 如何正確的 import lodash"></a><a href="https://medium.com/starbugs/the-correct-way-to-import-lodash-libraries-bdf613235927" target="_blank" rel="noopener">lodash | 如何正確的 import lodash</a></h3><p>通常前端都會導入一些好用的第三方套件，但是有時候導入的套件並非是基於 es module 進行開發，webpack 沒辦法發揮 tree shaking 的功能，在 import 時一不注意就會載入一堆沒有必要的 function。在這篇文章中以 lodash 作為舉例，目前 lodash 本身並不是使用 es module。所以如果在意 bundle size 的大小，就要特別注意在 import lodash 的方式。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="5-Awesome-CSS-tricks-every-developer-should-know"><a href="#5-Awesome-CSS-tricks-every-developer-should-know" class="headerlink" title="5 Awesome CSS tricks every developer should know"></a><a href="https://dev.to/sumeet16/5-awesome-css-tricks-every-developer-should-know-2n5k" target="_blank" rel="noopener">5 Awesome CSS tricks every developer should know</a></h3><p>文章中介紹一些關於使用 CSS 的技巧，包含了可以讓使用者體驗更好的 Smooth scrolling，以及該如何設置圖片的大小、將自己喜愛的圖片或 icon 設置成鼠標、用 flex 更好的做水平和垂直置中，還有更容易控制內容行數的 <code>-webkit-line-clamp</code>，以上語法將來可能都可以成為你的排版小幫手！</p><h3 id="Be-the-boss-of-your-CSS-styles-with-Tailwind-CSS"><a href="#Be-the-boss-of-your-CSS-styles-with-Tailwind-CSS" class="headerlink" title="Be the boss of your CSS styles with Tailwind CSS"></a><a href="https://victoriaadedayo.hashnode.dev/be-the-boss-of-your-css-styles-with-tailwind-css-ckpxniz4o08il92s1huob0phr" target="_blank" rel="noopener">Be the boss of your CSS styles with Tailwind CSS</a></h3><p>Tailwind 是一個主張實用至上的 CSS 框架，它提供了很多實用且風格一致的介面，甚至是讓你不需要寫任何自己的 CSS，而且你也不用害怕被 Tailwind 綁死，因為如果你想做些修改，仍然可以做擴充、調整和改變！一起跟著文章作者入門 Tailwind 吧！</p><h3 id="React-18：新的-SSR-架構解決了什麼問題？"><a href="#React-18：新的-SSR-架構解決了什麼問題？" class="headerlink" title="React 18：新的 SSR 架構解決了什麼問題？"></a><a href="https://jigsawye.com/2021/06/10/react-18-new-ssr-architecture?fbclid=IwAR3bQq_W6HNFcNh9X0WOfAy9x544aJagDo4t7YyDX5nyqp0NcCbMtIndno4" target="_blank" rel="noopener">React 18：新的 SSR 架構解決了什麼問題？</a></h3><p>拜技術的進步所賜，SSR 可以說是越來越普及了，早期在 React 中想要使用 SSR 可以利用 <a href="https://nextjs.org/docs/getting-started" target="_blank" rel="noopener">Next.js</a> 這個套件，但 SSR 有一個非常嚴重的缺陷就是會讓整體的網頁在渲染的過程中一定會比 CSR 來的慢，因為 server 端會先抓取該內容所需的資料並且繪製出來，但最新的 React 18 帶來了新的 SSR 架構，讓未來 SSR 的渲染速度不會再繼續慢下去了。</p><h3 id="Develop-amp-test-React-components-in-isolation"><a href="#Develop-amp-test-React-components-in-isolation" class="headerlink" title="Develop &amp; test React components in isolation"></a><a href="https://dev.to/dhaiwat10/develop-test-react-components-in-isolation-3714" target="_blank" rel="noopener">Develop &amp; test React components in isolation</a></h3><p>之前在推薦 React component testing 的時候都會推薦 React testing library，沒想到也可以利用 storybook 進行 testing，而且這樣還能順便看到該元件的表現行為也算是蠻一舉兩得的，這篇文章介紹了如何利用 storybook 進行 testing 有興趣的讀者不妨可以收藏起來看~</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="從-V8-bytecode-探討-let-與-var-的效能問題"><a href="#從-V8-bytecode-探討-let-與-var-的效能問題" class="headerlink" title="從 V8 bytecode 探討 let 與 var 的效能問題"></a><a href="https://blog.huli.tw/2020/02/20/let-vs-var-bytecode/" target="_blank" rel="noopener">從 V8 bytecode 探討 let 與 var 的效能問題</a></h3><p>忘了之前有沒有分享過這篇，但我真心覺得這個研究還有趣的，如果對 let 跟 var 在 V8 引擎中的行為有興趣，而且也不排斥看一些 V8 bytecode，那真的一定要讀讀這篇</p><h3 id="What’s-New-in-RxJS-7"><a href="#What’s-New-in-RxJS-7" class="headerlink" title="What’s New in RxJS 7"></a><a href="https://link.medium.com/kmHrZy0Fggb" target="_blank" rel="noopener">What’s New in RxJS 7</a></h3><p>作為 reactive programming 在 JS 裡面的代表性函式庫，RxJS 已經要發佈第七個版本了，這個版本除了檔案更小、速度更快、更節省記憶體之外，用法上也有做出一些調整，如果最近有打算把 RxJS 從 6 升到 7 的話可以參考看看這篇～</p><h3 id="A-Comprehensive-Guide-To-JavaScript-Design-Patterns"><a href="#A-Comprehensive-Guide-To-JavaScript-Design-Patterns" class="headerlink" title="A Comprehensive Guide To JavaScript Design Patterns"></a><a href="https://www.lambdatest.com/blog/comprehensive-guide-to-javascript-design-patterns/" target="_blank" rel="noopener">A Comprehensive Guide To JavaScript Design Patterns</a></h3><p>如果你最近想學設計模式，而且你又剛好會寫 JS，那就來看看這篇吧～這篇文章雖然很長，但他從設計模式的分類開始講起，給你一個整體的概念，接著才下去細講每個模式，而且在講解時除了提供範例之外還有附圖，全部看完（雖然可能要很久XD）一定會有很多收穫</p><h3 id="JavaScript-What-is-short-circuit-evaluation"><a href="#JavaScript-What-is-short-circuit-evaluation" class="headerlink" title="JavaScript: What is short-circuit evaluation?"></a><a href="https://codeburst.io/javascript-what-is-short-circuit-evaluation-ff22b2f5608c" target="_blank" rel="noopener">JavaScript: What is short-circuit evaluation?</a></h3><p>說真的 JavaScript 總是有很多奇怪的寫法來達到想要的結果，由於以前寫 C++ 寫久了，所以一開始在寫 JS 看到都會覺得 <code>&amp;&amp;</code>、<code>||</code> 這個運算子就會直覺的認為只會返回不林子，殊不知 JS 的這兩個運算子能做的事情非常多而且非常奇妙，以後有想要進行邏輯取值的時候不妨都可以利用這種方式來寫，可以讓你的程式碼瞬間少了好幾行看起來很乾淨XD</p><h3 id="这些-JS-的新语法有点东西啊"><a href="#这些-JS-的新语法有点东西啊" class="headerlink" title="这些 JS 的新语法有点东西啊"></a><a href="https://juejin.cn/post/6976070529388118030" target="_blank" rel="noopener">这些 JS 的新语法有点东西啊</a></h3><p>作者整理了一些在 tc39 上的有趣提案，其中包含了現在滿常被討論的 <code>.at</code> 外，還有已經在第四階段的 Top-level <code>await</code>，之後使用 <code>await</code> 時甚至不需要放到 <code>async</code> 裡面，但其中最讓我感到噁心的還是 「管道运算符（The Pipeline Operator）」，還有其他有趣又實用的提案，大家一起看看吧！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="CURL-BYE-BYE-TRAVIS-CI"><a href="#CURL-BYE-BYE-TRAVIS-CI" class="headerlink" title="CURL: BYE BYE TRAVIS CI"></a><a href="https://daniel.haxx.se/blog/2021/06/14/bye-bye-travis-ci/" target="_blank" rel="noopener">CURL: BYE BYE TRAVIS CI</a></h3><p>CURL 這個 Project 從 2013/10/17 在 Merge 某一個 Config 檔案時開始使用 Travis CI，正式取代了由自願者幫忙架設的 Autobuild 系統，以免費服務來說 Travis CI 真的提供了一個很棒的服務，過了四年到 2017 時，CURL 依然使用 Travis，這時候每一個 Commit 差不多有 10 個 Job 需要運行，到 2019 時變成 30 個左右，他依然表現良好，而且 Travis 官方甚至協助讓 CURL 可以比其他開源軟體運行更多平行化的 Job</p><p>不過到了 2021 時，每一個 Commit 最多可以跑到 100 個 Job，這次遇到了 travis-ci.org 搬家到 travis-ci.com 的事情，CURL 的作者不諱言不知道官方為什麼要這樣做之外，這次多的規則中，規定了開源專案不能接受商業公司或是組織的贊助，所以決定了 CURL 無法繼續使用 Travis CI，而且也開始沒有再收到來自 Travis 官方的免費 Credit</p><p>這時候來自 Zuul CI 和 Circle CI 開始協助幫忙把本來運行在 Travis CI 的 Job 搬家到他們的平台上，總算在 2021/06/14 將所有的 Job 從 Travis CI 搬走，有人說為什麼不乾脆付錢就好了，但 CURL 作者覺得 Travis CI 不再視 CURL 為開源專案這件事情讓他無法接受，而且現在市面上還有免費的就先擋著用，等到未來逼不得以需要付錢時再說了！</p><h3 id="Design-Patterns-Top-5-Techniques-for-Implementing-Fault-Tolerance-in-Distributed-Systems"><a href="#Design-Patterns-Top-5-Techniques-for-Implementing-Fault-Tolerance-in-Distributed-Systems" class="headerlink" title="Design Patterns: Top 5 Techniques for Implementing Fault Tolerance in Distributed Systems"></a><a href="https://levelup.gitconnected.com/design-patterns-top-5-techniques-for-implementing-fault-tolerance-in-distributed-systems-81bef4408c3b" target="_blank" rel="noopener">Design Patterns: Top 5 Techniques for Implementing Fault Tolerance in Distributed Systems</a></h3><p>過去四十年來許多在系統設計中監控和容錯的技術不斷地被開發，使用和改進，所以作者想要透過此篇文章介紹在分散系統中，讓自己的應用服務跟其他服務進行溝通時，需要使用到哪些技術，才仍夠讓自己的應用服務具備容錯性和監控能力</p><p>首先從什麼是分散式系統開始介紹起，接著細談容錯性是什麼，以及為什麼需要它，然後進入重點談到各種解決 Pattern 是想要解決什麼樣的問題，跟如何去實作，而且都畫了精美的架構圖來解釋，是很值得一看的文章，想要了解各種分散式系統容錯性設計 Pattern 的人趕緊打開原文參閱詳細內容吧！</p><ul><li>Acknowledgement</li><li>Circuit Breaker Pattern</li><li>Roll Forward</li><li>Roll Back</li><li>Active Replication Pattern</li></ul><h3 id="My-Top-12-Web-Tools-To-Make-Developers’-Life-Easier"><a href="#My-Top-12-Web-Tools-To-Make-Developers’-Life-Easier" class="headerlink" title="My Top 12 Web Tools To Make Developers’ Life Easier"></a><a href="https://betterprogramming.pub/my-top-12-web-tools-to-make-developers-life-easier-a8794be85d7f" target="_blank" rel="noopener">My Top 12 Web Tools To Make Developers’ Life Easier</a></h3><p>在這個網路時代，開發人員每天在工作上所面臨的常見問題，幾乎都可以在網路上找到解決問題的線上工具，而在這篇文章中，作者想要介紹 12 個他最愛用，而且可以讓 Developer 生活更簡單的線上工具</p><ol><li><a href="https://regex101.com/" target="_blank" rel="noopener">Regex</a>: 協助開發者驗證正規表示</li><li><a href="https://crontab.cronhub.io/" target="_blank" rel="noopener">Crontab</a>: 驗證 Crontab 的寫法有沒有問題</li><li><a href="https://www.epochconverter.com/" target="_blank" rel="noopener">EpochConverter</a>: 轉換人類時間跟 Unix Timestamp</li><li><a href="https://www.urlencoder.org/" target="_blank" rel="noopener">URL-Encoder</a>: Encode 跟 Decode 會在網址使用到的字串</li><li><a href="https://jwt.io/" target="_blank" rel="noopener">JWT</a>: 讓開發者可以解碼，驗證跟產生 JWT</li><li><a href="https://jsonformatter.curiousconcept.com/" target="_blank" rel="noopener">JSONFormatter and Validator</a>: 驗證 JSON 格式，並且印出漂亮格式的 JSON</li><li><a href="https://text-compare.com/" target="_blank" rel="noopener">Text Compare!</a>: 幫忙比對字串的不同之處</li><li><a href="https://www.flaticon.com/" target="_blank" rel="noopener">flaticon</a>: 提供免費的 ICON 讓 Web, iOS, Android 和 Desktop 應用使用</li><li><a href="https://www.freepik.com/" target="_blank" rel="noopener">freepik</a>: 跟 flation 有點像，可以提供免費的圖片</li><li><a href="https://chir.ag/projects/name-that-color/" target="_blank" rel="noopener">Name That Color</a>: 給予顏色最接近的名稱</li><li><a href="https://cloudconvert.com/" target="_blank" rel="noopener">Cloud Convert</a>: 協助各種影片格式轉檔</li><li><a href="https://appicon.co/" target="_blank" rel="noopener">App Icon</a>: 專門給 Mobile App 工程師拿來產生各種尺寸 ICON 的工具</li></ol><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 85 期 - 南粽北粽，都沒有我的肉重！</title>
      <link href="/2021/06/15/85-got-fatter-this-weekend/"/>
      <url>/2021/06/15/85-got-fatter-this-weekend/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="從作業系統的角度來談為什麼需要「虛擬記憶體」"><a href="#從作業系統的角度來談為什麼需要「虛擬記憶體」" class="headerlink" title="從作業系統的角度來談為什麼需要「虛擬記憶體」"></a><a href="https://larry850806.medium.com/why-do-os-need-virtual-memory-b47d6eeecbce" target="_blank" rel="noopener">從作業系統的角度來談為什麼需要「虛擬記憶體」</a></h3><p>大家好我是 Larry，因為上個月的專欄「<a href="https://medium.com/starbugs/do-you-understand-htop-ffb72b3d5629" target="_blank" rel="noopener">你一定用過 htop，但你有看懂每個欄位嗎？</a>」發佈出去之後有太多人來問我 Virtual Memory 到底是做什麼用的，所以就決定應觀眾要求寫一篇文章講 Virtual Memory 帶來的種種好處。雖然這篇文章的內容比較底層一點，但我盡量把它寫得淺顯易懂，所以就算你聽都沒聽過「虛擬記憶體」也可以進來看看哦～</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="Storybook-用-addon-controls-打造更好的-storybook-體驗"><a href="#Storybook-用-addon-controls-打造更好的-storybook-體驗" class="headerlink" title="Storybook | 用 addon-controls 打造更好的 storybook 體驗"></a><a href="https://medium.com/starbugs/storybook-addon-controls-tutorial-857c58e20e45" target="_blank" rel="noopener">Storybook | 用 addon-controls 打造更好的 storybook 體驗</a></h3><p>在 2020 年以前使用 React storybook 時，想要動態操作 component 的 props 通常都是使用 <code>addon-knobs</code> 這個套件，但現在他的競爭者 <code>addon-controls</code> 出現了！除了下載次數急起直追外，<code>addon-controls</code> 也被 storybook 官方認列於 essential addons 中，因此有在用 storybook 的朋友們快來看看這個新崛起的 addon 該怎麼用吧～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="一探那些令人興奮的-React-18-三大新-features，auto-batching，startTransition，Suspense-SSR"><a href="#一探那些令人興奮的-React-18-三大新-features，auto-batching，startTransition，Suspense-SSR" class="headerlink" title="一探那些令人興奮的 React 18 三大新 features，auto batching，startTransition，Suspense SSR"></a><a href="https://jason-memo.dev/posts/react-18/" target="_blank" rel="noopener">一探那些令人興奮的 React 18 三大新 features，auto batching，startTransition，Suspense SSR</a></h3><p>上週才剛看到一篇關於 Server Component 的概念介紹，緊接著 React 就推出 <a href="https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html" target="_blank" rel="noopener">18 新版本的發布計畫</a>了！在這個新版本裡包含了三個主要的新功能，分別是 <a href="https://github.com/reactwg/react-18/discussions/21" target="_blank" rel="noopener">automatic batching</a>、<a href="https://github.com/reactwg/react-18/discussions/41" target="_blank" rel="noopener">startTransition</a> 和 <a href="https://github.com/reactwg/react-18/discussions/37" target="_blank" rel="noopener">New Suspense SSR</a>，有興趣可以瞭解看看這些功能對我們會有什麼影響！ 🙌</p><h3 id="My-3-tips-about-Flexbox-that-will-make-your-CSS-better"><a href="#My-3-tips-about-Flexbox-that-will-make-your-CSS-better" class="headerlink" title="My 3 tips about Flexbox that will make your CSS better"></a><a href="https://dev.to/melnik909/my-3-tips-about-flexbox-that-will-make-your-css-better-50g6" target="_blank" rel="noopener">My 3 tips about Flexbox that will make your CSS better</a></h3><p>文中介紹了幾種在使用 Flexbox 排版的技巧，其中把 <code>justify-content: space-between</code> 當作 <code>column-gap</code> 的設置，就是一個很常見的誤用，這可能會導致最後一排的元素不依照你期望的想法排列對齊。</p><h3 id="透過XSS取得localstorage和cookie上的資料"><a href="#透過XSS取得localstorage和cookie上的資料" class="headerlink" title="透過XSS取得localstorage和cookie上的資料"></a><a href="https://blog.yyisyou.tw/3da8aedb/?fbclid=IwAR12GJ3D2L4uOeiRxv3X5D8-XUGgbndpdzXKJMRLLDCg-JDh5X5zZvT_N48" target="_blank" rel="noopener">透過XSS取得localstorage和cookie上的資料</a></h3><p>XSS（Cross-site scripting）是利用把惡意程式碼寫入你的網站執行的攻擊方式，文章介紹了幾種利用 XSS 取得存在 localstorage 或 cookie 內的 token 的方式。並解釋為什麼「該把 token 存在 localstorage 還是 cookie？」這個問題是假議題，因為不管存在哪裡都取得到啊！ 😆</p><h3 id="husky"><a href="#husky" class="headerlink" title="husky"></a><a href="https://typicode.github.io/husky/#/" target="_blank" rel="noopener">husky</a></h3><p>推薦一個不錯的套件，這個套件可以讓你在每一次的 commit 或者是 push 的時候進行 lint 的檢查或 run test file 等等功能，讓你的程式碼在進行下一階段的開發或者 build 的時候不會遇到一些小問題的 bug，算是蠻不錯用的套件~</p><h3 id="How-YOU-can-use-React-Testing-Library-to-test-component-surface"><a href="#How-YOU-can-use-React-Testing-Library-to-test-component-surface" class="headerlink" title="How YOU can use React Testing Library to test component surface"></a><a href="https://dev.to/itnext/how-you-can-use-react-testing-library-to-test-component-surface-49pm" target="_blank" rel="noopener">How YOU can use React Testing Library to test component surface</a></h3><p>最近在練習寫一些 unit test 的時候，為了寫 React component 的 unit test 所以選了 <a href="https://testing-library.com/docs/react-testing-library/intro/" target="_blank" rel="noopener">react testing library</a> 這個套件，這篇文章介紹了如何寫 component 的 unit test，未來有需要寫測試的讀者不妨可以來參考這篇文章的教學~</p><h3 id="Mocking-methods-which-are-not-implemented-in-JSDOM"><a href="#Mocking-methods-which-are-not-implemented-in-JSDOM" class="headerlink" title="Mocking methods which are not implemented in JSDOM"></a><a href="https://jestjs.io/docs/manual-mocks#mocking-methods-which-are-not-implemented-in-jsdom" target="_blank" rel="noopener">Mocking methods which are not implemented in JSDOM</a></h3><p>這篇算是蠻有趣的，最近在寫測試的時候發現 jest 原生不支援 <code>window.matchMedia()</code> 這個全域的 method，所以在進行裝置大小比對的時候就會噴錯，連 jest 官方自己都出來寫一篇文章來說明如何解決這個問題，但 jest 官方為何不直接修改程式碼把這個 method 加進去就好呢XDD</p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="Top-5-Lessons-I-learned-while-working-with-Go-for-two-years"><a href="#Top-5-Lessons-I-learned-while-working-with-Go-for-two-years" class="headerlink" title="Top 5 Lessons I learned while working with Go for two years"></a><a href="https://sayedalesawy.hashnode.dev/top-5-lessons-i-learned-while-working-with-go-for-two-years" target="_blank" rel="noopener">Top 5 Lessons I learned while working with Go for two years</a></h3><p>這篇文章是作者寫了兩年的 Go 之後給出的 best practice，包括怎麼寫出 thread safe 的程式、記得要設定 timeout 等等，整篇看完覺得收穫不少</p><h3 id="Building-your-own-Ngrok-in-130-lines"><a href="#Building-your-own-Ngrok-in-130-lines" class="headerlink" title="Building your own Ngrok in 130 lines"></a><a href="https://dev.to/progrium/building-your-own-ngrok-in-130-lines-2lif" target="_blank" rel="noopener">Building your own Ngrok in 130 lines</a></h3><p>ngrok 這工具應該大家都用過，他可以讓外部連線進到內網來。而這篇文章就要教你怎麼用 go 自己寫一個 ngrok，雖然重複造輪子有點浪費時間，不過藉此了解一下 ngrok 的原理還是不錯的～</p><h3 id="The-other-sync-package"><a href="#The-other-sync-package" class="headerlink" title="The other sync package"></a><a href="https://ketansingh.me/posts/golang-x-sync/" target="_blank" rel="noopener">The other sync package</a></h3><p>除了大家都很熟悉的 sync 之外，Go 還有另外一個 package 叫做 <code>golang.org/x/sync</code>，他裡面提供了一些比較少見的功能像是 semaphore 跟 errgroup，而且這篇文章也有提供範例應該看完就知道怎麼用了～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Announcing-HashiCorp-Terraform-1-0-General-Availability"><a href="#Announcing-HashiCorp-Terraform-1-0-General-Availability" class="headerlink" title="Announcing HashiCorp Terraform 1.0 General Availability"></a><a href="https://www.hashicorp.com/blog/announcing-hashicorp-terraform-1-0-general-availability" target="_blank" rel="noopener">Announcing HashiCorp Terraform 1.0 General Availability</a></h3><p>廣泛被大家使用的 IaC 工具 Terraform 在最近版號突然從 0.15 跳到 1.0 啦！而是什麼原因讓官方不是推出 0.16 呢？主要是因為他已經被很多人穩定的在 Production 環境上使用，再來是主要的使用需求都已經被滿足，最後就是良好的使用者體驗，讓我們順便來看看 1.0 這個里程碑的推出的具體內容:</p><ul><li><p>Terraform State 向下相容: 以前每次升級 Terraform，State 就會被更著升級，假如使用比較舊版本的 Terraform 就會被警告，State 的版本比較新，不過 0.14, 0.15 和 1.0 目前都已經可以向下相容 0.12.30, 0.13.6, 0.14.0, 0.15.0 和 1.0.x 所產生的 State 了，</p></li><li><p>升級體驗的改善: 從 0.15 開始，使用者想要升級 Terraform 將不再伴隨著痛苦，因為升級完之後，既有的工作流程還是可以正常運行，就像沒有升級的感覺一樣，不再需要為了升級到 1.0.x 而去更新周邊的工具，重構…等</p></li><li><p>擴展維護週期: 所有 1.x 版本將會擁有至少 18 個月的維護週期，這意味著官方會持續為 1.x 花費資源跟時間修復 Bug 和發佈新的功能</p></li><li><p>Terraform Plugin SDK v1 產品壽命結束: Terraform Plugin SDK 是讓開發者用來實作 Terraform Provider 的框架，官方會在 2021/07/31 停止支援 version 1 的發佈，Terraform CLI 和 Cloud 的使用者不會受到影響，但是官方鼓勵 Terraform Provider 的開發維護者開始升級到 version 2</p></li></ul><h3 id="AWS-announces-the-general-availability-of-AWS-Proton"><a href="#AWS-announces-the-general-availability-of-AWS-Proton" class="headerlink" title="AWS announces the general availability of AWS Proton"></a><a href="https://aws.amazon.com/about-aws/whats-new/2021/06/aws-announces-the-general-availability-of-aws-proton/" target="_blank" rel="noopener">AWS announces the general availability of AWS Proton</a></h3><p>AWS 最近推出一個叫做 Proton (質子) 的新功能，主要是為了管理 Container 和 Serverless 的應用程式，讓開發者可以在這個 IaC 盛行的時代裡，只需要寫好程式碼，然後透過使用 Proton ，就可以把安裝，部署和監控都一次搞定，但這樣一來維運平台的人要怎麼管理呢？ Proton 同時也讓維運人員還是可以保持一致性地進行管理方式，而且不會降低開發者的生產力，所以在 GA 的同時也支援了兩個最重要的功能，分別是可以使用跨帳號架構，並且在 API 內可以使用 IAM condition context keys</p><h3 id="Flagsmith"><a href="#Flagsmith" class="headerlink" title="Flagsmith"></a><a href="https://github.com/Flagsmith/flagsmith" target="_blank" rel="noopener">Flagsmith</a></h3><p>Flagsmith 是一個開源的 Feature Flag 和 Remote Config 服務，他讓應用服務可以跨越網站，行動裝置和後端來建立和管理 Features Flag，只要在應用服務中加上ㄧ小段程式碼，Flagsmith 就可以隨著不同的環境或是使用者將功能進行開關，而他主要支援以下的功能:</p><ul><li>Feature Flag</li><li>Remoet Config</li><li>A/B 或是多變量測試</li><li>方便組織管理</li><li>容易跟既有工具整合</li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 84 期 - 一路跟小孩 WFH 到暑假嘍!</title>
      <link href="/2021/06/08/84-internal-dns-server/"/>
      <url>/2021/06/08/84-internal-dns-server/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="網址怎麼查不到？-DNS-管理的常見問題"><a href="#網址怎麼查不到？-DNS-管理的常見問題" class="headerlink" title="網址怎麼查不到？- DNS 管理的常見問題"></a><a href="https://medium.com/starbugs/%E7%B6%B2%E5%9D%80%E6%80%8E%E9%BA%BC%E6%9F%A5%E4%B8%8D%E5%88%B0-dns-%E7%AE%A1%E7%90%86%E7%9A%84%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C-4fcc61e1e1e6" target="_blank" rel="noopener">網址怎麼查不到？- DNS 管理的常見問題</a></h3><p>通常公司有規劃自己區域網路的話，其中一定會有 Internal DNS Server，當地端的 DNS Server 想要查詢到雲端的 Private Zone，或是雲端的 DNS Server想要查詢到地端的 Private Zone 時該怎麼做？希望透過這篇文章分享的概念，可以讓正在規劃公司內部網路架構的人不用像我當年一樣自己慢慢摸索 T_T</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="想學習-AWS-卻又不知道從何下手？初探-AWS-雲端架構"><a href="#想學習-AWS-卻又不知道從何下手？初探-AWS-雲端架構" class="headerlink" title="想學習 AWS 卻又不知道從何下手？初探 AWS 雲端架構"></a><a href="https://medium.com/starbugs/%E6%83%B3%E5%AD%B8%E7%BF%92-aws-%E5%8D%BB%E5%8F%88%E4%B8%8D%E7%9F%A5%E9%81%93%E5%BE%9E%E4%BD%95%E4%B8%8B%E6%89%8B-%E5%88%9D%E6%8E%A2-aws-%E9%9B%B2%E7%AB%AF%E6%9E%B6%E6%A7%8B-2c8d3093b10c" target="_blank" rel="noopener">想學習 AWS 卻又不知道從何下手？初探 AWS 雲端架構</a></h3><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="React-新概念-—-Server-Components"><a href="#React-新概念-—-Server-Components" class="headerlink" title="React 新概念 — Server Components"></a><a href="https://link.medium.com/Ycm6riY5Rgb" target="_blank" rel="noopener">React 新概念 — Server Components</a></h3><p>文中介紹了 React 團隊公布的最新的實驗性概念 React Server Components，Server Components 可以用來解決前端打包的 Bundle.js 資源檔太大和與 Server 來回請求次數太多的問題，雖然 Server Components 與當前主流的前後端分離有點不太一致，但是對於要針對 Client 的效能優化來說，還是個可以研究的方向。</p><h3 id="Future-of-CSS-Container-Query"><a href="#Future-of-CSS-Container-Query" class="headerlink" title="Future of CSS - Container Query"></a><a href="https://dev.to/suprabhasupi/future-of-css-container-query-4ma4" target="_blank" rel="noopener">Future of CSS - Container Query</a></h3><p>在現階段如果要做 RWD（Responsive Web Design）的話，都會需要使用 @media 判斷目前 window 的大小，來調整頁面中 element 的顯示方式，但在未來可能會出現 @container，讓開發者可以根據某個 container 的大小做調整。</p><h3 id="Design-Patterns-In-JavaScript"><a href="#Design-Patterns-In-JavaScript" class="headerlink" title="Design Patterns In JavaScript"></a><a href="https://dev.to/twinfred/design-patterns-in-javascript-1l2l" target="_blank" rel="noopener">Design Patterns In JavaScript</a></h3><p>如果你很喜歡使用設計模式來解決一些常見的問題，但卻不曉得該如何在 JavaScript 中使用的話可以參考這篇文章，作者詳細介紹了每個設計模式在 JavaScript 的使用範例，可惜的是少了一些實用的情境和上下文，所以如果本身就設計模式還不太熟的讀者，可以先了解設計模式想解決的問題後，再回來看這篇文章。</p><h3 id="現代前端工程化-基於-Monorepo-的-lerna"><a href="#現代前端工程化-基於-Monorepo-的-lerna" class="headerlink" title="現代前端工程化-基於 Monorepo 的 lerna"></a><a href="https://www.gushiciku.cn/pl/gQR9/zh-tw" target="_blank" rel="noopener">現代前端工程化-基於 Monorepo 的 lerna</a></h3><p>現代的前端開發越來越複雜，在管理一個大型專案上部分專案都會使用 monorepo 的方式來管理，最有名的就是 lerna 這個套件，這篇文章講述了 lerna 這個套件在管理 monorepo 上的一些相關知識，有興趣的讀者可以收藏起來日後閱讀。</p><h3 id="Frontity"><a href="#Frontity" class="headerlink" title="Frontity"></a><a href="https://docs.frontity.org/" target="_blank" rel="noopener">Frontity</a></h3><p>這是個看起來相當有趣的專案，利用 wordpress 當作 CMS 而且可以自己手動刻畫面，而且還是基於 React.js 做出來的套件，感覺日後會有很多可玩性這邊可以推薦讀者做後續的觀察XD</p><h3 id="JavaScript-—-async-await-的-race-condition"><a href="#JavaScript-—-async-await-的-race-condition" class="headerlink" title="JavaScript — async/await 的 race condition"></a><a href="https://toy9986619.medium.com/javascript-async-await-%E7%9A%84-race-condition-20927705569" target="_blank" rel="noopener">JavaScript — async/await 的 race condition</a></h3><p>在非同步中難免都會遇到 race condition 的問題，畢竟很有可能多個 request 在同一個時間點回傳 response 過來去做同一件事情的修改，這篇文章講述了 JavaScript 中的非同步 race condition 問題，有興趣的讀者可以收藏起來看~</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="What-is-the-difference-between-0-0-0-0-127-0-0-1-and-localhost"><a href="#What-is-the-difference-between-0-0-0-0-127-0-0-1-and-localhost" class="headerlink" title="What is the difference between 0.0.0.0, 127.0.0.1 and localhost?"></a><a href="https://stackoverflow.com/a/20778887" target="_blank" rel="noopener">What is the difference between 0.0.0.0, 127.0.0.1 and localhost?</a></h3><p>前幾天跟朋友討論到 server 監聽 127.0.0.1/0.0.0.0/localhost 三者的行為有什麼不同，想說應該也有很多人不太清楚，所以後來在 StackOverflow 上找了一篇不錯的問答，有相同疑惑的話可以參考看看～</p><h3 id="利用-Apps-Script-讓-Google-表單回覆自動產出-Google-文件"><a href="#利用-Apps-Script-讓-Google-表單回覆自動產出-Google-文件" class="headerlink" title="利用 Apps Script 讓 Google 表單回覆自動產出 Google 文件"></a><a href="https://harryuan-65.medium.com/%E5%88%A9%E7%94%A8apps-script-%E8%AE%93-google-%E8%A1%A8%E5%96%AE%E5%9B%9E%E8%A6%86%E8%87%AA%E5%8B%95%E7%94%A2%E5%87%BAgoogle-%E6%96%87%E4%BB%B6-26bf9dacddb6" target="_blank" rel="noopener">利用 Apps Script 讓 Google 表單回覆自動產出 Google 文件</a></h3><p>身為最愛偷懶的工程師，當然什麼事情都要儘量自動化。這篇文章示範了怎麼用 Google 提供的 App Script(很像 JS) 在表單送出時，自動產生出一個文件檔，非常有趣而且也實際解決了作者的問題～</p><h3 id="淺談-HTTP-3-與-QUIC"><a href="#淺談-HTTP-3-與-QUIC" class="headerlink" title="淺談 HTTP/3 與 QUIC"></a><a href="https://link.medium.com/Y6Jx7ZtwTgb" target="_blank" rel="noopener">淺談 HTTP/3 與 QUIC</a></h3><p>雖然還有很多網站連 HTTP2 都沒用上，但近幾年來 HTTP3 也越來成熟了，所以快趁現在來了解一下 HTTP3 以及其底層的 QUIC 吧～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Using-Kubernetes-to-rethink-your-system-architecture-and-ease-technical-debt"><a href="#Using-Kubernetes-to-rethink-your-system-architecture-and-ease-technical-debt" class="headerlink" title="Using Kubernetes to rethink your system architecture and ease technical debt"></a><a href="https://stackoverflow.blog/2021/05/19/rethinking-system-architecture-can-kubernetes-help-to-solve-rewrite-anxiety/" target="_blank" rel="noopener">Using Kubernetes to rethink your system architecture and ease technical debt</a></h3><p>開發人員以把程式重寫而聞名，特別是當他們無法理解交接到手上的軟體是如何運作的時候，但是有經驗的開發人員應該要知道，除非真的有其必要性，不然應該避免把整個程式重新撰寫，因為重寫的過程通常會涉及很多複雜的問題，而且也有可能在過程中引入新的問題；<strong>文章一開頭是這樣講沒錯，但後來整個系統後來還是被翻掉了XD</strong> 在文章中的 Pusher 資深工程師很詳細講述如何分析複雜系統的故事，然後嘗試重建既有系統到 K8s 時面臨的挑戰，最主要想讓讀者知道，在考量更換架構的風險和好處時，可能會需要多次嘗試才能找到最適合的解決方案，並且去說服其他人為什麼要這樣做</p><h3 id="Chaos-Experimentation-an-open-source-framework-built-on-top-of-Envoy-Proxy"><a href="#Chaos-Experimentation-an-open-source-framework-built-on-top-of-Envoy-Proxy" class="headerlink" title="Chaos Experimentation, an open-source framework built on top of Envoy Proxy"></a><a href="https://eng.lyft.com/chaos-experimentation-an-open-source-framework-built-on-top-of-envoy-proxy-df87519ed681" target="_blank" rel="noopener">Chaos Experimentation, an open-source framework built on top of Envoy Proxy</a></h3><p>線上應用服務一定會壞掉，而這只是時間早晚的問題，而不是運氣好不好，而且在分散式系統的架構下，微服務間互相依賴，也造成越來越難知道當某個服務運行不正常，回應時間變久或是成功率下降時，整體服務會是什麼樣的反應，而提早發現這些問題得答案便是 Chaos Engineering 可以幫上忙的地方；而因為 Lyft 所有服務的運行都會透過 Envoy Proxy，所以他們開源了一個構築於 Envoy Proxy 之上的 Chaos Experimentation Framework，讓開發人員可以更簡單的透過這個框架來實現 Chaos Engineering，想要知道具體內容的話，千萬不要錯過精彩的文章內容</p><h3 id="Infrastructure-as-code-platform-Oak9-raises-5-9M"><a href="#Infrastructure-as-code-platform-Oak9-raises-5-9M" class="headerlink" title="Infrastructure-as-code platform Oak9 raises $5.9M"></a><a href="https://venturebeat.com/2021/06/02/infrastructure-as-code-platform-oak9-raises-5-9m/" target="_blank" rel="noopener">Infrastructure-as-code platform Oak9 raises $5.9M</a></h3><p>Oak9 是一個專注於 Infrastructure as Code 安全的服務平台，他在最近的種子輪募資到將近六百萬的美金，看來隨著 IaC 的普及，這類型的工具的需求越來越高，其實從  Deloitte 在 2017 年的一項調查中顯示只有 42% 的受訪者對於他們組織在於管理網路安全風險方面具有信心，而且這幾年來雖然每間公司都逐漸增加資安的投資用以應對分散式 IT 架構還有在家工作的挑戰，但 IDG 表示還是有將近 80% 的資深 IT 從業人員認為自己的組織缺乏應對網路攻擊的防禦能力，所以 Oak9 可以拿到募資也不意外，因為他希望透過整合在軟體開發生命週期中為 Cloud Native 應用服務強化其安全性，並且分析 Infrastructure as Code，藉由不中斷地監控來協助維護各種雲端資源的安全性，讓 IT 從業人員可以對於自己的負責管理的服務更有信心</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 83 期 - Stay Home, Stay Safe.</title>
      <link href="/2021/06/01/83-stay-home-stay-safe/"/>
      <url>/2021/06/01/83-stay-home-stay-safe/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Macbook-膨脹的災情了嘛？Aldente-幫你自動斷電"><a href="#Macbook-膨脹的災情了嘛？Aldente-幫你自動斷電" class="headerlink" title="Macbook 膨脹的災情了嘛？Aldente 幫你自動斷電"></a><a href="https://medium.com/starbugs/%E4%BD%A0%E9%81%87%E5%88%B0-macbook-%E8%86%A8%E8%84%B9%E7%9A%84%E7%81%BD%E6%83%85%E4%BA%86%E5%98%9B-aldente-%E5%B9%AB%E4%BD%A0%E8%87%AA%E5%8B%95%E6%96%B7%E9%9B%BB-c35fd8a96b0b" target="_blank" rel="noopener">Macbook 膨脹的災情了嘛？Aldente 幫你自動斷電</a></h3><p>大約 2018 開始的 Macbook 開始邁向輕薄，但也是從這時候開始，開始有著電池膨脹的災情。看著身旁同事的筆電逐一膨脹送修，慶幸自己的筆電沒有遇到這種災情。<br>但，好景不長，從 2019 購入到現在約莫兩年多， 我的筆電電池終究是膨脹了…</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Learn-CSS-By-Playing-Games-👾"><a href="#Learn-CSS-By-Playing-Games-👾" class="headerlink" title="Learn CSS By Playing Games 👾"></a><a href="https://dev.to/suprabhasupi/learn-css-by-playing-games-1a36" target="_blank" rel="noopener">Learn CSS By Playing Games 👾</a></h3><p>最近玩魔物獵人常常就算放空了，手指還是反射性地做迴避或攻擊的動作。那如果說把學習 CSS 的各種技巧也都變成遊戲，然後一直玩下去是不是之後看到什麼版型配置也都可以反射性地想到如何解決。 😂</p><h3 id="Back-to-Basic-Should-we-use-Flexbox-or-Grid"><a href="#Back-to-Basic-Should-we-use-Flexbox-or-Grid" class="headerlink" title="Back to Basic: Should we use Flexbox or Grid?"></a><a href="https://dev.to/theodorusclarence/back-to-basic-should-we-use-flexbox-or-grid-1h9i" target="_blank" rel="noopener">Back to Basic: Should we use Flexbox or Grid?</a></h3><p>看了許多教學文章並學會 Flex 和 Gird 後，反而搞不太清楚什麼時候該使用 Flex，什麼時候又該使用 Grid 嗎？在這篇文章和留言裡面的總結是「如果你用 Flex 太複雜，就使用 Grid。Grid 可以是 Flex 的父項，反之亦然。」</p><h3 id="What-is-Vite-and-how-to-use-it-with-React"><a href="#What-is-Vite-and-how-to-use-it-with-React" class="headerlink" title="What is Vite and how to use it with React"></a><a href="https://wakanai.io/what-is-vite-and-how-to-use-it-with-react/" target="_blank" rel="noopener">What is Vite and how to use it with React</a></h3><p>這篇文章從零建構一個 React 的專案，並且使用 Vite 來協助打包專案以及處理開發中必不可缺的 Hot Module Replacement，看起來非常簡單，大家有興趣可以試試看。 🙌</p><h3 id="Throttling-vs-Debouncing-an-interesting-analogy"><a href="#Throttling-vs-Debouncing-an-interesting-analogy" class="headerlink" title="Throttling vs Debouncing - an interesting analogy"></a><a href="https://dev.to/mayankav/throttling-vs-debouncing-29e8" target="_blank" rel="noopener">Throttling vs Debouncing - an interesting analogy</a></h3><p>在前端開發中難免跟事件綁定脫離不了關係，有時候為了效能會採用 debounce 的方式來處理，最有名的方法就是 lodash 的 <a href="https://lodash.com/docs/4.17.11#debounce" target="_blank" rel="noopener">debounce</a>，這篇文章分析了兩種處理事件的方法，有興趣的讀者不妨可以收藏起來日後可以閱讀。</p><h3 id="重新認識-Pixel、DPI-PPI-以及像素密度"><a href="#重新認識-Pixel、DPI-PPI-以及像素密度" class="headerlink" title="重新認識 Pixel、DPI / PPI 以及像素密度"></a><a href="https://blog.infolink.com.tw/2021/rediscover-pixel-dpi-ppi-and-pixel-density/?fbclid=IwAR2zz3FN7k-q9FVMlpqeR79UtuFeEtacjCZjLAwmuQ7ko3ctkLuRlWX6Vrw" target="_blank" rel="noopener">重新認識 Pixel、DPI / PPI 以及像素密度</a></h3><p>身為一個前端工程師很常會遇到圖片像素的問題，或者是每個元素之間的 Pixel 距離，這篇文章介紹了幾個在網頁中常用單位，有興趣的讀者也可以收藏起來。</p><h3 id="How-To-Use-Mobile-App-ASO-And-SEO-For-Your-App-Promotion"><a href="#How-To-Use-Mobile-App-ASO-And-SEO-For-Your-App-Promotion" class="headerlink" title="How To Use Mobile App ASO And SEO For Your App Promotion"></a><a href="https://dev.to/krowser/how-to-use-mobile-app-aso-and-seo-for-your-app-promotion-36pg" target="_blank" rel="noopener">How To Use Mobile App ASO And SEO For Your App Promotion</a></h3><p>在 Google 宣布 AMP is dead 之後還有哪些方法可以提供手機版的 SEO 呢？這篇文章敘述了幾個可以提升 SEO 的方法。</p><h2 id="Web-Security"><a href="#Web-Security" class="headerlink" title="Web Security"></a>Web Security</h2><h3 id="CORS-完全手冊（一）：為什麼會發生-CORS-錯誤？"><a href="#CORS-完全手冊（一）：為什麼會發生-CORS-錯誤？" class="headerlink" title="CORS 完全手冊（一）：為什麼會發生 CORS 錯誤？"></a><a href="https://blog.huli.tw/2021/02/19/cors-guide-1/" target="_blank" rel="noopener">CORS 完全手冊（一）：為什麼會發生 CORS 錯誤？</a></h3><p>這一份由胡立寫的 CORS 總共有六篇，內容真的紮實到不行，除了詳細說明 CORS 錯誤的原理之外，還帶著你思考瀏覽器究竟為什麼要做這樣的限制，真的是不可多得的一系列好文。</p><h3 id="防止-XSS-可能比想像中困難"><a href="#防止-XSS-可能比想像中困難" class="headerlink" title="防止 XSS 可能比想像中困難"></a><a href="https://blog.huli.tw/2021/05/25/prevent-xss-is-not-that-easy/" target="_blank" rel="noopener">防止 XSS 可能比想像中困難</a></h3><p>這篇同樣是由胡立大大寫的文章，內容主要在講述一個看似安全的網站，究竟是哪邊沒處理好導致有 XSS 的漏洞，分析的過程稍微有點複雜但也很有趣。</p><h3 id="跨出成為駭客的第一步，來打打看-CTF-Web-吧！"><a href="#跨出成為駭客的第一步，來打打看-CTF-Web-吧！" class="headerlink" title="跨出成為駭客的第一步，來打打看 CTF Web 吧！"></a><a href="https://medium.com/starbugs/ctf-the-first-step-to-becoming-a-hacker-a56eb8820fac" target="_blank" rel="noopener">跨出成為駭客的第一步，來打打看 CTF Web 吧！</a></h3><p>既然都說到 Web Security 了，那就不得不偷渡一下自己介紹 CTF 的文章XD。對我來說打 CTF 除了滿足當駭客的成就感之外，更重要的是知道怎麼攻擊之後，能用攻擊者的思維來檢視自己做的網站，如果連自己身為開發者都沒辦法攻下自家的網站，那才能說自家的網站是安全的對吧！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Argo-rollouts-1-0-released"><a href="#Argo-rollouts-1-0-released" class="headerlink" title="Argo rollouts 1.0 released!"></a><a href="https://www.cncf.io/blog/2021/05/27/argo-rollouts-1-0-released/" target="_blank" rel="noopener">Argo rollouts 1.0 released!</a></h3><p>Argo Rollouts 發布 1.0 啦！不過他是做什麼的啊XD Argo Rollouts 是專門用來補足原生 Kubernetes Deployment 功能不足的部署控制工具，他可以讓 K8s Deployment 具有更多的部署策略，例如 Blue/Green，Canary，Analysis 和 Experiment 部署策略，而他通常會和 Argo CD 一起搭配使用；不過他真的想達成的目標是成為 K8s Deployment Resource 的替代方案，提供應用服務一個更好的生命週管理機制，讓使用者可以利用各種適合自己的策略來進行部署，進而降低部署的風險，並且擁有部署期間自動中斷或是 Rollback 回上一個穩定版本的能力！</p><h3 id="Announcing-Tech-Preview-of-Consul-Service-Mesh-for-Amazon-ECS"><a href="#Announcing-Tech-Preview-of-Consul-Service-Mesh-for-Amazon-ECS" class="headerlink" title="Announcing Tech Preview of Consul Service Mesh for Amazon ECS"></a><a href="https://www.hashicorp.com/blog/announcing-consul-service-mesh-for-amazon-ecs" target="_blank" rel="noopener">Announcing Tech Preview of Consul Service Mesh for Amazon ECS</a></h3><p>使用 AWS ECS 的開發者們現在可以選擇 HashiCorp Consul 來作為 Service Mesh 的解決方案嘍！不過大家先不要太激動，因為還只是在 Tech Preview 的階段而已，他可以讓開發者先部署在非生產環境做測試看看，這篇文章先稍微介紹如何把 HashiCorp Consul 跟 ECS 整合再一起，緊接著手把手的使用 Terraform 來講解要怎麼部署，有興趣試試看的人不要錯過了！</p><h3 id="Fairwinds-Releases-Polaris-4-0-Provides-Support-for-All-Kubernetes-Resources"><a href="#Fairwinds-Releases-Polaris-4-0-Provides-Support-for-All-Kubernetes-Resources" class="headerlink" title="Fairwinds Releases Polaris 4.0, Provides Support for All Kubernetes Resources"></a><a href="https://www.fairwinds.com/news/fairwinds-releases-polaris-4.0" target="_blank" rel="noopener">Fairwinds Releases Polaris 4.0, Provides Support for All Kubernetes Resources</a></h3><p>感覺用來幫 K8s 做健康檢查的工具越來越多了，這次要介紹的解決方案叫做 Polaris，他在最近發佈了 4.0 版，他會自動地去幫忙檢查並且確保 K8s 內的 Pod 和 Controllers 有根據 Best Practices 來做設定，跟 <a href="https://github.com/derailed/popeye" target="_blank" rel="noopener">Popeye</a> 有點像，幫助 K8s 的維運人員避開可能遇到的問題，而在最新發佈的版本中，他支援了 K8s 的各種資源種類，包含 Ingress, Service 和 ClusterRole，增加根據 metadata 去做客製化檢查的能力，並且支援跨資源的檢查功能，例如確保所有的 Deployment 都有 HPA </p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 82 期 - Work from home 不孤單，我們陪你</title>
      <link href="/2021/05/25/82-we-work-from-home-together/"/>
      <url>/2021/05/25/82-we-work-from-home-together/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="React-為太龐大的程式碼做-Lazy-Loading-和-Code-Splitting"><a href="#React-為太龐大的程式碼做-Lazy-Loading-和-Code-Splitting" class="headerlink" title="React | 為太龐大的程式碼做 Lazy Loading 和 Code Splitting"></a><a href="https://medium.com/starbugs/react-%E7%82%BA%E5%A4%AA%E9%BE%90%E5%A4%A7%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC%E5%81%9A-lazy-loading-%E5%92%8C-code-splitting-7384626a6e0d" target="_blank" rel="noopener">React | 為太龐大的程式碼做 Lazy Loading 和 Code Splitting</a></h3><p>不曉得大家在使用 React 或是 Vue（抱歉我只用過這兩種前端框架，沒有要排擠的意思 😂）寫完程式要打包的時候，會不會遇到打包後的 JavaScript 太肥大了，讓網頁下載資源的時間變長，導致畫面出現在網頁的速度也跟著變慢。Lazy loading 和 code splitting 就是為了解決編譯後的打包檔太大的問題所存在的。雖然大部分人可能不會馬上遇到打包後的檔案太大的情況，但是遇到的話該如何優化呢？一起看看文章吧！ 🙌</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="How-to-Use-CSS-Selectors-to-Style-Your-Web-Page"><a href="#How-to-Use-CSS-Selectors-to-Style-Your-Web-Page" class="headerlink" title="How to Use CSS Selectors to Style Your Web Page"></a><a href="https://www.freecodecamp.org/news/use-css-selectors-to-style-webpage/" target="_blank" rel="noopener">How to Use CSS Selectors to Style Your Web Page</a></h3><p>把 CSS 中常用的選擇器分成「簡單選擇器」、「組合選擇器」、「偽類選擇器」、「偽元素選擇器」和「屬性選擇器」，並仔細介紹它們的功能，大家可以先把這篇存起來，之後使用到時再打開找自己需要的，不然看過一次可能很快就會忘了。 😂</p><h3 id="Top-10-Chrome-DevTools-tips-amp-tricks"><a href="#Top-10-Chrome-DevTools-tips-amp-tricks" class="headerlink" title="Top 10 Chrome DevTools tips &amp; tricks"></a><a href="https://dev.to/areknawo/top-10-chrome-devtools-tips-tricks-2b8g" target="_blank" rel="noopener">Top 10 Chrome DevTools tips &amp; tricks</a></h3><p>本篇文章介紹了 Chrome DevTools 提供給開發者的各種好用功能，也許這些功能可以大大的減少你在查找 Bug 或是調整前端畫面的時間。</p><h3 id="The-future-of-Internet-Explorer-on-Windows-10-is-in-Microsoft-Edge"><a href="#The-future-of-Internet-Explorer-on-Windows-10-is-in-Microsoft-Edge" class="headerlink" title="The future of Internet Explorer on Windows 10 is in Microsoft Edge"></a><a href="https://blogs.windows.com/windowsexperience/2021/05/19/the-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge/?fbclid=IwAR1-Y4O6Zn75V1Hj9cUbWX2tYUxNRDDF0x9bqVc0bwRalJHfMUWY-MazDOM" target="_blank" rel="noopener">The future of Internet Explorer on Windows 10 is in Microsoft Edge</a></h3><p>微軟將要把瀏覽器的主力通通放到 Edge 上了，因此會在 2022 年 6 月 15 日開始停止 IE 的使用（身為前端工程師，讓我歡呼一下 🎉），文章中描述了幾個將 IE 淘汰的原因（各位可以撇開私仇，從專業的角度了解一下 😂）。</p><h3 id="Google-AMP-is-dead-AMP-pages-no-longer-get-preferential-treatment-in-Google-search"><a href="#Google-AMP-is-dead-AMP-pages-no-longer-get-preferential-treatment-in-Google-search" class="headerlink" title="Google AMP is dead! AMP pages no longer get preferential treatment in Google search"></a><a href="https://plausible.io/blog/google-amp" target="_blank" rel="noopener">Google AMP is dead! AMP pages no longer get preferential treatment in Google search</a></h3><p>Google 終於要終止 AMP 專案了 🎉，以前很多新聞平台為了讓自己的新聞稿曝光率增加都會利用 amp 的方式讓手機可以快速的閱讀靜態網站的內容，所以很多大型公司為了讓自己的網站可以增加 Google 的自然搜尋都會要求前端工程師改寫網站成 amp 的模式，不過最近 Google 要終止這個專案了前端工程師們終於可以減少學習的技能了XD</p><h3 id="nth-of-type-amp-nth-last-of-type-你覺得燒腦但其實根本不燒腦的選取器趴兔"><a href="#nth-of-type-amp-nth-last-of-type-你覺得燒腦但其實根本不燒腦的選取器趴兔" class="headerlink" title=":nth-of-type() &amp; :nth-last-of-type() - 你覺得燒腦但其實根本不燒腦的選取器趴兔"></a><a href="https://ithelp.ithome.com.tw/articles/10227242" target="_blank" rel="noopener">:nth-of-type() &amp; :nth-last-of-type() - 你覺得燒腦但其實根本不燒腦的選取器趴兔</a></h3><p>會突然分享這篇文章的原因是因為最近看了一個 <a href="https://codepen.io/bad_printer/pen/abbdBVW?fbclid=IwAR0g2eadFlYV1cASg4BSGyIv4oPsCCEh2x4vTynx4a530JCsx0bHpC7FEw4" target="_blank" rel="noopener">codepen</a>，沒想到竟然會有多個元素同時一個選擇器選到，後來才知道原來 CSS 選擇器也可以利用數學公式的原理這樣玩真的太特別了！</p><h3 id="Array-prototype-flat"><a href="#Array-prototype-flat" class="headerlink" title="Array.prototype.flat()"></a><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="noopener">Array.prototype.flat()</a></h3><p>最近在看新的 ES10 的功能中，發現了一個正在實驗性但是很好用的陣列操作 method，flat 簡單來說就是壓平的意思，可以幫助一個複雜的多維陣列壓平成一個一維陣列，目前基本上主流的瀏覽器都支援這個方法了，如果之後開發上有需要做到類似的操作不妨使用原生的方法就好，不用再額外引用 lodash 的 <a href="https://lodash.com/docs/4.17.15#flatten" target="_blank" rel="noopener">flattern</a> 了XD</p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="Comprehensive-Guide-to-Dates-and-Times-in-Go"><a href="#Comprehensive-Guide-to-Dates-and-Times-in-Go" class="headerlink" title="Comprehensive Guide to Dates and Times in Go"></a><a href="https://qvault.io/golang/golang-date-time/" target="_blank" rel="noopener">Comprehensive Guide to Dates and Times in Go</a></h3><p>常常被時區、時間差、日期輸出格式搞到很煩嗎？這篇文章整理了 Go 裡面各種跟時間的函數，教你怎麼在各種格式之間轉來轉去</p><h3 id="Graceful-Shutdowns-in-Golang-with-signal-NotifyContext"><a href="#Graceful-Shutdowns-in-Golang-with-signal-NotifyContext" class="headerlink" title="Graceful Shutdowns in Golang with signal.NotifyContext"></a><a href="https://millhouse.dev/posts/graceful-shutdowns-in-golang-with-signal-notify-context" target="_blank" rel="noopener">Graceful Shutdowns in Golang with signal.NotifyContext</a></h3><p>對於一個 API server 來說，除了流量要扛得住之外，在 server 即將要關閉時做 Gracefully shutdown 也是非常重要的事情。而這篇文章提供了一個很簡單的範例，教你怎麼用 <code>signal.NotifyContext</code> 在收到 signal 時開始 gracefully shutdown，而不是直接就把 server 關掉</p><h3 id="Go-Package-CI-CD-with-GitHub-Actions"><a href="#Go-Package-CI-CD-with-GitHub-Actions" class="headerlink" title="Go Package CI/CD with GitHub Actions"></a><a href="https://dev.to/jidicula/go-package-ci-cd-with-github-actions-350o" target="_blank" rel="noopener">Go Package CI/CD with GitHub Actions</a></h3><p>因為 Github Action 對於開源專案是完全免費的，而且跟 Github 的整合非常好，所以很多開源專案也紛紛從 Travis/Circle CI 轉過來。如果你手邊剛好也有 Go 的開源專案想要使用 Github Action 的話這篇是不錯的例子，不管是執行 Lint、Test 還是跨平台編譯這篇都寫得很清楚，懶得自己動手的話也可以借他的腳本過來改一改～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Kubernetes-6-open-source-tools-to-put-your-cluster-to-the-test"><a href="#Kubernetes-6-open-source-tools-to-put-your-cluster-to-the-test" class="headerlink" title="Kubernetes: 6 open source tools to put your cluster to the test"></a><a href="https://enterprisersproject.com/article/2021/5/kubernetes-6-open-source-tools-to-test-clusters" target="_blank" rel="noopener">Kubernetes: 6 open source tools to put your cluster to the test</a></h3><p>K8s 生態系中有很多蓬勃發展的工具可以用來協助使用者，這篇文章介紹了六個用來測試 K8s Cluster 和在其中應用程式的好用工具:</p><ul><li><a href="https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/" target="_blank" rel="noopener">Kubernetes Dashboard</a>: 大家都知道可以用來管理 Cluster 的 Admin Console</li><li><a href="https://github.com/asobti/kube-monkey" target="_blank" rel="noopener">Kube-monkey</a>: 把 Netflix 的 Chaos Monkey 改成專門運行在 K8s 中的版本</li><li><a href="https://github.com/aquasecurity/kube-hunter" target="_blank" rel="noopener">Kube-hunter</a>: 用來對  K8s Cluster 做滲透測試用以發現資安弱點的工具</li><li><a href="https://www.projectquay.io/" target="_blank" rel="noopener">Project Quay</a>: Quay 不只是 Container Image Registry，同時也可以幫忙掃描 Image 有沒有什麼 Vulnerability</li><li><a href="https://github.com/cloud-bulldozer/kube-burner" target="_blank" rel="noopener">Kube-burner</a>: 對 K8s Cluster 做壓力測試，例如一次建立很多的資源，然後再同時刪除掉</li><li><a href="https://github.com/aquasecurity/kube-bench" target="_blank" rel="noopener">Kube-bench</a>: 檢查 K8s Clustser 是否符合 CIS Kubernetes Benchmark</li></ul><h3 id="Introducing-AWS-App-Runner"><a href="#Introducing-AWS-App-Runner" class="headerlink" title="Introducing AWS App Runner"></a><a href="https://aws.amazon.com/blogs/containers/introducing-aws-app-runner/" target="_blank" rel="noopener">Introducing AWS App Runner</a></h3><p>AWS 最近發佈的一個新的服務叫做 App Runner，號稱用來運行容器化 Web 服務的最簡單方式，使用他就不用再去管什麼 K8s, 不用設定 Pipeline，也不用去優化 Load Balancer，或是需要擔心 TLS 憑證是不是要過期了，當然也沒有伺服器需要管理，只需要把 Container 丟進去就可以跑了，然後再根據運行時間去算錢！</p><h3 id="The-Architecture-of-Uber’s-API-gateway"><a href="#The-Architecture-of-Uber’s-API-gateway" class="headerlink" title="The Architecture of Uber’s API gateway"></a><a href="https://eng.uber.com/architecture-api-gateway/" target="_blank" rel="noopener">The Architecture of Uber’s API gateway</a></h3><p>API Gateway 是微服務架構中不可缺少的一環，因為他可以為所有的應用程式提供單一個入口，並且提供一個介面來取得資料，商業邏輯和功能性，他也是一個用來實作許多高階功能的地方，例如 routing，protocol 的轉換，Rate Limiting, Load Shedding，處理 Header，安全審核，使用者存取控制…等；而這篇文章是想要深入探討 Uber 自己使用的 API Gateway 系統內的每個技術元件，推薦給有使用微服務架構的人參考看看</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 81 期 - 防疫期間與星巴哥一起在家耍廢、技術學會！</title>
      <link href="/2021/05/18/81-stay-at-home-with-starbugs/"/>
      <url>/2021/05/18/81-stay-at-home-with-starbugs/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="你一定用過-htop，但你有看懂每個欄位嗎？"><a href="#你一定用過-htop，但你有看懂每個欄位嗎？" class="headerlink" title="你一定用過 htop，但你有看懂每個欄位嗎？"></a><a href="https://medium.com/starbugs/do-you-understand-htop-ffb72b3d5629" target="_blank" rel="noopener">你一定用過 htop，但你有看懂每個欄位嗎？</a></h3><p>大家好我是 Larry，這週的專欄要跟大家詳細介紹 htop 中每個指標如 Load Acerage、Resident、Time+ 所代表的意義。文章比較長如果一次看不完也沒關係，可以收藏起來等哪天用到 htop 時再回來複習就好了～</p><h2 id="作業系統"><a href="#作業系統" class="headerlink" title="作業系統"></a>作業系統</h2><h3 id="Linux-的記憶體快取功能：系統把記憶體用光了？"><a href="#Linux-的記憶體快取功能：系統把記憶體用光了？" class="headerlink" title="Linux 的記憶體快取功能：系統把記憶體用光了？"></a><a href="https://blog.gtwang.org/linux/linux-cache-memory-linux/" target="_blank" rel="noopener">Linux 的記憶體快取功能：系統把記憶體用光了？</a></h3><p>看到電腦的記憶體快用完了千萬不要緊張，說不定是被系統借去做其他事了，因為 Linux 會把沒用到的記憶體借去做快取，不只可以提昇系統效能，而且還幾乎沒有副作用哦</p><h3 id="htop-explained"><a href="#htop-explained" class="headerlink" title="htop explained"></a><a href="https://peteris.rocks/blog/htop/" target="_blank" rel="noopener">htop explained</a></h3><p>這篇文章非常非常長，他仔細介紹了 htop 裡面的資訊是從哪邊取得的，整篇看完差不多也知道怎麼自己寫一個 htop 了XD</p><h3 id="Operating-System-Virtual-Memory"><a href="#Operating-System-Virtual-Memory" class="headerlink" title="Operating System - Virtual Memory"></a><a href="https://www.tutorialspoint.com/operating_system/os_virtual_memory.htm" target="_blank" rel="noopener">Operating System - Virtual Memory</a></h3><p>虛擬記憶體（Virtual Memory）是系統在做記憶體管理時非常重要的概念，而且這篇文章也寫得很淺顯易懂，就算完全沒有作業系統的背景知識也能看懂哦～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="做了一夜动画，让大家十分钟搞懂Webpack"><a href="#做了一夜动画，让大家十分钟搞懂Webpack" class="headerlink" title="做了一夜动画，让大家十分钟搞懂Webpack"></a><a href="https://juejin.cn/post/6961961165656326152" target="_blank" rel="noopener">做了一夜动画，让大家十分钟搞懂Webpack</a></h3><p>標題檔的部分在做了一夜動畫，但是 Webpack 的講解真的非常清楚！一步步把 Webpack 如何把專案裡的 JavaScript 全都整理成一份的過程，有興趣的話可以花些時間了解一下！</p><h3 id="Absolutely-Relative-CSS-Length-Units"><a href="#Absolutely-Relative-CSS-Length-Units" class="headerlink" title="Absolutely Relative CSS Length Units"></a><a href="https://levelup.gitconnected.com/absolutely-relative-css-length-units-fd990575ddb2" target="_blank" rel="noopener">Absolutely Relative CSS Length Units</a></h3><p>文中介紹了在 CSS 中常見的幾個長度的單位，像是代表絕對單位的 <code>px</code>、相對單位的 <code>em</code> 和 <code>rem</code> 或是與瀏覽器視窗有關係的 <code>vw</code>、<code>vh</code>、<code>vmin</code> 和 <code>vmax</code>，一起看看這些單位間有什麼不同吧！</p><h3 id="Why-do-you-need-to-know-about-the-JavaScript-Array-at-method"><a href="#Why-do-you-need-to-know-about-the-JavaScript-Array-at-method" class="headerlink" title="Why do you need to know about the JavaScript Array at() method?"></a><a href="https://blog.greenroots.info/why-do-you-need-to-know-about-the-javascript-array-at-method-ckoskkkee0ftmbws1ag0b4udt" target="_blank" rel="noopener">Why do you need to know about the JavaScript Array at() method?</a></h3><p>如果要在 JavaScript 中的 Array 取得某個元素大家通常都會使用中括號 <code>[]</code>，但用 <code>[]</code> 的話如果要取得最後一個元素，就得用 <code>arr[arr.length - 1]</code> 這種不直觀的寫法。而文章中介紹了全新用來取得 Array 元素的方法 <code>at(index)</code>，雖然該方法還沒有正式實裝到現有版本，但還是可以用 <a href="https://github.com/es-shims/Array.prototype.at" target="_blank" rel="noopener">polyfill</a> 早用早享受！</p><h3 id="variable-undefined-vs-typeof-variable-“undefined”-in-JavaScript"><a href="#variable-undefined-vs-typeof-variable-“undefined”-in-JavaScript" class="headerlink" title="variable === undefined vs. typeof variable === “undefined” in JavaScript"></a><a href="https://www.geeksforgeeks.org/variable-undefined-vs-typeof-variable-undefined-in-javascript/" target="_blank" rel="noopener">variable === undefined vs. typeof variable === “undefined” in JavaScript</a></h3><p>以往在比對某變數的值是否為 <code>undefined</code> 的時候都是直接用 <code>variable === undefined</code> 的方式，但其實還有另一種 <code>typeof variable === &#39;undefined&#39;</code> 的判斷方式，這兩種判斷方式最主要的差異在哪呢？這篇文章有完整的介紹可以參考。</p><h3 id="The-history-of-“typeof-null”"><a href="#The-history-of-“typeof-null”" class="headerlink" title="The history of “typeof null”"></a><a href="https://2ality.com/2013/10/typeof-null.html" target="_blank" rel="noopener">The history of “typeof null”</a></h3><p>這個真的是最近踩到的雷，在做物件的值是否為 null 的比對時，結果發現即便 value 為 null，但 <code>typeof null === &#39;object&#39;</code> 也會是 true，這真的是太怪了，於是就去翻 JavaScript 會把 null 的 type 定義為 null 就看到這篇，有興趣的讀者可以看一看但結論就是 <code>typeof null === &#39;object&#39;</code> 是 JavaScript 的 bug XD</p><h3 id="Introduction-To-Polyfills-amp-Their-Usage"><a href="#Introduction-To-Polyfills-amp-Their-Usage" class="headerlink" title="Introduction To Polyfills &amp; Their Usage"></a><a href="https://medium.com/beginners-guide-to-mobile-web-development/introduction-to-polyfills-their-usage-9cd6db4b1923" target="_blank" rel="noopener">Introduction To Polyfills &amp; Their Usage</a></h3><p>相信身為一個前端工程師很常遇到一些新的 method 是無法在舊的瀏覽器當中實現，這就是因為瀏覽器沒有去實作這個 method 的原因，這時候我們就必須要寫 polyfill，那 polyfill 要怎麼寫呢？這篇文章有詳細的介紹。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="5-Linux-commands-I-never-use"><a href="#5-Linux-commands-I-never-use" class="headerlink" title="5 Linux commands I never use"></a><a href="https://www.redhat.com/sysadmin/5-never-use-linux-commands" target="_blank" rel="noopener">5 Linux commands I never use</a></h3><p>這邊文章還滿有趣的，因為通常寫文章的人都會介紹正面的東西，例如最好用，最省時間，最省資源…等，不過這邊竟然是介紹最無用的 Command XD 大家覺得有道理嗎？！</p><ul><li>arch: 取得電腦的架構</li><li>arpaname: 取得 ARPA Name</li><li>bc: 互動式計算器</li><li>dumpkeys: 將鍵盤的對照表寫到標準輸出之中</li><li>uname: 取得當前電腦和作業系統的名稱、版本及其他細節</li></ul><h3 id="Automating-tagging-and-versioning-of-Terraform-modules"><a href="#Automating-tagging-and-versioning-of-Terraform-modules" class="headerlink" title="Automating tagging and versioning of Terraform modules"></a><a href="https://itnext.io/automating-tagging-and-versioning-of-terraform-modules-or-any-language-3a271966c63c" target="_blank" rel="noopener">Automating tagging and versioning of Terraform modules</a></h3><p>這篇文章很值得一讀，在解釋怎麼管理一個 Terraform Module Git Repositroy，裡面提到了版號要怎麼訂，Commit Message 的格式要怎麼寫比較好，並且怎麼把這些規矩融入到 CI Pipeline 中，最後再提到怎麼自動化產生 Change Log, 其實不只是 Terraform Modlue，其他的程式語言應該也可以參考</p><h3 id="karmada"><a href="#karmada" class="headerlink" title="karmada"></a><a href="https://github.com/karmada-io/karmada" target="_blank" rel="noopener">karmada</a></h3><p>在一個組織裡要管理多個 K8s Cluster 已經是無法逃避的一件事情，這邊想要介紹的工具叫做 Karmada，是用來管理跨雲的多重 K8s Cluster 開源方案，他跟原生的 K8s API 相容，可以避免 Vendor Lock-in，讓管理可以集中化，而且可以讓 Workload 在多組 Cluster 間找到最適合自己的居所，而這個專案有些基本觀念主要是來自 Federation v1 跟 v2，有興趣的人可以參考看看</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 80 期 - 世界為我而轉動！</title>
      <link href="/2021/05/11/80-argo-cd-applicationset-controller/"/>
      <url>/2021/05/11/80-argo-cd-applicationset-controller/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Argo-CD-ApplicationSet-Controller-世界為我而轉動！"><a href="#Argo-CD-ApplicationSet-Controller-世界為我而轉動！" class="headerlink" title="Argo CD ApplicationSet Controller: 世界為我而轉動！"></a><a href="https://medium.com/starbugs/argo-cd-applicationset-controller-%E4%B8%96%E7%95%8C%E7%82%BA%E6%88%91%E8%80%8C%E8%BD%89%E5%8B%95-a837f9392298" target="_blank" rel="noopener">Argo CD ApplicationSet Controller: 世界為我而轉動！</a></h3><p>想要一次性自動地在所有管理的 Kubernetes Cluster 安裝好 Prometheus，或是在某一座 Kubernetes Cluster 內快速地 Bootstrap N 個 Namespace，有這些需求的人千萬不要錯過，由 Argo 新推出的 Argo CD ApplicationSet Controller，它讓使用者在單個 YAML 檔案內像是寫 For Loop 程式，隨需求一次性地建立大量的 Application，就讓我們使用實際範例來看它如何解放 Kubernetes 維運人員的雙手與時間</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="Gatsby-簡單兩個步驟，讓你把-Gatsby-個人網站變成-PWA！"><a href="#Gatsby-簡單兩個步驟，讓你把-Gatsby-個人網站變成-PWA！" class="headerlink" title="Gatsby | 簡單兩個步驟，讓你把 Gatsby 個人網站變成 PWA！"></a><a href="https://medium.com/starbugs/gatsby-%E7%B0%A1%E5%96%AE%E5%85%A9%E5%80%8B%E6%AD%A5%E9%A9%9F-%E8%AE%93%E4%BD%A0%E6%8A%8A-gatsby-%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99%E8%AE%8A%E6%88%90-pwa-450a07668fef" target="_blank" rel="noopener">Gatsby | 簡單兩個步驟，讓你把 Gatsby 個人網站變成 PWA！</a></h3><h3 id="前端開發者該負責寫-API-Endpoints-嗎？The-Backend-For-Frontend-Pattern-BFF-In-Microservices-World"><a href="#前端開發者該負責寫-API-Endpoints-嗎？The-Backend-For-Frontend-Pattern-BFF-In-Microservices-World" class="headerlink" title="前端開發者該負責寫 API Endpoints 嗎？The Backend For Frontend Pattern (BFF) In Microservices World"></a><a href="https://medium.com/starbugs/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC%E8%80%85%E8%A9%B2%E8%B2%A0%E8%B2%AC%E5%AF%AB-api-endpoints-%E5%97%8E-the-backend-for-frontend-pattern-bff-in-microservices-world-1368362c141c" target="_blank" rel="noopener">前端開發者該負責寫 API Endpoints 嗎？The Backend For Frontend Pattern (BFF) In Microservices World</a></h3><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Lazy-loading-using-the-Intersection-Observer-API"><a href="#Lazy-loading-using-the-Intersection-Observer-API" class="headerlink" title="Lazy loading using the Intersection Observer API"></a><a href="https://blog.logrocket.com/lazy-loading-using-the-intersection-observer-api/" target="_blank" rel="noopener">Lazy loading using the Intersection Observer API</a></h3><p>在前端處理圖片載入優化的效能時，Lazy loading 會是其中一個改善使用者體驗的選擇之一，而在文章裡面作者就使用了 Intersection Observer API 來實現 Lazy Loading！</p><h3 id="How-To-Use-Web-Worker"><a href="#How-To-Use-Web-Worker" class="headerlink" title="How To Use Web Worker"></a><a href="https://blog.bibekkakati.me/how-to-use-web-worker" target="_blank" rel="noopener">How To Use Web Worker</a></h3><p>透過 Web Worker API 可以產生一個在背景執行的 worker，這樣就不會讓同步執行的 JavaScript 因為執行比較長時間的程式碼產生應用程式沒有回應狀況。文章中解釋了一些關於 Worker 的基本操作。</p><h3 id="How-To-Use-Vibration-API-in-Your-Website"><a href="#How-To-Use-Vibration-API-in-Your-Website" class="headerlink" title="How To Use Vibration API in Your Website"></a><a href="https://dev.to/bibekkakati/how-to-use-vibration-api-in-your-website-4dp4" target="_blank" rel="noopener">How To Use Vibration API in Your Website</a></h3><p>Vibration API 可以透過 Web 對使用者的設備傳達震動的反應，雖然目前只能在 Android 上的 Chrome 上使用，但是相信 Web 就快要可以征服世界了 😂</p><h3 id="街口前端視覺搭建系統-創始篇"><a href="#街口前端視覺搭建系統-創始篇" class="headerlink" title="街口前端視覺搭建系統-創始篇"></a><a href="https://medium.com/jkopay-frontend/%E8%A1%97%E5%8F%A3%E5%89%8D%E7%AB%AF%E8%A6%96%E8%A6%BA%E6%90%AD%E5%BB%BA%E7%B3%BB%E7%B5%B1-%E5%89%B5%E5%A7%8B%E7%AF%87-e849f713fbe0" target="_blank" rel="noopener">街口前端視覺搭建系統-創始篇</a></h3><p>這篇真的蠻值得一看的，很多大公司為了方便管理自己的前台頁面內容都會設計一個後台給需求端使用，這篇文章敘述了一個好的後台會先從什麼樣的基礎架構進行撰寫，非常值得收藏起來看。</p><h3 id="TypeScript-中的-any-和-unknown"><a href="#TypeScript-中的-any-和-unknown" class="headerlink" title="TypeScript 中的 any 和 unknown"></a><a href="https://abstreamace.com/sglab/2021/05/06/typescript-%e4%b8%ad%e7%9a%84-any-%e5%92%8c-unknown/?fbclid=IwAR1t-VVVt4TsyBfv-AHDb9aJ_Qy-IBk0zqFDWyeX3DcMZpp27jUNDgPIL9Q" target="_blank" rel="noopener">TypeScript 中的 any 和 unknown</a></h3><p>TypeScipt 大家都知道要針對各個變數進行型別的定義，有的時候為了方便就會把變數型態定義成 any，因為 any 就不會做任何的型別檢查回到 JavaScript 的懷抱，但這種寫法其實不是個很好的寫法所以後來 TS 又推出了 unknown，這篇文章講述了 any 以及 unknown 的差別，但我覺得既然都花時間用 TS 了就乖乖把型別定義好吧XD</p><h3 id="重新認識-Pixel、DPI-PPI-以及像素密度"><a href="#重新認識-Pixel、DPI-PPI-以及像素密度" class="headerlink" title="重新認識 Pixel、DPI / PPI 以及像素密度"></a><a href="https://blog.infolink.com.tw/2021/rediscover-pixel-dpi-ppi-and-pixel-density/?fbclid=IwAR0fGyhFL0jVnq9hQjEmwE_cYvhGcOJbb-LzGUSXDLAqLUdsHwdIVZjPkwk" target="_blank" rel="noopener">重新認識 Pixel、DPI / PPI 以及像素密度</a></h3><p>在前端的生態圈相信大家很常都會為了圖片的像素而搞到心煩意亂，尤其是轉成 canvas 的時候總是覺得圖片糊糊的，這其實就跟 DPI 有很大的關聯性，這篇文章就在講述圖片的像素、DPI 等等觀念，讓你可以更了解圖片的原理。</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="How-JavaScript-Works"><a href="#How-JavaScript-Works" class="headerlink" title="How JavaScript Works"></a><a href="https://suprabhasupi.hashnode.dev/how-javascript-works" target="_blank" rel="noopener">How JavaScript Works</a></h3><p>這篇文章圖解了 JS 引擎裡面是怎麼執行 JS 的，而且也簡單講了 Heap、Stack、GC 大概的輪廓，就算是 JS 初學者也看得懂哦～</p><h3 id="寫一個簡單堪用的-ESLint-plugin"><a href="#寫一個簡單堪用的-ESLint-plugin" class="headerlink" title="寫一個簡單堪用的 ESLint plugin"></a><a href="https://blog.techbridge.cc/2021/03/20/write-your-own-eslint-plugin/" target="_blank" rel="noopener">寫一個簡單堪用的 ESLint plugin</a></h3><p>寫一個 ESLint plugin 其實沒有想像中難。胡立這篇文中介紹了他們在專案中遇到的問題，並且自己寫了一個堪用的 ESLint plugin 來解決他。雖然大部分人不會需要自己寫 ESLint plugin，但了解一下 plugin 內部是怎麼運作還是滿有趣的～</p><h3 id="Solving-a-Mystery-Behavior-of-parseInt-in-JavaScript"><a href="#Solving-a-Mystery-Behavior-of-parseInt-in-JavaScript" class="headerlink" title="Solving a Mystery Behavior of parseInt() in JavaScript"></a><a href="https://dmitripavlutin.com/parseint-mystery-javascript/" target="_blank" rel="noopener">Solving a Mystery Behavior of parseInt() in JavaScript</a></h3><p>這篇文章也很好玩，一般來說 JS 的 parseInt 如果輸入小於 1 的數（像是 <code>parseInt(0.5)</code>），那就會回傳 0，但作者卻意外發現 <code>parseInt(0.0000005)</code> 會回傳 5！究竟是為什麼呢？</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="CNCF-Technology-Radar-Highlights-HashiCorp-Vault’s-Broad-Multi-Cloud-Adoption"><a href="#CNCF-Technology-Radar-Highlights-HashiCorp-Vault’s-Broad-Multi-Cloud-Adoption" class="headerlink" title="CNCF Technology Radar Highlights HashiCorp Vault’s Broad Multi-Cloud Adoption"></a><a href="https://www.hashicorp.com/blog/cncf-technology-radar-highlights-vault-broad-multi-cloud-adoption" target="_blank" rel="noopener">CNCF Technology Radar Highlights HashiCorp Vault’s Broad Multi-Cloud Adoption</a></h3><p>Secret Management 在這兩三年來逐漸被受到重視，在最近 CNCF 所發佈的 Technology Radar 裡便提到 HashiCorp Vault 是目前最被廣泛且推薦使用的解決方案，而且他跟 K8s 的整合方式也越來越多元，除了 1) 可以整合 <a href="https://www.vaultproject.io/docs/auth/kubernetes" target="_blank" rel="noopener">K8s Authentication</a> 直接存取之外，2) 也可以透過 <a href="https://www.hashicorp.com/blog/injecting-vault-secrets-into-kubernetes-pods-via-a-sidecar" target="_blank" rel="noopener">SideCar 的方式</a>來 Inject Vault 存取的 Credentials，最近還宣佈可以透過 <a href="https://www.hashicorp.com/blog/retrieve-hashicorp-vault-secrets-with-kubernetes-csi" target="_blank" rel="noopener">Kubernetes CSI</a> 來存取，這麼多方便的整合方式，怪不得會成為目前 Secert Management 的第一把交椅</p><h3 id="5-must-read-books-for-DevOps-and-SRE"><a href="#5-must-read-books-for-DevOps-and-SRE" class="headerlink" title="5 must-read books for DevOps and SRE"></a><a href="https://www.learnsteps.com/5-must-read-books-for-devops-and-sre/" target="_blank" rel="noopener">5 must-read books for DevOps and SRE</a></h3><p>聽說是 DevOps 和 SRE 領域必讀的五本書籍，自己只有看過其中一兩本 (掩面而逃</p><ul><li><a href="https://www.amazon.in/gp/product/9352135245/" target="_blank" rel="noopener">Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems</a></li><li><a href="https://www.amazon.in/gp/product/1942788290/" target="_blank" rel="noopener">The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win</a></li><li><a href="https://www.amazon.in/Computer-Networking-Top-Down-Kurose-James/dp/9332585490/" target="_blank" rel="noopener">Computer Networking | A Top-Down Approach</a></li><li><a href="https://www.amazon.in/gp/product/9332573905/" target="_blank" rel="noopener">Computer Systems: A Programmer’s Perspective</a></li><li><a href="https://www.amazon.in/gp/product/B01DCPXKZ6/" target="_blank" rel="noopener">Site Reliability Engineering: How Google Runs Production Systems</a></li></ul><h3 id="Introducing-Kubewarden-an-Open-Source-Policy-Engine"><a href="#Introducing-Kubewarden-an-Open-Source-Policy-Engine" class="headerlink" title="Introducing Kubewarden, an Open Source Policy Engine"></a><a href="https://community.suse.com/posts/introducing-kubewarden-an-open-source-policy-engine" target="_blank" rel="noopener">Introducing Kubewarden, an Open Source Policy Engine</a></h3><p>說到 Policy Engine 時，自己最先想到的是 Open Policy Agent，而最近有另外一套叫做 Kubewarden 的同等級解決方案也推了出來，它是特別針對 Kubernetes 而來 ，不免俗地也一樣透過 Admission Control 來達成 Policy as Code 的目的，樂見於這個領域有越來越多的競爭者，但也希望可以有越來越多現成的 Policy 可以直接套用XD</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 79 期 - 裁判:看我一眼？給你一個技術犯規！</title>
      <link href="/2021/05/04/79-technical-fault-is-for-you/"/>
      <url>/2021/05/04/79-technical-fault-is-for-you/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="學程式平台大比較-Udemy、Cousera、EDX、Youtube-超級比一比"><a href="#學程式平台大比較-Udemy、Cousera、EDX、Youtube-超級比一比" class="headerlink" title="學程式平台大比較 | Udemy、Cousera、EDX、Youtube 超級比一比"></a><a href="https://medium.com/starbugs/c7cb920a9c67" target="_blank" rel="noopener">學程式平台大比較 | Udemy、Cousera、EDX、Youtube 超級比一比</a></h3><p>今天來比較的是學程式的平台，想要「學程式」或是已經是軟體相關從業人員想要「更新自己技術能力」，通常我們會透過購買線上課程，合理分配自己的時間學習。<br>這次挑選的都是英文授課的平台，因為，軟體相關產業，例如：PM 產品經理、UI / UX 設計師或是最常見的軟體開發者，都是一個可以跨國的職業，那麼英文就是很重要的因素了 …</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="CONTENT-AWARE-IMAGE-RESIZING-IN-JAVASCRIPT"><a href="#CONTENT-AWARE-IMAGE-RESIZING-IN-JAVASCRIPT" class="headerlink" title="CONTENT-AWARE IMAGE RESIZING IN JAVASCRIPT"></a><a href="https://trekhleb.dev/blog/2021/content-aware-image-resizing-in-javascript/" target="_blank" rel="noopener">CONTENT-AWARE IMAGE RESIZING IN JAVASCRIPT</a></h3><p>這篇文章太震撼我了，在看文章的時候都快忘記截稿當下是可憐的禮拜天晚上。作者在文章裡面解釋如何用演算法的 Dynamic Programming 實現 Seam Carving Algorithm，Seam Carving Algorithm 會去偵測圖片的內容，並且在調整圖片大小的時候裁掉相對不重要的區塊，文章裡不只有提供 Demo，還有完整的程式碼和解釋，不看看真的太可惜了！</p><h3 id="How-JavaScript-Works-🤷🏻‍"><a href="#How-JavaScript-Works-🤷🏻‍" class="headerlink" title="How JavaScript Works 🤷🏻‍"></a><a href="https://suprabhasupi.hashnode.dev/how-javascript-works" target="_blank" rel="noopener">How JavaScript Works 🤷🏻‍</a></h3><p>從運行原理中了解 JavaScript，從瀏覽器如何讀懂我們寫下的 JavaScript、JavaScript 執行的方式、內存的處理到 JavaScript 與瀏覽器的 Web API 運作方式。</p><h3 id="Using-the-PDF-Embed-API-with-Vue-js"><a href="#Using-the-PDF-Embed-API-with-Vue-js" class="headerlink" title="Using the PDF Embed API with Vue.js"></a><a href="https://www.raymondcamden.com/2021/02/17/using-the-pdf-embed-api-with-vuejs" target="_blank" rel="noopener">Using the PDF Embed API with Vue.js</a></h3><p>透過 Adobe 提供的 JavaScript API，就可以讓網頁變成簡單的 PDF 閱讀器，而作者在文章內提出一種將它導入 Vue.js 專案的方法。</p><h3 id="Solving-the-classic-Two-Sum-and-Three-Sum-Problem-in-JavaScript"><a href="#Solving-the-classic-Two-Sum-and-Three-Sum-Problem-in-JavaScript" class="headerlink" title="Solving the classic Two-Sum and Three-Sum Problem in JavaScript"></a><a href="https://paulrohan.medium.com/solving-the-classic-two-sum-and-three-sum-problem-in-javascript-7d5d1d47db03" target="_blank" rel="noopener">Solving the classic Two-Sum and Three-Sum Problem in JavaScript</a></h3><p>最近在練習演算法的時候有看到兩個經典的題目：Two Sum 以及 Three Sum，兩個其實都可以用暴力解解出來，但這篇文章使用了其他種方式讓整個時間複雜度降低，有興趣的讀者不妨也可以用這個方法來解決這兩種題目。</p><h3 id="Understanding-Currying-in-JavaScript"><a href="#Understanding-Currying-in-JavaScript" class="headerlink" title="Understanding Currying in JavaScript"></a><a href="https://blog.bitsrc.io/understanding-currying-in-javascript-ceb2188c339" target="_blank" rel="noopener">Understanding Currying in JavaScript</a></h3><p>Functional Programming 有一個非常重要的觀念叫：Curring，其實 JavaScript 本身有非常多的 method 都是用到 Currying 的觀念完成，這篇文章教大家了解 JavaScript 中的 Curring。</p><h3 id="Curry-and-Function-Composition"><a href="#Curry-and-Function-Composition" class="headerlink" title="Curry and Function Composition"></a><a href="https://medium.com/javascript-scene/curry-and-function-composition-2c208d774983" target="_blank" rel="noopener">Curry and Function Composition</a></h3><p>這篇文章動手舉例了非常多的 Currying 的例子，並告訴讀者為什麼 Currying Function 是非常好用的，雖然我覺得實務上真的很難達到所有的 Function 都 Currying 就是了😂</p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="Faster-Python-with-Go-shared-objects"><a href="#Faster-Python-with-Go-shared-objects" class="headerlink" title="Faster Python with Go shared objects"></a><a href="https://blog.kchung.co/faster-python-with-go-shared-objects/" target="_blank" rel="noopener">Faster Python with Go shared objects</a></h3><p>嫌 Python 效能太差，但是又覺得編譯式語言寫起來很麻煩嗎？這篇文章教你怎麼把 Go 程式碼編譯成 Shared Objects 格式讓 Python 拿去用，如此一來就可以平常寫 Python，哪天遇到需要大量計算的效能瓶頸時就用 Go 來實作，實作完再包裝成 Python 的 function 就好了～</p><h3 id="time-rate-package"><a href="#time-rate-package" class="headerlink" title="time/rate package"></a><a href="https://pjchender.blogspot.com/2020/11/go-pkg-timerate-package.html" target="_blank" rel="noopener">time/rate package</a></h3><p>在 Go 裡面要開一個 Goroutine 非常簡單，但也因此衍伸出另一個問題 - 限流。譬如說你要發 HTTP 請求使用別人的 API，Go 可以輕易讓你做到每秒發上百個請求，但通常 API 都會有流量限制，所以你不可能真的同時把上百個請求發出去，否則一定會馬上被加進黑名單。</p><p>這時候就可以用 Go 內建的 time/rate 來做限流，不管是簡單的需求如「每秒最多發三個請求」，或是複雜的「每秒發起一個請求、同時最多有五個未完成的請求」都可以輕易做到哦～</p><h3 id="那些年我們追的-Goroutine-Pool"><a href="#那些年我們追的-Goroutine-Pool" class="headerlink" title="那些年我們追的 Goroutine Pool"></a><a href="https://medium.com/17media-tech/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E5%80%91%E8%BF%BD%E7%9A%84-goroutine-pool-e8d211757ee" target="_blank" rel="noopener">那些年我們追的 Goroutine Pool</a></h3><p>雖然在 Go 裡面啟動、銷毀一個 goroutine 非常簡單快速，而且每個 goroutine 跟 thread 比起來也是非常輕量，但萬一 goroutine 的數量達到十萬甚至百萬時還是會造成效能問題。因此 17Live 團隊在遇到這問題時決定自己實作了一個 goroutine pool，而這篇文章中也講到了為什麼他們會遇到這個問題以及他們 goroutine pool 的架構，不長但很值得一讀的一篇文章</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Linux-File-System-Types-Explained-Which-One-Should-You-Use"><a href="#Linux-File-System-Types-Explained-Which-One-Should-You-Use" class="headerlink" title="Linux File System Types Explained, Which One Should You Use"></a><a href="https://linuxiac.com/linux-file-system-types-explained-which-one-should-you-use/" target="_blank" rel="noopener">Linux File System Types Explained, Which One Should You Use</a></h3><p>看完這篇文章才知道原來 Linux 支援這麼多種檔案系統，自己只對常用的 ext4 比較熟一點點，沒想到還有 XFS, Btrfs, ZFS 和 Resier4，文中詳細的介紹每一種檔案系統的功能和優勢，讓使用者可以針對自己的需求，選擇適合的檔案系統來使用</p><h3 id="Updating-Kubernetes-CA-certificates-the-hard-way"><a href="#Updating-Kubernetes-CA-certificates-the-hard-way" class="headerlink" title="Updating Kubernetes CA certificates the hard way"></a><a href="https://deezer.io/updating-kubernetes-ca-certificates-the-hard-way-f9518108791d" target="_blank" rel="noopener">Updating Kubernetes CA certificates the hard way</a></h3><p>在 2017 年時 Deezer 使用 Ansible 完成了架設 K8s 的工作，而其中內部使用到的 K8s CA Certificate 已經到了快要過期的時候了，而為什麼會拖到最後一刻，才想來做這件事情呢？因為更新 K8s 內部使用到的 CA Certificate 並不是個簡單的工作，所以 Deezer 想要找出一個可以線上更新，而且不影響使用者的方法，從一開始需要考量的要點一個一個談起，並且在途中順便整合了 HashiCorp Vault，最後總算成功完成任務，推薦給自架 K8s 的維運人員</p><h3 id="Introducing-git-xargs-an-open-source-tool-to-update-multiple-GitHub-repos"><a href="#Introducing-git-xargs-an-open-source-tool-to-update-multiple-GitHub-repos" class="headerlink" title="Introducing git-xargs: an open source tool to update multiple GitHub repos"></a><a href="https://blog.gruntwork.io/introducing-git-xargs-an-open-source-tool-to-update-multiple-github-repos-753f9f3675ec" target="_blank" rel="noopener">Introducing git-xargs: an open source tool to update multiple GitHub repos</a></h3><p>大家應該都有相當多的 Repository 需要管理，而且這些 Repository 當中其實會有一些同樣的檔案，例如 License 檔案, CI/CD Pipleline YAML 檔案…等，每次要修改這些檔案就會有點煩悶，所以 gruntwork 開源了一個 CLI 工具叫做 git-xargs，讓使用者使用它來同時修改多 Git Repository，進而增進工作效率，事半功倍</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 78 期 - 認命吧！有一好，就沒兩好！</title>
      <link href="/2021/04/27/78-k8s-multi-tenancy/"/>
      <url>/2021/04/27/78-k8s-multi-tenancy/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Multi-Tenancy-Kubernetes-Cluster-Part-1-認命吧！有一好，就沒兩好！"><a href="#Multi-Tenancy-Kubernetes-Cluster-Part-1-認命吧！有一好，就沒兩好！" class="headerlink" title="Multi-Tenancy Kubernetes Cluster Part 1: 認命吧！有一好，就沒兩好！"></a><a href="https://medium.com/starbugs/multi-tenancy-kubernetes-cluster-part-1-%E8%AA%8D%E5%91%BD%E5%90%A7-%E6%9C%89%E4%B8%80%E5%A5%BD-%E5%B0%B1%E6%B2%92%E5%85%A9%E5%A5%BD-3eddb75eeb4c" target="_blank" rel="noopener">Multi-Tenancy Kubernetes Cluster Part 1: 認命吧！有一好，就沒兩好！</a></h3><p>大家知道其實 Multi-Tenancy 還有分軟的 (Soft) 跟硬的 (Hard) 嗎？那 K8s 到底是哪一種呢？而現在大家為了安全性和可用性都會使用 Multi-Cluster 的做法，但也因此導致維運和管理成本節節上升，那有沒有什麼比較好的解決方案呢？就讓我們透過這篇文章，來了解目前 K8s 在 Multi-Tenancy 所遇到的問題和相對應的解決方案</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Javascript-非同步-amp-Event-Loop！10-分鐘輕鬆圖解學習！"><a href="#Javascript-非同步-amp-Event-Loop！10-分鐘輕鬆圖解學習！" class="headerlink" title="Javascript 非同步 &amp; Event Loop！10 分鐘輕鬆圖解學習！"></a><a href="https://chan-chan-dev.com/js/Async/async-sync-intro/2534378084/" target="_blank" rel="noopener">Javascript 非同步 &amp; Event Loop！10 分鐘輕鬆圖解學習！</a></h3><p>程式碼搭配簡潔的插圖把 JavaScript 的 Call Stack 和 Callback Queue 講解的很清楚，讀完後不只有了 Event loop 的概念，也理解了 Queue 和 Stack 的資料結構！</p><h3 id="What-is-JavaScript-Map"><a href="#What-is-JavaScript-Map" class="headerlink" title="What is JavaScript Map?"></a><a href="https://javascript.plainenglish.io/what-is-javascript-map-8172bc42265a" target="_blank" rel="noopener">What is JavaScript Map?</a></h3><p>在 JavaScript 中有許多開發者會直接把 Object 當作 Map 來使用，但是如果把 Object 當作 Map 還是會有一些潛在的缺點，例如 Object 總是會將 Key 轉換成 String。不過在 ES6 的時候 JavaScript 就引入了一種新的 Map，能讓 key 和 value 的對應更加容易！</p><h3 id="The-Best-Free-Resources-To-Learn-Web-Development"><a href="#The-Best-Free-Resources-To-Learn-Web-Development" class="headerlink" title="The Best Free Resources To Learn Web Development"></a><a href="https://hackernoon.com/the-best-free-resources-to-learn-web-development-0bo334x" target="_blank" rel="noopener">The Best Free Resources To Learn Web Development</a></h3><p>如果你是剛走入 Web 開發的初學者，你一定會對眾多複雜的技術感到不知所措，如果要購買線上課程又擔心自己會看不懂，以及錢錢不開心，而這篇文章列出許多對初學者學習 Web 友善的網站或是 Youtuber 頻道，重點是它們都是免費的！如果想要學程式順便熟悉英文，可以參考看看！ 🙌</p><h3 id="徹底搞懂Javascript閉包，柯里化，手寫代碼！"><a href="#徹底搞懂Javascript閉包，柯里化，手寫代碼！" class="headerlink" title="徹底搞懂Javascript閉包，柯里化，手寫代碼！"></a><a href="https://www.readfog.com/a/1631928679665864704?fbclid=IwAR05cBuC424-e-AfKsKtATftSgKUea4EYF8oHIJV5nj24xataysrqoenoKY" target="_blank" rel="noopener">徹底搞懂Javascript閉包，柯里化，手寫代碼！</a></h3><p>JavaScript 的閉包可以說是非常重要的觀念，透過閉包的特性我們可以輕鬆的保存 function 內部變數的值，也因為這樣的特性就可以輕鬆地達到 functional programming 內非常重要的 currying，這篇文章深入帶大家了解閉包以及科里化的流程。</p><h3 id="CSS3-Cubic-Bezier"><a href="#CSS3-Cubic-Bezier" class="headerlink" title="CSS3 Cubic Bezier"></a><a href="https://www.oxxostudio.tw/articles/201406/css-cubic-bezier.html" target="_blank" rel="noopener">CSS3 Cubic Bezier</a></h3><p>最近在研究 css animation 時發現想要讓元素可以忽快忽慢的移動到指定位置可以透過貝茲曲線(cubic bezier)的方式達成，這篇文章深入理解 css animation 是如何利用貝茲曲線達到這些移動效果。</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="Golang-for-Node-js-Developers"><a href="#Golang-for-Node-js-Developers" class="headerlink" title="Golang for Node.js Developers"></a><a href="https://github.com/miguelmota/golang-for-nodejs-developers" target="_blank" rel="noopener">Golang for Node.js Developers</a></h3><p>這個 repository 整理了一堆 Node.js 跟 Go 的範例程式碼，如果你已經會寫 JS 了想來學 Go，因為 Go 真的很簡單好學，看完這個 repo 的 README 應該就差不多會了XD</p><h3 id="Must-Bookmarks-to-become-good-in-Go"><a href="#Must-Bookmarks-to-become-good-in-Go" class="headerlink" title="Must-Bookmarks to become good in Go"></a><a href="https://dev.to/rubenwap/must-bookmarks-to-become-good-in-go-ln8" target="_blank" rel="noopener">Must-Bookmarks to become good in Go</a></h3><p>如果 Go 已經學到一定程度，想繼續深入的話這篇整理了很多學習資源，包括怎麼寫出高效率的程式、用好指標跟做 profiling 等等，應該夠看好幾個禮拜了XD</p><h3 id="Gotchas-in-the-Go-Network-Packages-Defaults"><a href="#Gotchas-in-the-Go-Network-Packages-Defaults" class="headerlink" title="Gotchas in the Go Network Packages Defaults"></a><a href="https://martin.baillie.id/wrote/gotchas-in-the-go-network-packages-defaults/" target="_blank" rel="noopener">Gotchas in the Go Network Packages Defaults</a></h3><p>Go 的 network package 有一些預設行為，如果不熟的話可能會不小心被雷到，像預設的 http request 是沒有 timeout 的、而且預設會開啟 keep alive。這篇文章把這些 Go 的預設行為整理起來，如果有一些奇怪的 bug 一直解不掉，不妨可以看看這篇</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Grafana-Loki-and-Tempo-will-be-relicensed-to-AGPLv3"><a href="#Grafana-Loki-and-Tempo-will-be-relicensed-to-AGPLv3" class="headerlink" title="Grafana, Loki, and Tempo will be relicensed to AGPLv3"></a><a href="https://grafana.com/blog/2021/04/20/grafana-loki-tempo-relicensing-to-agplv3/" target="_blank" rel="noopener">Grafana, Loki, and Tempo will be relicensed to AGPLv3</a></h3><p>這幾年因為 AWS 推出了很多使用者喜愛的開源軟體託管服務，因而讓社群這邊群情激憤，紛紛開始改變授權的 License，之前吵得最兇的為 <a href="https://www.elastic.co/pricing/faq/licensing" target="_blank" rel="noopener">Elastic</a>，然後 AWS 也順便把原來自己開源的 Open Distro for ElasticSearch 正名為 <a href="https://aws.amazon.com/blogs/opensource/introducing-opensearch/" target="_blank" rel="noopener">OpenSearch</a>；而隨著 <a href="https://www.infoq.com/news/2021/01/aws-grafana-prometheus/" target="_blank" rel="noopener">AWS 推出託管的 Prometheus 和 Grafana</a> 之後，Grafana Labs 也跳出來把 Grafana，Loki 和 Tempo 的 License 改成 AGPLv3，不知道未來 AWS 是不是又會搞個 OpenMetric 出來?!</p><h3 id="Airbnb-Deploys-125-000-Times-per-Year-with-Multicluster-Kubernetes"><a href="#Airbnb-Deploys-125-000-Times-per-Year-with-Multicluster-Kubernetes" class="headerlink" title="Airbnb Deploys 125,000+ Times per Year with Multicluster Kubernetes"></a><a href="https://www.altoros.com/blog/airbnb-deploys-125000-times-per-year-with-multicluster-kubernetes/" target="_blank" rel="noopener">Airbnb Deploys 125,000+ Times per Year with Multicluster Kubernetes</a></h3><p>Airbnb 在一開始時，小小的工程團隊構築了 Ruby on Rails 的單體服務，但是隨著公司規模越來越大，問題逐漸因為人員和程式模組上的相依性而發生，而且單體服務在橫向擴充上也不容易，所以他們開始進行改造，從使用 AWS EC2 轉型成 SOA (service-oriented architecture) 開始，然後再接著導入 MicroService，並且建立的 Code Repoistory 的模板，避免工程師重造輪子；後來當然不意外的使用的 K8s，在 2018 初時，他們的 Production Cluster 已經有將近 450 個節點，在 2018 底時，節點個數翻倍成 900 個，他們也開始擔心 Eted 是不是會撐不住，而且公司內節點數量一直翻倍再成長，所以他們後來開始往 Multi-Cluster 的方向前進，並且還做到多個 Cluster 間 Workload 的同步，感覺還滿精彩的，想要知道更詳細的內容也可以看他們在 <a href="https://www.youtube.com/watch?v=ay7NibpRAYU" target="_blank" rel="noopener">KubeCon 分享的影片</a></p><h3 id="Announcing-Pulumi-3-0"><a href="#Announcing-Pulumi-3-0" class="headerlink" title="Announcing Pulumi 3.0"></a><a href="https://www.pulumi.com/blog/pulumi-3-0/" target="_blank" rel="noopener">Announcing Pulumi 3.0</a></h3><p>Pulumi 在 IaC 領域裡雖然起步的比較晚，但是追趕的速度還滿快的，從一開始到現在都維持著每一年發布一個大版號更新，最近發布的 3.0 裡，提供了 Pulumi Automation API，讓開發者可以把 IaC 加到 Node.js, Python, Go 和  .NET 用以達成自動化；早期都是直接利用 Terraform 的 Provider 來做事情，現在有持續在構築自己的 Provider 生態圈，包含 Pulumi 原生的 Azure Providers (GA) 和 Google Cloud Provider (Preview)，很樂於見到 Pulumi 的蓬勃發展，畢竟有競爭才會有進步！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 77 期 - 解了一個 bug，還有千千萬萬個 bug</title>
      <link href="/2021/04/20/77-so-many-bugs-QQ/"/>
      <url>/2021/04/20/77-so-many-bugs-QQ/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="想更快算出費氏數列嗎？來看看矩陣快速冪吧！"><a href="#想更快算出費氏數列嗎？來看看矩陣快速冪吧！" class="headerlink" title="想更快算出費氏數列嗎？來看看矩陣快速冪吧！"></a><a href="https://medium.com/starbugs/find-nth-fibonacci-number-by-fast-doubling-6ac2857a7834" target="_blank" rel="noopener">想更快算出費氏數列嗎？來看看矩陣快速冪吧！</a></h3><p>大家好，我是 Larry。這週的專欄「想更快算出費氏數列嗎？來看看矩陣快速冪吧！」要跟大家介紹如何用矩陣乘法來計算費氏數列，並且用快速冪的技巧把他加速到 O(log(n))。</p><p>雖然矩陣乘法聽起來就很恐怖，不過我有畫了很多精美的圖來幫助理解，所以整體來說應該不會太難讀，也祝福大家都可以在學習演算法的過程中找到樂趣～</p><h2 id="演算法"><a href="#演算法" class="headerlink" title="演算法"></a>演算法</h2><h3 id="基礎電腦科學：演算法概要"><a href="#基礎電腦科學：演算法概要" class="headerlink" title="基礎電腦科學：演算法概要"></a><a href="https://blog.techbridge.cc/2019/03/01/computer-science-algorithm-introduction/" target="_blank" rel="noopener">基礎電腦科學：演算法概要</a></h3><p>剛開始在學習程式時很常聽到「演算法」這個名詞，但演算法到底是什麼呢？TechBridge 的這篇文章用很淺顯易懂的例子介紹了何謂「演算法」，以及必須要滿足哪些條件才可以叫做一個演算法，如果是剛開始學習寫程式的朋友們很推薦看看這一篇～</p><h3 id="從時間複雜度認識常見演算法"><a href="#從時間複雜度認識常見演算法" class="headerlink" title="從時間複雜度認識常見演算法"></a><a href="https://medium.com/appworks-school/%E5%88%9D%E5%AD%B8%E8%80%85%E5%AD%B8%E6%BC%94%E7%AE%97%E6%B3%95-%E5%BE%9E%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6%E8%AA%8D%E8%AD%98%E5%B8%B8%E8%A6%8B%E6%BC%94%E7%AE%97%E6%B3%95-%E4%B8%80-b46fece65ba5" target="_blank" rel="noopener">從時間複雜度認識常見演算法</a></h3><p>初學演算法時常常會聽到有人說這個演算法的複雜度是 O(1)/O(n)/O(nlog(n))，那這個複雜度究竟代表什麼，各個複雜度又有什麼常見的演算法呢？這篇文章用了很多例子來講解各個複雜度究竟怎麼回事，想要更直觀的了解時間複雜度的話就看這篇了～</p><h3 id="Counting-Sort-amp-Radix-Sort"><a href="#Counting-Sort-amp-Radix-Sort" class="headerlink" title="Counting Sort &amp; Radix Sort"></a><a href="https://medium.com/nerd-for-tech/counting-sort-radix-sort-ccd9f77a00a2" target="_blank" rel="noopener">Counting Sort &amp; Radix Sort</a></h3><p>一般我們所說到的排序演算法如 BubbleSort/MergeSort/QuickSort 多半是「比較排序」，也就是要透過各個元素之間的比較大小來進行排序，而這類比較排序的最佳時間複雜度就是 O(nlog(n))。那除了比較排序之外其實還有另外一類「非比較排序」，也就是不需要進行元素間的比較就可以排出順序，雖然聽起來很神奇（不比較究竟要怎麼排XD），不過在特定條件之下確實是可以做到的哦～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="CSS-property，让不可能变可能"><a href="#CSS-property，让不可能变可能" class="headerlink" title="CSS @property，让不可能变可能"></a><a href="https://juejin.cn/post/6951201528543707150" target="_blank" rel="noopener">CSS @property，让不可能变可能</a></h3><p>CSS @property 是 CSS 最新的特性，它可以讓你先定義 property（例如顏色、長度等）並在之後做使用。而文章中也用一些例子解釋 CSS @property 和一般的自定義變數的差異在哪裡，以及有哪些之前無法實現的效果可以透過 CSS @property 解決。</p><h3 id="Toggle-dark-light-mode-by-clapping-your-hands"><a href="#Toggle-dark-light-mode-by-clapping-your-hands" class="headerlink" title="Toggle dark/light mode by clapping your hands"></a><a href="https://dev.to/devdevcharlie/toggle-dark-light-mode-by-clapping-your-hands-li7" target="_blank" rel="noopener">Toggle dark/light mode by clapping your hands</a></h3><p>使用 TensorFlow.js 開發一個 Chrome 擴充功能，讓網站可以辨識拍手的聲音去執行對應的動作！像是文章裡就是去切換網站的主題顏色，Demo 效果實在是太厲害，心裡想著找時間也來試試看好了！😂</p><h3 id="How-to-Build-a-Chess-Clock-with-JavaScript-and-setInterval"><a href="#How-to-Build-a-Chess-Clock-with-JavaScript-and-setInterval" class="headerlink" title="How to Build a Chess Clock with JavaScript and setInterval"></a><a href="https://www.freecodecamp.org/news/how-to-build-a-chess-clock-with-javascript-and-setinterval/" target="_blank" rel="noopener">How to Build a Chess Clock with JavaScript and setInterval</a></h3><p>利用 JavaScript 中的 setInterval 來製作在西洋棋中互相讀秒倒數的功能，來看看筆者是如何一步步建構整個應用程式的！</p><h3 id="当浏览器切换到其他标签页或者最小化时，你的js定时器还准时吗？"><a href="#当浏览器切换到其他标签页或者最小化时，你的js定时器还准时吗？" class="headerlink" title="当浏览器切换到其他标签页或者最小化时，你的js定时器还准时吗？"></a><a href="https://juejin.cn/post/6899796711401586695" target="_blank" rel="noopener">当浏览器切换到其他标签页或者最小化时，你的js定时器还准时吗？</a></h3><p>這個議題真的太有趣了，當使用者沒有 focus 在頁面的時候 JS 的 <code>setInterval()</code> 或 <code>setTimeout()</code> 還會準時嗎？我一直以為會是準時的，沒想到瀏覽器為了效能會自動把定時器的時間拉長。</p><h3 id="ES2021-ES12-令人期待的新特性"><a href="#ES2021-ES12-令人期待的新特性" class="headerlink" title="ES2021-ES12 令人期待的新特性"></a><a href="https://www.readfog.com/a/1633008867120091136" target="_blank" rel="noopener">ES2021-ES12 令人期待的新特性</a></h3><p>轉眼間 ECMAScript 也要進入第 12 版了，透過這篇文章可以帶大家了解新的 ECMAScript 到底加入了哪些新的功能，想當年我開始寫的時候還是 ES5 呢！真的是時代的眼淚😂</p><h3 id="10-CSS-BORDER-ANIMATION-EXAMPLE"><a href="#10-CSS-BORDER-ANIMATION-EXAMPLE" class="headerlink" title="10+ CSS BORDER ANIMATION EXAMPLE"></a><a href="https://dev.to/mike37/10-css-border-animation-example-4jjf" target="_blank" rel="noopener">10+ CSS BORDER ANIMATION EXAMPLE</a></h3><p>隨著瀏覽器越來越進步，能用網頁實現的東西也越來越多，前端工程師也要開始學習一些動畫讓自己的網頁越來越炫砲，這篇文章介紹了 10 種讓 <code>border</code> 變得很炫炮的方式。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="KDash"><a href="#KDash" class="headerlink" title="KDash"></a><a href="https://github.com/kdash-rs/kdash" target="_blank" rel="noopener">KDash</a></h3><p>雖然 K8s 本身有 UI Dashboard 可以透過 Browser 來操控 K8s 的相關資源，也有 <a href="https://k8slens.dev/" target="_blank" rel="noopener">Lens</a> 這種 Desktop UI IDE，可是對於喜歡使用 Terminal 的人來說，其實更喜歡的是像 <a href="https://github.com/derailed/k9s" target="_blank" rel="noopener">K9s</a> 這種 Terminal UI 工具，大多數習慣於 Terminal 工作的開發維運人員應該都會安裝，而最近我發現有另外一套也是 K8s Managed Terminal UI 工具叫做 KDash，看起來感覺也是滿好用的，不過現在還在 Beta 前期開發階段，希望未來功能可以越來越完整，讓離不開 Terminal 的人多可以多一個選擇</p><h3 id="Managing-network-devices-with-Golang-using-Netrasp"><a href="#Managing-network-devices-with-Golang-using-Netrasp" class="headerlink" title="Managing network devices with Golang using Netrasp"></a><a href="https://networklore.com/hello-netrasp/" target="_blank" rel="noopener">Managing network devices with Golang using Netrasp</a></h3><p>在網路設備的世界裡，可以怎麼達成 Infrastructure as Code 呢？以前我知道 Ansible 有 <a href="https://docs.ansible.com/ansible/2.9/modules/list_of_network_modules.htmlv" target="_blank" rel="noopener">Network Module</a>，後來隨著 Terraform 的盛行，也有很多網路設備廠商開發對應的 Terraform Provider，這兩天看到有一個叫做 Netrasp 的 Golang Library 也可以達成一樣的事情，看了一下這篇介紹文章，發現真的跟寫程式沒什麼兩樣，假如本身就是 Golang 好手，而又有管理網路設備需求的話，就可以考慮看看這個工具</p><h3 id="Awesome-GHA-Snippets"><a href="#Awesome-GHA-Snippets" class="headerlink" title="Awesome GHA Snippets"></a><a href="https://github.com/yengoteam/awesome-gha-snippets" target="_blank" rel="noopener">Awesome GHA Snippets</a></h3><p>早年大家對於 CI/CD Framework 的印象都停留在像 Jenkins 那種獨立於 Version Controler Service 的做法，但近年來隨著 GitLab CI/CD 的流行，以及 GitHub Action 的推出，大家也越來越習慣這樣的做法，畢竟如此一來可以少掉整合獨立系統所會遇到的一堆問題，使用起來也直覺很多，而這個 Repository 把常用的 GitHub Action 設定檔整理再一起，讓有需要撰寫的人可以直接拿來複製貼上稍微修改一下就可以使用！感謝這些超級佛心的社群熱血人士</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 76 期 - 自己挖的洞自己填</title>
      <link href="/2021/04/13/76-gatsby-comment-github-issue/"/>
      <url>/2021/04/13/76-gatsby-comment-github-issue/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Gatsby-用-utterances-替-Gatsby-的-Blog-網站申裝-GitHub-Issue-留言功能"><a href="#Gatsby-用-utterances-替-Gatsby-的-Blog-網站申裝-GitHub-Issue-留言功能" class="headerlink" title="Gatsby | 用 utterances 替 Gatsby 的 Blog 網站申裝 GitHub Issue 留言功能"></a><a href="https://medium.com/starbugs/gatsby-%E7%94%A8-utterances-%E6%9B%BF-gatsby-%E7%9A%84-blog-%E7%B6%B2%E7%AB%99%E7%94%B3%E8%A3%9D-github-issue-%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD-e8593318e5a3" target="_blank" rel="noopener">Gatsby | 用 utterances 替 Gatsby 的 Blog 網站申裝 GitHub Issue 留言功能</a></h3><p>Hi！大家好，我是神 Q 超人！忘記是在去年還是前年，我曾經分享過如何使用 Gatsby 打造自己的 Blog（在這裡），可以在上面寫寫文章發佈分享。但我有個想完成的小 feature 被遺失在那篇文章，一直沒有去達成，<strong>那就是所有的文章都少了留言的功能！</strong> 自己挖的洞只好自己填起來，那現在就來分享一下該怎麼在 Gatsby 中加上留言功能吧！ 🙌</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Insert-JavaScript-Into-HTML-Script-Tag-In-JavaScript"><a href="#Insert-JavaScript-Into-HTML-Script-Tag-In-JavaScript" class="headerlink" title="Insert JavaScript Into HTML - Script Tag In JavaScript"></a><a href="https://cloudaffle.com/post/insert-javascript-in-html" target="_blank" rel="noopener">Insert JavaScript Into HTML - Script Tag In JavaScript</a></h3><p>雖然隨著前端 frameworks 的興起，現在的開發者普遍都會使用 webpack 之類的打包工具，再透過打包網站需要用到的套件，比較碰不到一直寫 script 標籤一直爽的狀況，這也讓我們與 script 標籤慢慢變得陌生，而這篇文章介紹了 script 標籤的各個屬性，大家可以瞭解看看！</p><h3 id="JavaScript-Switch-Statement-–-With-JS-Switch-Case-Example-Code"><a href="#JavaScript-Switch-Statement-–-With-JS-Switch-Case-Example-Code" class="headerlink" title="JavaScript Switch Statement – With JS Switch Case Example Code"></a><a href="https://www.freecodecamp.org/news/javascript-switch-statement-with-js-switch-case-example-code/" target="_blank" rel="noopener">JavaScript Switch Statement – With JS Switch Case Example Code</a></h3><p>介紹 switch 的基本用法和使用時需要注意的事情，也在最後比較了 switch 和 if…else 兩者的不同和使用情境！</p><h3 id="5-JavaSript-GitHub-Repositories-for-Interview-Prep-📝"><a href="#5-JavaSript-GitHub-Repositories-for-Interview-Prep-📝" class="headerlink" title="5 JavaSript GitHub Repositories for Interview Prep!📝"></a><a href="https://dev.to/prnvbirajdar/5-javasript-github-repositories-for-interview-prep-306h" target="_blank" rel="noopener">5 JavaSript GitHub Repositories for Interview Prep!📝</a></h3><p>雖然標題是說給準備面試的 5 個 Repositories 啦（看來外國人也習慣面試前抱佛腳 😂），但推薦的每個 Respositories 都涵蓋了相當的質量，除了知名的 You Don’t Know JS 外，其他的 Respositories 也充分的講解了有關 JavaScript 的基礎和底層知識，還有用 JavaScript 來解釋常見的資料結構及演算法，滿山滿谷的大秘寶大家衝啊！ 🔥</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="What’s-new-in-SocketIO-4"><a href="#What’s-new-in-SocketIO-4" class="headerlink" title="What’s new in SocketIO 4?"></a><a href="https://ably.com/blog/whats-new-in-socketio-4" target="_blank" rel="noopener">What’s new in SocketIO 4?</a></h3><p>不久前 socket.io 發佈了新版本 v4，雖然沒有太大的變化，不過還是有一些小小的改進，有在用 socket.io 的朋友們趕快參考他的 migration guide 升級上去吧～</p><h3 id="17LIVE-Next-Gen-Database-選型分析"><a href="#17LIVE-Next-Gen-Database-選型分析" class="headerlink" title="17LIVE Next-Gen Database 選型分析"></a><a href="https://medium.com/17media-tech/17live-next-gen-database-%E9%81%B8%E5%9E%8B%E5%88%86%E6%9E%90-7a72b976cd2b" target="_blank" rel="noopener">17LIVE Next-Gen Database 選型分析</a></h3><p>俗話說「DB 選得好，開發沒煩惱」，要選擇一個資料庫系統除了要評估效能之外，還要仔細考慮開發時的需求（需不需要 join、強一致性等等），今天就一起來看看 17LIVE 在做資料庫選型時的心路歷程吧</p><h3 id="当浏览器切换到其他标签页或者最小化时，你的-js-定时器还准时吗？"><a href="#当浏览器切换到其他标签页或者最小化时，你的-js-定时器还准时吗？" class="headerlink" title="当浏览器切换到其他标签页或者最小化时，你的 js 定时器还准时吗？"></a><a href="https://juejin.cn/post/6899796711401586695" target="_blank" rel="noopener">当浏览器切换到其他标签页或者最小化时，你的 js 定时器还准时吗？</a></h3><p>說真的我從來沒去想過切換瀏覽器分頁時 setInterval 跟 setTimeout 會不會準的問題 XD，感覺頻率應該不能太高否則會影響效能，而這篇文章有實際到各個瀏覽器去測試，文章不長推薦大家都可以讀一讀增廣見聞</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="How-we-use-metamonitoring-Prometheus-servers-to-monitor-all-other-Prometheus-servers-at-Grafana-Labs"><a href="#How-we-use-metamonitoring-Prometheus-servers-to-monitor-all-other-Prometheus-servers-at-Grafana-Labs" class="headerlink" title="How we use metamonitoring Prometheus servers to monitor all other Prometheus servers at Grafana Labs"></a><a href="https://grafana.com/blog/2021/04/08/how-we-use-metamonitoring-prometheus-servers-to-monitor-all-other-prometheus-servers-at-grafana-labs/" target="_blank" rel="noopener">How we use metamonitoring Prometheus servers to monitor all other Prometheus servers at Grafana Labs</a></h3><p>大家都知道要幫線上應用服務設定好監控，這樣一來應用服務出問題的時候就可以馬上知道，不過大家有沒有被人問過一個問題，就是那誰要幫你監控你的監控服務？！(好繞口令XD) 我自己就曾經被客戶問過這個問題XD Grafana Lab 稱這樣的概念叫做 metamonitoring，而這篇文章就是想要解釋他們如何透過少數幾個分散在各處地理區域的 metamonitoring Prometheus 來監控所有其他的 Prometheus！</p><h3 id="Argo-Workflows-3-0-Released"><a href="#Argo-Workflows-3-0-Released" class="headerlink" title="Argo Workflows 3.0 Released!"></a><a href="https://www.cncf.io/blog/2021/04/02/argo-workflows-3-0-released/" target="_blank" rel="noopener">Argo Workflows 3.0 Released!</a></h3><p>Argo 家族中的專案 Argo Workflows 最近發佈了 3.0，底下列出三項重點更新，其他的可以參考官方更詳細的 <a href="https://blog.argoproj.io/argo-workflows-v3-0-4d0b69f15a6e" target="_blank" rel="noopener">Release Note</a></p><ul><li>特別強化 UI 並且讓他更簡易使用 (話說 ArgoCD 的 UI 真的滿厲害的)</li><li>讓 Controller 達到 High-Availability，減少 Down Time 的發生</li><li>在 Artifact 方面，讓使用者可以設定 Namespace 的預設 Repository，而且以後只需要在 Manifests 中設定 Key，非 Key 的部分則會從 Repository 中獲得 (翻成中文好怪XD)</li></ul><h3 id="Fast-Docker"><a href="#Fast-Docker" class="headerlink" title="Fast-Docker"></a><a href="https://github.com/omerbsezer/Fast-Docker" target="_blank" rel="noopener">Fast-Docker</a></h3><p>最後來介紹一個叫做 Fast-Docker 的 GitHub Repository，裡面涵蓋了所有 Docker 的細節 (Dockerfile, Image, Container, Commands, Volumes, Docker-Compose, Networks, Swarm, Stack)，包含了可能的範例和使用情境，感覺很適合新手上路！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 75 期 - 連假結束，收心上班去。</title>
      <link href="/2021/04/06/75-vacation-is-over/"/>
      <url>/2021/04/06/75-vacation-is-over/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Git-Blame-出我的名字？等一等-我是冤枉的-feat-版本控制-Git-簡介"><a href="#Git-Blame-出我的名字？等一等-我是冤枉的-feat-版本控制-Git-簡介" class="headerlink" title="Git Blame 出我的名字？等一等 我是冤枉的 feat. 版本控制 Git 簡介"></a><a href="https://medium.com/starbugs/ec2c5b8fee69" target="_blank" rel="noopener">Git Blame 出我的名字？等一等 我是冤枉的 feat. 版本控制 Git 簡介</a></h3><p>是不是有發生過，明明想要整理一下程式碼風格，卻讓協作者用 <code>git blame</code> 指令看看是誰開發的，發現程式碼上面的名字是你，但其實你將程式碼稍作整理。並非原始的開發者，發生這種情形，請把這篇貼給協作者看，釐清究竟問題的產生，是怎麼造成的。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Mutability-Vs-Immutability-In-JavaScript"><a href="#Mutability-Vs-Immutability-In-JavaScript" class="headerlink" title="Mutability Vs Immutability In JavaScript"></a><a href="https://cloudaffle.com/post/mutability-vs-immutability-javascript" target="_blank" rel="noopener">Mutability Vs Immutability In JavaScript</a></h3><p>從 JavaScript 的 Primitive Types 和 Reference Types 開始，循序漸進說到 Mutability 與 Immutability 的差異，如果沒搞懂這些基本，那在 JavaScript 的執行中可能會寫出許多奇妙的 Side Effect。</p><h3 id="我常用的设计模式"><a href="#我常用的设计模式" class="headerlink" title="我常用的设计模式"></a><a href="https://juejin.cn/post/6947575368282800136#heading-10" target="_blank" rel="noopener">我常用的设计模式</a></h3><p>在學習程式的路上常常會聽到設計模式，但每次學了都不曉得可以用在哪裡，這篇文章介紹了幾個平常常見的設計模式和實作方法，讓各位可以更了解設計模式，別再說設計模式只是物件導向的專利啦！ 😂</p><h3 id="Every-CSS-Background-Property-Illustrated-and-Explained-with-Code-Examples-🎖️"><a href="#Every-CSS-Background-Property-Illustrated-and-Explained-with-Code-Examples-🎖️" class="headerlink" title="Every CSS Background Property Illustrated and Explained with Code Examples 🎖️"></a><a href="https://www.freecodecamp.org/news/learn-css-background-properties/" target="_blank" rel="noopener">Every CSS Background Property Illustrated and Explained with Code Examples 🎖️</a></h3><p>這篇真是關於 CSS 的 Background 屬性一口氣全說完（要很大的一口氣 😂）！</p><h3 id="【無障礙網頁祕技】介面設計大補丸"><a href="#【無障礙網頁祕技】介面設計大補丸" class="headerlink" title="【無障礙網頁祕技】介面設計大補丸"></a><a href="https://medium.com/as-a-product-designer/%E7%84%A1%E9%9A%9C%E7%A4%99%E7%B6%B2%E9%A0%81%E7%A5%95%E6%8A%80-%E4%BB%8B%E9%9D%A2%E8%A8%AD%E8%A8%88%E5%A4%A7%E8%A3%9C%E4%B8%B8-9640dc1fde2b" target="_blank" rel="noopener">【無障礙網頁祕技】介面設計大補丸</a></h3><p>近期無障礙網頁設計越來越多人在討論，因為網頁其實非常不利於身障者操作，即便已經用了各種語義化標籤也沒辦法達到更好的使用者體驗，因此無障礙網頁設計漸漸有了雛型出來，這篇文章解釋了如何完美設計出一個無障礙網頁，有興趣的讀者不妨收藏起來閱讀。</p><h3 id="React-設計模式-—-複合元件-Compound-Component"><a href="#React-設計模式-—-複合元件-Compound-Component" class="headerlink" title="React 設計模式 — 複合元件 ( Compound Component )"></a><a href="https://moojing.medium.com/react-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-%E8%A4%87%E5%90%88%E5%85%83%E4%BB%B6-compound-component-9e7420e55327" target="_blank" rel="noopener">React 設計模式 — 複合元件 ( Compound Component )</a></h3><p>在 React 中可以透過 <code>props.children</code> 的方式來自身的元件變得更彈性，透過 <code>children</code> 的傳遞可以讓元件與元件之間的耦合性降低，這篇文章介紹了如何使用這種方式來創造出耦合性低的複合式元件。</p><h3 id="How-To-Apply-SOLID-Principles-To-Clean-Your-Code-in-React"><a href="#How-To-Apply-SOLID-Principles-To-Clean-Your-Code-in-React" class="headerlink" title="How To Apply SOLID Principles To Clean Your Code in React"></a><a href="https://betterprogramming.pub/how-to-apply-solid-principles-to-clean-your-code-in-react-cdfd5e0a9cea" target="_blank" rel="noopener">How To Apply SOLID Principles To Clean Your Code in React</a></h3><p>SOLID 是一種非常多人使用的設計模式，透過低耦合高內聚的方式來達到完美的 clean code 效果，但要如何在 React 中實現呢？這篇文章就在教讀者如何將 SOLID 設計模式導入 React 中。</p><h2 id="資料分析"><a href="#資料分析" class="headerlink" title="資料分析"></a>資料分析</h2><h3 id="資料前處理必須要做的事-資料清理與型態調整"><a href="#資料前處理必須要做的事-資料清理與型態調整" class="headerlink" title="資料前處理必須要做的事 - 資料清理與型態調整"></a><a href="https://blog.v123582.tw/2020/12/04/%E8%B3%87%E6%96%99%E5%89%8D%E8%99%95%E7%90%86%E5%BF%85%E9%A0%88%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B-%E8%B3%87%E6%96%99%E6%B8%85%E7%90%86%E8%88%87%E5%9E%8B%E6%85%8B%E8%AA%BF%E6%95%B4/" target="_blank" rel="noopener">資料前處理必須要做的事 - 資料清理與型態調整</a></h3><p>資料分析並不只是把資料抓一抓、程式跑一跑就可以得到結果。因為很多網路上爬來、下載到的資料都會有缺失，或是有一些值明顯不合理，這樣的資料會導致模型無法正確運作，所以在真正分析之前都會需要做資料清洗，才能確保資料是可用的</p><h3 id="簡明-Python-Pandas-入門教學"><a href="#簡明-Python-Pandas-入門教學" class="headerlink" title="簡明 Python Pandas 入門教學"></a><a href="https://blog.techbridge.cc/2020/09/21/python-pandas-zen-tutorial/" target="_blank" rel="noopener">簡明 Python Pandas 入門教學</a></h3><p>說到用 Python 做資料分析就不得不提 pandas 這個 library。pandas 提供的 DataFrame 就像 Excel 的試算表一樣，可以讓你很方便的讀取、搜尋、儲存資料，而且因為底層是用 numpy 實作的所以效能也很不錯，是做資料分析必備的工具之一</p><h3 id="資料視覺化-Matplotlib-Seaborn-Plotly"><a href="#資料視覺化-Matplotlib-Seaborn-Plotly" class="headerlink" title="資料視覺化(Matplotlib, Seaborn, Plotly)"></a><a href="https://medium.com/jameslearningnote/%E8%B3%87%E6%96%99%E5%88%86%E6%9E%90-%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92-%E7%AC%AC2-5%E8%AC%9B-%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96-matplotlib-seaborn-plotly-75cd353d6d3f" target="_blank" rel="noopener">資料視覺化(Matplotlib, Seaborn, Plotly)</a></h3><p>做完資料分析之後，最後一步就是把資料視覺化，畢竟大家都喜歡看漂亮的圖。但 Python 用來做視覺化的 lib 就有好幾套，一起來看看他們各有什麼優缺點吧～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="K8s-1-21-下週就要發布嘍"><a href="#K8s-1-21-下週就要發布嘍" class="headerlink" title="K8s 1.21 下週就要發布嘍!"></a><a href="https://sysdig.com/blog/whats-new-kubernetes-1-21/" target="_blank" rel="noopener">K8s 1.21 下週就要發布嘍!</a></h3><p>這版多個幾個新功能，例如…<br>☸ 在 Kubelet 的生態系裡多了 Memory Manager<br>☸ Pod affinity/anti-affinity 新增了 namespaceSelector<br>☸ Scheduler 分配 Pod 時會先查看 Nominated Nodes<br>☸ 當 Deployment 在做 Scale Down 時候可以選擇 Pod 被砍掉的順序<br>☸ 平行化 Job 的 Pod 可以加上 Completion Index<br>☸ Network Policy 可以在單一條 Rule 設定 Port 的範圍</p><p>但同時也有個不幸的消息，從 1.8 開始被引進的 Pod Security Policy 宣布要在被淘汰掉，預計在 1.25 時完全移除掉 T_T</p><h3 id="Infrastructure-as-Code-也可以測試嗎？！"><a href="#Infrastructure-as-Code-也可以測試嗎？！" class="headerlink" title="Infrastructure as Code 也可以測試嗎？！"></a><a href="https://github.com/hashicorp/terraform/pull/27873" target="_blank" rel="noopener">Infrastructure as Code 也可以測試嗎？！</a></h3><p>其實是可以的啦～ 除了行之有年的 <strong>Terratest</strong>,  <strong>Kitchen</strong> 和 <strong>Server Spec</strong> 之類的工具之外，最近在看 <strong>Terraform</strong> 0.15 Change Log 的時候，發現以後會多一個 CLI Command 叫做 Terraform Test，執行他的話就會對 tests 這個資料夾內的 Terraform 程式碼執行 plan &amp; apply，到時候再來試用看看 = =+ 對於不寫 Golang 的人應該是個不錯的選擇</p><h3 id="Kubecost-raises-5-5-million-to-help-teams-monitor-and-reduce-their-Kubernetes-spend"><a href="#Kubecost-raises-5-5-million-to-help-teams-monitor-and-reduce-their-Kubernetes-spend" class="headerlink" title="Kubecost raises $5.5 million to help teams monitor and reduce their Kubernetes spend"></a><a href="http://blog.kubecost.com/blog/announcing-kubecost-first-round/" target="_blank" rel="noopener">Kubecost raises $5.5 million to help teams monitor and reduce their Kubernetes spend</a></h3><p>大家還記得在 2019 年 Kubecost 推出了能夠讓開發者們將 K8s 環境中資源利用與真實花費給視覺化呈現的開源專案嗎？！如今他們已經成長為一個團隊，並且獲得第一輪 550 萬美金的投資，而在這兩年間已經有數以千計的公司使用他們的服務，統計起來大家差不多在 K8s 上面花了超過十億美金，而有了這筆投資之後將可以讓團隊開始提供監控和最佳化 K8s 花費的服務，想要瞭解更多的話，可以到他們的<a href="https://www.kubecost.com/" target="_blank" rel="noopener"><strong>官方網頁</strong></a>參觀</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 74 期 - 有個 Bug 卡了和 Ever Given 一樣久，但還好損失的金額沒有一樣多</title>
      <link href="/2021/03/30/74-I-have-a-difficult-bug-as-same-as-ever-given/"/>
      <url>/2021/03/30/74-I-have-a-difficult-bug-as-same-as-ever-given/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="來征服資料結構與演算法吧-一直解-Linked-List-一直爽-feat-JavaScript"><a href="#來征服資料結構與演算法吧-一直解-Linked-List-一直爽-feat-JavaScript" class="headerlink" title="來征服資料結構與演算法吧 | 一直解 Linked List 一直爽 feat. JavaScript"></a><a href="https://medium.com/starbugs/%E4%BE%86%E5%BE%81%E6%9C%8D%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E8%88%87%E6%BC%94%E7%AE%97%E6%B3%95%E5%90%A7-%E4%B8%80%E7%9B%B4%E8%A7%A3-linked-list-%E4%B8%80%E7%9B%B4%E7%88%BD-feat-javascript-310e42bf555e" target="_blank" rel="noopener">來征服資料結構與演算法吧 | 一直解 Linked List 一直爽 feat. JavaScript</a></h3><p>Hi！大家好，我是神 Q 超人！在同一個系列中之前有分享有 <a href="https://medium.com/starbugs/%E4%BE%86%E5%BE%81%E6%9C%8D%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E8%88%87%E6%BC%94%E7%AE%97%E6%B3%95%E5%90%A7-%E9%97%9C%E6%96%BC-linked-list-%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9-feat-javascript-ff0ed89c326d" target="_blank" rel="noopener">關於 Linked List 這數據結構的基本用法</a>，也有用兩個在 Leetcode 上的題目讓大家練習操作，而打鐵要趁熱（其實也過了一個月了 😂）！這一篇會把我覺得一些有趣的題目都收錄，搭配上之前提過的基本概念來解析，讓大家可以更理解 Linked List，也順便給自己複習一下。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="函数式编程的那些事"><a href="#函数式编程的那些事" class="headerlink" title="函数式编程的那些事"></a><a href="https://juejin.cn/post/6944872588019499044" target="_blank" rel="noopener">函数式编程的那些事</a></h3><p>使用簡單的例子帶入函式編程的主題，一開始先是比較了函式編程和物件導向的差異，接著帶入在 JavaScript 的函式執行原理，最後又總結了幾個函式編程內的常見方法，文章內知識量相當豐富！</p><h3 id="Icon-systems-for-the-web-an-in-depth-guide"><a href="#Icon-systems-for-the-web-an-in-depth-guide" class="headerlink" title="Icon systems for the web - an in-depth guide"></a><a href="https://codeadrian.hashnode.dev/icon-systems-for-the-web-an-in-depth-guide" target="_blank" rel="noopener">Icon systems for the web - an in-depth guide</a></h3><p>Icon 在網頁上可以說是不可或缺的元素，但你知道 Icon 呈現在網頁上有哪幾種實現方式嗎？比較常見的可能有 SVG 或是 Icon font，那這些不同的方式又有哪些優缺點呢？看看作者怎麼說吧！</p><h3 id="CSS-Position-Property-Explained"><a href="#CSS-Position-Property-Explained" class="headerlink" title="CSS Position Property Explained!"></a><a href="https://dev.to/surajondev/css-position-property-explained-3eg7" target="_blank" rel="noopener">CSS Position Property Explained!</a></h3><p>用簡單的動畫解釋 CSS Position 的每種設置的效果，讓你之後不用再選來選去，還可能搞不清楚它們之間的差別！</p><h3 id="淺談-Tailwind-CSS"><a href="#淺談-Tailwind-CSS" class="headerlink" title="淺談 Tailwind CSS"></a><a href="https://medium.com/@hayato.chang/%E6%B7%BA%E8%AB%87-tailwind-css-4153d86eb661" target="_blank" rel="noopener">淺談 Tailwind CSS</a></h3><p><a href="https://tailwindcss.com/" target="_blank" rel="noopener">Tailwind CSS</a>算是近期蠻熱門 CSS 框架，用了這個框架的好處是可以讓你的元件不用一直去寫 CSS 檔來覆蓋原先的樣式，而且也可以客製化每個元件的表現型態，但缺點就是你的元件會有非常長的 className 就是了XD</p><h3 id="你真的懂-Event-Loop-嗎"><a href="#你真的懂-Event-Loop-嗎" class="headerlink" title="你真的懂 Event Loop 嗎"></a><a href="https://johnnywang1994.github.io/book/articles/js/event-loop.html#%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83-runtime-concept" target="_blank" rel="noopener">你真的懂 Event Loop 嗎</a></h3><p>這篇文章完整的解釋了整個 JavaScript 的非同步運作流程，讓你可以更了解 JavaScript 的非同步世界，很適合給剛接觸 JavaScript 的讀者閱讀。</p><h3 id="The-Ultimate-Guide-To-Writing-Self-Documenting-Code"><a href="#The-Ultimate-Guide-To-Writing-Self-Documenting-Code" class="headerlink" title="The Ultimate Guide To Writing Self-Documenting Code"></a><a href="https://javascript.plainenglish.io/the-ultimate-guide-to-writing-self-documenting-code-998ea9a38bd3" target="_blank" rel="noopener">The Ultimate Guide To Writing Self-Documenting Code</a></h3><p>命名一直是寫程式非常有趣的探討話題，要如何命名才能讓後人可以直接搞懂這個 function 或是這個 variable 的功能真的是一門很大的學問，透過這篇文章可以更幫助讀者進行變數以及函式的命名。</p><h2 id="Node-JS"><a href="#Node-JS" class="headerlink" title="Node.JS"></a>Node.JS</h2><h3 id="Why-I-Prefer-Makefiles-Over-package-json-Scripts"><a href="#Why-I-Prefer-Makefiles-Over-package-json-Scripts" class="headerlink" title="Why I Prefer Makefiles Over package.json Scripts"></a><a href="https://spin.atomicobject.com/2021/03/22/makefiles-vs-package-json-scripts/" target="_blank" rel="noopener">Why I Prefer Makefiles Over package.json Scripts</a></h3><p>雖然 npm 允許開發者在 package.json 裡面寫一些腳本，但如果腳本包含多個指令就要一直用 &amp;&amp; 接下去，若指令之間有相依性那更是難以管理，所以這篇文章的作者認為某些時候可以用 Makefile 來取代 npm script，不管是在開發還是維護上都會比較簡單。</p><h3 id="How-To-Secure-Node-js-Applications-with-a-Content-Security-Policy"><a href="#How-To-Secure-Node-js-Applications-with-a-Content-Security-Policy" class="headerlink" title="How To Secure Node.js Applications with a Content Security Policy"></a><a href="https://www.digitalocean.com/community/tutorials/how-to-secure-node-js-applications-with-a-content-security-policy" target="_blank" rel="noopener">How To Secure Node.js Applications with a Content Security Policy</a></h3><p>Content Security Policy(CSP) 幾乎是現在網站必備的安全性 Header 了，除了可以預防 XSS 之外，還可以避免網站不小心載入一些奇怪的資源（之前很多網站被惡搞都是被載入外部 CSS），對 CSP 還不熟悉的話真的要快來看看了～</p><h3 id="The-4-Types-of-Memory-Leaks-in-Node-js-and-How-to-Avoid-Them"><a href="#The-4-Types-of-Memory-Leaks-in-Node-js-and-How-to-Avoid-Them" class="headerlink" title="The 4 Types of Memory Leaks in Node.js and How to Avoid Them"></a><a href="https://betterprogramming.pub/the-4-types-of-memory-leaks-in-node-js-and-how-to-avoid-them-with-the-help-of-clinic-js-part-1-3f0c0afda268" target="_blank" rel="noopener">The 4 Types of Memory Leaks in Node.js and How to Avoid Them</a></h3><p>這篇文章說明了四種在 Node.JS 中最容易發生 memory leak 的情況，而且也介紹了 Clinic.js 跟 autocannon 兩個工具用來做 loadtest 及分析，如果懷疑自己的寫的程式有 memory leak 但不知道怎麼進行測試，看完這篇應該就有點概念了～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="The-Evolution-of-Distributed-Systems-on-Kubernetes"><a href="#The-Evolution-of-Distributed-Systems-on-Kubernetes" class="headerlink" title="The Evolution of Distributed Systems on Kubernetes"></a><a href="https://www.infoq.com/articles/distributed-systems-kubernetes/" target="_blank" rel="noopener">The Evolution of Distributed Systems on Kubernetes</a></h3><p>在 K8s 上演化的分散式系統，這個標題滿抽象的XD 文章內容則是先點出分散式應用程式應該要具備的必要元素：Lifecycle Management, Advanced Networking, Resource Binding, Stateful Abstraction，接著指出傳統 Monolithic 架構為什麼無法滿足這些需求，並且說明 Cloud-Native 下的 MicroService 架構如何滿足這些需求，所以 K8s 現在才會這麼地火紅，整篇看完有點像是考試在寫申論題一樣XD 但對於很多功能為什麼會存在可以有更深入與全面的了解</p><h3 id="How-to-build-an-elastic-search-cluster-for-production"><a href="#How-to-build-an-elastic-search-cluster-for-production" class="headerlink" title="How to build an elastic search cluster for production?"></a><a href="https://www.cncf.io/blog/2021/03/25/how-to-build-an-elastic-search-cluster-for-production/" target="_blank" rel="noopener">How to build an elastic search cluster for production?</a></h3><p>此篇如何在 Production 環境架設 ElasticSearch 的文章來自於 Padok 的 SRE，一開始先從 ES 的各種不同節點介紹起，解釋為什麼需要 N / 2 + 1 個 Master 節點，接著詳述要如何規劃機器的記憶體，硬碟與 CPU 資源，最後再提到 Sharding 對於效能的影響，有需要在 Production 環境自己架設 ES 的人建議可以參考這篇文章的一些經驗談</p><h3 id="Incident-Metrics-in-SRE-Google-Site-Reliability-Engineering"><a href="#Incident-Metrics-in-SRE-Google-Site-Reliability-Engineering" class="headerlink" title="Incident Metrics in SRE - Google - Site Reliability Engineering"></a><a href="https://sre.google/resources/practices-and-processes/incident-metrics-in-sre/" target="_blank" rel="noopener">Incident Metrics in SRE - Google - Site Reliability Engineering</a></h3><p>大概看完這篇論文在心中冒出的第一個感想是…要多常出事才能寫完這篇論文呢?! 文章點出以往用來衡量處理 Incident 有沒有改善的指標：mean time to recovery (MTTR) 或是 mean time to mitigation (MTTM) 其實是不準確的，所以論文裡使用了 Google 和其他兩間匿名公司的數據，利用 Monte Carlo 來證明使用 MTTR 或是 MTTR 來分析 Production Incident 是不太適合的，並在最後提出一些作者認為比較好的量測方式</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 73 期 - 天氣太冷，好想泡溫泉</title>
      <link href="/2021/03/23/73-I-need-hot-spring/"/>
      <url>/2021/03/23/73-I-need-hot-spring/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="身為-Rust-開發者，一定要知道的十個超實用-Macro"><a href="#身為-Rust-開發者，一定要知道的十個超實用-Macro" class="headerlink" title="身為 Rust 開發者，一定要知道的十個超實用 Macro"></a><a href="https://medium.com/starbugs/ten-must-know-rust-macros-f17b9252876e" target="_blank" rel="noopener">身為 Rust 開發者，一定要知道的十個超實用 Macro</a></h3><p>Larry 我寫 Rust 也寫了好一陣子了，真心覺得雖然 Rust 有一些地方不太討喜，但還是有很多不錯的優點，像是變數所有權、Macro、零成本抽象化等等。而今天我就要來跟大家介紹十個超厲害、超實用、不學會後悔的 macro，不管你是剛在學 Rust 還是已經有開發經驗，都很適合看看這篇哦</p><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><h3 id="6-useful-Rust-macros-that-you-might-not-have-seen-before"><a href="#6-useful-Rust-macros-that-you-might-not-have-seen-before" class="headerlink" title="6 useful Rust macros that you might not have seen before"></a><a href="https://blog.usejournal.com/6-useful-rust-macros-that-you-might-not-have-seen-before-59d1386f7bc5" target="_blank" rel="noopener">6 useful Rust macros that you might not have seen before</a></h3><p>因為整個 Rust 生態系的 macro 實在太多，每個人喜歡的都不太一樣。所以除了我推薦的十個之外，這篇的作者也分享了六個 Rust macro，而且跟我講的十個完全沒有交集XD，真的是很有趣。</p><h3 id="Macros-in-Rust-A-tutorial-with-examples"><a href="#Macros-in-Rust-A-tutorial-with-examples" class="headerlink" title="Macros in Rust: A tutorial with examples"></a><a href="https://blog.logrocket.com/macros-in-rust-a-tutorial-with-examples/" target="_blank" rel="noopener">Macros in Rust: A tutorial with examples</a></h3><p>如果覺得別人寫的 macro 用不順手，或是想到一個絕妙的點子想要把它寫成 macro，但卻不知從何下手。那可以來看看這篇，這篇文章用了超多例子教你怎麼寫出各式各樣的 macro。</p><h3 id="Why-is-a-Rust-executable-large"><a href="#Why-is-a-Rust-executable-large" class="headerlink" title="Why is a Rust executable large?"></a><a href="https://lifthrasiir.github.io/rustlog/why-is-a-rust-executable-large.html" target="_blank" rel="noopener">Why is a Rust executable large?</a></h3><p>在這週的專欄中有提到展開 macro 會讓 Rust 的執行檔變肥，但除了 macro 之外其實還有很多其他的原因，如果想知道為什麼 Rust 執行檔會這麼肥，或是想要透過調整編譯器設定降低執行檔大小，都可以參考看看這篇哦～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="一起理解-HTML-當中的-form-data"><a href="#一起理解-HTML-當中的-form-data" class="headerlink" title="一起理解 HTML 當中的 form-data"></a><a href="https://blog.kalan.dev/2021-03-13-html-form-data/?fbclid=IwAR3bUOexknKpIluPAw2wyT32Vzsssy8auXAZwBEqfcvlruEGmwqIDBAwXEQ" target="_blank" rel="noopener">一起理解 HTML 當中的 form-data</a></h3><p><code>multipart/form-data</code> 最大的好處就是可以將不同類型的資料（例如使用者輸入的文字、上傳的檔案或圖片）透過在 <code>&lt;form&gt;</code> 標籤上定義 action 和 method，把整個表單的資料都抓起來一起在一次請求中送出，它是如何做到這件事情的呢？來看看作者如何分析及實作吧！</p><h3 id="HTML-Bold-Text-Tutorial-–-How-to-Use-the-lt-b-gt-Tag"><a href="#HTML-Bold-Text-Tutorial-–-How-to-Use-the-lt-b-gt-Tag" class="headerlink" title="HTML Bold Text Tutorial – How to Use the &lt;b&gt; Tag"></a><a href="https://www.freecodecamp.org/news/html-bold-text-tutorial-how-to-use-the-b-tag/" target="_blank" rel="noopener">HTML Bold Text Tutorial – How to Use the &lt;b&gt; Tag</a></h3><p>你知道 HTML 中的 <code>&lt;b&gt;</code> 和 <code>&lt;strong&gt;</code> 標籤的差異在哪裡嗎？雖然兩者最後顯示在畫面上都是粗體的樣子，不過他們在語義上可是大大的不同，另外在 <a href="https://stackoverflow.com/questions/271743/whats-the-difference-between-b-and-strong-i-and-em" target="_blank" rel="noopener">What’s the difference between &lt;b&gt; and &lt;strong&gt;, &lt;i&gt; and &lt;em&gt;?</a> 此篇問答的最佳解答中也提到，雖然我們「看」起來相同，但是對於像是 <a href="https://freedomscientific.github.io/VFO-standards-support/html.html" target="_blank" rel="noopener">Jaws</a> 此類針對盲人的閱讀器，就會有所差異！也提到了 HTML 從來都不是關於樣式的設定，它是用來描述這段文字的語意如何，而不是在於它該如何顯示。</p><h3 id="Pure-vs-Impure-Functions"><a href="#Pure-vs-Impure-Functions" class="headerlink" title="Pure vs Impure Functions"></a><a href="https://dev.to/sanspanic/pure-vs-impure-functions-50aj" target="_blank" rel="noopener">Pure vs Impure Functions</a></h3><p>在軟體工程的世界中充滿著一堆領域內的用詞，搞到有時候連最簡單的一個名詞都要思考很久，而這篇文章簡單的描述了有關純與不純函式的差別到底在哪，也替大家常在 JavaScript 內時常用的原生方法做分類與比較。</p><h3 id="Microtask-v-s-Marcotask"><a href="#Microtask-v-s-Marcotask" class="headerlink" title="Microtask v.s. Marcotask"></a><a href="https://javascript.info/event-loop" target="_blank" rel="noopener">Microtask v.s. Marcotask</a></h3><p>在 JS 的非同步中，除了大家最熟悉的 event loop 外，其實在 event loop 中還有兩個很重要的觀念，分別是 microtask 以及 marcotask，搞懂這兩個觀念後就可以更深入了解 JS 的非同步了！</p><h3 id="Caching-clash-useSWR-vs-react-query"><a href="#Caching-clash-useSWR-vs-react-query" class="headerlink" title="Caching clash: useSWR() vs. react-query"></a><a href="https://blog.logrocket.com/caching-clash-useswr-vs-react-query/" target="_blank" rel="noopener">Caching clash: useSWR() vs. react-query</a></h3><p>現在的前端開發越來越強調 cache，有了 cache 的幫助不但可以降低 data fetching 的次數同時也可以降低網頁重新渲染的次數，這篇文章提到 React 兩個非常有名用來做 cache 的套件，如果有讀者需要做 cache 機制不妨可以參考這篇文章。</p><h3 id="使用-JSON-LD-處理-SEO"><a href="#使用-JSON-LD-處理-SEO" class="headerlink" title="使用 JSON-LD 處理 SEO"></a><a href="https://z3388638.medium.com/%E4%BD%BF%E7%94%A8-json-ld-%E8%99%95%E7%90%86-seo-%E4%B8%A6%E8%AE%93-google-%E9%87%9D%E5%B0%8D%E4%B8%8D%E5%90%8C%E5%BD%A2%E5%BC%8F%E7%B6%B2%E7%AB%99%E5%81%9A%E7%8D%A8%E7%89%B9%E7%9A%84%E6%90%9C%E5%B0%8B%E7%B5%90%E6%9E%9C%E5%91%88%E7%8F%BE-9c74783c017a" target="_blank" rel="noopener">使用 JSON-LD 處理 SEO</a></h3><p>每次用 google 搜尋新聞的時候都會看到一些比較不一樣的搜尋結果，不再只是單純的 Link 跟 Description 而已，後來研究了一下才知道原來是 <a href="https://json-ld.org/" target="_blank" rel="noopener">JSON-LD</a> 的結構化資料，這篇文章闡述了如何利用 JSON-LD 處理 SEO 問題，有興趣的讀者不妨可以收藏起來日後可以拿來看XD</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="REST-vs-GraphQL-vs-gRPC"><a href="#REST-vs-GraphQL-vs-gRPC" class="headerlink" title="REST vs. GraphQL vs. gRPC"></a><a href="https://www.danhacks.com/software/grpc-rest-graphql.html" target="_blank" rel="noopener">REST vs. GraphQL vs. gRPC</a></h3><p>記得在兩週前有提到一篇不錯的<a href="https://blog.bitsrc.io/apis-vs-websockets-vs-webhooks-what-to-choose-5942b73aeb9b" target="_blank" rel="noopener">文章</a>，再跟大家比較 API, WebSocket 和 WebHook 有什麼不同，以及該如何替自己的服務從中挑選適合的協定；而今天這篇文章則是要跟大家介紹 REST, GraphQL 和 gRPC 各有什麼優缺點，讓使用者未來在替自己的應用服務做選擇時可以當個依據</p><h3 id="SRE-vs-Platform-Engineering"><a href="#SRE-vs-Platform-Engineering" class="headerlink" title="SRE vs Platform Engineering"></a><a href="https://blog.getambassador.io/the-rise-of-cloud-native-engineering-organizations-1a244581bda5" target="_blank" rel="noopener">SRE vs Platform Engineering</a></h3><p>過去這十年來，整個 IT 產業一直在透過一些最佳準則逐漸地往 Cloud Native 的方向在前進，例如: 持續交付，容器化和觀測系統…等，而在此同時組織也開始產生變化，不再以龐大的部門來開發和發布產品，取而代之的是比較小而且相依性低的開發團隊，而且其中還產生了兩種新的角色，分別是 Site Reliability 和 Platform Engineering，而這篇文章就要帶大家來看看這兩種新的角色分別負責什麼樣的任務，彼此間又有何不同？</p><h3 id="Differences-Between-Git-Merge-and-Rebase-—-and-Why-You-Should-Care"><a href="#Differences-Between-Git-Merge-and-Rebase-—-and-Why-You-Should-Care" class="headerlink" title="Differences Between Git Merge and Rebase — and Why You Should Care"></a><a href="https://betterprogramming.pub/differences-between-git-merge-and-rebase-and-why-you-should-care-ae41d96237b6" target="_blank" rel="noopener">Differences Between Git Merge and Rebase — and Why You Should Care</a></h3><p>不管你的專案使用的是哪一種 Git Flow，你一定需要透過 Merge 或是 Rebase 來將 Branch 中變更的程式碼整合再一起，而作者在這篇文章中透過精美的動畫，把 Merge 和 Rebase 操作中產生的變化鉅細彌遺地展現出來，並且同時也把這兩種 Git 操作的不同之處詳細地記錄下來，真的是超級用心的！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 72 期 - 謎之聲對 Connection 說道：你已經死了！</title>
      <link href="/2021/03/16/72-connection_reset_by_peer/"/>
      <url>/2021/03/16/72-connection_reset_by_peer/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="謎之聲對-Connection-說道-你已經死了！"><a href="#謎之聲對-Connection-說道-你已經死了！" class="headerlink" title="謎之聲對 Connection 說道: 你已經死了！"></a><a href="https://medium.com/starbugs/%E8%AC%8E%E4%B9%8B%E8%81%B2%E5%B0%8D-connection-%E8%AA%AA%E9%81%93-%E4%BD%A0%E5%B7%B2%E7%B6%93%E6%AD%BB%E4%BA%86-b53d27c7ecb7" target="_blank" rel="noopener">謎之聲對 Connection 說道: 你已經死了！</a></h3><p>身為一個 Server Side 網路應用提供者，假如來存取的 Client Side 遇到問題該怎麼辦呢？直接跟他說，這一定是你的問題，我這邊都好好的 (大誤)，此文以自己最近遇到的一個 Connection Reset by Peer 議題來當作例子</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="How-well-do-you-know-“this”"><a href="#How-well-do-you-know-“this”" class="headerlink" title="How well do you know “this”?"></a><a href="https://anmshpndy.com/how-well-do-you-know-this?ref=hackernoon.com" target="_blank" rel="noopener">How well do you know “this”?</a></h3><p>在剛開始學習 JavaScript 的時候總是會讓人搞不懂當前的 <code>this</code> 到底是代表什麼，但其實只需要掌握幾種使用情況和關鍵字，<code>this</code> 就再也難不倒你啦！</p><h3 id="Announcing-the-New-TypeScript-Handbook"><a href="#Announcing-the-New-TypeScript-Handbook" class="headerlink" title="Announcing the New TypeScript Handbook"></a><a href="https://devblogs.microsoft.com/typescript/announcing-the-new-typescript-handbook/" target="_blank" rel="noopener">Announcing the New TypeScript Handbook</a></h3><p>微軟從 2018 年開始的新 TypeScript 指南已經超過的 beta 版本，成為學習 TypeScript 的主要資源啦！新的指南不在解釋 JavaScript 的細節，並著重在漸進式教學（避免使用尚未說明的 TypeScript 功能）、同步範例程式碼和 TypeScript 的版本（確保所有的範例程式碼都是最新的），還把一些平常不常使用的語法另外移到手冊的參考篇章裡，避免初學者過早讀到而產生「這到底可以用在哪裡？」等問題而停止學習。</p><h3 id="CSS-Modules-vs-CSS-in-JS-Who-wins"><a href="#CSS-Modules-vs-CSS-in-JS-Who-wins" class="headerlink" title="CSS Modules vs CSS-in-JS. Who wins?"></a><a href="https://dev.to/alexsergey/css-modules-vs-css-in-js-who-wins-3n25" target="_blank" rel="noopener">CSS Modules vs CSS-in-JS. Who wins?</a></h3><p>如果有接觸過 React，那對使用 CSS 的 CSS Modules 和 CSS-in-JS 兩種方法一定不陌生，然後就會開始考慮到底該使用哪一種才是對的？優缺點各是什麼？到底該投入哪個陣營？為什麼已經從三大框架抉擇完後還需要繼續抉擇？等等前端人生上的哲學問題，但是即使他們是那麼不同的兩種方式，但這個抉擇其實一點都不重要，不論你最後選了什麼都沒存在對錯，兩種寫法都還是各有存在的意義。</p><h3 id="jQuery-3-6-0-Released"><a href="#jQuery-3-6-0-Released" class="headerlink" title="jQuery 3.6.0 Released!"></a><a href="https://blog.jquery.com/2021/03/02/jquery-3-6-0-released/" target="_blank" rel="noopener">jQuery 3.6.0 Released!</a></h3><p>看到這則消息算是蠻感動的，想當年第一次學前端用的 Library 就是 JQuery，轉眼間現在的前端都是以各式各樣的 Framework 為主，幾乎沒有人在用 JQuery 了，想要從 JQuery 轉型的專案也都漸漸用 Vue 取代了，沒想到這個骨灰級的 Library 竟然還在更新推出新的 Release，看來我大 JQuery 還可以再戰 10 年XD</p><h3 id="Cheatsheet-XSS-that-works-in-2021"><a href="#Cheatsheet-XSS-that-works-in-2021" class="headerlink" title="Cheatsheet: XSS that works in 2021"></a><a href="https://netsec.expert/posts/xss-in-2021/?fbclid=IwAR1I8TbUtMSgasaxBjRxmRCpuFfEokwIkyHFyq3LweF4X4uDCZMPRmH81JQ#v3" target="_blank" rel="noopener">Cheatsheet: XSS that works in 2021</a></h3><p>現在的前端開發基本上 Framework 已經實作了許多 XSS 攻擊的基本防範，但只要是程式碼就一定會有漏洞，這篇文章直接舉例了在 2021 年中還可以用哪些方式來進行 XSS 攻擊，看完之後真的覺得前端好可怕是時候要準備離開前端領域了(X</p><h3 id="Testing-Library"><a href="#Testing-Library" class="headerlink" title="Testing Library"></a><a href="https://testing-library.com/docs/" target="_blank" rel="noopener">Testing Library</a></h3><p>最近剛好在研究前端的 e2e testing，由於因為自身的懶惰所以幾乎都用 create-react-app 進行基礎架構建設，而 testing library 剛好可以完美的支援 create-react-app 的專案，有了這套完美的工具，0接下來就可以開始好好研究 e2e testing 了。</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="Which-backend-language-to-learn-in-2020"><a href="#Which-backend-language-to-learn-in-2020" class="headerlink" title="Which backend language to learn in 2020?"></a><a href="https://mxx.news/backend-language-to-learn-in-2020-comparing-community-job-market-cloud-support-and-performance" target="_blank" rel="noopener">Which backend language to learn in 2020?</a></h3><p>如果最近想要開始學習後端開發，但不知道該學什麼語言的話，可以看看這篇文章。這篇文比較了 Python、Node.js、Java、Go 等等比較熱門的語言，個別分析他們的社群活躍程度跟工作機會，雖然已經是去年的文章，不過還是值得刊考看看</p><h3 id="Top-Serverless-Computing-Platforms-in-2020"><a href="#Top-Serverless-Computing-Platforms-in-2020" class="headerlink" title="Top Serverless Computing Platforms in 2020"></a><a href="https://blog.bitsrc.io/a-review-of-top-serverless-computing-platforms-in-2020-f8df4c1ff39f" target="_blank" rel="noopener">Top Serverless Computing Platforms in 2020</a></h3><p>因為 Serverless Computing 實在太過方便（雖然貴了點XD），近年來許多公司在開發初期時都會直接選用 Serverless 服務如 AWS Lambda、GCP Cloud Functions進行部署。而這篇文章就是把目前三家最大的 Serverless 服務拿出來比一比，讓你知道該怎麼選</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="初階-DevOps-SRE-工程師是如何煉成的"><a href="#初階-DevOps-SRE-工程師是如何煉成的" class="headerlink" title="初階 DevOps/SRE 工程師是如何煉成的"></a><a href="https://tech-blog.jameshsu.csie.org/post/devops-entry-level-sre-road/" target="_blank" rel="noopener">初階 DevOps/SRE 工程師是如何煉成的</a></h3><p>多後端開發者在後端待久了之後都會想往 DevOps/SRE 領域發展，而這篇文章剛好就講了想成為一個 SRE 工程師大概需要哪些技能，而且也包含了作者自己的心得，很棒的一篇文章！</p><h3 id="ConsoleMe-A-Central-Control-Plane-for-AWS-Permissions-and-Access"><a href="#ConsoleMe-A-Central-Control-Plane-for-AWS-Permissions-and-Access" class="headerlink" title="ConsoleMe: A Central Control Plane for AWS Permissions and Access"></a><a href="https://netflixtechblog.com/consoleme-a-central-control-plane-for-aws-permissions-and-access-fd09afdd60a8" target="_blank" rel="noopener">ConsoleMe: A Central Control Plane for AWS Permissions and Access</a></h3><p>雲端已經進入爆炸時代，現在越來越容易動態地創建基礎架構，組織內的每個 Group 都在建立他們自己的系統和自動化機制，這樣的風氣替提供了許多讓產品創新的機會，但是管理這麼多系統，讓他們確保適當的安全認證和授權已經成為不可被忽視的問題，Netflix 身為 AWS 的重度使用者，當然會遇到這方面的挑戰，因此在 AWS re:Invent 2020 裏 Netflix 開源了兩個用來管理 AWS 多重帳號存取與權限控制的工具，分別是 ConsoleMe 和用來與它互動的 CLI 輔助工具 Weep，有興趣的人可以參考當初的<a href="https://www.youtube.com/watch?v=fXNRYcNyw0c&t=5s" target="_blank" rel="noopener">發表影片</a></p><h3 id="Git-Cheat-Sheet-–-50-Git-Commands-You-Should-Know"><a href="#Git-Cheat-Sheet-–-50-Git-Commands-You-Should-Know" class="headerlink" title="Git Cheat Sheet – 50 Git Commands You Should Know"></a><a href="https://www.freecodecamp.org/news/git-cheat-sheet/" target="_blank" rel="noopener">Git Cheat Sheet – 50 Git Commands You Should Know</a></h3><p>自己 Git 也用好幾年了，但好像每天怎麼用，都還是那幾個而已 (羞)，趕快來看看這篇 50 個一定要知道的 Git Command，複習一下有哪一些 Command 其實是可以學起來，加速自己平日開發的速度！ </p><h3 id="Hassle-free-multi-tenant-K8S-clusters-management-using-Argo-CD"><a href="#Hassle-free-multi-tenant-K8S-clusters-management-using-Argo-CD" class="headerlink" title="Hassle-free multi-tenant K8S clusters management using Argo CD"></a><a href="https://blog.argoproj.io/hassle-free-multi-tenant-k8s-clusters-management-using-argo-cd-7dd35619046a" target="_blank" rel="noopener">Hassle-free multi-tenant K8S clusters management using Argo CD</a></h3><p>Argo CD 算是目前在 K8s GitOps Flow 最被廣泛使用的工具了，因為其提供了方便的 UI 和 CLI 介面，使用 CRD 深入地整合進到 K8s 中，不過同一座 K8s 叢集當中，除了有開發者負責需要將應用服務部署到 K8s 中之外，還有其他的維運人員也需要一起使用或是管理 K8s 叢集，而 Argo CD 同樣也可以幫助到他們的日常工作，這篇文章就是想要跟大家說明如何透過 Argo CD 來在多個 K8s 叢集的基礎之下，建立一個 Multi-Tenant 的平台</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 71 期 - 天竺鼠車車開車囉</title>
      <link href="/2021/03/09/71-pui-pui/"/>
      <url>/2021/03/09/71-pui-pui/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="電腦科學入門-Crash-Course"><a href="#電腦科學入門-Crash-Course" class="headerlink" title="電腦科學入門 Crash Course"></a><a href="https://medium.com/starbugs/%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8%E5%85%A5%E9%96%80-crash-course-cba334ddfb0c" target="_blank" rel="noopener">電腦科學入門 Crash Course</a></h3><p>今天來介紹一下 Crash Course 。Crash Course 是 Youtube 一億美元原創計畫的所創造的頻道之一 。由葛林兄弟所創立。內容以人文、科學系列向外延伸。截至今日已經有 1200萬的訂閱者。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="也許您的網站其實並不需要使用圖片輪播（Slider）功能，分析-8-個明顯的缺點"><a href="#也許您的網站其實並不需要使用圖片輪播（Slider）功能，分析-8-個明顯的缺點" class="headerlink" title="也許您的網站其實並不需要使用圖片輪播（Slider）功能，分析 8 個明顯的缺點"></a><a href="https://wp-valley.com/opinion-on-sliders" target="_blank" rel="noopener">也許您的網站其實並不需要使用圖片輪播（Slider）功能，分析 8 個明顯的缺點</a></h3><p>本篇文章從效能、SEO、需求或 RWD 版面等…各個角度來看圖片輪播在中小型網站使用的看法，並且用了許多目前大家隨處可看見的圖片輪播網站當做例子，分成幾個主題解釋它們為何能夠使用，以及你為什麼可能不需要。</p><h3 id="CSS-Grid-Cheat-Sheet-Illustrated-in-2021🎖️"><a href="#CSS-Grid-Cheat-Sheet-Illustrated-in-2021🎖️" class="headerlink" title="CSS Grid Cheat Sheet Illustrated in 2021🎖️"></a><a href="https://dev.to/joyshaheb/css-grid-cheat-sheet-illustrated-in-2021-1a3" target="_blank" rel="noopener">CSS Grid Cheat Sheet Illustrated in 2021🎖️</a></h3><p>如果你看了 MDN 或其他教學的文件卻始終搞不太清楚如何使用 CSS 中的 Grid，那我猜應該是少了可愛的獨角獸，快來給這清楚明瞭又可愛的獨角獸一次機會！ 😂</p><h3 id="JS中的EventLoop、宏任务、微任务"><a href="#JS中的EventLoop、宏任务、微任务" class="headerlink" title="JS中的EventLoop、宏任务、微任务"></a><a href="https://juejin.cn/post/6936630572936593422" target="_blank" rel="noopener">JS中的EventLoop、宏任务、微任务</a></h3><p>當你在面試前端工程師時，對方起手先列出了一堆 <code>setTimeout</code>、<code>Promise</code>、<code>async</code>、<code>await</code> 要問你執行順序時，大概有 870％ 都是想考有關 Event loop 的概念，為了不要和當初被電到不行的我一樣 😂，趁這機會一次搞懂吧！</p><h3 id="innerText、innerHTML、textContent、outerHTML-的差別"><a href="#innerText、innerHTML、textContent、outerHTML-的差別" class="headerlink" title="innerText、innerHTML、textContent、outerHTML 的差別"></a><a href="https://orandigo.github.io/blog/2020/03/22/20200322-innerText-innerHTML-textContent-outerHTML/" target="_blank" rel="noopener">innerText、innerHTML、textContent、outerHTML 的差別</a></h3><p>最近在研究以前 DOM 的 API 時，以往我只會用 <code>innerHTML</code> 但後來發現這個 method 其實存在了蠻多資安風險，後來有了 sanitise 的觀念後知道其實還有 <code>textContent</code> 的做法可以讓整個 injection 更安全一點，這篇文章講述了幾個最原始用來 inject html 的方法。</p><h3 id="Linked-lists-in-the-wild-React-Hooks"><a href="#Linked-lists-in-the-wild-React-Hooks" class="headerlink" title="Linked lists in the wild: React Hooks"></a><a href="https://dev.to/wuz/linked-lists-in-the-wild-react-hooks-3ep8" target="_blank" rel="noopener">Linked lists in the wild: React Hooks</a></h3><p>以往真的覺得演算法在前端開發完全沒有太直接的利益關係，畢竟前端要求的很多都是對於 DOM 的操作要熟悉，後來才知道 React Hooks 其實內部是用 linked-list 實作的。</p><h3 id="Before-You-memo"><a href="#Before-You-memo" class="headerlink" title="Before You memo()"></a><a href="https://overreacted.io/before-you-memo/" target="_blank" rel="noopener">Before You memo()</a></h3><p>在 React 中有一句話非常經典：優化必須要花很多成本，有時候自己以為的優化其實只會拖垮整個效能，像在 class component 時期有一個 <code>PureComponent</code> 以及現在 Hook 的 <code>memo()</code> 都是讓 component 優化的方法，但在使用這些方法之前不妨先看一下此 component 是否真的適用這些優化方法。</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="Remove-source-path-from-Go’s-panic-stack-trace"><a href="#Remove-source-path-from-Go’s-panic-stack-trace" class="headerlink" title="Remove source path from Go’s panic stack trace"></a><a href="https://johnpili.com/remove-source-path-from-gos-panic-stack-trace/" target="_blank" rel="noopener">Remove source path from Go’s panic stack trace</a></h3><p>這篇文章很短，主要講說平常在 Go 裡面呼叫 panic 時，程式會把整個完整的路徑輸出出來，但有時路徑太長反而會不容易看，而這時就可以在編譯時加個 <code>-trimpath</code>，輸出的路徑就會簡潔很多～</p><h3 id="Life-of-an-HTTP-request-in-a-Go-server"><a href="#Life-of-an-HTTP-request-in-a-Go-server" class="headerlink" title="Life of an HTTP request in a Go server"></a><a href="https://eli.thegreenplace.net/2021/life-of-an-http-request-in-a-go-server" target="_blank" rel="noopener">Life of an HTTP request in a Go server</a></h3><p>平常在用 Go 架 HTTP server 時，很少人會仔細去研究一個請求從進來到出去到底經過了哪些關卡。不過現在有人幫你研究完寫成文章了，雖然文有點長但寫得滿好的，看完真的可以更了解 Go 內建的 http package 是怎麼處理請求</p><h3 id="Go-internals-invariance-and-memory-layout-of-slices"><a href="#Go-internals-invariance-and-memory-layout-of-slices" class="headerlink" title="Go internals: invariance and memory layout of slices"></a><a href="https://eli.thegreenplace.net/2021/go-internals-invariance-and-memory-layout-of-slices/" target="_blank" rel="noopener">Go internals: invariance and memory layout of slices</a></h3><p>這篇文章跟第二篇是同一個作者，不過這篇更硬一點，主要是在介紹 Go slice 在記憶體內長什麼樣子，建議至少有寫過一些 Go 再來看，不然可能會完全看不懂他在分析什麼XD</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Testing-HashiCorp-Terraform"><a href="#Testing-HashiCorp-Terraform" class="headerlink" title="Testing HashiCorp Terraform"></a><a href="https://www.hashicorp.com/blog/testing-hashicorp-terraform" target="_blank" rel="noopener">Testing HashiCorp Terraform</a></h3><p>雖然在執行 <code>terraform apply</code> 之前可以透過 <code>terraform validate</code> 和 <code>terraform plan</code> 稍微檢查一下，不過這樣就夠了嗎？大家都希望把變更在生產環境執行之前可以快速先發現問題，讓 <code>terraform apply</code> 的執行更有信心，所以這篇文章想要跟大家談談如何達成這個目標，一路從 Unit Test 介紹起，接著談到 Contract Tests, Integration Tests, End-to-End Tests…等</p><h3 id="Spectral-raises-6-2M-for-its-DevSecOps-service"><a href="#Spectral-raises-6-2M-for-its-DevSecOps-service" class="headerlink" title="Spectral raises $6.2M for its DevSecOps service"></a><a href="https://techcrunch.com/2021/02/17/spectral-raises-6-2m-for-its-devsecops-service/" target="_blank" rel="noopener">Spectral raises $6.2M for its DevSecOps service</a></h3><p>DevSecOps 的議題在最近兩三年還滿熱門的，Spectral 最近除了為大家帶來他的 Code Scanner 服務之外，也宣布獲得 620 萬美金的投資，這間新創公司希望可以從程式碼和日誌就發現潛藏的資安漏洞，例如找出寫在程式碼中的 API Key 和其他機敏資訊，除此之外，也可以找出有資安問題的錯誤組態設定…等，對這些議題有興趣的人，可以看看他們是如何實作這些功能的</p><h3 id="Introduction-to-k3d-Run-K3s-in-Docker"><a href="#Introduction-to-k3d-Run-K3s-in-Docker" class="headerlink" title="Introduction to k3d: Run K3s in Docker"></a><a href="https://www.suse.com/c/introduction-k3d-run-k3s-docker-src/" target="_blank" rel="noopener">Introduction to k3d: Run K3s in Docker</a></h3><p>因為 K8s 的盛行，越來越多 Kxx 的工具如雨後春筍般冒出，這次的工具叫做 K8d，他讓使用者可以利用最輕盈的 K8s Distribution - K3s (單一個 Binary 檔案，而且只需要 512 MB 的 Ram) 在有安裝 Docker 的電腦就將 K8s Cluster 給運行起來；而此工具最主要的目的是希望讓 K8s 的本地端開發可以又輕鬆又節省資源！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 70 期 - 天上的 Bug 笑地上的工程師</title>
      <link href="/2021/03/02/70-the-bugs-in-the-sky-smile-at-developers-on-the-ground/"/>
      <url>/2021/03/02/70-the-bugs-in-the-sky-smile-at-developers-on-the-ground/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="來征服資料結構與演算法吧-關於-Linked-List-的基本介紹-feat-JavaScript"><a href="#來征服資料結構與演算法吧-關於-Linked-List-的基本介紹-feat-JavaScript" class="headerlink" title="來征服資料結構與演算法吧 | 關於 Linked List 的基本介紹 feat. JavaScript"></a><a href="https://medium.com/starbugs/%E4%BE%86%E5%BE%81%E6%9C%8D%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E8%88%87%E6%BC%94%E7%AE%97%E6%B3%95%E5%90%A7-%E9%97%9C%E6%96%BC-linked-list-%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9-feat-javascript-ff0ed89c326d" target="_blank" rel="noopener">來征服資料結構與演算法吧 | 關於 Linked List 的基本介紹 feat. JavaScript</a></h3><p>不曉得大家會不會和我一樣，每一次打開 LeetCode 看到什麼 Linked List 或是 Tree 的題目，腦袋就直接當機，呈現失智狀態。雖然要完全搞懂得花一番功夫，但學會後絕對是想忘也忘不掉啦（畢竟是曾經那麼苦惱的記憶 😂）！本篇文章就來分享關於 Linked List 的學習心得和一些相關題目的解析方式。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Maximally-optimizing-image-loading-for-the-web-in-2021"><a href="#Maximally-optimizing-image-loading-for-the-web-in-2021" class="headerlink" title="Maximally optimizing image loading for the web in 2021"></a><a href="https://www.industrialempathy.com/posts/image-optimizations/" target="_blank" rel="noopener">Maximally optimizing image loading for the web in 2021</a></h3><p>如果你正愁著該如何優化圖片載入的速度，或是不想要破壞使用者的操作體驗，那一定不能錯過這一篇！文章裡提到了 8 種載入圖片的方式，來看看哪種最適合應用到你的網頁上！</p><h3 id="A-beginner’s-guide-to-applying-color-in-UI-design"><a href="#A-beginner’s-guide-to-applying-color-in-UI-design" class="headerlink" title="A beginner’s guide to applying color in UI design"></a><a href="https://dev.to/georgedoescode/a-beginner-s-guide-to-applying-color-in-ui-design-3904" target="_blank" rel="noopener">A beginner’s guide to applying color in UI design</a></h3><p>這是一篇非常棒的文章！作者用一個簡單的 Product card，一步步解釋該如何配色可以讓整個畫面更協調，整個過程包含了確定主題、如何利用陰影，以及尋找一個單一的原色到應用！雖然一步一步往下看會覺得 Product card 沒什麼變化，但是當你看到最後，再往上滑到修改前的樣子，就會有「哇！那麼神奇！」的感覺！</p><h3 id="Add-A-Little-Whimsy-to-Your-Forms"><a href="#Add-A-Little-Whimsy-to-Your-Forms" class="headerlink" title="Add A Little Whimsy to Your Forms"></a><a href="https://dev.to/jh3y/add-a-little-whimsy-to-your-forms-2c1f" target="_blank" rel="noopener">Add A Little Whimsy to Your Forms</a></h3><p>這篇不算是什麼技術分享的文章，但是卻能給人滿滿的歡樂！有時候我們在做作品時總是一成不變的在切版、寫 JS 串 API 或是前端操作邏輯，那些看起來很有趣的作品早就已經是像公式一樣的存在了，但也許今天你只要小小的加入一些有趣的元素，例如在填寫完表單，並按下送出按鈕時噴射出七彩的紙屑怎麼樣？我們在做的東西，應該是更有趣的才對，對吧？😊</p><h3 id="Promise-中的三兄弟-all-race-allSettled"><a href="#Promise-中的三兄弟-all-race-allSettled" class="headerlink" title="Promise 中的三兄弟 .all(), .race(), .allSettled()"></a><a href="https://juejin.cn/post/6844903912592375821" target="_blank" rel="noopener">Promise 中的三兄弟 .all(), .race(), .allSettled()</a></h3><p>為了要在 Promise 陣列中可以順利回傳資料回來，以前都會用 <code>Promise.all</code> 但這個 method 有個問題就是要全部的 Promise 都 resolved 才會回傳值，可是現在很多網站如果都用這種方式來取得資料的話可能會讓使用者體驗下降，因此後來官方又推出了一個 <code>Promise.allSettled</code>，這個方法是會把 Promise array 中所有的 Promise 都執行完畢，即便有 Promise 被 rejected 也會回傳，這樣就可以針對一些錯誤的資料做例外處理了非常方便。</p><h3 id="Moment-Timezone"><a href="#Moment-Timezone" class="headerlink" title="Moment Timezone"></a><a href="https://momentjs.com/timezone/docs/" target="_blank" rel="noopener">Moment Timezone</a></h3><p>有時候在對接一些 API 時會需要傳入跟時間相關的 query string，假如產品是架設在雲端機器上那就一定會有時差問題，這時候就必須要考慮 timezone 了，而大家最常用的時間套件 <a href="https://momentjs.com/" target="_blank" rel="noopener">moment.js</a> 也有針對 timezone 做 plugin，這樣就可以無痛使用 moment.js 來處理 server time 跟 client time 的時差問題了。</p><h3 id="React-app中常見的跨站攻擊漏洞"><a href="#React-app中常見的跨站攻擊漏洞" class="headerlink" title="React app中常見的跨站攻擊漏洞"></a><a href="https://medium.com/frochu/%E5%9C%A8react-app%E4%B8%AD%E6%9C%80%E7%82%BA%E5%B8%B8%E8%A6%8B%E7%9A%84%E8%B7%A8%E7%AB%99%E6%94%BB%E6%93%8A%E6%BC%8F%E6%B4%9E-2fdd95f08466" target="_blank" rel="noopener">React app中常見的跨站攻擊漏洞</a></h3><p>以前我一直以為 React 已經完美的防範 XSS 攻擊了，直到我看到這篇文章才知道原來如果今天用的是 Isomorphic Rendering，就有可能會讓黑客有機可趁了，這時候就需要用到 <a href="https://github.com/apostrophecms/sanitize-html" target="_blank" rel="noopener">sanitize-html</a> 的方式來解析 html </p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="用-10-分鐘了解-Go-語言-context-package-使用場景及介紹"><a href="#用-10-分鐘了解-Go-語言-context-package-使用場景及介紹" class="headerlink" title="用 10 分鐘了解 Go 語言 context package 使用場景及介紹"></a><a href="https://blog.wu-boy.com/2020/05/understant-golang-context-in-10-minutes/" target="_blank" rel="noopener">用 10 分鐘了解 Go 語言 context package 使用場景及介紹</a></h3><p>很多人（包括我）在初學 Go 時都會不知道 context 是做什麼用的，碰到參數需要傳 context 的情況就直接用 ‘context.Background()` 矇混過去XD，而這篇文章解釋了為什麼會需要 context，看完後除了會用 context 之外，也不會再覺得官方為什麼要把這樣種奇怪的寫法納入標準</p><h3 id="Go-is-not-an-easy-language"><a href="#Go-is-not-an-easy-language" class="headerlink" title="Go is not an easy language"></a><a href="https://www.arp242.net/go-easy.html" target="_blank" rel="noopener">Go is not an easy language</a></h3><p>雖然 Go 被認為是個很簡單、易學的程式語言，但這篇文章認為那僅有在實現簡單的功能時是這樣，如果想要寫出高效能的程式，那很多時候程式碼就沒辦法那麼直觀，甚至會變得有點複雜</p><h3 id="50-Shades-of-Go-Traps-Gotchas-and-Common-Mistakes"><a href="#50-Shades-of-Go-Traps-Gotchas-and-Common-Mistakes" class="headerlink" title="50 Shades of Go: Traps, Gotchas, and Common Mistakes"></a><a href="http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/" target="_blank" rel="noopener">50 Shades of Go: Traps, Gotchas, and Common Mistakes</a></h3><p>這篇文章列出了 50 個在寫 Go 時最常犯的小錯誤，看了一下真的有一些我自己也犯過的錯XD，建議大家都可以看看（不想看英文的話文章最上方有中文翻譯的連結）</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="APIs-vs-WebSockets-vs-WebHooks-What-to-Choose"><a href="#APIs-vs-WebSockets-vs-WebHooks-What-to-Choose" class="headerlink" title="APIs vs. WebSockets vs. WebHooks: What to Choose?"></a><a href="https://blog.bitsrc.io/apis-vs-websockets-vs-webhooks-what-to-choose-5942b73aeb9b" target="_blank" rel="noopener">APIs vs. WebSockets vs. WebHooks: What to Choose?</a></h3><p>當 Client 和 Server 要進行溝通時，可以使用 API, WebSocket 或是 WebHook 這三種的其中一種，雖然這三種都可以達成溝通的目的，但其實彼此之間有很大的不同點，所以作者透過這篇文章來討論這三種方法是如何運行，以及如何根據使用情境來選擇三者之中最合適的方法</p><h3 id="50-Reasons-Kubernetes-Sucks"><a href="#50-Reasons-Kubernetes-Sucks" class="headerlink" title="50 Reasons Kubernetes Sucks"></a><a href="https://www.teamblind.com/post/50-Reasons-Kubernetes-Sucks-S77O8VZ8" target="_blank" rel="noopener">50 Reasons Kubernetes Sucks</a></h3><p>有人覺得其實 K8s 根本就不是一個好的平台，但卻沒有人敢站出來說，所以作者條列了 50 個為什麼他覺得 K8s 很爛的原因，例如：API 總是進行不相容的大改動，Service Meshes 根本是把垃圾構築在一堆垃圾上面，有種你用兩年前的版本來更新看看…等，老實說自己看完覺得有些不無道理</p><h3 id="Kubecost"><a href="#Kubecost" class="headerlink" title="Kubecost"></a><a href="https://github.com/kubecost/cost-model" target="_blank" rel="noopener">Kubecost</a></h3><p>本週最後不免俗要來介紹個人看到滿有趣的開源工具叫做 Kubecost，它提供的模型可以讓使用 Kubernetes 的團隊了解目前 K8s 資源使用情況，而且他還可以直接把這些資源所反映的真實成本根據不同的應用服務，團隊或是部門…等給計算出來，很簡單的就可以知道目前 K8s 燒錢的狀況XD</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 69 期 - 開學了才發現有寒假作業</title>
      <link href="/2021/02/23/69-back-to-school-without-doing-homework/"/>
      <url>/2021/02/23/69-back-to-school-without-doing-homework/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="不知道-bug-躲在哪個-commit-嗎？來試試-Git-bisect-吧！"><a href="#不知道-bug-躲在哪個-commit-嗎？來試試-Git-bisect-吧！" class="headerlink" title="不知道 bug 躲在哪個 commit 嗎？來試試 Git bisect 吧！"></a><a href="https://medium.com/starbugs/use-git-bisect-to-find-the-buggy-commit-b35e12ddd26b" target="_blank" rel="noopener">不知道 bug 躲在哪個 commit 嗎？來試試 Git bisect 吧！</a></h3><p>大家好我是 Larry，這週的專欄要來跟大家分享 Git 的進階技巧 - Git bisect，他主要是用來幫你找到哪個 commit 是有問題的。很多時候雖然我們有用 Git 做版本控制，但在主線上發現 bug 時往往已經過了一陣子，面對一兩個禮拜的歷史紀錄也無法快速揪出 buggy commit 是哪一個，這時候就可以把 Git bisect 請出來幫忙啦～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Announcing-Vite-2-0"><a href="#Announcing-Vite-2-0" class="headerlink" title="Announcing Vite 2.0"></a><a href="https://dev.to/yyx990803/announcing-vite-2-0-2f0a" target="_blank" rel="noopener">Announcing Vite 2.0</a></h3><p>Vite 2.0 在今年 2/16 號發佈啦！Vite 以最速稱號降臨在 Web 前端開發的生態圈內，作者在講解 Vite 2.0 的新功能前，還先分享了一則用 create-react-app 當作祭品，比較了兩者間的運行速度的 <a href="https://twitter.com/amasad/status/1355379680275128321" target="_blank" rel="noopener">twitter 貼文</a>，看到後瞬間將 Vite 的學習優先度在心中拉到最前面。😂</p><h3 id="How-to-convert-any-website-webpage-into-an-installable-progressive-web-app-PWA"><a href="#How-to-convert-any-website-webpage-into-an-installable-progressive-web-app-PWA" class="headerlink" title="How to convert any website/webpage into an installable progressive web app (PWA)"></a><a href="https://dev.to/zippytyro/how-to-convert-any-website-webpage-into-an-installable-progressive-web-app-pwa-59ai" target="_blank" rel="noopener">How to convert any website/webpage into an installable progressive web app (PWA)</a></h3><p>文章中介紹了什麼是 PWA，也講解了如何透過簡單的 4 個步驟讓你的網站轉換成可以安裝在電腦或手機上的應用程式！（其實更讓我驚訝的是作者的年紀才 17 歲！😂）</p><h3 id="Don’t-comment-your-code"><a href="#Don’t-comment-your-code" class="headerlink" title="Don’t comment your code"></a><a href="https://dev.to/nadaelokaily/don-t-comment-your-code-5e9h" target="_blank" rel="noopener">Don’t comment your code</a></h3><p>雖然這篇文章有點標題殺人，但作者想表達的意思其實是「註解存在的意義應該是要增加價值，而不是讓人更難理解甚至是產生混亂。」文章中舉了滿多種不適當的註解（個人最受不了的就是明明就有用 Git 但還註解程式碼）。</p><h3 id="access-control-allow-origin"><a href="#access-control-allow-origin" class="headerlink" title="access control allow origin"></a><a href="https://portswigger.net/web-security/cors/access-control-allow-origin" target="_blank" rel="noopener">access control allow origin</a></h3><p>相信很多前端工程師一定會遇到這個問題，但其實 CORS 可以說是瀏覽器用來存取 API 限制器，很多初學者都會覺得 CORS 是我某個 header 沒帶到而導致的錯誤，但其實 CORS 是 response 被瀏覽器屏蔽的起來，所以基本上遇到 CORS 問題是沒辦法純前端解決的一定要靠後端。</p><h3 id="When-to-useMemo-and-useCallback"><a href="#When-to-useMemo-and-useCallback" class="headerlink" title="When to useMemo and useCallback"></a><a href="https://kentcdodds.com/blog/usememo-and-usecallback" target="_blank" rel="noopener">When to useMemo and useCallback</a></h3><p>基本上這個問題應該已經被問到爛了，但有些前端工程師為了優化還是會濫用這些方法，但有時候反而會讓整個優化後的效能更差，畢竟優化都是要付出代價的，其實 React 已經會做初步的優化了，如果還要自己進行優化的話真的要更了解自己的架構不要為了優化而優化。</p><h3 id="穩定排序和不穩定排序"><a href="#穩定排序和不穩定排序" class="headerlink" title="穩定排序和不穩定排序"></a><a href="https://www.itread01.com/content/1549218625.html" target="_blank" rel="noopener">穩定排序和不穩定排序</a></h3><p>最近在研究前端的 sort api 時無意間看到這個文章，才知道原來排序有那麼多眉角還有分穩定跟不穩定，不是只有單純的排序而已，讓只會氣泡排序的我真的是看到了一個新世界XD</p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><h3 id="Dependency-Confusion-How-I-Hacked-Into-Apple-Microsoft-and-Dozens-of-Other-Companies"><a href="#Dependency-Confusion-How-I-Hacked-Into-Apple-Microsoft-and-Dozens-of-Other-Companies" class="headerlink" title="Dependency Confusion: How I Hacked Into Apple, Microsoft and Dozens of Other Companies"></a><a href="https://medium.com/@alex.birsan/dependency-confusion-4a5d60fec610" target="_blank" rel="noopener">Dependency Confusion: How I Hacked Into Apple, Microsoft and Dozens of Other Companies</a></h3><p>這大概是近期我看過最有趣的攻擊方式XD，他的原理是利用 npm install 在安裝時，如果遇到某個 package 的名稱在 private registery 跟 npm 上都有，那會優先選擇版本比較新的。所以只要猜一下別人的公司的 private package 叫什麼，然後到 npm 上發佈一樣名字的惡意 package，對方就會意外執行到你寫的程式碼</p><h3 id="New-JavaScript-Features-You-Can-Expect-in-ES2021"><a href="#New-JavaScript-Features-You-Can-Expect-in-ES2021" class="headerlink" title="New JavaScript Features You Can Expect in ES2021"></a><a href="https://blog.bitsrc.io/new-javascript-features-you-can-expect-in-es2021-c8adf0301293" target="_blank" rel="noopener">New JavaScript Features You Can Expect in ES2021</a></h3><p>雖然 2021 年才剛開始而已，但 ES2021 可能會有的新 feature 已經出來啦～包括前陣子討論度很高的 Promise.any 跟 WeakRefs 都在這個版本裡面，快來事先預習一下吧</p><h3 id="JavaScript-Symbols-But-Why"><a href="#JavaScript-Symbols-But-Why" class="headerlink" title="JavaScript Symbols: But Why?"></a><a href="https://medium.com/intrinsic/javascript-symbols-but-why-6b02768f4a5c" target="_blank" rel="noopener">JavaScript Symbols: But Why?</a></h3><p>JS 的 Symbol 有一些很有趣的特性，像是每個 Symbol 都是獨一無二的，而且還可以被拿來當 property 名稱，因此可以拿來做一些有趣的應用，像是防止 property 撞名、模擬 private property 等等</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="How-they-SRE"><a href="#How-they-SRE" class="headerlink" title="How they SRE"></a><a href="https://github.com/upgundecha/howtheysre" target="_blank" rel="noopener">How they SRE</a></h3><p>許多技術組織或是公司都會定期在各種公開平台 (例如 技術部落格，研討會，小聚…等) 提出並分享其最佳實踐，工具，技術還有工程文化的見解，而作者很熱心地把這所有的文章，書籍，影片都收集到這個 How they SRE 的 GitHub Repository 中，涵蓋的主題主要分為底下幾個大類</p><ul><li>Site Reliability Engineering</li><li>Hiring and Building SRE teams</li><li>SRE Culture</li><li>DevOps</li><li>Monitoring &amp; Observability</li><li>Alerting</li><li>Incident Response &amp; Post-Mortem</li><li>On-Call</li><li>Testing in Production</li><li>Chaos Engineering</li><li>Automation</li><li>Performance</li></ul><h3 id="Extending-applications-on-Kubernetes-with-multi-container-pods"><a href="#Extending-applications-on-Kubernetes-with-multi-container-pods" class="headerlink" title="Extending applications on Kubernetes with multi-container pods"></a><a href="https://learnk8s.io/sidecar-containers-patterns" target="_blank" rel="noopener">Extending applications on Kubernetes with multi-container pods</a></h3><p>這篇文章介紹要如何在不修改程式碼的情況之下，透過 Ambassador, Adapter, Sidecar 和 Init Container 來擴展運行在 K8s 中的應用服務功能，例如讓不支援 TLS 加密的服務透過 Nginx Proxy Container 來達成 TLS 加密傳輸；並且詳細解說在 Multi-Container 運行的 Pod 中，裡面的每個 Container 在網路跟資料層面上要會如何運作</p><h3 id="Command-Line-Interface-for-Terraform-Enterprise-Cloud-tecli"><a href="#Command-Line-Interface-for-Terraform-Enterprise-Cloud-tecli" class="headerlink" title="Command Line Interface for Terraform Enterprise/Cloud: tecli"></a><a href="https://github.com/awslabs/tecli" target="_blank" rel="noopener">Command Line Interface for Terraform Enterprise/Cloud: tecli</a></h3><p>連續好幾週都會介紹一個工具類的開源專案，而這週要談的是一個叫做 <strong>TECLI</strong> 的 CLI 工具，作者要大家想像在一個一切雲端資源都是由 Terraform 所掌控的世界裡，要如何方便地透過 Terraform Cloud API 操控 Terraform 進而管理所有的雲端資源？！當然就是透過今天介紹的這個 TECLI CLI 工具，在維運人員終端機器上或是 CI/CD 系統上執行簡單的命令，讓 Terraform 幫你管理好所有的雲端資源，有在使用 Terraform Cloud 的人千萬不要錯過了！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 68 期 - 改個 DNS 是要改多久？- Domain 管理的常見問題</title>
      <link href="/2021/02/16/68-domain-common-problem/"/>
      <url>/2021/02/16/68-domain-common-problem/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="改個-DNS-是要改多久？-Domain-管理的常見問題"><a href="#改個-DNS-是要改多久？-Domain-管理的常見問題" class="headerlink" title="改個 DNS 是要改多久？- Domain 管理的常見問題"></a><a href="https://medium.com/starbugs/%E9%80%A3-pm-%E4%B9%9F%E6%87%89%E8%A9%B2%E7%9F%A5%E9%81%93%E7%9A%84-dns-%E5%B0%8F%E7%9F%A5%E8%AD%98-d00b43e4fe9a" target="_blank" rel="noopener">改個 DNS 是要改多久？- Domain 管理的常見問題</a></h3><p>身為網路世界的一般使用者或是開發者，其實無時無刻都在使用 DNS 解析位於網址其後的真實運算資源在哪邊，因此當一個網路服務準備上線讓其他人或是服務可以使用前，一定需要先把 DNS 設定好，而這篇文章並沒有要講解 DNS 背後太深入的運行機制，因為自己對於網路底層也不太熟，只有一些堪用的常識而已；最主要是想藉由這篇文章談談自己這幾年來協助相關 DNS 設定時所遇到的常見問題，希望跟我一樣對 DNS 不熟的人看到這篇文章後，可以避免未來犯下一樣錯誤</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="實作開源小工具，與-Github-Actions-的第一次相遇！"><a href="#實作開源小工具，與-Github-Actions-的第一次相遇！" class="headerlink" title="實作開源小工具，與 Github Actions 的第一次相遇！"></a><a href="https://medium.com/starbugs/%E5%AF%A6%E4%BD%9C%E9%96%8B%E6%BA%90%E5%B0%8F%E5%B7%A5%E5%85%B7-%E8%88%87-github-actions-%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%9B%B8%E9%81%87-3dd2d70eeb" target="_blank" rel="noopener">實作開源小工具，與 Github Actions 的第一次相遇！</a></h3><h3 id="面試-前端工程師一定要會的-JS-觀念題-中英對照之上篇"><a href="#面試-前端工程師一定要會的-JS-觀念題-中英對照之上篇" class="headerlink" title="[面試] 前端工程師一定要會的 JS 觀念題-中英對照之上篇"></a><a href="https://medium.com/starbugs/%E9%9D%A2%E8%A9%A6-%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E4%B8%80%E5%AE%9A%E8%A6%81%E6%9C%83%E7%9A%84-js-%E8%A7%80%E5%BF%B5%E9%A1%8C-%E4%B8%AD%E8%8B%B1%E5%B0%8D%E7%85%A7%E4%B9%8B%E4%B8%8A%E7%AF%87-3b0a3feda14f" target="_blank" rel="noopener">[面試] 前端工程師一定要會的 JS 觀念題-中英對照之上篇</a></h3><h3 id="與-Github-Actions-的再次相遇！AWS-S3-CloudFront-自動部署-React-Web-App"><a href="#與-Github-Actions-的再次相遇！AWS-S3-CloudFront-自動部署-React-Web-App" class="headerlink" title="與 Github Actions 的再次相遇！AWS S3 + CloudFront 自動部署 React Web App"></a><a href="https://medium.com/starbugs/%E8%88%87-github-actions-%E7%9A%84%E5%86%8D%E6%AC%A1%E7%9B%B8%E9%81%87-aws-s3-cloudfront-%E8%87%AA%E5%8B%95%E9%83%A8%E7%BD%B2-react-web-app-e2c11942263f" target="_blank" rel="noopener">與 Github Actions 的再次相遇！AWS S3 + CloudFront 自動部署 React Web App</a></h3><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="How-to-Build-a-Hacker-News-Clone-Using-React"><a href="#How-to-Build-a-Hacker-News-Clone-Using-React" class="headerlink" title="How to Build a Hacker News Clone Using React"></a><a href="https://www.freecodecamp.org/news/how-to-build-a-hacker-news-clone-using-react/" target="_blank" rel="noopener">How to Build a Hacker News Clone Using React</a></h3><p>如果有訂閱像 StarBugs 那麼優質的週刊，就應該會聽過有個網頁叫做 <a href="https://news.ycombinator.com/" target="_blank" rel="noopener">Hacker News</a>(就像現在 😂)，而 <a href="https://news.ycombinator.com/" target="_blank" rel="noopener">Hacker News</a> 本身就有在<a href="https://github.com/HackerNews/API" target="_blank" rel="noopener">提供 API 在 GitHub</a> 上，既然又有了現成的網頁可以參考，也能找到開放的 API，不就輪到前端工程師們登場了嗎？文章中的作者就是利用的 <a href="https://github.com/HackerNews/API" target="_blank" rel="noopener">Hacker News 的 API</a>，用 React 寫了一個簡單的 Hacker News！大家也可以試試看哦！ 🙌</p><h3 id="10-Major-UI-UX-Design-Trends-for-2021"><a href="#10-Major-UI-UX-Design-Trends-for-2021" class="headerlink" title="10 Major UI/UX Design Trends for 2021"></a><a href="https://dev.to/codicacom/10-major-ui-ux-design-trends-for-2021-1n1j" target="_blank" rel="noopener">10 Major UI/UX Design Trends for 2021</a></h3><p>又到了部分前端工程師最需要的 UI 火力展示時間了（個人很喜歡看一些漂亮的設計 😂，非常視覺動物），但就像留言區一樓討論的，盲目的 follow 這些設計趨勢是沒有好處的，因為良好的 UI/UX 特性還是要以產品的類型和使用者需求下去設計（術業有專攻的部分）！話說如果看了上方的文章，也想做個 Hacker News，不妨從這篇文章裡挑個喜歡的設計來練練手！</p><h3 id="github1s"><a href="#github1s" class="headerlink" title="github1s"></a><a href="https://github.com/conwnet/github1s" target="_blank" rel="noopener">github1s</a></h3><p>有時候因為在 GitHub 上面太難閱讀程式碼了，總是希望可以在熟悉的介面 Visual Studio Code 中跳來跳去，所以通常都會先 clone 後再慢慢閱讀，而 <a href="https://github.com/conwnet/github1s" target="_blank" rel="noopener">github1s</a> 主打著，只需一秒就能讓你在 VS Code 上閱讀 GitHub 上的程式碼！妳只要在某個 repo 下，把網址的 github 改成 github1s 就可以了，各位一定要試看看！如果覺得每次都要改很麻煩，README.md 最後也有附上一些 Browser 的 extensions 可以更方便使用！</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="New-aspect-ratio-CSS-property"><a href="#New-aspect-ratio-CSS-property" class="headerlink" title="New aspect-ratio CSS property"></a><a href="https://web.dev/aspect-ratio/?fbclid=IwAR2y11dK1vANSdGFDxAShFV7gfKgk8s4EoaUklHtdO45FXgC1ABwmxXgv1k" target="_blank" rel="noopener">New aspect-ratio CSS property</a></h3><p>當初看到這篇文章的時候真的蠻興奮的，以往要寫一個 aspect-ratio box 必須要自己去設定 <code>padding-bottom</code>，例如 <code>padding-bottom: 56.25%</code> 代表 16:9 的比例，但這個真的有夠不直觀直到今日我還是要上網查一下各個比例的 aspect-ratio 值，但現在 CSS3 直接產生一個新的屬性叫 <code>aspect-ratio</code> 透過這篇文章一起來看看新的屬性有什麼功能吧！</p><blockquote><p>P.S. 目前這個屬性瀏覽器支援度還是比較低，不建議現在進行轉換，想知道這個屬性目前瀏覽器的支援度可以點擊<a href="https://caniuse.com/?search=aspect-ratio" target="_blank" rel="noopener">這裡</a></p></blockquote><h3 id="background-image-vs-html-img-tag"><a href="#background-image-vs-html-img-tag" class="headerlink" title="background-image vs html img tag"></a><a href="https://buildawesomewebsites.com/html-img-vs-css-background-image/" target="_blank" rel="noopener">background-image vs html img tag</a></h3><p>這是個蠻有趣的議題，到底是 html tag 中的 <code>&lt;img /&gt;</code> 效能好還是 CSS 屬性的 <code>background-image</code> 效能好？兩者都可以達到一樣的視覺效果但背後的做法完全不同，這篇文章解釋了兩者的差異，有興趣的讀者不妨可以看一下增加一些冷知識XD</p><h3 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a><a href="https://cythilya.github.io/2018/05/22/bem/" target="_blank" rel="noopener">BEM</a></h3><p>之前在寫網頁的時候都會覺得 <code>className</code> 的命名很難理解元素跟元素之間的關聯性，很常把一些不相關的 <code>className</code> 濫用導致最後程式碼難以理解，因此有一大段時間自己都是用 <code>styled-component</code> 或 <code>inline-style</code> 的方式解決這個問題，但缺點就是很難重複利用，直到認識了 <a href="http://getbem.com/introduction/" target="_blank" rel="noopener">BEM</a> 才徹底的解決了上面的問題，透過這篇文章讓大家可以更了解 <code>className</code> 的命名規則該如何設計會比較直觀～</p><h2 id="Elastic-Search"><a href="#Elastic-Search" class="headerlink" title="Elastic Search"></a>Elastic Search</h2><h3 id="An-Elasticsearch-Tutorial-Getting-Started"><a href="#An-Elasticsearch-Tutorial-Getting-Started" class="headerlink" title="An Elasticsearch Tutorial: Getting Started"></a><a href="https://logz.io/blog/elasticsearch-tutorial/" target="_blank" rel="noopener">An Elasticsearch Tutorial: Getting Started</a></h3><p>Elastic Search 是一個開源的分散式搜尋引擎，很擅長對資料做搜尋以及分析，而且還支援使用 RESTful API 進行 query，所以從 2010 年發佈到現在已經有非常大量的使用者。如果想入門的話這邊有一篇文章教你怎麼把 Elastic Search 跑起來，然後用 RESTful API 去進行 CRUD，很簡單的一篇文章～</p><h3 id="Install-Elasticsearch-with-Docker"><a href="#Install-Elasticsearch-with-Docker" class="headerlink" title="Install Elasticsearch with Docker"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html" target="_blank" rel="noopener">Install Elasticsearch with Docker</a></h3><p>如果看完上面那篇文章，覺得要把 Elastic Search 裝在自己電腦上太髒太麻煩的話，可以參考這份官方文件，文件中已經把 single node cluster 跟 multi-node cluster 所需的參數都設定好了，只要把 docker 裝好，然後跑他給的指令，就可以馬上開始使用 Elastic Search 了～</p><h3 id="我的-ElasticSearch-進化之旅"><a href="#我的-ElasticSearch-進化之旅" class="headerlink" title="我的 ElasticSearch 進化之旅"></a><a href="https://medium.com/starbugs/%E6%88%91%E7%9A%84-elasticsearch-log-%E6%94%B6%E9%9B%86%E4%B9%8B%E6%97%85-39016c3b9a29" target="_blank" rel="noopener">我的 ElasticSearch 進化之旅</a></h3><p>說到 Elastic Search 就不得不推一下小城哥的文章，對於 ES 使用者來說要怎麼把 ES 的狀態調整到最好，並且盡量降低花費是很重要的。所以這篇文章中小城哥分享了他架設 Elastic Search 的四個階段，用一句話來總結就是如何讓花費越來越低</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Scaling-Kubernetes-to-7-500-Nodes"><a href="#Scaling-Kubernetes-to-7-500-Nodes" class="headerlink" title="Scaling Kubernetes to 7,500 Nodes"></a><a href="https://openai.com/blog/scaling-kubernetes-to-7500-nodes/" target="_blank" rel="noopener">Scaling Kubernetes to 7,500 Nodes</a></h3><p>OpenAI 常會使用 Kubernetes 叢集來幫忙協助訓練機器學習模型，繼之前把單一 K8s 叢集擴展到 2500 個節點之後，這次變本加厲擴展到 7500 個節點，並把學習到的經驗以及為解決的問題透過這篇文章記錄下來回饋給社群</p><h3 id="How-to-setup-Kafka-cluster-for-15K-events-per-second-on-AWS-using-Docker"><a href="#How-to-setup-Kafka-cluster-for-15K-events-per-second-on-AWS-using-Docker" class="headerlink" title="How to setup Kafka cluster for 15K events per second on AWS using Docker"></a><a href="https://itnext.io/how-to-setup-kafka-cluster-for-15k-events-per-second-on-aws-using-docker-d34539873589" target="_blank" rel="noopener">How to setup Kafka cluster for 15K events per second on AWS using Docker</a></h3><p>在這篇文章中作者詳細的手把手紀錄在 AWS 中要如何使用 Docker 架設出可以承受與處理每秒<strong>一萬五千個訊息</strong> (每個訊息為 1KB 左右) 的 Kafka 和 Zookeeper 叢集，而且還有考量到 HA 和監控機制！</p><h3 id="iamlive-Generate-a-basic-IAM-policy-from-AWS-client-side-monitoring"><a href="#iamlive-Generate-a-basic-IAM-policy-from-AWS-client-side-monitoring" class="headerlink" title="iamlive: Generate a basic IAM policy from AWS client-side monitoring"></a><a href="https://github.com/iann0036/iamlive" target="_blank" rel="noopener">iamlive: Generate a basic IAM policy from AWS client-side monitoring</a></h3><p>這次要來介紹的工具專案叫做 iamlive，它還滿酷的，它利用 AWS client-side monitoring 的功能，<strong>讓使用者在操作 AWS 的時候，自動把對應到該操作行爲的 IAM Policy 給產生出來</strong>，如此一來維運人員不用再慢慢地去手動把 IAM Policy 給刻出來</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 67 期 - 歡天喜地，東隆東隆鏹</title>
      <link href="/2021/02/09/67-happy-chinses-new-year-2021/"/>
      <url>/2021/02/09/67-happy-chinses-new-year-2021/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="The-Great-Suspender-不能用了怎麼辦？來找尋替代方案！"><a href="#The-Great-Suspender-不能用了怎麼辦？來找尋替代方案！" class="headerlink" title="The Great Suspender 不能用了怎麼辦？來找尋替代方案！"></a><a href="https://medium.com/starbugs/38f1ee0142b7" target="_blank" rel="noopener">The Great Suspender 不能用了怎麼辦？來找尋替代方案！</a></h3><p>在 The Great Suspender 被 Google 下架後，有哪些使用方案，哪些方案是換湯不換藥。本篇文章帶大家探究各個替代方案的葫蘆裡是賣些甚麼藥，並且協助大家選擇最適合自己的方案。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="重新學習瀏覽器資源載入機制，這些年努力改善電商網站效能的旅程"><a href="#重新學習瀏覽器資源載入機制，這些年努力改善電商網站效能的旅程" class="headerlink" title="重新學習瀏覽器資源載入機制，這些年努力改善電商網站效能的旅程"></a><a href="https://jason-memo.dev/posts/relearn-browser-loading-resoure-improve-ec-site-performance-journey/" target="_blank" rel="noopener">重新學習瀏覽器資源載入機制，這些年努力改善電商網站效能的旅程</a></h3><p>當工程師聽到使用者反應網頁出現的速度很慢時，通常會從如何減少載入的 JavaScript 檔案下手（只下載該頁面必須的 JavaScript 檔案），但其實對使用者來說，他們感受速度最大的一部份是畫面呈現的速度，一起看看本篇文章的作者做了哪些事情，讓網頁載入的速度比以往更提高四倍之多吧！</p><h3 id="React-Vs-Vue-Vs-Angular-What-to-Choose-for-Web-Development"><a href="#React-Vs-Vue-Vs-Angular-What-to-Choose-for-Web-Development" class="headerlink" title="React Vs Vue Vs Angular: What to Choose for Web Development"></a><a href="https://northell.medium.com/react-vs-vue-vs-angular-what-to-choose-for-web-development-abc5565d3f11" target="_blank" rel="noopener">React Vs Vue Vs Angular: What to Choose for Web Development</a></h3><p>「該如何選擇 React、Vue 或是 Angular 呢？」這大概是從我第一次聽到，並開始學 React 開始就一直存在的問題，對許多初學者來說更不知道該從哪個下手投資報酬率比較高（其實可能都會選擇有中文文件的 Vue 開始 😂），但其實要學會框架的使用其實非常容易，也許只是一週就能夠建立一個簡單的網頁，重點在於能不能了解框架背後所實踐的原理及知識，應用各個框架自身的優缺點，而不是讓自己只停留在框架的應用層面上。</p><h3 id="How-the-Question-Mark-Operator-Works-in-JavaScript"><a href="#How-the-Question-Mark-Operator-Works-in-JavaScript" class="headerlink" title="How the Question Mark (?) Operator Works in JavaScript"></a><a href="https://www.freecodecamp.org/news/how-the-question-mark-works-in-javascript/" target="_blank" rel="noopener">How the Question Mark (?) Operator Works in JavaScript</a></h3><p>各位在寫 JavaScript 的時候，或多或少都會遇到需要去判斷 <code>undefined</code> 的情況，這時候最直覺的可能是用 <code>value || &#39;default value&#39;</code>，但在這麼寫的瞬間，通常就等於直接寫了一個 Bug，因為不只是 <code>undefined</code>，只要 <code>value</code> 還等於 <code>null</code> 或 <code>0</code> 等有意義的值都會被設置成 <code>default value</code>。面對這種情況，JavaScript 創造了一些用來處理 <code>undefined</code> 的 <code>?</code> 語法，看看文章中的範例，然後跟上吧！</p><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h3 id="React-Redux-and-Context-Behavior"><a href="#React-Redux-and-Context-Behavior" class="headerlink" title="React, Redux, and Context Behavior"></a><a href="https://blog.isquaredsoftware.com/2020/01/blogged-answers-react-redux-and-context-behavior/" target="_blank" rel="noopener">React, Redux, and Context Behavior</a></h3><p>上禮拜的推薦文章提到是否 Context API 可以搭配 custom hooks 取代 Redux，這禮拜推薦大家 Redux 作者寫的文章，接下來推薦的幾篇都會跟這些觀念環環相扣，首先要先了解 React、Redux、以及 Context 他們彼此的行為是什麼才能繼續往下深入研究。</p><h3 id="Why-React-Context-is-Not-a-“State-Management”-Tool-and-Why-It-Doesn’t-Replace-Redux"><a href="#Why-React-Context-is-Not-a-“State-Management”-Tool-and-Why-It-Doesn’t-Replace-Redux" class="headerlink" title="Why React Context is Not a “State Management” Tool (and Why It Doesn’t Replace Redux)"></a><a href="https://blog.isquaredsoftware.com/2021/01/context-redux-differences/?fbclid=IwAR3BWkOfnwWrNIg3dJNMi-I00P_TXmu2ycZo3_GK-umPl2Z1xsQomta9Wn4" target="_blank" rel="noopener">Why React Context is Not a “State Management” Tool (and Why It Doesn’t Replace Redux)</a></h3><p>首先 Context API 通常會寫成一個 Provider 元件把 value 往下 <strong>傳遞</strong> 給其他的元件使用，要特別注意粗體的 <strong>傳遞</strong> 二字，而 Redux 一開始使用也一樣要把 store 的物件藉由 Redux Provider <strong>傳遞</strong> 下去，既然兩者都是藉由 Provider 傳遞那想必 Redux 一定可以被 Context API 可以搭配 custom hook 來取代 Redux 吧！但要記住 Context API 並不是一個 <code>state machine</code>，所以如果專案對於 state 會進行非常頻繁的更新，且這個 state 是需要提供給非常多元件使用的話就建議用 Redux 來管理吧！</p><h3 id="Redux-Not-Dead-Yet"><a href="#Redux-Not-Dead-Yet" class="headerlink" title="Redux - Not Dead Yet!"></a><a href="https://blog.isquaredsoftware.com/2018/03/redux-not-dead-yet/" target="_blank" rel="noopener">Redux - Not Dead Yet!</a></h3><p>所以 Redux 會不會因為大 hook 時代就消失呢？作者表明了說不會！因為 Redux 能做的事情很多，但目前大多數的專案都是走 SPA，頂多用 <code>react-router-dom</code> 改變一下 router 讓網站看起來很像 MPA，而 SPA 通常的設計都會是只取得該頁面需要的內容，基本上會讓每一個頁面彼此間不會有過多的關聯，這也符合網頁是 stateless 的設計，以往要取資料並且渲染無疑問一定是在 <code>componentDidMount</code> 的時候才去取資料，但這種設計模式已經被官方說是非常不好的設計模式，會讓使用者在 I/O 端等待過久，最好的設計方式是一開始非同步併發出去後再批次渲染，現在也非常多 custom hook 做到監聽資料是否有成功回傳的功能，例如 <a href="https://swr.vercel.app/" target="_blank" rel="noopener">SWR</a>，所以講了這麼多專案是否有需要 Redux 呢？我覺得最好的解答就是 Redux 作者說的不要 <strong>overuse Redux</strong> 比較好。</p><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><h3 id="Rust-lang-Tips-and-Tricks"><a href="#Rust-lang-Tips-and-Tricks" class="headerlink" title="Rust lang Tips and Tricks"></a><a href="https://mudit.blog/rust-tips-and-tricks/" target="_blank" rel="noopener">Rust lang Tips and Tricks</a></h3><p>每個語言都會有自己的 Tips and Tricks，當然 Rust 也不意外，如果寫 Rust 已經寫了一陣子不知道該往哪前進，那就來看看他的小技巧吧～</p><h3 id="Rust-不适合开发-Web-API"><a href="#Rust-不适合开发-Web-API" class="headerlink" title="Rust 不适合开发 Web API"></a><a href="https://www.infoq.cn/article/MDqSIGbH5JO2kIVG7Pel" target="_blank" rel="noopener">Rust 不适合开发 Web API</a></h3><p>前陣子在 FB 看到有人分享這篇「Rust 不適合開發 Web API」，以為大概又是來戰語言的，所以馬上點了進去看他要說什麼。但看了之後才發現文章並不是在說 Rust 不好，而是在說目前 Rust 的 Web API 生態系還不夠完整。譬如說 NodeJS 有 passport 來實作各種登入方式、如果需要連接 AWS 或 GCP 服務也有非常完整的官方 SDK，但 Rust 這邊就真的還不夠成熟，所以我看完也是部分同意這篇的觀點</p><h3 id="Rust-is-a-hard-way-to-make-a-web-API"><a href="#Rust-is-a-hard-way-to-make-a-web-API" class="headerlink" title="Rust is a hard way to make a web API"></a><a href="https://www.reddit.com/r/programming/comments/kzqcjz/rust_is_a_hard_way_to_make_a_web_api" target="_blank" rel="noopener">Rust is a hard way to make a web API</a></h3><p>如果看完上面那篇還覺得意猶未盡的話，Reddit 上針對上面文章的討論串有有將近三百則留言，而且因為是在 programming 而不是在 Rust 板，所以有各式各樣的觀點，如果對於 Rust 到底適不適合寫 Web 有興趣的話，可以來看看大家的想法</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Deep-Dive-into-WebSockets"><a href="#Deep-Dive-into-WebSockets" class="headerlink" title="Deep Dive into WebSockets"></a><a href="https://blog.bitsrc.io/deep-dive-into-websockets-e6c4c7622423" target="_blank" rel="noopener">Deep Dive into WebSockets</a></h3><p>在一開始的網路世界裡，網路應用服務是由使用者所觸發的單純 HTTP 請求所組成，隨著科技的進步，兩方互相溝通即時傳輸資料的需求開始出現，有一些應用服務有低延遲的需求，譬如多人上遊戲，聊天軟體，即時更新的社群動態，線上運動計分板…等，而且這些需求的解決方案便是…WebSockets！隨著他被普遍接受之後，越來越多函式庫的出現後，簡化了他的整合使用，因此大部分的人在不了解內部原理的情況下開始使用該技術，進而導致效能低落，所以這篇文章嘗試涵蓋 WebSockets 重要的基本屬性，讓大家可以很清楚的知道該如何去使用它</p><h3 id="Cloud-Native-Computing-Foundation-Announces-Open-Policy-Agent-Graduation"><a href="#Cloud-Native-Computing-Foundation-Announces-Open-Policy-Agent-Graduation" class="headerlink" title="Cloud Native Computing Foundation Announces Open Policy Agent Graduation"></a><a href="https://www.cncf.io/announcements/2021/02/04/cloud-native-computing-foundation-announces-open-policy-agent-graduation/" target="_blank" rel="noopener">Cloud Native Computing Foundation Announces Open Policy Agent Graduation</a></h3><p>上週又有專案從 CNCF 畢業了，這次畢業的是自己一直有在關注的 Policy as Code 工具 Open Policy Agent (OPA)，因為隨著越來越多人的採用，透明的管理流程，功能面的成熟度提升，對社群貢獻，專案維護，包容性都有高度的實體輸入，所以就順理成章的畢業啦～這邊不免俗的提一下 OPA 是什麼，它是一個開源的通用型 Policy Engine，整個架構每個層面的 Policy 都可以透過使用它來全部搞定，該專案於 2018 四月進到 CNCF Sandbox, 一年後晉升到 Incubation，有超過來自 30 個組織貢獻過 OPA，而主要四個維護者則來自於 Google, Microsoft, VMware 和 Styra，對於 Policy as Code 還沒有研究的人，推薦可以看看 OPA 這個工具</p><h3 id="cert-checker"><a href="#cert-checker" class="headerlink" title="cert-checker"></a><a href="https://github.com/mogensen/cert-checker" target="_blank" rel="noopener">cert-checker</a></h3><p>最後一樣來介紹一個小專案叫做 cert-checker，從名字就可以看出來，他是用來監控 Cerfiticate 的工具，而且把取得的資訊透過 Metric 輸出給 Prometheus，方便繪製成 Dashboard 觀看或是提前發出告警通知，畢竟在這個講究安全的資訊時代，SRE 所要管理的 Certificate 越來越多，而且有效期限還越來越短 T_T</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 66 期 - 我的心已經在年假上了</title>
      <link href="/2021/02/02/66-my-heart-is-already-living-the-new-year-vacation/"/>
      <url>/2021/02/02/66-my-heart-is-already-living-the-new-year-vacation/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="開源專案讀起來-從-SWR-來看看實務上的-Observer-Pattern（觀察者模式）"><a href="#開源專案讀起來-從-SWR-來看看實務上的-Observer-Pattern（觀察者模式）" class="headerlink" title="開源專案讀起來 | 從 SWR 來看看實務上的 Observer Pattern（觀察者模式）"></a><a href="https://medium.com/starbugs/%E9%96%8B%E6%BA%90%E5%B0%88%E6%A1%88%E8%AE%80%E8%B5%B7%E4%BE%86-%E5%BE%9E-swr-%E4%BE%86%E7%9C%8B%E7%9C%8B%E5%AF%A6%E5%8B%99%E4%B8%8A%E7%9A%84-observer-pattern-%E8%A7%80%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F-46c16c6fd724" target="_blank" rel="noopener">開源專案讀起來 | 從 SWR 來看看實務上的 Observer Pattern（觀察者模式）</a></h3><p>本週專欄主要討論的 Observer Pattern（觀察者模式）算是非常常見的模式之一，尤其是在同一資料在多個地方被使用到，且當資料改變時，需要更新所有使用該資料的地方的情境特別有用。Umm…上方像教科書裡會寫的定義可能不太親民，換個方式說：</p><p>當多個 component 共用同一個 state（不論 state 是保管在 react-redux 或 SWR），那當 state 更新時，所有使用到該 state 的 component 都要根據新資料重新 render 頁面！</p><p>如果還是不太清楚，待會文中也是會先用簡單的範例呈現，再來從程式碼中看看 Observer Pattern 是怎麼實現的！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="導入-TypeScript-應考慮之效益與成本"><a href="#導入-TypeScript-應考慮之效益與成本" class="headerlink" title="導入 TypeScript 應考慮之效益與成本"></a><a href="https://engineering.linecorp.com/zh-hant/blog/benefits-and-costs-to-consider-when-installing-typescript/" target="_blank" rel="noopener">導入 TypeScript 應考慮之效益與成本</a></h3><p>近幾年 TypeScript 越來越熱門，甚至登上 2020 最受開發者喜愛的語言第二名（對，來源又是 <a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved" target="_blank" rel="noopener">Stack Overflow 統計</a> 😂），但是當你在導入的時候是真的了解 TypeScript 的好，並覺得有需要呢？還是僅僅因為大家都在使用？其實 TypeScript 本身並不可怕，可怕的是將它導入到專案中的成本可能超乎你的想像。</p><h3 id="What-I-Wish-Every-Developer-Knew-About-let-In-Javascript"><a href="#What-I-Wish-Every-Developer-Knew-About-let-In-Javascript" class="headerlink" title="What I Wish Every Developer Knew About let In Javascript."></a><a href="https://hackernoon.com/what-i-wish-every-developer-knew-about-let-in-javascript-831q3138" target="_blank" rel="noopener">What I Wish Every Developer Knew About let In Javascript.</a></h3><p>在看這篇文章之前可以試著想想，在 JavaScript 裡，<code>var</code> 和 <code>let</code> 的差異在哪裡？在面對這個問題的時候你能夠回答多少答案呢？本文的作者對 <code>var</code> 和 <code>let</code> 的差異做了一些簡單的整理，且文章中也有提到關於 TDZ - temporal dead zone 的概念，值得抽空簡單瞭解一下！</p><h3 id="How-Hex-Code-Colors-Work-–-and-How-to-Choose-Colors-Without-A-Color-Picker"><a href="#How-Hex-Code-Colors-Work-–-and-How-to-Choose-Colors-Without-A-Color-Picker" class="headerlink" title="How Hex Code Colors Work – and How to Choose Colors Without A Color Picker"></a><a href="https://www.freecodecamp.org/news/how-hex-code-colors-work-how-to-choose-colors-without-a-color-picker/" target="_blank" rel="noopener">How Hex Code Colors Work – and How to Choose Colors Without A Color Picker</a></h3><p>本篇文章簡單解釋了 hex color（16 進位的顏色表示法）的組成以及使用 hex 表示顏色的好處。記得之前工作的時候，常常看到某個顏色就會找同事一起玩猜 hex 的遊戲，然後比誰猜得比較接近 😂，推薦大家看完這篇文章又剛好很無聊的話，之後也可以找同事一起玩，哈哈哈。</p><h3 id="Finally-a-CSS-only-solution-to-hover-on-touchscreens"><a href="#Finally-a-CSS-only-solution-to-hover-on-touchscreens" class="headerlink" title="Finally, a CSS only solution to :hover on touchscreens"></a><a href="https://medium.com/@mezoistvan/finally-a-css-only-solution-to-hover-on-touchscreens-c498af39c31c" target="_blank" rel="noopener">Finally, a CSS only solution to :hover on touchscreens</a></h3><p>這是一個非常有趣的前端議題，最近有個專案裡面有一個按鈕本身有 <code>:hover</code> 以及 <code>:active</code> 兩種樣式，但以前的我認為行動裝置並沒有 <code>:hover</code> 的樣式(嚴格說起來應該是沒辦法 trigger 出 <code>:hover</code> 的樣式)，但很奇怪的是每次點擊這個按鈕後都會跑出 <code>:hover</code> 的樣式出來，後來研究了一下才發現原來行動裝置在點擊完後會觸發 <code>:hover</code> ，要取消這個樣式必須要使用者自己點擊其他的區塊來移除樣式，不過要動到使用者的操作就絕對不是好解法，直到看了這篇<a href="https://medium.com/@mezoistvan/finally-a-css-only-solution-to-hover-on-touchscreens-c498af39c31c" target="_blank" rel="noopener">文章</a>才知道原來已經有 css 解法了，如果有讀者遇到類似的問題不妨也可以用這個方法試試看，說不定就解出來了～</p><h3 id="使用-React-Hooks-搭配-Context-API-取代-Redux"><a href="#使用-React-Hooks-搭配-Context-API-取代-Redux" class="headerlink" title="使用 React Hooks 搭配 Context API 取代 Redux"></a><a href="https://andyyou.github.io/2019/08/11/use-react-hooks-and-context-replace-redux/" target="_blank" rel="noopener">使用 React Hooks 搭配 Context API 取代 Redux</a></h3><p>這個算是我心中一個很難解的議題，以前 React 還在 class component 時期時無庸置疑 <a href="https://redux.js.org/" target="_blank" rel="noopener">Redux</a> 是一個非常好用的 state machine，但由於 Redux 有個非常大的缺陷就是無法處理非同步的 action 也因此有了 redux-saga 、 redux-thunk 、 redux-promise 、 redux-observable 等等 middleware 來處理非同步的狀態處理，這也造就了讓前端工程師需要學習更多的工具才能解決問題，但是現在 React 進入大 hook 時代，一堆 custom hook 以及 dependencies 的監聽讓你的 component 可以不用再處理那麼多的 state 管理，再加上 React 也同時更新了 <a href="https://zh-hant.reactjs.org/docs/context.html" target="_blank" rel="noopener">context</a> 的運用，所以到底 hook 有沒有需要 Redux 呢？這個問題一直在我心中沒有一個正確的解答XD</p><h3 id="svelte"><a href="#svelte" class="headerlink" title="svelte"></a><a href="https://blog.kalan.dev/2020-04-19-svelte-%E2%80%94-%E6%98%AF%E4%BB%80%E9%BA%BC%E8%AE%93%E6%88%91%E9%81%87%E8%A6%8B%E9%80%99%E6%A8%A3%E7%9A%84%E4%BD%A0/" target="_blank" rel="noopener">svelte</a></h3><p><a href="https://svelte.dev/" target="_blank" rel="noopener">svelte</a> 算是 2020 年最大的 JavaScript Framework 黑馬了吧，但為什麼拖到 2021 年才來講呢？是因為在 2020 年的 JavaScript Framework 排行榜中，svelte 竟然名列前茅，這讓前端工程師又更頭痛了，React 還沒學得淋漓盡致，Vue 也還沒摸透，更不要說還有一個換了一版本就要重寫的 Angular，現在還要多學一個 svelte 是不是在搞工程師XD 但 svelte 為什麼會突然受到那麼多人喜歡也不是沒有道理，svelte 只有 <code>document.createElement</code> 跟 <code>element.textContent</code> 的包裝而已，沒有 Virtual DOM 的概念，加上容量更小的 bundle file，和不用再額外學一些 framework 自己創出來的 API(對我就是在說 React XD)，只要會 JavaScript 最基本的語法就可以利用 svelte 把網頁寫的好效能也不差，非常適合初學網頁的人使用，看了這篇文章後也想開始學習 svelte 這個框架了XD</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><p>Go 在即將到來的 <a href="https://tip.golang.org/doc/go1.16" target="_blank" rel="noopener">1.16</a> 版本中，有一些滿有趣的新 feature，而且內建的 library 也有一點變動，所以推薦這三篇介紹 Go 1.16 的文章給大家讀讀～</p><h3 id="Go-1-16-推出-Embedding-Files"><a href="#Go-1-16-推出-Embedding-Files" class="headerlink" title="Go 1.16 推出 Embedding Files"></a><a href="https://blog.wu-boy.com/2020/12/embedding-files-in-go-1-16/" target="_blank" rel="noopener">Go 1.16 推出 Embedding Files</a></h3><p>首先是第一個新 feature - embedded files，以往如果專案裡面有一些執行過程中會用到的檔案、圖片，那就沒辦法把整份程式碼編譯成單一執行檔，但有了內建的 embedded files 之後，就可以把所有檔案及程式碼編譯成一個執行檔，雖然那個執行檔會比較肥（因為塞了檔案在裡面），但在 deploy 跟 release 時都會方便許多</p><h3 id="從一知半解到略懂-Go-modules"><a href="#從一知半解到略懂-Go-modules" class="headerlink" title="從一知半解到略懂 Go modules"></a><a href="https://myapollo.com.tw/zh-tw/golang-go-module-tutorial/" target="_blank" rel="noopener">從一知半解到略懂 Go modules</a></h3><p>Go 在 1.11 時就推出自己的 package management 工具 Go modules，但最初只是實驗性質所以預設是關閉的，而且那時還有 dep 跟 vendor 等等競爭對手。但在經過幾個版本的推動之後，Go 1.16 終於要預設開啟 Go modules 功能，也代表以後的依賴管理就是以 Go modules 為主了，所以還不熟悉他的朋友們得快點跟上囉</p><h3 id="A-Tour-of-Go-1-16’s-io-fs-package"><a href="#A-Tour-of-Go-1-16’s-io-fs-package" class="headerlink" title="A Tour of Go 1.16’s io/fs package"></a><a href="https://benjamincongdon.me/blog/2021/01/21/A-Tour-of-Go-116s-iofs-package/" target="_blank" rel="noopener">A Tour of Go 1.16’s io/fs package</a></h3><p>寫過一陣子 Go 的人應該都知道 Go 內建有個 package 叫 ioutil，但這個 package 原本的定位就怪怪，有一種「這些功能很好用，但不知道要放哪裡，所以就弄個 util」的感覺，所以 Go 決定要在 1.16 把 ioutil deprecate 掉，並且把原有的功能放到新的 package io/fs 裡面，所以快來看看最新的 io/fs 怎麼使用吧～</p><blockquote><p>如果覺得學不動了，為了讓舊版本的程式碼可以跑，ioutil 還是會繼續留在那邊，所以短時間內還不用擔心，不過有時間的話還是去了解了解 io/fs 比較好～</p></blockquote><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="The-DevOps-Tools-Lifecycle-Mesh-for-2021"><a href="#The-DevOps-Tools-Lifecycle-Mesh-for-2021" class="headerlink" title="The DevOps Tools Lifecycle Mesh for 2021"></a><a href="https://harness.io/blog/devops/devops-tools-lifecycle-mesh/" target="_blank" rel="noopener">The DevOps Tools Lifecycle Mesh for 2021</a></h3><p>DevOps Tool Chain 就像是名模生死鬥一般，有些不用多久的時間就被淘汰掉，也會一直有新的冒出來，而 Harness 這邊幫大家整理好 2021 年的 DevOps Tool，按照不同的功能屬性分類好，趕緊來瞧瞧看自己鑽研的領域有沒有多出新的角色，並且順便從各大分類中看看自己的技能樹有沒有少了什麼XD</p><h3 id="Terraform-Mono-Repo-vs-Multi-Repo-The-Great-Debate"><a href="#Terraform-Mono-Repo-vs-Multi-Repo-The-Great-Debate" class="headerlink" title="Terraform Mono Repo vs. Multi Repo: The Great Debate"></a><a href="https://www.hashicorp.com/blog/terraform-mono-repo-vs-multi-repo-the-great-debate" target="_blank" rel="noopener">Terraform Mono Repo vs. Multi Repo: The Great Debate</a></h3><p>有用 Terraform 或是其他 IaC 工具的人一定都會想要問究竟該使用 Mono Repo 或是 Multi Repo 來管理 IaC 程式碼，答案就是…這取決與你的組織！Mono Repo (這邊是指連 Module 都在同一個 Repo 內) 的好處就是從一個地方就可以取得所有 Infrastructure 的資訊，但缺點是開發起來不方便，效率也不好，Repos 的權限控管也不好做；而 Multi Repo 的好處就是 Module 拆開管理的話開發比較方便，也可以讓不同的團隊一起使用，引用的時候可以做到版本控制，權限控管也可以輕易達成，但缺點就是必須花時間去下載，官方建議可以透過 Git Submodule 的方式來解省一些本端開發的時間</p><h3 id="K8s-mirror"><a href="#K8s-mirror" class="headerlink" title="K8s-mirror"></a><a href="https://github.com/darkbitio/k8s-mirror" target="_blank" rel="noopener">K8s-mirror</a></h3><p>K8s-mirror 是一個新的專案，可以使用 repo 內的 kube-exporter.sh 腳本把 K8s 內所有的資源給匯出儲存成一個 JSON 格式的檔案，透過另外一個 etcd 和 kube-apiserver 就可以查看這個檔案，感覺用來做測試很方便，不過作者有說此專案目前在 PoC 的 Pre-Alpha 階段而已，請大家使用要小心</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 65 期 - 每天都 git pull，conflict 遠離我</title>
      <link href="/2021/01/26/65-remember-to-git-pull-every-day/"/>
      <url>/2021/01/26/65-remember-to-git-pull-every-day/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="送-PR-前，使用-Git-rebase-來整理你的-commit-吧！"><a href="#送-PR-前，使用-Git-rebase-來整理你的-commit-吧！" class="headerlink" title="送 PR 前，使用 Git rebase 來整理你的 commit 吧！"></a><a href="https://medium.com/starbugs/use-git-interactive-rebase-to-organize-commits-85e692b46dd" target="_blank" rel="noopener">送 PR 前，使用 Git rebase 來整理你的 commit 吧！</a></h3><p>大家好我是 Larry，因為我身邊有滿多朋友都不太熟悉 git rebase，也不知道他可以用來做什麼。所以這週的專欄想跟大家分享怎麼用 git rebase 來整理 commit，希望大家在看完後都能在 push 前把 commit 都整理好，才不會讓同事 review 得很痛苦XD</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="The-anatomy-of-a-Git-commit"><a href="#The-anatomy-of-a-Git-commit" class="headerlink" title="The anatomy of a Git commit"></a><a href="https://blog.thoughtram.io/git/2014/11/18/the-anatomy-of-a-git-commit.html" target="_blank" rel="noopener">The anatomy of a Git commit</a></h3><p>這週的專欄中有提到，commit ID 是由 commit message 還有其他很多屬性經過 hash 而來的，那一個 Git commit 內部到底究竟長什麼樣子？每個 Git commit 的 ID 又是根據哪些屬性產生出來？雖然不知道好像也沒關係，但當作冷知識增廣見聞一下也是不錯～</p><h3 id="另一種合併方式（使用-rebase）"><a href="#另一種合併方式（使用-rebase）" class="headerlink" title="另一種合併方式（使用 rebase）"></a><a href="https://gitbook.tw/chapters/branch/merge-with-rebase.html" target="_blank" rel="noopener">另一種合併方式（使用 rebase）</a></h3><p>想要把兩個 branch 合併，除了可以使用 merge 之外，其實 rebase 也可以用來合併 branch，而且如果用得好的話，歷史紀錄也會比 merge 漂亮很多哦～</p><h3 id="合併發生衝突了，怎麼辦？"><a href="#合併發生衝突了，怎麼辦？" class="headerlink" title="合併發生衝突了，怎麼辦？"></a><a href="https://gitbook.tw/chapters/branch/fix-conflict.html" target="_blank" rel="noopener">合併發生衝突了，怎麼辦？</a></h3><p>因為 rebase 的結果會跟 branch 當下的狀態以及 commit 的順序有關，所以當然也有可能發生 conflict，那 rebase 到一半因為 conflict 而卡住究竟要怎麼辦呢？快來看看龍哥的解法吧！</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="lodash-get-vs-result"><a href="#lodash-get-vs-result" class="headerlink" title="lodash get vs result"></a><a href="https://appi2393.medium.com/lodash-get-or-result-f409e73e018b" target="_blank" rel="noopener">lodash get vs result</a></h3><p>lodash 是個非常好用的 JS Library 裡面提供了非常多的 method 讓開發者可以讓程式碼寫起來更好閱讀而且也有一定的效能在，裡面有兩個非常像的 method：<code>get</code> 以及 <code>result</code> 到底這兩個 method 要用哪呢？其實這兩個 method 有效能上的差距，這篇文章講述了兩個 method 的效能差別（懶人包以後用 <code>get</code> 取得物件的值就對了🤣）</p><h3 id="firebase-remote-config-fetcher"><a href="#firebase-remote-config-fetcher" class="headerlink" title="firebase remote config fetcher"></a><a href="https://firebase.google.com/docs/remote-config/loading" target="_blank" rel="noopener">firebase remote config fetcher</a></h3><p>不知道大家有沒有用過 firebase，firebase 有個非常好用的功能叫 remote config，透過這個 remote config 可以讓一些 constant 不用在程式碼中寫死會非常彈性，裡面有一個 method 是 <code>fetchAndActivate</code> 可以讓 remote config 在 fetch 的時候順便 activate，但這個的使用時機是什麼時候呢？官方給出了一些使用時機不妨可以看看～</p><h3 id="JS-get-last-element-of-an-array"><a href="#JS-get-last-element-of-an-array" class="headerlink" title="JS get last element of an array"></a><a href="https://www.codeblocq.com/2016/05/Get-the-last-element-of-an-Array-in-JavaScript/" target="_blank" rel="noopener">JS get last element of an array</a></h3><p>最近在找一些 JS 比較 tricky 的技巧來取得 JS 陣列中的最後一個元素，比較直觀的作法就是取得 <code>陣列長度 -1</code> 的元素就是最後一個元素了，但其實還有另一個作法就是 <code>slice(-1)</code>，透過 <code>slice(-1)</code> 就並且做陣列解構後可以取得陣列的最後一個元素，但兩者到底有什麼區別呢？這篇文章完整的告訴這兩個方法的效能差異。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="How-To-Implement-a-Queue-in-JavaScript-–-and-Beat-Arrays-at-Their-Own-Game"><a href="#How-To-Implement-a-Queue-in-JavaScript-–-and-Beat-Arrays-at-Their-Own-Game" class="headerlink" title="How To Implement a Queue in JavaScript – and Beat Arrays at Their Own Game"></a><a href="https://popovich.io/2020/2020-04-07-queue-javascript/" target="_blank" rel="noopener">How To Implement a Queue in JavaScript – and Beat Arrays at Their Own Game</a></h3><p>相信各位前端的大家在用 JavaScript 解 Leetcode 演算法的時候，常常會遇到沒有現成的資料結構可以使用，像是 Queue 或是 Stack 等等，但其實他們的原理非常簡單！非常容易就可以依照概念實作出來，但實作出來後又會發現好像用 JavaScript 原生的 Array 搭配 Array Method 也能達到相同的效果。那這兩這之間到底有什麼不同，到底需不需要自己實作一個？一起看看這篇文章！（延伸閱讀：<a href="https://blog.techbridge.cc/2016/06/24/javascript-data-structure-algorithm-stack/" target="_blank" rel="noopener">用 JavaScript 學習資料結構和演算法：堆疊（Stack）篇</a>）</p><h3 id="ES2021-ES12-New-Features"><a href="#ES2021-ES12-New-Features" class="headerlink" title="ES2021 / ES12 New Features"></a><a href="https://backbencher.dev/javascript/es2021-new-features" target="_blank" rel="noopener">ES2021 / ES12 New Features</a></h3><p>在你的印象中，現在的 JavaScript 是 ES 多少呢？已經進入到 ES12 啦！JavaScript 作為最常被使用的程式語言語言（根據 <a href="https://insights.stackoverflow.com/survey/2020" target="_blank" rel="noopener">2020 StackOverflow</a> 調查），更新速度真的越來越快，自從 2016 年的 ES6 就開始一年一更（可參考 <a href="https://zh.wikipedia.org/wiki/ECMAScript" target="_blank" rel="noopener">ECMAScript 維基百科</a>），依照慣例相信今年年中就能開始使用新的語法了，快點進去確認有哪些功能是你期待許久的 🙌！</p><h3 id="10-Colour-Resources-You-Will-Love"><a href="#10-Colour-Resources-You-Will-Love" class="headerlink" title="10 Colour Resources You Will Love"></a><a href="https://dev.to/marcelcruz/10-colour-resources-you-will-love-26lp" target="_blank" rel="noopener">10 Colour Resources You Will Love</a></h3><p>在做 Side Project 的時候總覺得自己的網頁少了一點點…美感？特別是在最一開始無法決定網頁的主題色，或是很快的找到主題色卻不曉得可以和哪些色彩搭配產生更棒或更舒服的的視覺效果嗎？別緊張！讓專業的來！個人先私心推薦一個 <a href="https://colorhunt.co/" target="_blank" rel="noopener">Color Hunt</a>，常常讓我在 RGB 的世界中迷路時給我正確的方向（雖然也常常讓我產生選擇性障礙，每個都太好看了 😂）。如果你不喜歡，沒關係！上方的推薦文章還介紹了另外九個相當棒的色彩搭配網頁！其中一定會有你的 Mr.Right!</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="This-Week-in-Programming-Elasticsearch-Turns-AWS-into-an-Open-Source-Champion"><a href="#This-Week-in-Programming-Elasticsearch-Turns-AWS-into-an-Open-Source-Champion" class="headerlink" title="This Week in Programming: Elasticsearch Turns AWS into an Open Source Champion"></a><a href="https://thenewstack.io/this-week-in-programming-elasticsearch-turns-aws-into-the-open-source-champion/" target="_blank" rel="noopener">This Week in Programming: Elasticsearch Turns AWS into an Open Source Champion</a></h3><p>這週 Elastic 和 AWS 隔空交戰的炮火越演越烈，首先是 Elastic <a href="https://www.elastic.co/blog/licensing-change" target="_blank" rel="noopener">宣布要更改其授權政策</a>，再引起社群的廣泛討論之後，又發了<a href="https://www.elastic.co/blog/license-change-clarification" target="_blank" rel="noopener">一篇文章來澄清為什麼要這樣做</a>，並且<a href="https://www.elastic.co/blog/why-license-change-AWS" target="_blank" rel="noopener">再發一篇文章挑明跟大家講就是為了防堵 AWS</a>；而 AWS 也不能再裝死，<a href="https://aws.amazon.com/tw/blogs/opensource/stepping-up-for-a-truly-open-source-elasticsearch/" target="_blank" rel="noopener">宣布要自己來建立和維護以 Apache 2.0 授權的開源Elasticsearch 與 Kibana</a>，同時也抨擊 Elastic 接下來採用 SSPL 根本就不算是開源，而這場火從 2019 便開始燒了起來，並且越演越烈，以後兩邊各自維護自己的分支，不知道干戈會不會暫時平息，而大家會使用哪一邊維護的版本呢？！</p><h3 id="K3s-Private-Cluster"><a href="#K3s-Private-Cluster" class="headerlink" title="K3s Private Cluster"></a><a href="https://github.com/sagittaros/terraform-k3s-private-cloud" target="_blank" rel="noopener">K3s Private Cluster</a></h3><p>發現一個有趣的小專案，讓使用者可以使用 Terraform 將 K3s Cluster 架設於 AWS 中，提供給覺得 EKS 太貴太複雜，而且只想要運行一兩個小應用服務的人，也很適合拿來當作開發和測試環境</p><h3 id="Keeping-Git-Commit-Messages-Consistent-with-a-Custom-Template"><a href="#Keeping-Git-Commit-Messages-Consistent-with-a-Custom-Template" class="headerlink" title="Keeping Git Commit Messages Consistent with a Custom Template"></a><a href="https://dev.to/timmybytes/keeping-git-commit-messages-consistent-with-a-custom-template-1jkm" target="_blank" rel="noopener">Keeping Git Commit Messages Consistent with a Custom Template</a></h3><p>讓 Git Commit 訊息保持一致化，將會讓自己與與合作的團隊間擁有長期良好的合作關係；如果自己希望 Commit 的訊息可以擁有像樣一點的格式，或是完全看不懂自己過去提交的 Commit 訊息在寫什麼的話，這篇文章介紹如何透過 Git 的全域組態來設定 Commit 訊息的範本，讓你可以輕鬆地決定如何格式化 Commit 訊息，讓有所有的 Commit 井然有序</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 64 期 - 利用 Flux2 為 Kubernetes 達成 Configuration Management</title>
      <link href="/2021/01/19/64-flux2/"/>
      <url>/2021/01/19/64-flux2/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="利用-Flux2-為-Kubernetes-達成Configuration-Management"><a href="#利用-Flux2-為-Kubernetes-達成Configuration-Management" class="headerlink" title="利用 Flux2 為 Kubernetes 達成Configuration Management"></a><a href="https://medium.com/starbugs/%E5%88%A9%E7%94%A8-flux2-%E7%82%BA-kubernetes-%E9%81%94%E6%88%90configuration-management-e0cd7a19615e" target="_blank" rel="noopener">利用 Flux2 為 Kubernetes 達成Configuration Management</a></h3><p>自己管理的 K8s Cluster 已經十幾座了，而且還越來越多，究竟該怎麼自動化的管理他們呢？讓我們來看看 Flux version 2 如何解決這個問題</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="Rethinking-Design-Practices-ReactConf-AU-2020-筆記-—-Part-3"><a href="#Rethinking-Design-Practices-ReactConf-AU-2020-筆記-—-Part-3" class="headerlink" title="Rethinking Design Practices | ReactConf AU 2020 筆記 — Part 3"></a><a href="https://medium.com/starbugs/rethinking-design-practices-reactconf-au-2020-5507988f95e4" target="_blank" rel="noopener">Rethinking Design Practices | ReactConf AU 2020 筆記 — Part 3</a></h3><p>「建構一套 design system」一直是前端開發者們想做的事情，剛好 ReactConf AU 有一場演講是由 Seek 工作的 Mark Dalgleish 分享他的心得歷程，訴說他是如何建立一套 design system。讓我們透過這篇文章來看看該怎麼做比較好</p><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h3 id="State-of-JS-2020"><a href="#State-of-JS-2020" class="headerlink" title="State of JS 2020"></a><a href="https://2020.stateofjs.com/zh-Hant/" target="_blank" rel="noopener">State of JS 2020</a></h3><p>由 State of JS 對於 JS 生態系做的調查出來啦，整體而言 JS 還是一直在推出新 feature，像下面的文章介紹的 Optional Chaining 和 Nullish Coalescing 就是。而前端方面雖然還是三大框架為主，但最近用編譯器技術實作的前端框架 Svelte、跟以 ES Module 為主的 build tool Snowpack 都以很快的速度在成長。JS 未來會怎麼樣沒人知道，所以這邊分享這個 State of JS 給想要追上 JS 趨勢的人～</p><h3 id="來談-JavaScript-的-Optional-Chaining-和-Nullish-Coalescing"><a href="#來談-JavaScript-的-Optional-Chaining-和-Nullish-Coalescing" class="headerlink" title="來談 JavaScript 的 Optional Chaining 和 Nullish Coalescing"></a><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E7%8C%BF%E5%90%83%E9%A6%99%E8%95%89/%E4%BE%86%E8%AB%87-javascript-%E7%9A%84-optional-chaining-%E5%92%8C-nullish-coalescing-part-i-992625a1861d" target="_blank" rel="noopener">來談 JavaScript 的 Optional Chaining 和 Nullish Coalescing</a></h3><p>Optional Chaining 大概是近期 JS 的新 feature 中我最喜歡的一個，有了他之後終於可以不用再寫一堆落落長的 &amp;&amp;，不只程式碼變短了，可讀性也是大幅上升。而且這篇文章除了介紹之外還有分析在各平台的支援度，還沒用過的話趕快來讀讀這篇吧</p><h3 id="Node-Modules-at-War-Why-CommonJS-and-ES-Modules-Can’t-Get-Along"><a href="#Node-Modules-at-War-Why-CommonJS-and-ES-Modules-Can’t-Get-Along" class="headerlink" title="Node Modules at War: Why CommonJS and ES Modules Can’t Get Along"></a><a href="https://redfin.engineering/node-modules-at-war-why-commonjs-and-es-modules-cant-get-along-9617135eeca1" target="_blank" rel="noopener">Node Modules at War: Why CommonJS and ES Modules Can’t Get Along</a></h3><p>為什麼 JS 生態系中的 CommonJS 跟 ES Modules 兩個模組系統一直沒辦法合併起來呢？因為他們兩個不僅僅只有語法不同，就連底層的很多行為都不一樣</p><p>像 ESM 在 import 時會強制使用 strict mode 但 CommonJS 不會，導致用 ESM import 不符合 strict mode 的舊模組會一些奇怪的錯誤，而且這只是其中一個例子，他們兩個還有很多其他地方也都不一樣，想知道更多的話可以看看這篇～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="What-is-Variable-Naming-You-Ask-Here’s-How-it-Could-Save-Your-Life"><a href="#What-is-Variable-Naming-You-Ask-Here’s-How-it-Could-Save-Your-Life" class="headerlink" title="What is Variable Naming, You Ask? Here’s How it Could Save Your Life"></a><a href="https://hackernoon.com/what-is-variable-naming-you-ask-heres-how-it-could-save-your-life-5y4k31r8" target="_blank" rel="noopener">What is Variable Naming, You Ask? Here’s How it Could Save Your Life</a></h3><p>「你說變數命名是什麼？是一個可以拯救你生命的方法！」這是作者在進入另一個 Team 後的故事，其中像標題這麼深刻的體悟究竟是從哪裡來的，讓我們一起看看苦主怎麼說。</p><h3 id="10-ways-to-use-the-spread-operator-in-JavaScript"><a href="#10-ways-to-use-the-spread-operator-in-JavaScript" class="headerlink" title="10 ways to use the spread operator in JavaScript"></a><a href="https://dev.to/dailydevtips1/10-ways-to-use-the-spread-operator-in-javascript-1imb" target="_blank" rel="noopener">10 ways to use the spread operator in JavaScript</a></h3><p>在 JavaScript 中的 <code>...</code>（Operator，擴展運算子）絕對是學前看不懂是在幹嘛，了解後愛不釋手的一個語法 😂。文章中用各種範例介紹 10 個 Operator 大顯身手的情境！</p><h3 id="值得設計師好好收藏的插圖素材網站（圖片-PNG-向量-SVG）"><a href="#值得設計師好好收藏的插圖素材網站（圖片-PNG-向量-SVG）" class="headerlink" title="值得設計師好好收藏的插圖素材網站（圖片.PNG/向量.SVG）"></a><a href="https://riven.medium.com/%E5%80%BC%E5%BE%97%E8%A8%AD%E8%A8%88%E5%B8%AB%E5%A5%BD%E5%A5%BD%E6%94%B6%E8%97%8F%E7%9A%84%E6%8F%92%E5%9C%96%E7%B4%A0%E6%9D%90%E7%B6%B2%E7%AB%99-%E5%9C%96%E7%89%87-png-%E5%90%91%E9%87%8F-svg-456f58bd0a06" target="_blank" rel="noopener">值得設計師好好收藏的插圖素材網站（圖片.PNG/向量.SVG）</a></h3><p>不只設計師，就連前端工程師都很值得收藏的幾個網頁！如果常常在做 Side Project 的時候找來找去找不到一個自己喜歡的插圖，或是好不容易找到了卻有版權問題，不如趁現在來看看文章裡推薦的圖庫網站吧！</p><h3 id="5-top-React-Hook-Libraries"><a href="#5-top-React-Hook-Libraries" class="headerlink" title="5 top React Hook Libraries"></a><a href="https://blog.logrocket.com/5-top-react-hooks-libraries-compared/" target="_blank" rel="noopener">5 top React Hook Libraries</a></h3><p>現在 React 已經進入了大 Hook 時代，所謂的 React Hook 簡單來說就是利用 Function Component 的撰寫方式寫出元件，既然是 function 就會有很多好用的 method 陸續的被大神寫出來，這篇文章整理了 5 個好用的 Hook，非常適合給剛學習 React Hook 的使用者使用。</p><h3 id="html-input-type"><a href="#html-input-type" class="headerlink" title="html input type"></a><a href="https://twitter.com/addyosmani/status/1348902534363152385/photo/1" target="_blank" rel="noopener">html input type</a></h3><p>現在的前端工程師必須要越來越能為了使用者去優化一些操作體驗，尤其現在的產品很多都是強調 mobile first，在 input 的預設鍵盤顯示就更顯得重要了，透過一些 input type 的設定就可以讓使用者在輸入文字框的時候更加便利。</p><h3 id="網站安全🔒-伺服器端請求偽造-SSRF-攻擊"><a href="#網站安全🔒-伺服器端請求偽造-SSRF-攻擊" class="headerlink" title="網站安全🔒 伺服器端請求偽造 SSRF 攻擊"></a><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E7%8C%BF%E5%90%83%E9%A6%99%E8%95%89/%E7%B6%B2%E7%AB%99%E5%AE%89%E5%85%A8-%E4%BC%BA%E6%9C%8D%E5%99%A8%E8%AB%8B%E6%B1%82%E5%81%BD%E9%80%A0-ssrf-%E6%94%BB%E6%93%8A-%E9%A0%85%E8%8E%8A%E8%88%9E%E5%8A%8D-%E6%84%8F%E5%9C%A8%E6%B2%9B%E5%85%AC-7a5524926362" target="_blank" rel="noopener">網站安全🔒 伺服器端請求偽造 SSRF 攻擊</a></h3><p>現在的網站越來越複雜，以前的前端工程師頂多只要注意畫面有沒有跑版整體流程有沒有錯誤，現在的前端工程師不但要會基礎的切版外還要懂一些資訊安全，像是 <code>CSRF</code>、<code>XSS</code> 等等網路攻擊，這邊要介紹的是 <code>SSRF</code>，由於 <code>SSRF</code> 跟 <code>CSRF</code> 以及 <code>XSS</code> 等等不太一樣，通常的資訊安全都是利用使用者對於資安不了解才被攻擊，而 <code>SSRF</code> 則是直接利用伺服器的漏洞來攻擊網站的內部系統，這篇文章除了教大家 <code>SSRF</code>的原理外還寫了一些範例來模仿 <code>SSRF</code> 攻擊非常適合閱讀。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="10-best-practices-to-containerize-Node-js-web-applications-with-Docker"><a href="#10-best-practices-to-containerize-Node-js-web-applications-with-Docker" class="headerlink" title="10 best practices to containerize Node.js web applications with Docker"></a><a href="https://snyk.io/blog/10-best-practices-to-containerize-nodejs-web-applications-with-docker/" target="_blank" rel="noopener">10 best practices to containerize Node.js web applications with Docker</a></h3><p>在實踐 DevSecOps 上滿不錯的公司 Snyk，最近發表了一篇文章分享 10 個容器化 Node.js 應用服務的最佳實踐方式，其中有些算是比較常見的，例如要使用特定的 Container Image Tag，不要使用 latest，不要安裝不需要的函示庫…等，有使用 Node.js 的人不要錯過了～</p><h3 id="Building-On-Call-Culture-at-GitHub"><a href="#Building-On-Call-Culture-at-GitHub" class="headerlink" title="Building On-Call Culture at GitHub"></a><a href="https://github.blog/2021-01-06-building-on-call-culture-at-github/" target="_blank" rel="noopener">Building On-Call Culture at GitHub</a></h3><p>隨著 GitHub 服務的規模越來越大，產品的數量和複雜性持續的增加之下，所以需要不斷改進 on-call 的策略，讓 GitHub 繼續成為開發者最信賴的家，最一開始在 Monolithic 的架構下其實 On-Call 遇到很多問題，例如多數的工程師其實不會熟悉全部的程式碼和功能，而且大量的工程師輪替起來沒有效率，輪到的人也沒有信心解決問題，所以他們決定推行新的 On-Call 文化，讓工程師只需要為自己負責的程式碼 On-Call, 詳細做法可以參閱內文</p><h3 id="Announcing-CDK-for-Terraform-0-1"><a href="#Announcing-CDK-for-Terraform-0-1" class="headerlink" title="Announcing CDK for Terraform 0.1"></a><a href="https://www.hashicorp.com/blog/announcing-cdk-for-terraform-0-1" target="_blank" rel="noopener">Announcing CDK for Terraform 0.1</a></h3><p>去年八月 CDK for Terraform 剛推出的時候，自己還有寫<a href="https://medium.com/starbugs/cdk-for-terraform-%E5%88%9D%E8%A9%A6%E5%95%BC%E8%81%B2-86a80f1315db" target="_blank" rel="noopener">文章</a>介紹，過了將近半年正式推出 0.1 版，跟當初相比起來，現在多支援 Support C#，Java，並且加強與 Terraform Cloud 的整合度，而且當初這個開源專案的維護者Sebastian Korfmann 也加入了 HashiCorp，跟當初 Atlantis 的情況有一點點像，期待可以發展的越來越成熟</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 63 期 - 寒流來襲，程式碼可以先冰起來，等到夏天再拿出來寫嗎？</title>
      <link href="/2021/01/12/63-the-winter-is-coming-may-i-freeze-code/"/>
      <url>/2021/01/12/63-the-winter-is-coming-may-i-freeze-code/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="打造舒適的-Windows-開發體驗-我想開發-JS-該怎麼做"><a href="#打造舒適的-Windows-開發體驗-我想開發-JS-該怎麼做" class="headerlink" title="打造舒適的 Windows 開發體驗 我想開發 JS 該怎麼做?"></a><a href="https://medium.com/starbugs/%E6%89%93%E9%80%A0%E8%88%92%E9%81%A9%E7%9A%84-windows-%E9%96%8B%E7%99%BC%E9%AB%94%E9%A9%97-%E6%88%91%E6%83%B3%E9%96%8B%E7%99%BC-js-%E8%A9%B2%E6%80%8E%E9%BA%BC%E5%81%9A-85917ecbe324" target="_blank" rel="noopener">打造舒適的 Windows 開發體驗 我想開發 JS 該怎麼做?</a></h3><p>如何在 Windows 舒適的 JS 環境呢？這篇文章從前端、後端與 Linux / Mac 使用者角度切入，提供一些比較容易上手的解決方案。</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="微服務很夯，那你有聽過微前端嗎？初探-Micro-Frontends-程式架構"><a href="#微服務很夯，那你有聽過微前端嗎？初探-Micro-Frontends-程式架構" class="headerlink" title="微服務很夯，那你有聽過微前端嗎？初探 Micro Frontends 程式架構"></a><a href="https://medium.com/starbugs/%E5%BE%AE%E6%9C%8D%E5%8B%99%E5%BE%88%E5%A4%AF-%E9%82%A3%E4%BD%A0%E6%9C%89%E8%81%BD%E9%81%8E%E5%BE%AE%E5%89%8D%E7%AB%AF%E5%97%8E-%E5%88%9D%E6%8E%A2-micro-frontends-%E6%9E%B6%E6%A7%8B-e0a8469be601" target="_blank" rel="noopener">微服務很夯，那你有聽過微前端嗎？初探 Micro Frontends 程式架構</a></h3><p>微服務 (Microservices) 是近年來隨著容器化技術成熟而變得非常流行的一種軟體系統架構。雖然本篇文章的主角並不是它，不過它背後的理念與實踐方式與今天的主角「Micro frontends 微前端」是高度相關的，因此我們還是有必要來好好理解一下它的基本概念。<br>要了解微服務，最簡單的方式就是與過往熟悉的開發架構，也就是單體式 (Monolithic) 的架構來做個比較</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="Golang-for-JavaScript-developers"><a href="#Golang-for-JavaScript-developers" class="headerlink" title="Golang for JavaScript developers"></a><a href="https://deepu.tech/golang-for-javascript-developers-part-1/" target="_blank" rel="noopener">Golang for JavaScript developers</a></h3><p>想學 Go 但不知從何下手嗎？這邊有兩篇寫給 JS 開發者的 Go 入門指南，原本就熟悉 JS 的話，看完這篇差不多就可以開始寫 Go 了～</p><h3 id="Go-Advice"><a href="#Go-Advice" class="headerlink" title="Go Advice"></a><a href="https://github.com/cristaloleg/go-advice" target="_blank" rel="noopener">Go Advice</a></h3><p>如果你寫 Go 已經一陣子了，但不知道該怎麼精進，這邊有一些非常實用的 tips，有講到怎麼善用 Go 的語法及內建 library，寫出更好的 Go 程式碼</p><h3 id="Golang-的-string-interning-技巧"><a href="#Golang-的-string-interning-技巧" class="headerlink" title="Golang 的 string interning 技巧"></a><a href="https://kkc.github.io/2020/12/14/golang-string-interning/" target="_blank" rel="noopener">Golang 的 string interning 技巧</a></h3><p>String interning 是個用來減少 memory 使用量的小技巧，原理是讓相同內容的字串變數，指向同一組記憶體。但因為 Go 不太會自己做 interning，所以作者卡卡西示範了怎麼自己用 map 來做 interning，滿有趣的用實作來了解原理的例子～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="15-Reasons-Developers-Need-To-Learn-UX-Design"><a href="#15-Reasons-Developers-Need-To-Learn-UX-Design" class="headerlink" title="15 Reasons Developers Need To Learn UX Design"></a><a href="https://dev.to/veebuv/15-reasons-developers-need-to-learn-ux-design-16jl" target="_blank" rel="noopener">15 Reasons Developers Need To Learn UX Design</a></h3><p>文章中主要在闡述為什麼前端工程師也需要了解或學習 UX 設計，其中最讓我感到印象深刻的一點是，UX 設計的技能無法被自動化，想要做好 UX 就必須好好理解客戶的需求及具備與人的溝通能力，這些都是在你身上或是未來無法被學走的技能！</p><h3 id="Coolest-25-Web-Design-Trends-In-2021-that’ll-rock-the-world😎"><a href="#Coolest-25-Web-Design-Trends-In-2021-that’ll-rock-the-world😎" class="headerlink" title="Coolest 25+ Web Design Trends In 2021, that’ll rock the world😎"></a><a href="https://medium.com/quick-code/coolest-25-web-design-trends-in-2021-thatll-rock-the-world-388eb1144b7e" target="_blank" rel="noopener">Coolest 25+ Web Design Trends In 2021, that’ll rock the world😎</a></h3><p>前端工程師常常會擔心自己在沒有 UI 設計師的幫忙下，切出來的版看起來會很沒有質感，雖然 UI 設計師的專業技能我們學不走，但還是可以參考看看 2021 年最酷的幾種設計風格都長什麼樣子！</p><h3 id="The-React-Cheatsheet-for-2021‬-Real-World-Examples"><a href="#The-React-Cheatsheet-for-2021‬-Real-World-Examples" class="headerlink" title="The React Cheatsheet for 2021‬ (+ Real-World Examples)"></a><a href="https://www.freecodecamp.org/news/react-cheatsheet-with-real-world-examples/" target="_blank" rel="noopener">The React Cheatsheet for 2021‬ (+ Real-World Examples)</a></h3><p>這篇文章很適合給要學習 React 的前端工程師閱讀，裡面有超多 React 的基本用法以及爆炸多的例子，幾乎所有提到的觀念都有附上程式碼對應，非常清楚且容易閱讀！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="SRE-amp-DevOps-Interview-Question"><a href="#SRE-amp-DevOps-Interview-Question" class="headerlink" title="SRE &amp; DevOps Interview Question"></a><a href="https://www.learnsteps.com/tag/interviewquestions/" target="_blank" rel="noopener">SRE &amp; DevOps Interview Question</a></h3><p>這位作者寫了幾篇有關於 SRE &amp; DevOps 相關領域的面試問題，或許答案不是每個人都認同，但是自己覺得題目可以拿來一用，讓面試官跟面試者一起藉著討論的過程中了解彼此的想法</p><ul><li>What you need to learn in Linux?</li><li>How will you approach a network issue?</li><li>How will you design your cloud VPC and subnets?</li><li>How will you scale your current CI-CD pipeline?</li></ul><h3 id="Terraform-Cheat-Sheet"><a href="#Terraform-Cheat-Sheet" class="headerlink" title="Terraform Cheat Sheet"></a><a href="https://jayendrapatil.com/terraform-cheat-sheet/" target="_blank" rel="noopener">Terraform Cheat Sheet</a></h3><p>這篇文章把 Terraform 所有該懂的東西都條列式的整理出來，從架構，工作流程，模組，如何讀懂與撰寫，Backend，State 管理，State 的安全性，Logging，最後再提到 Terraform Cloud 和 Enterprise，推薦給想要迅速知道如何使用 Terraform 的人</p><h3 id="whaler"><a href="#whaler" class="headerlink" title="whaler"></a><a href="https://github.com/treebeardtech/whaler" target="_blank" rel="noopener">whaler</a></h3><p>最後要來推薦一個有趣的小工具叫做 whaler，他是一個用來視覺化 Docker Image 所使用硬碟空間的 CLI 工具，畢竟太大的 Image 會耗費硬碟空間，網路頻寬資源，因此使用這個工具可以讓開發者迅速發現哪些 Image 太大，再進一步檢查看看是不是包含了不需要的東西在裡面</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 62 期 - 星巴哥不只繼續陪你度過 2021，還要繼續一直到 20210</title>
      <link href="/2021/01/05/62-starBugs-accompant-you-all-until-20210/"/>
      <url>/2021/01/05/62-starBugs-accompant-you-all-until-20210/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="開源專案讀起來-聽說可以幫你保管資料再決定要不要更新的-SWR"><a href="#開源專案讀起來-聽說可以幫你保管資料再決定要不要更新的-SWR" class="headerlink" title="開源專案讀起來 | 聽說可以幫你保管資料再決定要不要更新的 SWR"></a><a href="https://medium.com/starbugs/%E9%96%8B%E6%BA%90%E5%B0%88%E6%A1%88%E8%AE%80%E8%B5%B7%E4%BE%86-%E8%81%BD%E8%AA%AA%E5%8F%AF%E4%BB%A5%E5%B9%AB%E4%BD%A0%E4%BF%9D%E7%AE%A1%E8%B3%87%E6%96%99%E5%86%8D%E6%B1%BA%E5%AE%9A%E8%A6%81%E4%B8%8D%E8%A6%81%E6%9B%B4%E6%96%B0%E7%9A%84-swr-d02dadc1116b?source=friends_link&sk=71db4d146f488ea0f715646342065aea" target="_blank" rel="noopener">開源專案讀起來 | 聽說可以幫你保管資料再決定要不要更新的 SWR</a></h3><p>對初學者來說，開源專案並沒有那麼好讀，開源專案裡的程式碼和一般在 MDN 上看到那些範例程式根本無法比較，不過在前幾個禮拜我有看到一篇文章，裡面作者說了一句話：「带着目的去看源码，我们只有带着问题出发的时候，才会具有更高的效率。」聽到後讓我一整個震驚，對啊！根本就沒有讀懂整個專案的必要，換個角度來說：</p><p>閱讀開源專案的目的是，找到我想知道的某個功能是如何實現的！</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="我不知道的-HTML-Semantic"><a href="#我不知道的-HTML-Semantic" class="headerlink" title="我不知道的 HTML Semantic"></a><a href="https://medium.com/starbugs/%E6%88%91%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84-html-semantic-cdad7f429c66" target="_blank" rel="noopener">我不知道的 HTML Semantic</a></h3><p>一直沒有做測驗直到最近在投履歷時 xx 公司請我去做 HTML、JavaScript、CSS 的測驗。其中 JS 跟 CSS 都過了。但… 果真又敗在最輕敵的 HTML 啊 !!!</p><p>題目幾乎都考 HTML Semantic。你可能覺得那有什麼難，新手時就該會使用 <code>&lt;header&gt;</code>、<code>&lt;footer&gt;</code>、<code>&lt;nav&gt;</code>、<code>&lt;section&gt;</code>、<code>&lt;article&gt;</code> 等等有意義的標籤給瀏搜尋引擎看，但是！測驗題目我真的幾乎完全不會，所以這篇會以印象中有出現的考題當副標 (真正考題會是單選題)，然後大概帶過概念．並不會很詳細的解說，有興趣的可以自己在上網查囉!</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="GitHub-CLI-is-Now-Available-Here’s-Why-You-Should-Be-Excited"><a href="#GitHub-CLI-is-Now-Available-Here’s-Why-You-Should-Be-Excited" class="headerlink" title="GitHub CLI is Now Available: Here’s Why You Should Be Excited"></a><a href="https://link.medium.com/SJ3j6yqAbbb" target="_blank" rel="noopener">GitHub CLI is Now Available: Here’s Why You Should Be Excited</a></h3><p>Github 官方出的 CLI 已經發佈好一陣子了，除了原本 git 就有的功能之外，還提供了管理 PR 跟 issue 的功能，還沒試過的朋友們快去看看吧～</p><h3 id="Git-驚魂記-斷電毁損修復"><a href="#Git-驚魂記-斷電毁損修復" class="headerlink" title="Git 驚魂記 - 斷電毁損修復"></a><a href="https://blog.darkthread.net/blog/git-corrupt-fix/" target="_blank" rel="noopener">Git 驚魂記 - 斷電毁損修復</a></h3><p>黑暗執行緒的作者黑大分享了他最近在做 git rebase 時突然遇到電腦斷電的情況，重開機後就發現整個 Git 資料夾竟然毀損了，還好最後有驚無險，成功把資料救了回來。</p><h3 id="Git-私服第一品牌-Gitea"><a href="#Git-私服第一品牌-Gitea" class="headerlink" title="Git 私服第一品牌 - Gitea"></a><a href="https://blog.darkthread.net/blog/gitea/" target="_blank" rel="noopener">Git 私服第一品牌 - Gitea</a></h3><p>有時開發團隊為了方便管理，或是不想另外花錢，會需要自架 Git server。但因為開源 Git server 的選擇太多了，如果還在猶豫要哪一個的話，可以參考看看黑大對於 Gitea 的介紹～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="網站安全🔒-目錄遍歷-Path-Traversal-攻擊手法"><a href="#網站安全🔒-目錄遍歷-Path-Traversal-攻擊手法" class="headerlink" title="網站安全🔒 目錄遍歷 Path Traversal 攻擊手法"></a><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E7%8C%BF%E5%90%83%E9%A6%99%E8%95%89/%E7%9B%AE%E9%8C%84%E9%81%8D%E6%AD%B7-path-traversal-%E6%94%BB%E6%93%8A%E6%89%8B%E6%B3%95-238218d5115d" target="_blank" rel="noopener">網站安全🔒 目錄遍歷 Path Traversal 攻擊手法</a></h3><p>如果對上禮拜 Larry 所寫的網站攻擊意猶未盡，這篇文章介紹了名為目錄遍歷 (Path Traversal) 的經典網站攻擊手法，不只告訴你原理，還教你如何防禦！</p><h3 id="Try-Catch-in-JavaScript-–-How-to-Handle-Errors-in-JS"><a href="#Try-Catch-in-JavaScript-–-How-to-Handle-Errors-in-JS" class="headerlink" title="Try/Catch in JavaScript – How to Handle Errors in JS"></a><a href="https://www.freecodecamp.org/news/try-catch-in-javascript/" target="_blank" rel="noopener">Try/Catch in JavaScript – How to Handle Errors in JS</a></h3><p>為了不讓程式碼的執行不會因為一個小錯誤就終止，適當的錯誤處理是非常重要的，作者在文章介紹了在 JavaScript 內常見的六種基本錯誤，以及他如何使用 <code>try...catch</code> 來處理它們，和使用時該注意的事項。</p><h3 id="5-GitHub-Repos-for-creating-Resumes"><a href="#5-GitHub-Repos-for-creating-Resumes" class="headerlink" title="5 GitHub Repos for creating Resumes"></a><a href="https://dev.to/ns23/5-github-repos-for-creating-resumes-e3k" target="_blank" rel="noopener">5 GitHub Repos for creating Resumes</a></h3><p>相信到了 2021 年已經有不少人準備要領一波年終轉職了，但在準備履歷表的過程又不想要和其他人的樣式長的大同小異嗎？沒關係！這裡介紹了 5 個開源專案能夠讓你建立看起來很專業的履歷！</p><h3 id="前端技能樹"><a href="#前端技能樹" class="headerlink" title="前端技能樹"></a><a href="https://roadmap.sh/frontend" target="_blank" rel="noopener">前端技能樹</a></h3><p>網路上很多人都會說：想要轉職成為工程師先成為前端工程師就對了，前端的入門門檻很低但真的是這樣嗎？這個網站整理了前端工程師必須要會的幾個技能並繪製成技能樹，連本身就是前端工程師的我都不知道原來要會這麼多技能XD</p><h3 id="React-技能樹"><a href="#React-技能樹" class="headerlink" title="React 技能樹"></a><a href="https://roadmap.sh/react" target="_blank" rel="noopener">React 技能樹</a></h3><p>學會了基本的前端後就要開始學習前端框架了，現今最流行的不外乎就是 React 但大家都知道 React 的學習門檻非常高尤其 JSX 的寫法顛覆了整個前端的世界，究竟要學好 React 需要先學會多少東西，這個網站也整理的非常好。</p><h3 id="braft-editor"><a href="#braft-editor" class="headerlink" title="braft-editor"></a><a href="https://www.yuque.com/braft-editor/be/lzwpnr" target="_blank" rel="noopener">braft-editor</a></h3><p>最近小弟的公司在使用 <code>Draft.js</code> 但熟悉 React 的人都知道 <code>Draft.js</code> 的學習門檻真的超高，尤其是要利用他非常彈性的設計去產生美觀的編輯區塊更是要花費不少功夫，基於工程師不想重複造輪子的個性(其實是自己懶得花時間設計介面XD 進而發現了這個基於 <code>Draft.js</code> 而產生的套件，而且使用方法也非常簡單很推薦想要練習 <code>Draft.js</code> 的開發者。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="HashiCorp-2020-Year-in-Review"><a href="#HashiCorp-2020-Year-in-Review" class="headerlink" title="HashiCorp 2020 Year in Review"></a><a href="https://www.hashicorp.com/blog/hashicorp-2020-year-in-review" target="_blank" rel="noopener">HashiCorp 2020 Year in Review</a></h3><p>首先讓我們回顧一下 HashiCorp 在 2020 完成了哪些事情，推出 Boundary 和 Waypoint 這兩個針對 Security 和 CI/CD 的產品，宣布了 HashiCorp Cloud Platform 把自己產品變成託管服務，既有的產品也都推出主要的功能更新，如 Nomad 來到了 1.0.0，Terraform 發佈了 0.13 與 0.14，Consul 與每一版的更新都加上不少強勁的功能，Packer 也開始支援 HCL2…期待在 2021 可以看到 HashiCorp 成長得更加茁壯</p><h3 id="ec2-spot-converter"><a href="#ec2-spot-converter" class="headerlink" title="ec2-spot-converter"></a><a href="https://github.com/jcjorel/ec2-spot-converter" target="_blank" rel="noopener">ec2-spot-converter</a></h3><p>自己本身用了滿多 AWS EC2 Spot Instance的，而在最近發現了一個滿有趣的專案，可以讓 AWS Insatnce 在 On Demand 和 Spot Instance 之間任意轉換，瞬間就可以讓花費少掉一半 = =+</p><h3 id="Hexops-Dockerfile-Best-Practices"><a href="#Hexops-Dockerfile-Best-Practices" class="headerlink" title="Hexops Dockerfile Best Practices"></a><a href="https://github.com/hexops/dockerfile" target="_blank" rel="noopener">Hexops Dockerfile Best Practices</a></h3><p>Hexops 撰寫了一份 Dockerfile 的最佳撰寫守則，例如：不能使用 Root 帳號，不要使用在 10,000 以下的 UID，使用靜態的 UID 和 GID，不要使用 latest Container Image Tag，使用 tini 當成 ENTRYPOINT，只把參數存在 CMD 中…等，有在寫 Dockerfile 的人可以在複習一次</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 61 期 - 天氣冷，每天睡到傻呼呼</title>
      <link href="/2020/12/29/61-so-cold-every-day/"/>
      <url>/2020/12/29/61-so-cold-every-day/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="跨出成為駭客的第一步，來打打看-CTF-Web-吧！"><a href="#跨出成為駭客的第一步，來打打看-CTF-Web-吧！" class="headerlink" title="跨出成為駭客的第一步，來打打看 CTF Web 吧！"></a><a href="https://medium.com/starbugs/ctf-the-first-step-to-becoming-a-hacker-a56eb8820fac" target="_blank" rel="noopener">跨出成為駭客的第一步，來打打看 CTF Web 吧！</a></h3><p>如果要說天底下最帥氣的職業是什麼？在電腦、網路如此發達的今日，我覺得莫過於當一個駭客。但要成為一名真正的駭客，就跟當工程師一樣，除了扎實的理論基礎之外，還需要大量的練習</p><p>但練習也不可能隨便亂打別人的網站，所以這週的專欄要來跟大家介紹駭客的練功場 — CTF，也順便講幾個 Web 領域的題目，讓大家知道打 CTF 大概是什麼感覺～</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="初探-Server-Side-Rendering-與-Next-js"><a href="#初探-Server-Side-Rendering-與-Next-js" class="headerlink" title="初探 Server-Side-Rendering 與 Next.js"></a><a href="https://medium.com/starbugs/%E5%88%9D%E6%8E%A2-server-side-rendering-%E8%88%87-next-js-%E6%8E%A8%E5%9D%91%E8%A8%88%E7%95%AB-d7a9fb48a964" target="_blank" rel="noopener">初探 Server-Side-Rendering 與 Next.js</a></h3><p>為了 SEO 跟使用者體驗著想，很多網站都開始使用 SSR(Server Side Rendering) ，但有嘗試過自己維護 React SSR 專案的人，就都知道整個架構會變得超級複雜，而且如果程式碼寫錯地方，三不五時就會找不到 window 或是 document 等瀏覽器才有的 API，還好現在有了 Next.js，終於不用再自己維護 SSR 部分的程式碼，可說是 React 開發者的一大福音</p><h2 id="CTF-Capture-The-Flag"><a href="#CTF-Capture-The-Flag" class="headerlink" title="CTF(Capture The Flag)"></a>CTF(Capture The Flag)</h2><h3 id="CTF-的三十道陰影"><a href="#CTF-的三十道陰影" class="headerlink" title="CTF 的三十道陰影"></a><a href="https://ithelp.ithome.com.tw/users/20121059/ironman/2810" target="_blank" rel="noopener">CTF 的三十道陰影</a></h3><p>這一系列是由 HITCON CTF 戰隊的成員 0xddaa 寫的，講了很多 CTF 的故事跟傳奇人物，在鐵人賽的活動期間甚至還被比喻為駭客列傳 XD，想了解 CTF 文化以及 Hitcon 的故事的話一定要看看</p><h3 id="身為-Web-工程師，你一定要知道的幾個-Web-資訊安全議題"><a href="#身為-Web-工程師，你一定要知道的幾個-Web-資訊安全議題" class="headerlink" title="身為 Web 工程師，你一定要知道的幾個 Web 資訊安全議題"></a><a href="https://medium.com/starbugs/%E8%BA%AB%E7%82%BA-web-%E5%B7%A5%E7%A8%8B%E5%B8%AB-%E4%BD%A0%E4%B8%80%E5%AE%9A%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E5%B9%BE%E5%80%8B-web-%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8%E8%AD%B0%E9%A1%8C-29b8a4af6e13" target="_blank" rel="noopener">身為 Web 工程師，你一定要知道的幾個 Web 資訊安全議題</a></h3><p>這週的專欄雖然有實際玩玩看 CTF，但對於攻擊的手法沒有很完整的解說，如果不太了解 SQL injection、XSS 等等攻擊原理的話，老莫這篇整理得非常詳細</p><h3 id="Top-Tools-for-Web-Application-CTF"><a href="#Top-Tools-for-Web-Application-CTF" class="headerlink" title="Top Tools for Web Application CTF"></a><a href="https://www.securitynewspaper.com/2019/10/21/top-tools-for-web-application-ctf-capture-the-flag/" target="_blank" rel="noopener">Top Tools for Web Application CTF</a></h3><p>想成為一名駭客，除了要掌握基本的攻擊原理之外，該要會的工具也要熟悉熟悉才行。這篇文章介紹了一系列可以對網站進行掃描、攻擊的工具，包括最常聽到的 SQLMap 跟 Burpsuite 等等，不管是想要打 CTF 或是想掃描自家的網站，都很推薦試試這些</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="CSS-Z-Index-Not-Working-How-to-Fix-It-Using-Stack-Order"><a href="#CSS-Z-Index-Not-Working-How-to-Fix-It-Using-Stack-Order" class="headerlink" title="CSS Z-Index Not Working? How to Fix It Using Stack Order"></a><a href="https://www.freecodecamp.org/news/css-z-index-not-working/" target="_blank" rel="noopener">CSS Z-Index Not Working? How to Fix It Using Stack Order</a></h3><p>在 CSS 中我們可以利用 <code>z-index</code> 來被設置 <code>position</code> 的 element，而在沒有使用 <code>z-index</code> 的情況下，瀏覽器則會使用預設的 stacking order 在頁面中堆疊 element。延伸閱讀 <a href="https://andyyou.github.io/2016/03/03/z-index/" target="_blank" rel="noopener">深入 css z-index 屬性</a>。</p><h3 id="你的-onscroll-不是你的-onscroll"><a href="#你的-onscroll-不是你的-onscroll" class="headerlink" title="你的 onscroll 不是你的 onscroll"></a><a href="https://medium.com/@mingjunlu/window-onscroll-vs-document-body-onscroll-9c331bb8d298" target="_blank" rel="noopener">你的 onscroll 不是你的 onscroll</a></h3><p>在 <a href="https://html.spec.whatwg.org/multipage/" target="_blank" rel="noopener">HTML Specification</a> 中有提到可以在 <code>document.body</code> 中透過某些 Event handler 來存取 <code>window</code> 中對應的 Event handler，而文章標題所提到的 <code>onscroll</code> 就是其中一個。</p><h3 id="Developer-Portfolios-as-Inspiration-✨"><a href="#Developer-Portfolios-as-Inspiration-✨" class="headerlink" title="Developer Portfolios as Inspiration ✨"></a><a href="https://dev.to/firangizg/developer-portfolios-as-inspiration-4p29" target="_blank" rel="noopener">Developer Portfolios as Inspiration ✨</a></h3><p>前端工程師要如何透過專業技能展現自己的能力是很重要的事情，但通常都找不到什麼好的靈感，此篇文章的作者整理了幾個很漂亮又有創意的個人網站，來看看他們是如何介紹自己的吧！🙌</p><h3 id="淺談JS運算子-amp-amp-和-及其優先順序"><a href="#淺談JS運算子-amp-amp-和-及其優先順序" class="headerlink" title="淺談JS運算子 &amp;&amp; 和 || 及其優先順序"></a><a href="https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/262019/" target="_blank" rel="noopener">淺談JS運算子 &amp;&amp; 和 || 及其優先順序</a></h3><p>JS 總有一些奇奇怪怪可以取得值的方法，有時候運用一些邏輯運算子不但可以縮短自身的程式碼也可以讓整體看起來更乾淨一些，不過有些 lint 不太建議用這種方式撰寫就是了XD</p><h3 id="使用HTTP-204狀態碼來節省API的頻寬用量"><a href="#使用HTTP-204狀態碼來節省API的頻寬用量" class="headerlink" title="使用HTTP 204狀態碼來節省API的頻寬用量"></a><a href="http://blog.clyang.net/2017/08/18/use-http-204-reduce-bandwidth/?fbclid=IwAR0Vs9HEszL2wJezQQt_lq-2ElXp42VxNy8ygwhJaStgG9XXw9pkE7ht-24" target="_blank" rel="noopener">使用HTTP 204狀態碼來節省API的頻寬用量</a></h3><p>小弟上班的公司有些 API 真的很常回傳 204 狀態碼，起初覺得疑惑不曉得為啥不回傳 200 就好一定要回傳 204，後來才知道有這個願故不過也不知道是不是為了減省頻寬就是了XD</p><h3 id="Refresh-Token的使用場景以及如何與JWT互動"><a href="#Refresh-Token的使用場景以及如何與JWT互動" class="headerlink" title="Refresh Token的使用場景以及如何與JWT互動"></a><a href="https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/2049/" target="_blank" rel="noopener">Refresh Token的使用場景以及如何與JWT互動</a></h3><p>最近小弟在設計 <code>refreshLogin</code> 的流程，目的是為了讓使用者可以不用太頻繁的重複登入只要重整頁面就可以取得最新的 token 藉以延長使用者的登入時間，不過這段流程到底要怎麼設計才會漂亮，這篇文章完整的闡述 refresh token 的更新流程。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Kubernetes-CRDs-Huge-Pain-In-Multi-Tenant-Clusters"><a href="#Kubernetes-CRDs-Huge-Pain-In-Multi-Tenant-Clusters" class="headerlink" title="Kubernetes CRDs = Huge Pain In Multi-Tenant Clusters"></a><a href="https://loft.sh/blog/kubernetes-crds-huge-pain-in-multi-tenant-clusters/" target="_blank" rel="noopener">Kubernetes CRDs = Huge Pain In Multi-Tenant Clusters</a></h3><p>與 Single-Tenant K8s Cluster 比較起來，Ｍulti-Ｔenancy 提供了許多的 Business 和技術上的優勢，但是 Ｍulti-Ｔenancy 也帶來了一些挑戰和痛點，其中之一便是要如何處理 K8s CRD (Custom Resource Definitions)，作者透過本文來解釋在 Ｍulti-Ｔenancy K8s 環境中處理 CRD 遇過的痛點，以及如何將這些問題最小化的方式</p><h3 id="Shifting-Cloud-Security-Left-—-Scanning-Infrastructure-as-Code-for-Security-Issues"><a href="#Shifting-Cloud-Security-Left-—-Scanning-Infrastructure-as-Code-for-Security-Issues" class="headerlink" title="Shifting Cloud Security Left — Scanning Infrastructure as Code for Security Issues"></a><a href="https://blog.christophetd.fr/shifting-cloud-security-left-scanning-infrastructure-as-code-for-security-issues/" target="_blank" rel="noopener">Shifting Cloud Security Left — Scanning Infrastructure as Code for Security Issues</a></h3><p>在傳統製造業中，提早在生產線發現問題就可以確保有問題的產品不會跑到消費者的手中，在軟體產業也是一樣的道理，假如可以在 Release Pipeline 的早期階段就將安全檢查給整合進去的話，就可以大幅度地降低解決安全問題所需要耗費的成本，並確保不會讓問題出現在生產環境中，在管理雲端環境時，大家常常會使用 Terraform 或是 CloudFormation 之類的工具來達成 Infrastructure as Code，作者在本文將會介紹並比較目前市面上可以對 Terraform 程式碼進行靜態分析的工具，讓大家可以在各種雲端安全問題和錯誤組態配置升級成危害公司的問題前就先將其找出來</p><h3 id="Practical-Canary-Releases-in-Kubernetes-with-Argo-Rollouts"><a href="#Practical-Canary-Releases-in-Kubernetes-with-Argo-Rollouts" class="headerlink" title="Practical Canary Releases in Kubernetes with Argo Rollouts"></a><a href="https://medium.com/soluto-engineering/practical-canary-releases-in-kubernetes-with-argo-rollouts-933884133aea" target="_blank" rel="noopener">Practical Canary Releases in Kubernetes with Argo Rollouts</a></h3><p>作者所在的公司 Soluto 透過微服務架構與眾多 CI/CD 工具相結合，使他們每天能夠快速地發佈多個版本，把最新的功能和修復帶給客戶，在此種快速迭代的過程中，有時候會在生產環境中發現問題，而在發生此種狀況時，站在公司的立場當然會希望客戶可以免於遭受到任何的困擾，同時開發者也可以儘早了解問題的成因，而這就是 Argo Rollouts 功能利用 Canary Release 方式所想要解決的問題；而此篇文章並不是要教導 “如何” 設定 Argo Rollouts，而是假設在大家已經知道它的工作原理下，想要跟大家探討如何解決可能面臨的問題，以及如何優化遭遇到的效能瓶頸問題</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 60 期 - Kubernetes Distribution 元年 - EKS Distro 想要說的事</title>
      <link href="/2020/12/22/60-kubernetes-distribution/"/>
      <url>/2020/12/22/60-kubernetes-distribution/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Kubernetes-Distribution-元年-EKS-Distro-想要說的事"><a href="#Kubernetes-Distribution-元年-EKS-Distro-想要說的事" class="headerlink" title="Kubernetes Distribution 元年 - EKS Distro 想要說的事"></a><a href="https://medium.com/starbugs/kubernetes-distribution-%E5%85%83%E5%B9%B4-eks-distro-%E6%83%B3%E8%A6%81%E8%AA%AA%E7%9A%84%E4%BA%8B-b3fb732b5afe" target="_blank" rel="noopener">Kubernetes Distribution 元年 - EKS Distro 想要說的事</a></h3><p>自己本身就是 K8s Distribution 的開發者，最近 AWS re:Invent 2020 宣佈推出 AWS EKS Distro，自己嘗試了一下之後，有一點想把這些年自己對於 K8s Distribution 的所見所聞分享出來，因此撰寫了此篇文章</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="身為-Web-工程師，你一定要知道的幾個-Web-資訊安全議題"><a href="#身為-Web-工程師，你一定要知道的幾個-Web-資訊安全議題" class="headerlink" title="身為 Web 工程師，你一定要知道的幾個 Web 資訊安全議題"></a><a href="https://medium.com/starbugs/%E8%BA%AB%E7%82%BA-web-%E5%B7%A5%E7%A8%8B%E5%B8%AB-%E4%BD%A0%E4%B8%80%E5%AE%9A%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E5%B9%BE%E5%80%8B-web-%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8%E8%AD%B0%E9%A1%8C-29b8a4af6e13" target="_blank" rel="noopener">身為 Web 工程師，你一定要知道的幾個 Web 資訊安全議題</a></h3><p>身為一個 Web 工程師，我們也許非常注重使用者體驗與網頁效能，希望使用者可以在使用產品的時候感到愉悅，也希望網頁無論是資源的載入速度或是頁面的渲染，甚至是後端 server 的效能，都可以盡量追求最佳化，然而如果忽略了網站的安全性，以至於服務上產生許多漏洞，讓不法之人可以趁機攻擊，那麼使用者體驗再好，效能再快的網站，都是脆弱 (Vulnerable) 且不及格的 。而這篇文將會以 Web 工程師的角度出發，說明一些我認為 Web 開發者應該要知道的資安議題，內容會包括：</p><ul><li>XSS (Cross-site scripting)</li><li>SQL Injection</li><li>CSRF</li><li>ClickJacking</li><li>Open Redirect</li><li>DOS</li><li>Insecure Direct Object Reference Vulnerability</li></ul><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Understanding-Memory-Management-in-JavaScript"><a href="#Understanding-Memory-Management-in-JavaScript" class="headerlink" title="Understanding Memory Management in JavaScript"></a><a href="https://hackernoon.com/understanding-memory-management-in-javascript-wx2f31wx" target="_blank" rel="noopener">Understanding Memory Management in JavaScript</a></h3><p>大家都知道在 JavaScript 中為變數指定值的時候會分配到內存，但是在 JavaScript 裡面並沒有如 C 那樣可以手動管理內存的 <a href="https://pubs.opengroup.org/onlinepubs/009695399/functions/malloc.html?ref=hackernoon.com" target="_blank" rel="noopener">malloc()</a> 與 <a href="https://en.wikipedia.org/wiki/C_dynamic_memory_allocation?ref=hackernoon.com#Overview_of_functions" target="_blank" rel="noopener">free()</a>，那麼 JavaScript 到底是如何判斷什麼時候該釋放那些不再用到的內存呢？一起來看看吧！</p><h3 id="this-vs-that"><a href="#this-vs-that" class="headerlink" title="this-vs-that"></a><a href="https://github.com/phuoc-ng/this-vs-that" target="_blank" rel="noopener">this-vs-that</a></h3><p>咦？這兩個屬性看起來都一樣啊？在剛學前端的時候總是會看到一堆語法都在處理類似的事情，但是它們到底有什麼不一樣啊？對！相信不會只有你感到疑惑，本週推薦的這個 repo 就來一一揭開那些長得很像的東西到底哪裡不同！</p><h3 id="CSS-Frosted-glass-credit-card"><a href="#CSS-Frosted-glass-credit-card" class="headerlink" title="CSS Frosted glass credit card"></a><a href="https://dev.to/dailydevtips1/css-frosted-glass-credit-card-3lak" target="_blank" rel="noopener">CSS Frosted glass credit card</a></h3><p>最近毛玻璃的設計風格好像很紅，那就來分享用原生 CSS 一步步來完成的小作品（雖然除了毛玻璃效果外還多了許多動畫 😂）！除了文章中的介紹外，下方的留言區也有提供一個超強的毛玻璃效果產生器 <a href="https://glassmorphism.com/" target="_blank" rel="noopener">Glassmorphism</a>。</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="Golang-lt-time-After-is-not-garbage-collected-before-expiry"><a href="#Golang-lt-time-After-is-not-garbage-collected-before-expiry" class="headerlink" title="Golang &lt;-time.After() is not garbage collected before expiry"></a><a href="https://medium.com/@oboturov/golang-time-after-is-not-garbage-collected-4cbc94740082" target="_blank" rel="noopener">Golang &lt;-time.After() is not garbage collected before expiry</a></h3><p>這篇文章很短，大概三分鐘就可以看完，內容是在說 Go 的 <code>time.After()</code> 在時間到之前不會被 GC 清掉，所以如果在短時間內大量使用 timer，可能會讓記憶體使用量突然暴增，進而導致 OOM(Out Of Memory)</p><h3 id="Testing-in-Go-—-Some-tools-you-can-use"><a href="#Testing-in-Go-—-Some-tools-you-can-use" class="headerlink" title="Testing in Go — Some tools you can use"></a><a href="https://medium.com/@andrewdavisescalona/testing-in-go-some-tools-you-can-use-f3e79b398d8d" target="_blank" rel="noopener">Testing in Go — Some tools you can use</a></h3><p>雖然 Go 有內建的測試工具可以使用，但因為有些功能仍然做不到，所以這篇文章分享了一些工具可以幫你輕易做到比較複雜的 Assertion、Mocking 還有自動產生 Mock，如果專案比較大、覺得內建的測試功能不夠用了可以試試</p><h3 id="Rust-vs-Go"><a href="#Rust-vs-Go" class="headerlink" title="Rust vs Go"></a><a href="https://bitfieldconsulting.com/golang/rust-vs-go" target="_blank" rel="noopener">Rust vs Go</a></h3><p>關於 Rust vs Go 的文章之前已經看過很多，不過這篇是我看過少數算是比較公正的，除了比較他們的語言特性之外，也有提到他們各自的設計理念。所以如果是有寫過 Rust 想學 Go、或是反過來想學 Rust，那可以先看看這篇，說不定之後會比較好上手</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="gitlab-ci-cd"><a href="#gitlab-ci-cd" class="headerlink" title="gitlab ci/cd"></a><a href="https://medium.com/nick-%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%AD%B8%E7%BF%92%E8%A8%98/%E6%95%99%E5%AD%B8-gitlab-ci-%E5%85%A5%E9%96%80%E5%AF%A6%E4%BD%9C-%E8%87%AA%E5%8B%95%E5%8C%96%E9%83%A8%E7%BD%B2%E7%AF%87-ci-cd-%E7%B3%BB%E5%88%97%E5%88%86%E4%BA%AB%E6%96%87-cbb5100a73d4" target="_blank" rel="noopener">gitlab ci/cd</a></h3><p>由於公司使用 gitlab 作為版本控制的網站，以前只有用過 github 以及 bitbucket 的我瞬間覺得 gitlab 能做到的事情真的有夠多，從 ci/cd 開始 gitlab 可以自動化執行非常多的功能，只要先設定好 <code>.gitlab-ci.yml</code> 就可以很輕鬆地達到 ci/cd 的效果，當然這邊只是自動化去觸發 ci/cd 而已，真正執行這些流程的還是需要依賴其他的工具來使用。</p><h3 id="gitlab-runner"><a href="#gitlab-runner" class="headerlink" title="gitlab runner"></a><a href="https://docs.gitlab.com/runner/" target="_blank" rel="noopener">gitlab runner</a></h3><p>想要順利執行 gitlab ci/cd 的流程必須要利用 gitlab runner 才可以執行，runner 簡單來說就是去跑這些自動化流程的 worker，必須要有 runner 才有資源去執行這些自動化流程，gitlab 的自動化流程也非常簡單，官網都有懶人做法非常適合我這種剛碰 DevOps 的人XD</p><h3 id="cloud-build"><a href="#cloud-build" class="headerlink" title="cloud build"></a><a href="https://cloud.google.com/cloud-build/docs/build-config" target="_blank" rel="noopener">cloud build</a></h3><p>前面提到 gitlab 只是執行自動化流程而已，真正的去跑 ci/cd 還是要依賴其他的工具，這邊推薦 google 的 cloud build 而且 google 相當佛心每天都有 120 分鐘免費 build 的時間，很適合我這種擁有客家精神的工程師XD</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 59 期 - 阿姨，我不想寫程式了！</title>
      <link href="/2020/12/15/59-hey-madam-I-dont-wanna-code-anymore/"/>
      <url>/2020/12/15/59-hey-madam-I-dont-wanna-code-anymore/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="打造舒適的-Windows-開發環境-—-WSL-終端機組合技"><a href="#打造舒適的-Windows-開發環境-—-WSL-終端機組合技" class="headerlink" title="打造舒適的 Windows 開發環境 — WSL + 終端機組合技"></a><a href="https://medium.com/starbugs/%E6%89%93%E9%80%A0%E8%88%92%E9%81%A9%E7%9A%84-windows-%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83-terminal-%E7%B5%82%E7%AB%AF%E6%A9%9F%E8%88%87-wsl-76d9abdd7fae" target="_blank" rel="noopener">打造舒適的 Windows 開發環境 — WSL + 終端機組合技</a></h3><p>筆者是個 Mac / Linux 重度使用者，學生時期使用 Windows 開發實在雷，光是搞環境平均就要花一個禮拜以上。再換成一台二手的 Macbook 之後就一路大順暢，從此只用 Mac / Linux 環境開發。直到最近看到強者我朋友用 Windows 用得滿順的，不僅 Web 這些比較通用的東西跑得順，連 Linux 套件和 Docker 甚至 K8S 都可以順利執行。於是我就買了一台 Windows 電腦，那就來打造出能夠媲美 Linux 開發環境的舒適 Windows 開發體驗吧！</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="ReactConf-AU-2020-筆記-Part-2"><a href="#ReactConf-AU-2020-筆記-Part-2" class="headerlink" title="ReactConf AU 2020 | 筆記 - Part 2"></a><a href="https://medium.com/starbugs/reactconf-au-2020-note-part2-99ce51a00a08" target="_blank" rel="noopener">ReactConf AU 2020 | 筆記 - Part 2</a></h3><p>之前看了 4 場 ReactConf AU 2020 的演講後，最近又陸續看了幾場，每一場真的都收益良多。但是礙於 medium 寫文章的長度，只能先整理 2 場跟大家分享。在整理了 2 場的演講筆記後，當我在整理第 3 場時，突然跳出通知說 medium 無法儲存太長的文章 😅。</p><p>這篇筆記包括兩場演講，分別是 react-final-form 作者 Erik Rasmussen 所演講的 Modern Forms in React，以及 emotion 的維護者 Mitchell Hamilton 帶來的 Building with Monorepos。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="The-Import-On-Interaction-Pattern"><a href="#The-Import-On-Interaction-Pattern" class="headerlink" title="The Import On Interaction Pattern"></a><a href="https://addyosmani.com/blog/import-on-interaction/?fbclid=IwAR28mdETvIvr4SXokURbpSCECddB4CjbVZItVFjGIu0cRyGjAv-x1SbcDcU" target="_blank" rel="noopener">The Import On Interaction Pattern</a></h3><p>有時候我們在開發網頁的時候，可能會載入一些使用者不會馬上使用或看見的 JavaScript 或是資料，而那些東西往往會造成網頁在第一次載入的時候花費太長的時間。此篇文章會介紹一些載入資源的方式，圖文並茂講得非常清楚！</p><h3 id="What-is-the-HTML-tag-and-why-do-I-need-it"><a href="#What-is-the-HTML-tag-and-why-do-I-need-it" class="headerlink" title="What is the HTML tag and why do I need it?"></a><a href="https://dev.to/dailydevtips1/what-is-the-wbr-html-tag-and-why-do-i-need-it-2fok" target="_blank" rel="noopener">What is the HTML tag and why do I need it?</a></h3><p>在英文單字超級長的時候，我們會希望控制他們在頁面上的斷行方式，此文章的作者就介紹了 HTML 的 <code>&lt;wbr&gt;</code> 標籤，讓我們可以控制英文單字的換行位置，然後亮眼的不只有 <code>&lt;wbr&gt;</code>，還有下方第一則留言所使用的 <code>&amp;shy;</code>！私心認為 <code>&amp;shy;</code> 看起來比較好 😂，至於他們有什麼不一樣，快點進去文章看看吧！</p><h3 id="Vue-Router4-0"><a href="#Vue-Router4-0" class="headerlink" title="Vue Router4.0"></a><a href="https://github.com/vuejs/vue-router-next/releases/tag/v4.0.0" target="_blank" rel="noopener">Vue Router4.0</a></h3><p>Vue Router4.0 的穩定版也隨著 Vue3 之後，終於在 12/8 發佈啦！現在的 Vue Router 被分成三個 Modules，分別為處理 address 的 History implementation、還有解析 routes 的 Router Matcher 和負責將每個 routes 聯繫起來的 Router！除了程式碼的組織架構改變之外，還改善了前代的哪些功能呢？快快快快看吧 🙌！</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="Mutability-and-Immutability-in-Python"><a href="#Mutability-and-Immutability-in-Python" class="headerlink" title="Mutability and Immutability in Python"></a><a href="https://medium.com/datadriveninvestor/mutable-and-immutable-python-2093deeac8d9" target="_blank" rel="noopener">Mutability and Immutability in Python</a></h3><p>這篇文章在解釋 Python 中的 mutable 跟 Immutable objects，而且也講解了 alias 跟 clone 的差異，很適合剛入門 Python 的人看看</p><h3 id="Pythonic-實踐：實用的-python-慣用法整理"><a href="#Pythonic-實踐：實用的-python-慣用法整理" class="headerlink" title="Pythonic 實踐：實用的 python 慣用法整理"></a><a href="https://mropengate.blogspot.com/2020/07/pythonic-python.html" target="_blank" rel="noopener">Pythonic 實踐：實用的 python 慣用法整理</a></h3><p>Python 的語法跟其他語言比起來非常簡單而且有彈性，因此也誕生了許多專屬的寫法，而這篇文章就是要教你怎麼把程式碼寫得 pythonic，把 Python 的語法糖跟特性完全發揮出來</p><h3 id="Profiling-CPython-at-Instagram"><a href="#Profiling-CPython-at-Instagram" class="headerlink" title="Profiling CPython at Instagram"></a><a href="https://link.medium.com/O6D3RMIpHab" target="_blank" rel="noopener">Profiling CPython at Instagram</a></h3><p>Instagram 後端的商業邏輯是用 Python 寫成的，而這篇就是他們在分享要怎麼蒐集需要的資訊，並且找出是什麼原因導致效能不好，很不錯的實務經驗分享</p><h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><p>這週來推薦幾個在 GitHub 上面看到的有趣 repository，不得不說 GitHub 果然是全世界最大的工程師交流網站，上面總是會有一些奇奇怪怪的 repo XD</p><h3 id="screeps"><a href="#screeps" class="headerlink" title="screeps"></a><a href="https://github.com/screeps/screeps" target="_blank" rel="noopener">screeps</a></h3><p>以前有在 minecraft 裡面玩 minecraft，現在也有套件可以在讓你邊玩遊戲邊練習 JavaScript 了！而且最後還會為了 CPU 以及 Memory 資源而需要優化自己的演算法，網路上也有很多人會分享自己的演算法，看到一堆大大都會分享 O(n) 之類的寫法就覺得自嘆不如，大家不妨也可以下載下來玩玩看XD</p><h3 id="xash3d"><a href="#xash3d" class="headerlink" title="xash3d"></a><a href="https://github.com/FWGS/xash3d" target="_blank" rel="noopener">xash3d</a></h3><p>不曉得大家之前有沒有看過一篇報導是：<a href="https://today.line.me/tw/v2/article/Counter+Strike+1+6+%E7%B6%B2%E9%A0%81%E7%89%88%EF%BC%8COK+Let%E2%80%99s+Go+%E5%85%8D%E5%AE%89%E8%A3%9D%E9%96%8B%E7%80%8F%E8%A6%BD%E5%99%A8%E5%B0%B1%E8%83%BD%E7%B7%9A%E4%B8%8A%E7%8E%A9-GmDoNy" target="_blank" rel="noopener">CS 1.6 網頁版</a>，那時候的我看到之後就職業病發作跑去看一下到底是如何做出網頁版的 CS，看了一下作者介紹後才知道原來是用了這款 3D 建模工具，如果大家想要開發網頁小遊戲來練功的話，就可以使用這個套件了。</p><h3 id="Turnip-Calculator"><a href="#Turnip-Calculator" class="headerlink" title="Turnip-Calculator"></a><a href="https://github.com/elxris/Turnip-Calculator" target="_blank" rel="noopener">Turnip-Calculator</a></h3><p>前陣子非常流行的動物森友會不曉得大家有沒有玩過呢(謎之音：那遊戲早就過氣了好了，現在大家都在搶 PS5 了XD)<br>總之那時候我為了判斷每天的大頭菜是否要出售，尤其我又是一個賭性堅強的人所以有時候我就會不小心錯過應該要賣出的機會，沒想到就有大大直接寫了一個大頭菜計算機的網頁而且還有發佈在 GitHub 上，所以就可以知道動物森友會背後用來計算大頭菜的演算法了(其實這個才是目的XDD</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Goodbye-CentOS-T-T-Hello-Rocky-Linux"><a href="#Goodbye-CentOS-T-T-Hello-Rocky-Linux" class="headerlink" title="Goodbye CentOS T_T Hello Rocky Linux ^_^"></a><a href="https://www.zdnet.com/article/goodbye-centos-hello-rocky-linux/" target="_blank" rel="noopener">Goodbye CentOS T_T Hello Rocky Linux ^_^</a></h3><p>這週對於維運圈最大的新聞莫過於 CentOS 被 RedHat 拋棄，將把資源從 CentOS Linux 轉移到 CentOS Stream (更新比 RHEL 快且不穩定的版本)，而且預計 2020/12/31 終止對CentOS Linux 8 的支援，只能說有錢就是任性，先把開源專案納入麾下，接著做出重大變更殺得原來的使用者措手不及，這不知道是第幾次了</p><p>在 CentOS 使用者於社群媒體上一片哀嚎遍野的抱怨下，CentOS 的 Co-Founder, Gregory Kurtzer 宣佈將另外發布 RHEL 的重製版 Rocky Linux 來取代目前的 CentOS Linux, 讓我想起之前的 CoreOS 被 RedHat 改成 Fedora CoreOS 之後，也有了 FlatCar 的誕生</p><h3 id="School-of-SRE"><a href="#School-of-SRE" class="headerlink" title="School of SRE"></a><a href="https://linkedin.github.io/school-of-sre/" target="_blank" rel="noopener">School of SRE</a></h3><p>Linkedin 於 2019 年初開始於印度各地的校園招募，以確保使用複雜技術所推疊而成的服務可以一直維持高品質，而關鍵點就在於 SRE 團隊的召募上，在過程中不少相似的問題一再被提出，例如 SRE 的角色到底需要承擔什麼樣的問題，而想要朝此領域發展的話，需要哪一些技能跟知識？關於 SRE 的角色和職責，例如：監控，生產環境事件處理，定義 SLO/SLI…等，網路上散佈著大量的資源，但卻很少有資源可以指導一個人掌握這些基本技能，設定好一個初學者必須具備的條件，由於這些資源的匱乏導致很難招募到人進入該行業的職位，為此 Linkedin 創立了 SRE 學院，在本課程中專注於建立強大的基礎技能，涵蓋底下主題：</p><ul><li>Fundamentals Series<ul><li>Linux Basics</li><li>Git</li><li>Linux Networking</li></ul></li><li>Python and Web</li><li>Data<ul><li>Relational databases(MySQL)</li><li>NoSQL concepts</li><li>Big Data</li></ul></li><li>Systems Design</li><li>Security</li></ul><h3 id="Netflix-ConsoleMe"><a href="#Netflix-ConsoleMe" class="headerlink" title="Netflix ConsoleMe"></a><a href="https://github.com/Netflix/consoleme" target="_blank" rel="noopener">Netflix ConsoleMe</a></h3><p>這幾天發現 Netflix 有一個開源專案叫做 ConsoleMe，它可以將多個 AWS 帳號整合到同一個介面中一起管理，允許一般開發者與系統維運人員取得不同帳號的 Credential，而且可以讓不同角色的使用者請求和管理雲端資源權限，這算是看到目前為止 Netflix 開源的專案中最平易近人得了吧XD 畢竟多重帳號算是在中大型組織使用 AWS 必備的基本要件了！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 58 期 - 我會披星戴月的 Debug</title>
      <link href="/2020/12/08/58-debug-day-and-night/"/>
      <url>/2020/12/08/58-debug-day-and-night/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="用-JavaScript-玩轉設計模式-各司其職的-Chain-of-Responsibility-Pattern（責任鏈模式）"><a href="#用-JavaScript-玩轉設計模式-各司其職的-Chain-of-Responsibility-Pattern（責任鏈模式）" class="headerlink" title="用 JavaScript 玩轉設計模式 | 各司其職的 Chain of Responsibility Pattern（責任鏈模式）"></a><a href="https://medium.com/starbugs/%E7%94%A8-javascript-%E7%8E%A9%E8%BD%89%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-%E5%90%84%E5%8F%B8%E5%85%B6%E8%81%B7%E7%9A%84-chain-of-responsibility-pattern-%E8%B2%AC%E4%BB%BB%E9%8F%88%E6%A8%A1%E5%BC%8F-864f394cce13" target="_blank" rel="noopener">用 JavaScript 玩轉設計模式 | 各司其職的 Chain of Responsibility Pattern（責任鏈模式）</a></h3><p>有時候我們在學習設計模式常常會被複雜的 UML 圖給綑綁，尤其是在沒有 Interface 的 JavaScript 上開發更是如此讓人覺得不太容易學習。本週專欄就以聽起來好像很難的 chain of responsibility pattern（責任鏈模式）為例子，帶大家如何用 JavaScript 來實現設計模式的意圖吧！</p><h2 id="好文募集"><a href="#好文募集" class="headerlink" title="好文募集"></a>好文募集</h2><h3 id="今晚，我想來點-Web-前端效能優化大補帖！"><a href="#今晚，我想來點-Web-前端效能優化大補帖！" class="headerlink" title="今晚，我想來點 Web 前端效能優化大補帖！"></a><a href="https://medium.com/starbugs/%E4%BB%8A%E6%99%9A-%E6%88%91%E6%83%B3%E4%BE%86%E9%BB%9E-web-%E5%89%8D%E7%AB%AF%E6%95%88%E8%83%BD%E5%84%AA%E5%8C%96%E5%A4%A7%E8%A3%9C%E5%B8%96-e1a5805c1ca2" target="_blank" rel="noopener">今晚，我想來點 Web 前端效能優化大補帖！</a></h3><p>效能是工程師在維護專案時非常重視的要點，不論是 Web 還是 App，甚至是需要大量運算資源的機器學習，都會想追求極致的效能，用高效率換取高價值。不過首先在文章的最開頭想給讀者灌輸一個 mindset：「就 Web Client Side 而言（其他領域我還不夠了解因此先不討論），並不是所有的應用都需要追求效能，有時候獲取效能的背後也許需要花上昂貴的成本，比較起來是得不償失的！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Celebrating-25-Years-of-JavaScript"><a href="#Celebrating-25-Years-of-JavaScript" class="headerlink" title="Celebrating 25 Years of JavaScript"></a><a href="https://blog.heroku.com/celebrating-25-years-of-javascript" target="_blank" rel="noopener">Celebrating 25 Years of JavaScript</a></h3><p>JavaScript 在 12/4 號的時候邁入 25 歲啦！除了眾所皆知的 JavaScript 只花 10 天就誕生之外，一起看看這 20 個年頭的 JavaScript 一路走來的歷史吧！</p><h3 id="The-Anatomy-of-package-json"><a href="#The-Anatomy-of-package-json" class="headerlink" title="The Anatomy of package.json"></a><a href="https://dev.to/laurieontech/the-anatomy-of-package-json-pi4" target="_blank" rel="noopener">The Anatomy of package.json</a></h3><p>在開發 Node 專案的時候，大家都一定會看過 package.json，也許你知道它在幫你管理專案裡用到的依賴套件，但除此之外其實還有很多資訊藏在裡面哦！</p><h3 id="我是如何阅读源码的"><a href="#我是如何阅读源码的" class="headerlink" title="我是如何阅读源码的"></a><a href="https://juejin.cn/post/6903335881227108366" target="_blank" rel="noopener">我是如何阅读源码的</a></h3><p>作者簡單的講解它是如何開始閱讀 GitHub 上那些像山一樣的原始碼，但其實更重要的是閱讀原始碼的心態，那就是帶著目的去閱讀，只有當你懷抱著問題出發，才會具有更高的學習效率！</p><h3 id="json-server"><a href="#json-server" class="headerlink" title="json server"></a><a href="https://github.com/typicode/json-server" target="_blank" rel="noopener">json server</a></h3><p>json server 是一套很常用來幫助前端在還沒有後端 API 時可以先用來在本機端起一個 CRUD server 來進行假的 API 串接，而且還支援各種 querystring 的串接，所以只要跟後端工程師討論好 API 介面再利用 json server 就可以很快速的開發網頁了。</p><h3 id="mockapi-io"><a href="#mockapi-io" class="headerlink" title="mockapi.io"></a><a href="https://www.mockapi.io/docs" target="_blank" rel="noopener">mockapi.io</a></h3><p>相信有些人一定會覺得還要在本機端起一個 server 是一件成本非常高的事情，畢竟能少寫一個檔案是一個XD 所以這邊要推薦一個懶人作法就是利用 mockapi.io 這個網站達到想要的需求，直接智慧化的建立 CRUD 資料，不過當然有好也有壞，這麼方便的結果就是不能太客製化需求，不過如果開發上是習慣建一個 model 來做資料的預處理，相信資料格式應該也不會是太大的問題才對X</p><h3 id="wtfjs"><a href="#wtfjs" class="headerlink" title="wtfjs"></a><a href="https://github.com/denysdovhan/wtfjs" target="_blank" rel="noopener">wtfjs</a></h3><p>這個主要是讓大家搏君一笑，小弟寫 js 也不過兩年其實就遇到很多 js 的坑，沒想到竟然有人把這些坑整理起來變成一個 github repo 而且還有 2 萬多顆星星真的是太神奇了XD 如果大家想多了解 js 的坑可以到這個 repo 上看一看，看完之後就可以開始放棄學習 js 了(誤</p><h2 id="Web-Performance"><a href="#Web-Performance" class="headerlink" title="Web Performance"></a>Web Performance</h2><h3 id="I-made-my-website-28ms-faster-with-content-visibility-🤓"><a href="#I-made-my-website-28ms-faster-with-content-visibility-🤓" class="headerlink" title="I made my website 28ms faster with content-visibility 🤓"></a><a href="https://dev.to/dailydevtips1/i-made-my-website-28ms-faster-with-content-visibility-466e" target="_blank" rel="noopener">I made my website 28ms faster with content-visibility 🤓</a></h3><p>雖然 28ms 真的很少XD，但如果一些常見的優化方法你都已經做了，還想讓網站更快，那可以研究看看 <code>content-visibility</code> 這個 CSS 屬性</p><h3 id="Things-You-Must-Know-Before-Using-a-CDN"><a href="#Things-You-Must-Know-Before-Using-a-CDN" class="headerlink" title="Things You Must Know Before Using a CDN"></a><a href="https://link.medium.com/b7zAUPkYqbb" target="_blank" rel="noopener">Things You Must Know Before Using a CDN</a></h3><p>為了讓網站以更快的速度載入所需要的資源，現在很多靜態檔案都會直接丟上 CDN，但 CDN 不是全部東西都丟上去就沒事了，有一些注意事項還是得花時間看看，不然弄得不好說不定會有反效果</p><h3 id="The-Ultimate-Guide-to-Web-Performance-🚀"><a href="#The-Ultimate-Guide-to-Web-Performance-🚀" class="headerlink" title="The Ultimate Guide to Web Performance 🚀"></a><a href="https://dev.to/ender_minyard/the-ultimate-guide-to-web-performance-ci4" target="_blank" rel="noopener">The Ultimate Guide to Web Performance 🚀</a></h3><p>如果上面兩篇還看不夠的話，這篇是 Web performance 的總整理，內容包括 HTML、CSS、圖片、字體的優化，很適合收藏起來，需要的時候再拿出來看</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="What’s-new-in-Kubernetes-1-20"><a href="#What’s-new-in-Kubernetes-1-20" class="headerlink" title="What’s new in Kubernetes 1.20?"></a><a href="https://sysdig.com/blog/whats-new-kubernetes-1-20/" target="_blank" rel="noopener">What’s new in Kubernetes 1.20?</a></h3><p>這次新版的改動主要以功能改善居多，總共有 43 項，其中有 11 個功能進入到了 Stable ，15 個是全新的改善，17 個則是既有功能的持續改良中，由於都不是新的功能，所以改動的幅度比較小，例如升級完後的 kube-apiserver 在 HA 模式中可以運行的更好，重開的效率更佳，節點可以 Gracefully Shutdown…等，更多詳細內容請參閱連結內文</p><h3 id="AWS-re-Invent-2020-–-Announcements-From-the-News-Blog"><a href="#AWS-re-Invent-2020-–-Announcements-From-the-News-Blog" class="headerlink" title="AWS re:Invent 2020 – Announcements From the News Blog"></a><a href="https://aws.amazon.com/blogs/aws/aws-reinvent-announcements-2020" target="_blank" rel="noopener">AWS re:Invent 2020 – Announcements From the News Blog</a></h3><p>這次由於 COVID-19 的關係，所以 AWS re:Invent 並沒有在拉斯維加斯舉辦，取而代之的當然是變成線上版，不過精彩度一樣沒變，新功能大爆發，而這篇官方文章把在 re:Invent 期間發布的新聞都條列起來，有在使用 AWS 的人千萬不要錯過了！</p><h3 id="What-developers-need-to-know-about-Docker-Docker-Engine-and-Kubernetes-v1-20"><a href="#What-developers-need-to-know-about-Docker-Docker-Engine-and-Kubernetes-v1-20" class="headerlink" title="What developers need to know about Docker, Docker Engine, and Kubernetes v1.20"></a><a href="https://www.docker.com/blog/what-developers-need-to-know-about-docker-docker-engine-and-kubernetes-v1-20/" target="_blank" rel="noopener">What developers need to know about Docker, Docker Engine, and Kubernetes v1.20</a></h3><p>事主 <strong>Docker</strong> 也跳出來請大家不用擔心有關於 Kubernetes 之後要把 dockershim 移除的事情XD 其實這件事情真的已經醞釀好幾年了，當年 2016 大家都在想是不是因為 Docker 太過壯大，所以 Google 和 IBM 這些大公司跳出來一起催生 Containerd  的誕生，講好聽的就是要一起制定標準，難聽的就是我也要分一杯羹<br>；不過現在有在維運 K8s 的人應該是少數了，所以其實八成以上的人對於這個變更不會有什麼感覺，而 Docker 其實也滿成功的，大家不會講 Container 而是講 Docker，就像有些人以為 GitHub 就是 Git，不知道 Git 算是一種協定，其實還有 GitLab, BitBucket …等的存在</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 57 期 - 世上只有兩種程式語言：被罵得一無是處的，以及沒人在用的</title>
      <link href="/2020/12/01/57-there-are-only-two-languages-in-the-world/"/>
      <url>/2020/12/01/57-there-are-only-two-languages-in-the-world/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="以-Go-為例，圖解-Data-Alignment-如何影響記憶體使用量"><a href="#以-Go-為例，圖解-Data-Alignment-如何影響記憶體使用量" class="headerlink" title="以 Go 為例，圖解 Data Alignment 如何影響記憶體使用量"></a><a href="https://medium.com/starbugs/illustrate-how-data-alignment-affects-memory-usage-d29bf9d5bf08" target="_blank" rel="noopener">以 Go 為例，圖解 Data Alignment 如何影響記憶體使用量</a></h3><p>不知道大家在寫 Go 時有沒有注意過，一個 struct 所佔的空間不見得等於各個 field 加起來的空間，甚至有時把 field 宣告的順序調換一下，又會得到不同的結果（其他語言也會有類似的情況）。而今天的文章就是要從 CPU 抓資料的原理開始介紹，然後再講到 Data Structure Alignment（資料結構對齊），希望大家在看完之後能對 CPU 跟記憶體有更多認識～</p><h2 id="好文募集"><a href="#好文募集" class="headerlink" title="好文募集"></a>好文募集</h2><h3 id="找工作必須面對的煎熬與成長-—-國外篇"><a href="#找工作必須面對的煎熬與成長-—-國外篇" class="headerlink" title="找工作必須面對的煎熬與成長 — 國外篇"></a><a href="https://medium.com/starbugs/%E6%89%BE%E5%B7%A5%E4%BD%9C%E5%BF%85%E9%A0%88%E9%9D%A2%E5%B0%8D%E7%9A%84%E7%85%8E%E7%86%AC%E8%88%87%E6%88%90%E9%95%B7-%E5%9C%8B%E5%A4%96%E7%AF%87-5bbbd3c81380" target="_blank" rel="noopener">找工作必須面對的煎熬與成長 — 國外篇</a></h3><p>雖然在 FB 跟 PTT 上三不五時就可以看到有人在分享如何進入 FLAG，但不可否認的是這些人都是強者中的強者，且很多都是名校本科系的。那如果不是這樣的人，想在美國找工作可能會遇到怎麼樣的困難？準備的方向又有什麼不同？一起來看看 Hannah 的分享吧～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Creating-React-Application-For-Solving-Every-Sudoku-Puzzle"><a href="#Creating-React-Application-For-Solving-Every-Sudoku-Puzzle" class="headerlink" title="Creating React Application For Solving Every Sudoku Puzzle"></a><a href="https://hackernoon.com/creating-react-application-for-solving-every-sudoku-puzzle-26h316j" target="_blank" rel="noopener">Creating React Application For Solving Every Sudoku Puzzle</a></h3><p>該文章的作者用 React 製作了一個友善的前端介面來接其他開發者寫來解數獨的開源專案，作者沒有解釋如何刻出介面，而是分享他在打造畫面的時候思考了什麼。</p><h3 id="Why-Is-gt"><a href="#Why-Is-gt" class="headerlink" title="Why Is {} &gt; [] ?"></a><a href="https://dev.to/amyshackles/why-is-2hkk" target="_blank" rel="noopener">Why Is {} &gt; [] ?</a></h3><p>你知道為什麼在 JavaScript 裡空物件會大於空陣列嗎？我真希望自己可以不需要了解這個，可惜我是個前端工程師。😭</p><h3 id="Stop-Using-“data”-as-a-Variable-Name"><a href="#Stop-Using-“data”-as-a-Variable-Name" class="headerlink" title="Stop Using “data” as a Variable Name"></a><a href="https://dev.to/dcwither/stop-using-data-as-a-variable-name-3954" target="_blank" rel="noopener">Stop Using “data” as a Variable Name</a></h3><p>命名絕對是最困難的事情，但即使困難也不代表可以亂取。文章講解了幾個不是很好的命名例子（也許大家都看到爛了），也提出一些比較有意義的命名前綴讓各位參考。</p><h2 id="Computer-Architecture"><a href="#Computer-Architecture" class="headerlink" title="Computer Architecture"></a>Computer Architecture</h2><h3 id="What-is-the-difference-between-a-32-bit-and-64-bit-system"><a href="#What-is-the-difference-between-a-32-bit-and-64-bit-system" class="headerlink" title="What is the difference between a 32-bit and 64-bit system?"></a><a href="https://techterms.com/help/difference_between_32-bit_and_64-bit_systems" target="_blank" rel="noopener">What is the difference between a 32-bit and 64-bit system?</a></h3><p>如果有自己重灌過系統應該就會看過 32 bit、64 bit、x86、x64 這些關鍵字，但 32 bit 跟 64 bit 究竟是指什麼呢？為什麼 32 bit 系統只能使用 4GB 的記憶體？不太確定答案的話可以趕快看看這篇文章～</p><h3 id="Why-doesn’t-C-make-the-structure-tighter-Stack-Overflow"><a href="#Why-doesn’t-C-make-the-structure-tighter-Stack-Overflow" class="headerlink" title="Why doesn’t C++ make the structure tighter? - Stack Overflow"></a><a href="https://stackoverflow.com/questions/6730664/why-doesnt-c-make-the-structure-tighter" target="_blank" rel="noopener">Why doesn’t C++ make the structure tighter? - Stack Overflow</a></h3><p>在這週的專欄中有提到，Rust 編譯器在三年前就已經實作 struct field reordering，那為什麼歷史更悠久的 C/C++ 卻沒有這麼做呢？其實並不是沒有，而是因為 C/C++ 的標準規定了不可以隨便更換順序，所以預設情況下不會啟用這種最佳化，真的需要的話也可以自己套用</p><h3 id="Optimizing-Rust-Struct-Size-A-6-month-Compiler-Development-Project"><a href="#Optimizing-Rust-Struct-Size-A-6-month-Compiler-Development-Project" class="headerlink" title="Optimizing Rust Struct Size: A 6-month Compiler Development Project"></a><a href="https://camlorn.net/posts/April%202017/rust-struct-field-reordering/" target="_blank" rel="noopener">Optimizing Rust Struct Size: A 6-month Compiler Development Project</a></h3><p>這篇是講 Rust 編譯器在實作 struct field reordering 的過程還有遇到的問題，內容很硬，對編譯器沒興趣的話可能會看到頭痛XD，但有興趣的話可以學到滿多東西</p><h2 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h2><h3 id="meta-tag"><a href="#meta-tag" class="headerlink" title="meta tag"></a><a href="https://ysnweb.net/2020/01/seo-guide/html-meta-tag-seo/" target="_blank" rel="noopener">meta tag</a></h3><p>HTML 中的 meta tag 一直是大家會忽略的地方，畢竟這些 tag 跟網頁整體的運作比較沒有太大的關連，但 meta tag 對於 SEO 來說就是一種識別符的概念，meta tag 下的好自然而然 SEO 的分數也會高，這篇文章介紹了幾個最常用的 meta tag 甚至還介紹了 <strong>open graph</strong> 這個用來讓社群媒體像是 Facebook、twitter、line 等等用來顯示文章連結標題、圖片、敘述等重要資訊的 tag，假如你的網站會多次分享在社群媒體上 og tag 不妨也一併加入吧！</p><h3 id="Google-SEO-algorithm"><a href="#Google-SEO-algorithm" class="headerlink" title="Google SEO algorithm"></a><a href="https://ranking.works/SEO%E7%AD%96%E7%95%A5/google%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">Google SEO algorithm</a></h3><p>俗話說的好：知己知彼方能百戰百勝，想要把 SEO 做好必須先了解 Google 背後是怎麼幫你評分，這篇文章介紹了 Google 用來進行 SEO 評分的重要演算法，而且都是用白話文來介紹，了解這些演算法的內容後日後在開發網頁也比較不會踩到會讓自己網站分數降低的地雷了。</p><h3 id="trust-rank"><a href="#trust-rank" class="headerlink" title="trust rank"></a><a href="https://backlinko.com/google-trustrank" target="_blank" rel="noopener">trust rank</a></h3><p>Google trust rank 簡單來說就是讓你的網站或者是網域信任度提升，只要你的網站越可靠、越被大家信任自然而然 SEO 分數也會高，提升網站信任度最簡單的幾個方法不外乎就是加入聯絡我們頁面、隱私權條款頁面、取用 cookie 按鈕等等，甚至還要有 SSL 憑證以及易讀的網址，這些都是 Google 會拿來評分的條件，這篇文章整理了幾個最簡單而且必做的信任度設定，讓你的網域信任度分數可以越來越高。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Technologies-amp-Tools-to-Watch-in-2021"><a href="#Technologies-amp-Tools-to-Watch-in-2021" class="headerlink" title="Technologies &amp; Tools to Watch in 2021"></a><a href="https://medium.com/dev-genius/technologies-tools-to-watch-in-2021-a216dfc30f25" target="_blank" rel="noopener">Technologies &amp; Tools to Watch in 2021</a></h3><p>一轉眼 2020 年就要過完了，來瞧瞧看 2021 年 DevOps Engineer 和 SRE 們應該要特別留意的技術有哪一些吧？！</p><ul><li><p>透過 Kubernetes CRD 來管理公有雲上的資源：目前三朵雲都已經有提供對應的解決方案 AWS: <a href="https://github.com/aws/aws-controllers-k8s" target="_blank" rel="noopener">ACK (AWS Controllers for Kubernetes)</a>, Azure: <a href="https://github.com/Azure/azure-service-operator" target="_blank" rel="noopener">Azure Service Operator</a>，GCP: <a href="https://cloud.google.com/config-connector/docs/overview" target="_blank" rel="noopener">Config Connector</a>，這些工具跟既有的 IaC 解決方案好像有點牴觸，例如 Terrform, Pulumi，不過優點在於開發者使用同樣的工具除了可以管理 K8s 資源之外，也可以一起管理公有雲的雲端資源</p></li><li><p>Pulumi: 今年獲得 $37.5 million Series B 的融資來挑戰 Terraform 的霸主地位，跟其他 IaC 工具比較不同的地方在於他可以使用一般的程式語言來做開發撰寫 (例如 Go, Python, Javascript)，所以程式語言本來的既有工具也都可以直接拿來做使用，不過有一點要注意的是目前他的社群比 Terraform 還要小得多</p></li><li><p>Terragrunt &amp; TFSEC: <a href="https://terragrunt.gruntwork.io/" target="_blank" rel="noopener">Terragrunt</a> 是 Terraform 的 wrapper，很多 Terraform 的最佳使用守則都是從中而來，而且他最近也宣布的商業支援方案，讓大企業可以用起來更簡單，而 <a href="https://github.com/tfsec/tfsec" target="_blank" rel="noopener">TFSEC</a> 則是針對 Terraform 的 Policy as Code 開源工具，利用靜態分析 IaC 程式碼來找出潛藏的資安威脅，在越來越多人接納 DevSecOps 觀念的當下，類似工具在未來的重要性會越來越高</p></li><li><p>Tekton: CI/CD 市場上有比較老牌成熟的 Jenkins 和 Spinnaker 當然還有最近比較火熱的 Cloud Native 工具例如 ArgoCD, 而 Tekton 算是剛進入這個領域的新玩家，主要聚焦於 K8s，並且使用 K8s CRD 來定義 Pipeline，這讓 Pipeline 擁有 K8s 的原生功能 (例如 rollback) 之外，也可以跟既有的 K8s 工具整合在一起例如 Jenkins X 或是 ArgoCD，這樣一來就可以達成 E2E 的 CI/CD Pipeline</p></li><li><p>Trivy: 容器的 Vulnerability 掃描功能在 CI/CD Pipeline 中的重要性越來越高，在這個市場也有其他的開源工具，例如 <a href="https://github.com/docker/docker-bench-security" target="_blank" rel="noopener">Docker Bench for Security</a>, <a href="https://github.com/quay/clair" target="_blank" rel="noopener">Clair</a> 和 <a href="https://github.com/anchore/anchore-engine" target="_blank" rel="noopener">Anchore Engine</a> (文章中有些不屬於這個領域的被我移除掉了)，而 Trivy 除了掃描 Container 以外，在程式碼中使用的 Package 也會一併檢查，結合屬於同一家公司  Aqua Security 的 <a href="https://github.com/aquasecurity/kube-bench" target="_blank" rel="noopener">kube-bench</a>，就可以讓組織將 Security 更方便地融合在應用程式的開發之中</p></li><li><p>ShellCheck: 雖然有大量用來改善架構的工具，不過 Shell Script 在各種 Workflow 中依然很適合解決簡單的問題，而 ShellCheck 是 Shell Script 的靜態分析工具，可以像程式語言的 Lint 工具，找出語法有問題或是常犯的錯誤，而 ShellCheck 可以運行在 Web, Terminal 或是 CI，當然還可以整合在你最喜愛的文字編輯器中，例如 Vim, Sublime, Atom, VS Code</p></li><li><p>Pitest/Stryker: Pitest (Java) 和 Stryker (Javascript, C#, Scala) 兩個都是用來對特定語言做  Mutation Testing 的工具，Mutation Testing 透過在測試中注入錯誤來看看測試是否還是可以通過的方式來衡量測試的品質，當 Mutation 發生時，一個好的 Unit Testing 應該要失敗才對， 透過 Mutation Testing 來檢查沒有測試到或是測試不足的程式碼，藉以提高 Test Coverage</p></li><li><p>Litmus: Netflix 在 2011 年提出伴隨著 Chaos Monkey 提出 Chaos Engineering 的概念，而在 K8s 的生態系中也有很多 Chaos Engineering 的工具，例如  <a href="https://github.com/linki/chaoskube" target="_blank" rel="noopener">chaoskube</a>, <a href="https://github.com/asobti/kube-monkey" target="_blank" rel="noopener">kube-monkey</a>, <a href="https://github.com/powerfulseal/powerfulseal" target="_blank" rel="noopener">PowerfulSeal</a> 還有商用服務 <a href="https://www.gremlin.com/kubernetes/" target="_blank" rel="noopener">Gremlin</a>，而在這邊想要特別強調 <a href="https://github.com/litmuschaos/litmus" target="_blank" rel="noopener">Litmus</a>，因為他是一個成熟且易於使用的 Chaos Engineering 解決方案，Litmus 是一個輕量級的 Kubernetes Operator，裡面有 ChaosEngine, ChaosExperiment 和 ChaosResult 三個主要元件所組成，Litmus 支援細緻的測試，不只是隨機地把 Namespace 中的 Pod 給砍掉而已，而是透過 ChaosResult CRD 將結果給呈現出來，不會直接要使用者花時間去觀察測試結果</p></li></ul><h3 id="Karpenter"><a href="#Karpenter" class="headerlink" title="Karpenter"></a><a href="https://github.com/awslabs/karpenter" target="_blank" rel="noopener">Karpenter</a></h3><p>Karpenter 是以 Metric 驅動來打造的 Kubernetes Autoscaler，可以運行在任何的 K8s 叢集中，它具有高性能與擴展性，目標為自動縮放運行於 K8s 中的任何使用 <a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/autoscaling/horizontal-pod-autoscaler.md#scale-subresource" target="_blank" rel="noopener">Scale Subresource</a> 定義的資源，例如 ReplicationController 和 Deployment，Karpenter 定義了三種客製化的資源來控制 Autoscale 的行為</p><ul><li><p>HorizontalAutoscalers: 用來定義 Autoscaling 的政策，或許大家會想到 HorizontalPodAutoscaler, 不過他應該是發生在 HorizontalPodAutoscaler 被觸發之後，才去幫忙加 K8s 叢集節點的角色，除此之外 Karpenter 可以透過多種不同的資源來做 Scale，因為他深度整合 Prometheus，直接使用 promql 來計算出自己想要的閥值</p></li><li><p>MetricsProducers: 用來建立 autoscaling 所需要 Prometheus Metric，不過假如已經有既有存在的 Metric 可以用的話，就不需要再使用 MetricsProducers 另外定義</p></li><li><p>ScalableNodeGroups: 用來定義控制 K8s Node Group 的 API，因為原生的 K8s 並沒有這種抽象的概念，而 Cloud Provider 提供的 Node Group API 又跟 K8s 其實不一樣，所以使用 ScalableNodeGroups 來當作中間的溝通橋樑，不過假如有用 <a href="https://github.com/kubernetes/kops" target="_blank" rel="noopener">Kops</a> or <a href="https://github.com/kubernetes-sigs/cluster-api" target="_blank" rel="noopener">Cluster API</a> 就可以不用使用 ScalableNodeGroups</p></li></ul><h3 id="Cloud-Native-Nov-2020-Security-Whitepaper"><a href="#Cloud-Native-Nov-2020-Security-Whitepaper" class="headerlink" title="Cloud Native Nov 2020 Security Whitepaper"></a><a href="https://github.com/cncf/sig-security/blob/master/security-whitepaper/CNCF_cloud-native-security-whitepaper-Nov2020.pdf" target="_blank" rel="noopener">Cloud Native Nov 2020 Security Whitepaper</a></h3><p>一個不小心就撿到了 Cloud Native Nov 2020 的 Security Whitepaper，內容從 Cloud Native 本身的開發流程，以及部署，執行環境內的各種細節 (Compute, Storage, Access)，還有大企業比較在意的 Security Assurance 跟 Compliance 都包含在其中，有興趣的人可以下載來看看</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 56 期 - 史蒂夫和戴夫也想學的程式交易框架 — BBGO</title>
      <link href="/2020/11/24/56-program-trading/"/>
      <url>/2020/11/24/56-program-trading/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="史蒂夫和戴夫也想學的程式交易框架-—-BBGO"><a href="#史蒂夫和戴夫也想學的程式交易框架-—-BBGO" class="headerlink" title="史蒂夫和戴夫也想學的程式交易框架 — BBGO"></a><a href="https://medium.com/starbugs/%E5%8F%B2%E8%92%82%E5%A4%AB%E5%92%8C%E6%88%B4%E5%A4%AB%E4%B9%9F%E6%83%B3%E5%AD%B8%E7%9A%84%E7%A8%8B%E5%BC%8F%E4%BA%A4%E6%98%93%E6%A1%86%E6%9E%B6-bbgo-a2de02438fa7" target="_blank" rel="noopener">史蒂夫和戴夫也想學的程式交易框架 — BBGO</a></h3><p>BBGO 是一套用 Golang 開發的開源程式交易框架，它讓不會寫程式的一般使用者可以無腦地使用它來進行程式交易，而有撰寫交易程式相關經驗的人則可以使用它來運行自己喜歡的交易策略，對於程式交易有興趣的人千萬不要錯過！讀完就距離財富自由更進一步了XD</p><h2 id="星巴哥作者群開箱！"><a href="#星巴哥作者群開箱！" class="headerlink" title="星巴哥作者群開箱！"></a>星巴哥作者群開箱！</h2><p>Starbugs 星巴哥技術週刊邁入一週年的里程碑，感謝大家的支持。未來的一年星巴哥想要讓大家看到更多元的內容，提供大家更多優質的原創文章，因此最近我們邀請了幾位優質的寫作者加入 星巴哥的行列，以後在週刊上也會看到作者群撰寫的優質原創文章。</p><p>本週來介紹第四位寫作者 <strong>Jenny</strong> ！！</p><p>Jenny 畢業於台大外文系，目前任職於 PicCollage，其所發佈的 <a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">技術文章</a> 以英文為主，，而且不管是很硬的網路底層觀念技術，抑或是應用服務端的測試開發，她都有所涉略，並用平易近人的文字來說明複雜的觀念技術；很開心可以邀請她加入 Starbugs 技術專欄，讓 Starbugs 更進一步邁向國際化！</p><blockquote><p>「外文系畢業的後端工程師，認為寫扣該像寫文章一樣優雅，refactoring 是淨化心靈的過程。目前靠 Ruby 吃飯，也用新歡 Elixir 寫過專案幾許。文章主題看心情決定，TDD，concurrency，cache 是最近研究的題目。座右銘有幾許，其一是：我不寫 CSS。」 - by Jenny</p></blockquote><h3 id="Security-SSL-—-HTTPS-背後的功臣"><a href="#Security-SSL-—-HTTPS-背後的功臣" class="headerlink" title="[Security] SSL — HTTPS 背後的功臣"></a><a href="https://medium.com/starbugs/security-ssl-https-%E8%83%8C%E5%BE%8C%E7%9A%84%E5%8A%9F%E8%87%A3-df714e4df77b" target="_blank" rel="noopener">[Security] SSL — HTTPS 背後的功臣</a></h3><p>本篇文章會從 SSL 基礎概念談起，介紹 SSL 背後原理、相關名詞介紹（包含 TLS, CA, chain of trust, OpenSSL）、 OpenSSL 實際操作、與 SSL 憑證種類。開始吧！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="10-Inspiring-Ideas-for-Your-Next-Front-End-Project"><a href="#10-Inspiring-Ideas-for-Your-Next-Front-End-Project" class="headerlink" title="10 Inspiring Ideas for Your Next Front-End Project"></a><a href="https://dev.to/simonholdorf/10-inspiring-ideas-for-your-next-front-end-project-11bh" target="_blank" rel="noopener">10 Inspiring Ideas for Your Next Front-End Project</a></h3><p>登愣~~好像很久沒有分享 Idea 類的文章了，作者列出了十個非常非常有趣（而且很神）的幾個畫面，其中最讓我驚豔的就是會把你滑鼠偷走的小人和用 CSS 刻成那唯妙唯俏的照片了 😂</p><h3 id="Avoiding-impossible-state-with-TypeScript"><a href="#Avoiding-impossible-state-with-TypeScript" class="headerlink" title="Avoiding impossible state with TypeScript"></a><a href="https://dorshinar.me/avoid-impossible-state-with-typescript?ref=hackernoon.com" target="_blank" rel="noopener">Avoiding impossible state with TypeScript</a></h3><p>在 JavaScript 中，因為沒有明確的類型以及介面的定義，常常會有傳入的值不符合函式需求的狀況產生，即使你曉得，你也沒辦法讓你團隊的所有人在看到該函式的時候都馬上知道如何使用，而本篇文章使用 React 組件的範例，介紹該如何利用 TypeScript 來解決此一問題。</p><h3 id="CSS-GUIDE-The-Art-of-Naming-Save-hrs-for-debugging"><a href="#CSS-GUIDE-The-Art-of-Naming-Save-hrs-for-debugging" class="headerlink" title="CSS GUIDE: The Art of Naming (Save hrs for debugging)"></a><a href="https://blog.rahulism.co/css-guide-the-art-of-naming?ref=hackernoon.com" target="_blank" rel="noopener">CSS GUIDE: The Art of Naming (Save hrs for debugging)</a></h3><p>是一篇滿有趣的命名議題，在使用 JavaScript 命名時習慣會使用駝峰式，但如果是 CSS 就會是在各個單字中間用 <code>-</code> 或 <code>__</code> 連結，所以有些人員看見 class 名稱為 <code>siteNavigation</code> 時，就會想把它改為 <code>site-navigation</code>，但是這麼一來就有可能會導致有些操作 DOM 的 JavaScript 出現問題，面對這個狀況，本篇的作者如何解決呢？</p><h2 id="React-JS"><a href="#React-JS" class="headerlink" title="React.JS"></a>React.JS</h2><h3 id="6-Reasons-to-Use-React-Hooks-Instead-of-Classes"><a href="#6-Reasons-to-Use-React-Hooks-Instead-of-Classes" class="headerlink" title="6 Reasons to Use React Hooks Instead of Classes"></a><a href="https://link.medium.com/SuBHauTy9ab" target="_blank" rel="noopener">6 Reasons to Use React Hooks Instead of Classes</a></h3><p>React Hook 已經出來好一段時間了，如果還不知道 Hook 好用在哪裡的話，可以參考參考這篇，跟以往 Class based 的寫法比起來真的簡潔很多</p><h3 id="Having-Fun-With-React’s-Renderer"><a href="#Having-Fun-With-React’s-Renderer" class="headerlink" title="Having Fun With React’s Renderer"></a><a href="https://link.medium.com/W2IpI25wDbb" target="_blank" rel="noopener">Having Fun With React’s Renderer</a></h3><p>這篇文章分析了 React 的 parent 跟 children 之間在 render、useEffect 還有 cleanUp 時的執行順序，而且他的圖很可愛XD，如果對 React Hook 已經有基本的熟悉度，想更進階一點可以看看這篇</p><h3 id="Creating-CLI-with-React"><a href="#Creating-CLI-with-React" class="headerlink" title="Creating CLI with React"></a><a href="https://link.medium.com/6K0VccmxDbb" target="_blank" rel="noopener">Creating CLI with React</a></h3><p><code>ink</code> 是一個基於 React renderer 的 library，他讓你可以用幾乎跟 React 一樣的語法來寫 CLI 工具，而且因為 Component 可以是 Stateful 的，所以可以做的變化也多了很多</p><h2 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h2><p>做好 SEO 的方法百百種，最簡單的方法就是砸錢進去，透過 <a href="https://ads.google.com/intl/zh-TW_tw/home/" target="_blank" rel="noopener">Google Ads</a> 就可以瞬間讓自己的網站排名到最前面，但這真的是個好的做法嗎？可能短期的企劃案很適合畢竟要達到短期高曝光的效果，但畢竟不是每個人都這麼有錢，所以接下來就來推薦幾篇可以幫助網站的 SEO 方法吧！</p><h3 id="Progressive-Web-App"><a href="#Progressive-Web-App" class="headerlink" title="Progressive Web App"></a><a href="https://blog.techbridge.cc/2018/10/13/pwa-in-action/" target="_blank" rel="noopener">Progressive Web App</a></h3><p>如果說 Google Ads 是有錢人在玩的，那 PWA 肯定就是給市井小民在玩的，由於我們脫離不了 Google 的掌心，因此最快能達到 SEO 的效益不外乎就是利用 Google 自家的服務，PWA 就是個很好的方法，現在很多新聞網都是利用這個技術達到讓自家的新聞可以排在搜尋排行榜的前三名，到底 PWA 要怎麼設計呢？相信大家看完這篇文章就知道了。</p><h3 id="Semantic-Elements"><a href="#Semantic-Elements" class="headerlink" title="Semantic Elements"></a><a href="https://www.w3schools.com/html/html5_semantic_elements.asp" target="_blank" rel="noopener">Semantic Elements</a></h3><p>語意化標籤是個非常重要的觀念，由於現在前端切版越來越方便，透過 <code>flexbox</code> 或 <code>grid</code> 就可以產生各式各樣的樣板出來，也因為這樣的便利性讓越來越多的前端工程師只專注於 <code>&lt;div&gt;</code> 這個標籤而忽略了其他的標籤，比較新手的前端工程師可能只會覺得這些語意化標籤只是多帶幾個預設樣式進去而已，但其實不只這樣，這些語意化標籤可以大大的讓你的網站 SEO 加分，未來開發網站時不妨可以多加些語意化標籤進去，除了方便開發者閱讀之外同時也增加了 SEO 真是一舉兩得阿XD</p><h3 id="Breadcrumbs麵包屑"><a href="#Breadcrumbs麵包屑" class="headerlink" title="Breadcrumbs麵包屑"></a><a href="https://www.awoo.com.tw/blog/thankyou_breadcrumb_seo/" target="_blank" rel="noopener">Breadcrumbs麵包屑</a></h3><p>麵包屑的設計可以讓 SEO 大大的加分，自所以可以加分的原因就是因為當 Google 在爬蟲的時候，如果有麵包屑的設計就可以更快的知道上一頁是哪裡，至少知道網站整體的操作以及進入流程，這會讓 Google 在進行爬蟲的時候可以更快的知道要如何製作索引讓頁面可以更快速的被抓取出來，尤其是電商很常出現這樣的設計就是為了讓 SEO 更好。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="k0s-—-Yet-Another-Kubernetes-Distro"><a href="#k0s-—-Yet-Another-Kubernetes-Distro" class="headerlink" title="k0s — Yet Another Kubernetes Distro !!"></a><a href="https://saiyampathak.medium.com/k0s-yet-another-kubernetes-distro-7201ea425165" target="_blank" rel="noopener">k0s — Yet Another Kubernetes Distro !!</a></h3><p>k0s 是上週剛發佈的 K8s Distribution, 就像 Ubuntu, CentOS 是 Linux Distribution 的概念一樣，K8s 果然正在往越來越成熟穩定的方向前進中；而此 Distribution 最大的特色在於他只有一個 164 MB 的 Binray 檔案，並且跟作業系統沒有任何的相依性，不管在 Master 或是 Worker 節點都只要運行他即可，聽起來要部署他真的好方便！</p><h3 id="Kyverno-a-New-CNCF-Sandbox-Project-Offers-Kubernetes-Native-Policy-Management"><a href="#Kyverno-a-New-CNCF-Sandbox-Project-Offers-Kubernetes-Native-Policy-Management" class="headerlink" title="Kyverno, a New CNCF Sandbox Project, Offers Kubernetes-Native Policy Management"></a><a href="https://thenewstack.io/kyverno-a-new-cncf-sandbox-project-offers-kubernetes-native-policy-management/" target="_blank" rel="noopener">Kyverno, a New CNCF Sandbox Project, Offers Kubernetes-Native Policy Management</a></h3><p>Policy as Code 又多了新的生力軍 Kyverno 加入 CNCF Sandbox，跟最近開始比較多人提到的 OPA (Open Policy Agent) 最大的不同在於它使用 YAML 或是 JSON 格式的檔案來定義 Policy，而 OPA 需要使用一個叫做 OPA 的語言來達成，感覺應該會有各自的優缺點，不過有競爭就是好事，期待越來越多社群資源投入這個領域</p><h3 id="Introducing-another-free-CA-as-an-alternative-to-Let’s-Encrypt"><a href="#Introducing-another-free-CA-as-an-alternative-to-Let’s-Encrypt" class="headerlink" title="Introducing another free CA as an alternative to Let’s Encrypt"></a><a href="https://scotthelme.co.uk/introducing-another-free-ca-as-an-alternative-to-lets-encrypt/" target="_blank" rel="noopener">Introducing another free CA as an alternative to Let’s Encrypt</a></h3><p>以往提到免費的 TLS Certificate 解決方案，大家腦海中馬上浮現的名稱應該都是 Let’s Enctypt，這幾天看到另外一個叫做 ZeroSSL 也想要做一樣的事情，一樣可以提供 90 天的免費 Certificate，提供給大家另外一個選擇性</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 55 期 - 當我踏出了第一步，就前進了一步</title>
      <link href="/2020/11/17/55-when-you-start-working-you-will-move/"/>
      <url>/2020/11/17/55-when-you-start-working-you-will-move/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="打造舒適的雙系統開發環境-Windows-Mac-雙刀流"><a href="#打造舒適的雙系統開發環境-Windows-Mac-雙刀流" class="headerlink" title="打造舒適的雙系統開發環境 Windows + Mac 雙刀流"></a><a href="https://medium.com/starbugs/%E6%89%93%E9%80%A0%E8%88%92%E9%81%A9%E7%9A%84%E9%9B%99%E7%B3%BB%E7%B5%B1%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83-windows-mac-%E9%9B%99%E5%88%80%E6%B5%81-6127ce8583a" target="_blank" rel="noopener">打造舒適的雙系統開發環境 Windows + Mac 雙刀流</a></h3><p>以前我剛學程式的時候，很多人建議我直接用 Mac 或是 Linux，而我最後也選擇了 Mac。直到近幾年，大家紛紛說 Windows 已經跟以前有很大的不同，許多人也開始推薦起 Windows 做為開發環境。我想要來試試看，Windows 是否還是像以前那麼雷。我們就一起開始探險吧！</p><h2 id="星巴哥作者群開箱！"><a href="#星巴哥作者群開箱！" class="headerlink" title="星巴哥作者群開箱！"></a>星巴哥作者群開箱！</h2><p>Starbugs 星巴哥技術週刊邁入一週年的里程碑，感謝大家的支持。未來的一年星巴哥想要讓大家看到更多元的內容，提供大家更多優質的原創文章，因此最近我們邀請了幾位優質的寫作者加入 星巴哥的行列，以後在週刊上也會看到作者群撰寫的優質原創文章。</p><p>本週來介紹第三位寫作者 <strong>Airwaves</strong> ！！</p><p>Airwaves 你可能沒有聽過，其實他就是是著名的前端部落格 <a href="https://medium.com/%E6%89%8B%E5%AF%AB%E7%AD%86%E8%A8%98" target="_blank" rel="noopener">手寫筆記</a> 的作者。著有許多知名的 React.js 的文章。Airwaves 對於程式的研究總是會去看如何原始碼了解如何實作，並且自己做一個，跟他交流覺得獲益良多，很高興能邀請他參加 Starbugs 技術專欄。</p><blockquote><p>「半前年因為開始研究如何造輪子，誤打誤撞進入了前端這個世界，成為了一名現役的前端工程師。平時熱愛鑽研前端技術與分享技術文章，期許自己未來也能夠為開源貢獻一份心力。」- by Airwaves </p></blockquote><h3 id="Styled-System-從-Primer-看-GitHub-如何建構-design-system"><a href="#Styled-System-從-Primer-看-GitHub-如何建構-design-system" class="headerlink" title="Styled System | 從 Primer 看 GitHub 如何建構 design system"></a><a href="https://medium.com/starbugs/styled-system-is-the-path-to-primer-99b8d7cdecce" target="_blank" rel="noopener">Styled System | 從 Primer 看 GitHub 如何建構 design system</a></h3><p>為什麼會知道 Styled System 這個套件，是因為 GitHub 的 designer director — Diana Mounter 在 React Conf AU 2020 演講的題目「Themeability is the path to dark mode」認識了這個工具。Diana 在演講中提到 GitHub 建構了一套 design system 名為 Primer，Primer 主要是由 Styled Components 與 Styled System 所構成。聽到這邊，你應該有點興趣，GitHub 是怎麼用這兩個套件建構 Primer 的。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="How-to-Build-an-E2E-Testing-Framework-Using-Design-Patterns"><a href="#How-to-Build-an-E2E-Testing-Framework-Using-Design-Patterns" class="headerlink" title="How to Build an E2E Testing Framework Using Design Patterns"></a><a href="https://www.freecodecamp.org/news/build-an-e2e-test-framework-with-design-patterns/" target="_blank" rel="noopener">How to Build an E2E Testing Framework Using Design Patterns</a></h3><p>E2E 需要與畫面上的各種 DOM 做互動，並觀察 DOM 呈現的結果是否正確，這是一件非常不簡單的事情，更別說是還得考慮如何維護這些測試案例的時候，一起來看看作者是如何將設計模式導入到 E2E 的測試案例中，讓測試案例看起來更簡單吧！</p><h3 id="Vue-3-0-Ref-sugar-提案真的是自寻死路吗？"><a href="#Vue-3-0-Ref-sugar-提案真的是自寻死路吗？" class="headerlink" title="Vue 3.0 Ref-sugar 提案真的是自寻死路吗？"></a><a href="https://juejin.im/post/6894175515515551752" target="_blank" rel="noopener">Vue 3.0 Ref-sugar 提案真的是自寻死路吗？</a></h3><p>Vue 在進入 3.0 之後有兩個提案引起了許多開發者的注意，這兩個分別是 script-setup 和 ref-sugar，一起到文章裡看看它們寫起來到底有什麼不一樣，以及為什麼 ref-sugar 那麼不討喜吧！</p><h3 id="7-code-smells-in-your-React-components"><a href="#7-code-smells-in-your-React-components" class="headerlink" title="7 code smells in your React components"></a><a href="https://dev.to/awnton/7-code-smells-in-react-components-5f66" target="_blank" rel="noopener">7 code smells in your React components</a></h3><p>雖然 React 的官方文件中有講解了幾個設計 Component 的原則，但是在實務上開發的時候總是很難知道如何才是更好的實踐方法，如果各位也還搞不清楚如何寫出健康的 Component，不如先看看有沒有讓人越想越不對勁的設計吧！</p><h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><h3 id="Vue-3-is-coming-—-what-to-expect-and-how-to-prepare"><a href="#Vue-3-is-coming-—-what-to-expect-and-how-to-prepare" class="headerlink" title="Vue 3 is coming — what to expect and how to prepare"></a><a href="https://link.medium.com/bSLFKayGdbb" target="_blank" rel="noopener">Vue 3 is coming — what to expect and how to prepare</a></h3><p>Vue 3 已經發佈將近兩個月了，但我也是到看了這篇文章才知道 Vue 3 有哪些 feature，不然平常太忙了根本沒時間關心（真是慚愧XD）。所以如果你也是大忙人但又想認識認識 Vue 3 的話，就直接看這篇吧！</p><h3 id="Migration-Plan-to-the-All-New-Vue-JS-3"><a href="#Migration-Plan-to-the-All-New-Vue-JS-3" class="headerlink" title="Migration Plan to the All New Vue JS 3"></a><a href="https://link.medium.com/Tq7JkdqYqbb" target="_blank" rel="noopener">Migration Plan to the All New Vue JS 3</a></h3><p>雖然我現在沒在寫 Vue，但根據之前用其他語言、框架的經驗，要 migrate 到新版本都需要好一段時間才能適應，更不用說有時還會有 breaking change 要修，所以這邊推薦一篇從 Vue 2 migrate 到 Vue 3 的總整理，有在寫 Vue 的各位快快收藏起來～</p><h3 id="Vue-js-Performance-Archives-Vue-js-Tutorials"><a href="#Vue-js-Performance-Archives-Vue-js-Tutorials" class="headerlink" title="Vue.js Performance Archives - Vue.js Tutorials"></a><a href="https://vueschool.io/articles/series/vue-js-performance/" target="_blank" rel="noopener">Vue.js Performance Archives - Vue.js Tutorials</a></h3><p>這一系列是 Vue School 網站上在講 Vue 效能調校的文章，內容包括 Lazy Loading、Prefetching、Browser Cache 等等提升效能的方法，想讓自己的 Vue 實力更進階就靠這一系列了</p><h2 id="React-js"><a href="#React-js" class="headerlink" title="React.js"></a>React.js</h2><h3 id="Chakra-UI"><a href="#Chakra-UI" class="headerlink" title="Chakra-UI"></a><a href="https://chakra-ui.com/docs/getting-started" target="_blank" rel="noopener">Chakra-UI</a></h3><p>最近公司正在嘗試使用新的 React UI Library，就物色到這個 UI Library 了，只要善用 Chakra UI Layout 中的 <code>Box</code> 以及 <code>Flex</code> 就可以拼出各式各樣的區塊了，而且以前 React 最讓人困惑到底 <strong>style</strong> 的部分要自己另外寫一個 <code>scss</code> 或 <code>less</code> 還是要用 <code>styled-components</code> 呢？在 Chakra 的世界中這些都不用考慮直接用 <code>props</code> 解決了，我想這應該是我目前看過最彈性的 UI Library 了吧 XD</p><h3 id="react-use"><a href="#react-use" class="headerlink" title="react-use"></a><a href="https://github.com/streamich/react-use" target="_blank" rel="noopener">react-use</a></h3><p>現在進入了大 hook 時代，身為一個懶到極致的工程師，能用別人造好的輪子就盡量用，真的不能用就跟主管說做不到（誤，這邊就要來好好推薦這個非常好用的套件，裡面包含了各式各樣的 <code>hook function</code> 讓你在開發上一定可以更加迅速且便利！</p><h3 id="react-infinite-scroll"><a href="#react-infinite-scroll" class="headerlink" title="react-infinite-scroll"></a><a href="https://github.com/ankeetmaini/react-infinite-scroll-component#readme" target="_blank" rel="noopener">react-infinite-scroll</a></h3><p>相信大家應該很常用電商 APP，在使用的過程中應該都會發現滑動到底部的時候會自動去取得下一頁的資料，這部分的做法有兩種：一種是土法煉鋼監聽 <code>scrollListener</code> 事件並且利用 <code>getboundingclientrect()</code> 來取得 <code>bottom</code> 的值，然後再利用 <code>bottom</code> 是否小於 <code>window.innerHeight()</code> 的方式來判斷是否到底部了，但這段過程真的太麻煩了，這時候如果有別人造好的輪子當然要好好的利用一番，所以就來推薦 <strong>react-infinite-scroll</strong> 這個套件了，而且還可以設定 <code>threshold</code> 來決定要在哪個位置開始 fetch 資料，不一定要在底部才開始 fetch 是不是相當便利且彈性呢～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Terraform-on-AWS-Multi-Account-Setup-and-Other-Advanced-Tips"><a href="#Terraform-on-AWS-Multi-Account-Setup-and-Other-Advanced-Tips" class="headerlink" title="Terraform on AWS: Multi-Account Setup and Other Advanced Tips"></a><a href="https://thenewstack.io/terraform-on-aws-multi-account-setup-and-other-advanced-tips/" target="_blank" rel="noopener">Terraform on AWS: Multi-Account Setup and Other Advanced Tips</a></h3><p>AWS 多重帳號是官方所推薦的管理方式，官方本身也釋出一些服務來幫助使用者達成此目標 (AWS Organization, AWS Control Tower)，而這篇文章嘗試介紹如何使用 Terraform 來管理多重 AWS 帳號，從設定 Provider 來 Assume Role 要怎麼做比較好開始談起，然後在提到 Module 和 Environment 的好處…</p><h3 id="InfluxDB-2-0-Open-Source-is-Generally-Available"><a href="#InfluxDB-2-0-Open-Source-is-Generally-Available" class="headerlink" title="InfluxDB 2.0 Open Source is Generally Available"></a><a href="https://www.influxdata.com/blog/influxdb-2-0-open-source-is-generally-available/" target="_blank" rel="noopener">InfluxDB 2.0 Open Source is Generally Available</a></h3><p> InfluxDB Open Source 2.0 總算在最近 GA 了！假如沒有社群的協助應該無法走到這一步，不過這不是結束，而是一個新的開始！</p><ul><li>新版本讓使用者可以簡易部署並確保安全性</li><li>資料的探索和分析也將邁向下一個世代</li><li>多了專門用來處理資料的 Flux 語言</li><li>來自各方的資料可以更完善的整合再一起</li><li>地理融合時間的資料可以使用 Flux 做搜尋</li><li>可以在背景處理需要計算的 Metric, 取樣…等</li><li>即時的告警和通知</li><li>提供共用的 API 給開發者使用</li><li>利用 InfluxDB Stacks 和 Templates 來達成 GitOps 的部署管理 Workflow</li></ul><h3 id="Red-Team-KubeCTL-Cheat-Sheet"><a href="#Red-Team-KubeCTL-Cheat-Sheet" class="headerlink" title="Red Team KubeCTL Cheat Sheet"></a><a href="https://github.com/lightspin-tech/red-kube" target="_blank" rel="noopener">Red Team KubeCTL Cheat Sheet</a></h3><p>red-kube 是各種攻擊 Kubernetes 方式的 GitHub Repository，作者有警告別拿不屬於自己的 K8S Cluster 來嘗試XD 內容包含提權，Credential 存取…等</p><h3 id="Devops-Environment-in-Docker"><a href="#Devops-Environment-in-Docker" class="headerlink" title="Devops Environment in Docker"></a><a href="https://github.com/nmarus/docker-devops-box" target="_blank" rel="noopener">Devops Environment in Docker</a></h3><p>這個 Repository 將各種 DevOps 常用工具打包成一個 Docker Image，例如：ansible, consul, packer, terraform…等，讓 DevOps Engineer 不用安裝一堆東西，只要運行這個 Docker Container 就可以開始上工了！雖然每個團隊需要的東西都不盡相同，但可以利用這個方式去建立屬於自己的！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 54 期 - 我絕不會讓在場的任何一個工程師加班！</title>
      <link href="/2020/11/10/54-I-am-never-let-any-engineer-work-overtime/"/>
      <url>/2020/11/10/54-I-am-never-let-any-engineer-work-overtime/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Vue-用-testing-library-vue-把-Vue-的單元測試一網打盡-feat-React"><a href="#Vue-用-testing-library-vue-把-Vue-的單元測試一網打盡-feat-React" class="headerlink" title="Vue | 用 @testing-library/vue 把 Vue 的單元測試一網打盡 feat. React"></a><a href="https://medium.com/starbugs/vue-%E7%94%A8-testing-library-vue-%E6%8A%8A-vue-%E7%9A%84%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E4%B8%80%E7%B6%B2%E6%89%93%E7%9B%A1-feat-react-875457aa24a0" target="_blank" rel="noopener">Vue | 用 @testing-library/vue 把 Vue 的單元測試一網打盡 feat. React</a></h3><p>這禮拜專欄要分享的是一套可能是在 Vue 裡非主流（？的單元測試框架 testing-library！雖然它不是官方所維護的套件，但 Vue 官網還是將它默默地擺上去，而且除了 Vue 之外，它還為其他 React、Angular 等 8 個左右的框架統一測試的介面，還不趕快來一起跳坑嗎？</p><h2 id="星巴哥作者群開箱！"><a href="#星巴哥作者群開箱！" class="headerlink" title="星巴哥作者群開箱！"></a>星巴哥作者群開箱！</h2><p>Starbugs 星巴哥技術週刊邁入一週年的里程碑，感謝大家的支持。未來的一年星巴哥想要讓大家看到更多元的內容，提供大家更多優質的原創文章，因此最近我們邀請了幾位優質的寫作者加入 星巴哥的行列，以後在週刊上也會看到作者群撰寫的優質原創文章。</p><p>本週來介紹第二位寫作者 <strong>莫力全 Kyle Mo</strong> ！！</p><p>「剛畢業的社會菜雞，web 技術狂熱者，對自己的要求很簡單，希望每個月回去看自己的 code 都會覺得是糞 code，代表自己又更進步了。目標是成為一個技術分享者，或是能對技術圈有所貢獻，用技術來改變我們的生活。」</p><p>本週來介紹一下 Kyle Mo 的「讓任務排隊吧」系列，從 message queue 的基本概念到 RabbutMQ 的介紹，最後一篇再用 RabbutMQ 打造一個應用架構！那麼 u 質的內容不讀一下嗎？</p><h3 id="基礎觀念系列-讓任務排隊吧：Message-Queue-—-1"><a href="#基礎觀念系列-讓任務排隊吧：Message-Queue-—-1" class="headerlink" title="[基礎觀念系列] 讓任務排隊吧：Message Queue — (1)"></a><a href="https://medium.com/starbugs/%E8%AE%93%E4%BB%BB%E5%8B%99%E6%8E%92%E9%9A%8A%E5%90%A7-message-queue-1-de949e274c43" target="_blank" rel="noopener">[基礎觀念系列] 讓任務排隊吧：Message Queue — (1)</a></h3><p>透過一個簡單的小範例示範 message queue 在現實中可能的應用，不過要再三強調的是這個範例在現實中不太可能會這樣寫，現實中還需要注意很多錯誤處理、效能，甚至要注意 queue 會不會爆掉等問題，這個範例純粹是希望跟我ㄧ樣的初學者可以了解 message queue 可能的應用方向。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="How-to-Add-Localization-to-Vue-js-App-with-vue-i18n-and-Localazy"><a href="#How-to-Add-Localization-to-Vue-js-App-with-vue-i18n-and-Localazy" class="headerlink" title="How to Add Localization to Vue.js App with vue-i18n and Localazy"></a><a href="https://hackernoon.com/how-to-add-localization-to-vuejs-app-with-vue-i18n-and-localazy-71t3whc" target="_blank" rel="noopener">How to Add Localization to Vue.js App with vue-i18n and Localazy</a></h3><p>為網站設置多國語系一直是一項很煩瑣的工作，尤其是語言越多越麻煩，而本篇文章用 Vue 介紹了 Localazy，讓它自動為你輸出各個語言的語系檔！</p><h3 id="JavaScript-讓你的瀏覽器公威囉"><a href="#JavaScript-讓你的瀏覽器公威囉" class="headerlink" title="JavaScript - 讓你的瀏覽器公威囉!"></a><a href="https://ithelp.ithome.com.tw/articles/10254162" target="_blank" rel="noopener">JavaScript - 讓你的瀏覽器公威囉!</a></h3><p>當初在做類似的需求的時候也才發現原來讓瀏覽器說話那麼簡單 😂，本篇文章仔細的介紹了一些常見的原生 API，非常簡潔易懂。</p><h3 id="Your-website-sucks-And-I’ll-tell-you-why-ROUND-2-⚡️⚡️"><a href="#Your-website-sucks-And-I’ll-tell-you-why-ROUND-2-⚡️⚡️" class="headerlink" title="Your website sucks! And I’ll tell you why (ROUND 2) ⚡️⚡️"></a><a href="https://dev.to/toktoktwan/your-website-sucks-and-i-ll-tell-you-why-round-2-518o" target="_blank" rel="noopener">Your website sucks! And I’ll tell you why (ROUND 2) ⚡️⚡️</a></h3><p>這篇貼文非常有趣，作者讓各位在留言底下貼上自己的網站網址，然後會一一點出這些網站有哪些問題以及優點，並且會解釋得非常詳細！有人想要挑戰看看嗎？😂</p><h2 id="軟體開發"><a href="#軟體開發" class="headerlink" title="軟體開發"></a>軟體開發</h2><h3 id="矽谷資深軟體工程師後疫情時代面試心得-Facebook-Robinhood-Coinbase-DoorDash"><a href="#矽谷資深軟體工程師後疫情時代面試心得-Facebook-Robinhood-Coinbase-DoorDash" class="headerlink" title="矽谷資深軟體工程師後疫情時代面試心得 Facebook/Robinhood/Coinbase/DoorDash"></a><a href="https://pttweb.tw/s/1hevjX" target="_blank" rel="noopener">矽谷資深軟體工程師後疫情時代面試心得 Facebook/Robinhood/Coinbase/DoorDash</a></h3><p>2020 年是個動蕩不安的一年，因為疫情的關係，很多公司都在年中進行了規模不小的裁員，包含大家耳熟能詳的 Airbnb、Uber、Lyft、Yelp、LinkedIn、Mozilla、Intuit、Salesforce 以及 WeWork 等等族繁不及備載。這對於在這段期間要找工作的絕對不是件好事，因為很多人被裁員，意味著同樣的職缺會有更多競爭者。- 引用自原文</p><h3 id="TELNET封包實戰-什麼是TELNET"><a href="#TELNET封包實戰-什麼是TELNET" class="headerlink" title="TELNET封包實戰. 什麼是TELNET?"></a><a href="https://medium.com/@gordonfang_85054/telnet%E5%B0%81%E5%8C%85%E5%AF%A6%E6%88%B0-e9306216fba0" target="_blank" rel="noopener">TELNET封包實戰. 什麼是TELNET?</a></h3><p>Telnet 封包實戰，用一篇文章，搞懂 Telnet 是什麼。</p><h3 id="MySQL-使用-update-all-amp-subquery-可能會鎖住全表"><a href="#MySQL-使用-update-all-amp-subquery-可能會鎖住全表" class="headerlink" title="MySQL 使用 update_all &amp; subquery 可能會鎖住全表"></a><a href="https://medium.com/4ing-%E7%9A%84%E8%88%AA%E6%B5%B7%E6%97%A5%E8%AA%8C/441b3a8e92b6" target="_blank" rel="noopener">MySQL 使用 update_all &amp; subquery 可能會鎖住全表</a></h3><p>Mysql 5.6 鎖表的除錯過程，我覺得滿精采的，5.6 真的滿雷的，至少請升到 5.7。</p><h2 id="系統設計"><a href="#系統設計" class="headerlink" title="系統設計"></a>系統設計</h2><h3 id="系統設計-101—大型系統的演進（上）"><a href="#系統設計-101—大型系統的演進（上）" class="headerlink" title="系統設計 101—大型系統的演進（上）"></a><a href="https://link.medium.com/5X9y3x3Debb" target="_blank" rel="noopener">系統設計 101—大型系統的演進（上）</a></h3><p>為什麼要學習系統設計、系統設計又是在設計些什麼？這篇文章從擴展性以及可用性的觀點切入，講解一個大型系統中的每個部分分別在做什麼，很適合新手讀的一篇文章～</p><h3 id="Campaign-Management-System-Design"><a href="#Campaign-Management-System-Design" class="headerlink" title="Campaign Management System Design"></a><a href="https://link.medium.com/SupiUe4Xdbb" target="_blank" rel="noopener">Campaign Management System Design</a></h3><p>事情是這樣的，有一家公司專門在舉辦各種不同的票選活動，他們打算打造一個票選管理系統，透過 Email 通知使用者（可能有兩千萬人）接下來有什麼票選活動，如果是你，你會想怎麼設計呢？</p><h3 id="You-Are-Not-Google"><a href="#You-Are-Not-Google" class="headerlink" title="You Are Not Google"></a><a href="https://link.medium.com/oiqvweZXdbb" target="_blank" rel="noopener">You Are Not Google</a></h3><p>在做系統設計或是技術選型時，如果沒有足夠的經驗，很容易就會掉進「XXX 公司也是這樣做的」的誤區。譬如說「Google 都是用 Hadoop 在分析資料耶，我們公司說不定有天資料也會大到那個程度，所以我們應該也用 Hadoop」或是「聽說 Discord 換到 Rust 之後省了很多伺服器耶，那我們一開始就要用 Rust 開發」這類的想法</p><p>但實際上你公司的資料量可能一輩子都無法達到 Google 的百分之一，伺服器數量也遠遠低於 Discord，省個 30% 可能每年只省三千塊，所以千萬不能盲目跟風，仔細評估需求之後再進行選擇才是最適合自己的</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Managing-my-personal-server-in-2020"><a href="#Managing-my-personal-server-in-2020" class="headerlink" title="Managing my personal server in 2020"></a><a href="https://github.com/erebe/personal-server" target="_blank" rel="noopener">Managing my personal server in 2020</a></h3><p>在 2020 當今要如何管理一台架設於自己居家的個人伺服器呢？作者將所有需要做的事情給鉅細彌遺地整理在這個 GitHub Repository 中，從 Secrets 加密方式，自動化管理 DNS，Kubernetes k3s 的設定方式，如何申請 Let’s Encrypt TLS Certificate，部署郵件服務的步驟，如何安裝 Nextcloud 來充當個人的 Cloud，備份管理方式，使用 Wireguard 來建立 Private Network，WsTunnel 來通過防火牆，並且註冊 Raspberry Pi 到 K3s Cluster 中！而且遵守幾個原則 1) 簡單管理，部署和更新 2) 全部的步驟都需要 Git Repository 中 3) 盡可能自動化且使用免費的服務 4) 以相同的方式打包和部署系統應用程式跟自己的相關專案</p><h3 id="Top-Four-Ways-to-Visualize-Traffic-Between-Microservices-in-Kubernetes"><a href="#Top-Four-Ways-to-Visualize-Traffic-Between-Microservices-in-Kubernetes" class="headerlink" title="Top Four Ways to Visualize Traffic Between Microservices in Kubernetes"></a><a href="https://blog.alcide.io/top-four-ways-to-visualize-traffic-between-microservices-in-kubernetes" target="_blank" rel="noopener">Top Four Ways to Visualize Traffic Between Microservices in Kubernetes</a></h3><p>微服務亂糟糟的網路該如何方便查找問題呢？這篇文章推薦了幾種可以把位於 K8S 內微服務間網路給視覺化的幾種工具，讓人類可以用更快更有效率的方式來了解微服務間的網路封包是如何傳送的</p><ul><li>Istio and Kiali</li><li>Cilium and Hubble</li><li>Weave Scope</li><li>Alcide</li></ul><h3 id="Making-Terraform-Provider-Development-More-Accessible"><a href="#Making-Terraform-Provider-Development-More-Accessible" class="headerlink" title="Making Terraform Provider Development More Accessible"></a><a href="https://www.hashicorp.com/blog/making-terraform-provider-development-more-accessible" target="_blank" rel="noopener">Making Terraform Provider Development More Accessible</a></h3><p>大家應該都還記得 HashiCorp 從 0.11 升級到 0.12 給整個生態圈帶來的影響，很多的 Provider 都需要更新，Terraform 的寫法也或多或少都需要更改，所以當初升級的時候其實整個社群滿動盪的，而這次是 Prodiver 本身的 Framework 準備要大改版了… 大家都知道 Terraform Provider 的生態系越來越大，從 2014 第一個 Provider 發佈至今，已經有超過 1900 個 Provider 被撰寫過，Terraform Provider 讓許多事情成為可能，例如從定義重要的服務架構到訂購 Pizza 都可以透過它來達成，而這些都是透過六年前所定義的 Framework 所開發出來的，而生態系越龐大要改動其實也就越難，因此開發團隊做了很多的努力，從過去的經驗中學習，盡力讓這次更新的影響可以降到最低，首先是為 Terraform Plugin Protocol 佈新的 Go Libraries，並且發布 terraform-plugin-mux 讓 Provider 開發者可以不用一次升級所有的資源，只要搭配使用最新版的 Terraform Plugin SDK 就可以達成這個目標</p><h3 id="7-1-1版以前的Android-裝置2021年9月起將不支援Let’s-Encrypt憑證"><a href="#7-1-1版以前的Android-裝置2021年9月起將不支援Let’s-Encrypt憑證" class="headerlink" title="7.1.1版以前的Android 裝置2021年9月起將不支援Let’s Encrypt憑證"></a><a href="https://www.ithome.com.tw/news/140991" target="_blank" rel="noopener">7.1.1版以前的Android 裝置2021年9月起將不支援Let’s Encrypt憑證</a></h3><p>Let’s Encrypt 警告手機跑Android 7.1.1版的用戶，明年9月1日起有約三成 Android裝置會出現憑證錯誤問題，詳細原因可以參考文章內容，不過假如自已的對外公開服務有使用 Let’s Encrypt TLS 憑證的話，就要記得提早因應</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 53 期 - Starbugs 技術週刊一歲囉！</title>
      <link href="/2020/11/03/53-happy-birthday-to-starbugs/"/>
      <url>/2020/11/03/53-happy-birthday-to-starbugs/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="從-LLVM-IR-來看編譯器最佳化都在做些什麼"><a href="#從-LLVM-IR-來看編譯器最佳化都在做些什麼" class="headerlink" title="從 LLVM IR 來看編譯器最佳化都在做些什麼"></a><a href="https://medium.com/starbugs/see-what-compiler-optimization-do-from-llvm-ir-dfd3774292cb" target="_blank" rel="noopener">從 LLVM IR 來看編譯器最佳化都在做些什麼</a></h3><p>在 Starbugs 一週年的專欄，我想跟大家分享什麼是編譯器最佳化，雖然「編譯器」跟「LLVM IR」聽起來很難很恐怖，但這篇文只會帶大家看些簡單的程式碼，並且舉一些例子來講 <strong>編譯器最佳化</strong> 在做些什麼，所以真的不用太擔心看不懂 XD</p><h2 id="慶祝一週年，新增作者群！"><a href="#慶祝一週年，新增作者群！" class="headerlink" title="慶祝一週年，新增作者群！"></a>慶祝一週年，新增作者群！</h2><p>Starbugs 星巴哥技術週刊邁入一週年的里程碑，感謝大家的支持。未來的一年星巴哥想要讓大家看到更多元的內容，提供大家更多優質的原創文章，因此最近我們邀請了幾位優質的寫作者加入 星巴哥的行列，以後在週刊上也會看到作者群撰寫的優質原創文章。</p><p>本週來介紹第一位寫作者 <strong>Hannah Lin</strong> ！！</p><p>Hannah 是一位非本科系的前端工程師，因為熱愛前端，不斷努力，終於在近兩年解鎖了在矽谷工作的成就。「能把興趣當工作是很幸福的一件事，也期許每天的自己都能比昨天更強一些」- 從這句話中可以透漏出 Hannah 對技術的熱愛與不斷前進的衝勁！</p><p>本週來介紹一下 Hannah 在面試 Facebook 時被考的問題，透過這篇文章了解世界頂級的大公司，到底在考些什麼？</p><h3 id="Facebook-面試考什麼-—-DOM-Tree-篇"><a href="#Facebook-面試考什麼-—-DOM-Tree-篇" class="headerlink" title="Facebook 面試考什麼 — DOM Tree 篇"></a><a href="https://medium.com/starbugs/facebook-%E9%9D%A2%E8%A9%A6%E8%80%83%E4%BB%80%E9%BA%BC-dom-tree-%E7%AF%87-ce4c3c14e77d" target="_blank" rel="noopener">Facebook 面試考什麼 — DOM Tree 篇</a></h3><p>雖然自知能力還不足，但能有機會跟 Facebook 電話面試 (美國面試 6–8 關，電話面試只是第 2 關而已 )，也可以算是人生成就了吧! 覺得大家應該會好奇國外面試除了演算法/資料結構還會考些什麼有趣題目。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="認識-parseInt、parseFloat-與-Number-轉換成數字的三種方法"><a href="#認識-parseInt、parseFloat-與-Number-轉換成數字的三種方法" class="headerlink" title="認識 parseInt、parseFloat 與 Number 轉換成數字的三種方法"></a><a href="https://medium.com/unalai/%E8%AA%8D%E8%AD%98-parseint-parsefloat-%E8%88%87-number-%E8%BD%89%E6%8F%9B%E6%88%90%E6%95%B8%E5%AD%97%E7%9A%84%E4%B8%89%E7%A8%AE%E6%96%B9%E6%B3%95-276640aedb4e" target="_blank" rel="noopener">認識 parseInt、parseFloat 與 Number 轉換成數字的三種方法</a></h3><p>在原生的 JavaScritp 中提供了 <code>parseInt</code>、<code>parseFloat</code> 和 <code>Number</code> 來把值的型態轉成數值，那你有思考過這三種方法除了名稱外還有什麼不同嗎？</p><h3 id="JavaScript-Void-0-–-What-Does-javascript-void-0-Mean"><a href="#JavaScript-Void-0-–-What-Does-javascript-void-0-Mean" class="headerlink" title="JavaScript Void 0 – What Does javascript:void(0); Mean?"></a><a href="https://www.freecodecamp.org/news/javascript-void-keyword-explained/" target="_blank" rel="noopener">JavaScript Void 0 – What Does javascript:void(0); Mean?</a></h3><p>各位前端工程師應該有留意過在 <code>a</code> 的 <code>href</code> 中出現的 <code>javascript:void(0)</code> 對吧？通常都會使用在不想要連結到其他網址而讓 <code>href</code> 失效的方式，但你知道 <code>void</code> 到底是什麼神奇的空東西嗎？</p><h3 id="使用-Vue3-封装一些有用的组合-API"><a href="#使用-Vue3-封装一些有用的组合-API" class="headerlink" title="使用 Vue3 封装一些有用的组合 API"></a><a href="https://juejin.im/post/6888925879243079687" target="_blank" rel="noopener">使用 Vue3 封装一些有用的组合 API</a></h3><p>在這篇文章當中，作者認為 Vue3 的 Composition API 和 React 的 Hooks 非常相似，因此就試著用了 Vue3 實現 React 在 Hook 所提供的功能！</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="详解-Python-中的协程，为什么说它的底层是生成器？"><a href="#详解-Python-中的协程，为什么说它的底层是生成器？" class="headerlink" title="详解 Python 中的协程，为什么说它的底层是生成器？"></a><a href="https://juejin.im/post/6883291943787298829" target="_blank" rel="noopener">详解 Python 中的协程，为什么说它的底层是生成器？</a></h3><p>協程 Coroutine 與線程 Thread 的不同在於，Thread 由作業系統調度，而 Coroutine 由程式語言實作。本篇文章來探討，在 Python 3.4 以後，官方也收入協程的功能，讓我們來看看協程究竟是怎麼回事吧！</p><h3 id="说说我对-WSGI-的理解"><a href="#说说我对-WSGI-的理解" class="headerlink" title="说说我对 WSGI 的理解"></a><a href="https://juejin.im/post/6844903719306428430" target="_blank" rel="noopener">说说我对 WSGI 的理解</a></h3><p>WSGI 解決了怎麼樣的問題？舉個例子：服務器應該如何把請求信息傳給應用，應用處理完畢後又怎麼告訴服務器開始返迴響應，如果都是各搞各的，服務器需要定制應用，應用也要定制服務器，這要一個應用能跑起來也太麻煩了點吧。所以，WSGI 的出現就是為了解決上面的問題，它規定了服務器如何把請求信息告訴給應用，應用怎麼把執行情況回傳給服務器，這樣的話，服務器與應用都按一個標準辦事，只要實現了這個標準，服務器與應用隨意搭配就可以，靈活度大大提高。- 引用自原文</p><h3 id="A-Bite-of-Python"><a href="#A-Bite-of-Python" class="headerlink" title="A Bite of Python"></a><a href="https://juejin.im/entry/6844903576708317192" target="_blank" rel="noopener">A Bite of Python</a></h3><p>一口 Python，也可以叫作「咬一口 Python」，寓意著 Python 的冰山一角，包含著作者這幾年學 Python 時積累的一些知識和經驗，文章中包含了很多快速簡潔的例子，方便讓讀者了解到 Python 中存在的一些概念，然後去自行拓展。</p><h2 id="Compiler"><a href="#Compiler" class="headerlink" title="Compiler"></a>Compiler</h2><h3 id="編譯器-LLVM-淺淺玩，以動手實作來認識-LLVM-Compiler-Infrastructure"><a href="#編譯器-LLVM-淺淺玩，以動手實作來認識-LLVM-Compiler-Infrastructure" class="headerlink" title="編譯器 LLVM 淺淺玩，以動手實作來認識 LLVM Compiler Infrastructure"></a><a href="https://medium.com/@zetavg/%E7%B7%A8%E8%AD%AF%E5%99%A8-llvm-%E6%B7%BA%E6%B7%BA%E7%8E%A9-42a58c7a7309" target="_blank" rel="noopener">編譯器 LLVM 淺淺玩，以動手實作來認識 LLVM Compiler Infrastructure</a></h3><p>這週的專欄大部分的篇幅都花在講有哪些最佳化的方法，對 LLVM 並沒有太多介紹。所以如果想知道為什麼要有 LLVM IR，還有 LLVM 是在什麼背景下出現的，可以看看這篇文章～</p><h3 id="The-JIT-in-JavaScript-Just-In-Time-Compiler"><a href="#The-JIT-in-JavaScript-Just-In-Time-Compiler" class="headerlink" title="The JIT in JavaScript: Just In Time Compiler"></a><a href="https://blog.bitsrc.io/the-jit-in-javascript-just-in-time-compiler-798b66e44143" target="_blank" rel="noopener">The JIT in JavaScript: Just In Time Compiler</a></h3><p>看完本週的專欄後，如果想繼續了解 NodeJS 的 JIT Compiler，可以看看這篇文，他從 JIT 是什麼開始講起，而且也講了一些關於 JS 該怎麼寫才能被 JIT 最佳化的小 tips</p><h3 id="Why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array"><a href="#Why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array" class="headerlink" title="Why is processing a sorted array faster than processing an unsorted array?"></a><a href="https://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array" target="_blank" rel="noopener">Why is processing a sorted array faster than processing an unsorted array?</a></h3><p>這週的專欄中有提到 Loop Unrolling 可以降低 CPU 做 Branch Prediction 的錯誤率，但如果你還不知道什麼是 Branch Prediction，這篇 StackOverflow 上的問答我覺得解釋得很清楚！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Flux2"><a href="#Flux2" class="headerlink" title="Flux2"></a><a href="https://github.com/fluxcd/flux2" target="_blank" rel="noopener">Flux2</a></h3><p>在 GitOps 時代，有三個工具一直被提出來比較，分別是 Flux, ArgoCD 跟 Jenkins X，複雜度是 Flux &lt; ArgoCD &lt; Jenkins X，而功能多樣性則是 Flux &lt; ArgoCD &lt; Jenkins X；而在上週 Flux 推出了 Flux2，當然新增了不少新功能，可以整合更多 Kubernets 生態圈的工具之外，也可以同步任意數量的 Git Repostiroy，當然還有其他大家已經要求以及期待很久的功能</p><h3 id="Kubecolor"><a href="#Kubecolor" class="headerlink" title="Kubecolor"></a><a href="https://github.com/dty1er/kubecolor" target="_blank" rel="noopener">Kubecolor</a></h3><p>身為 SRE 每天都會使用到 kubectl, 面對一成不變的輸出內容感到厭倦了嗎？快來使用 kubecolor，讓你的 kubectl 輸出跟人生充滿色彩！</p><h3 id="Salto-raises-27M-to-let-you-configure-your-SaaS-platforms-with-code"><a href="#Salto-raises-27M-to-let-you-configure-your-SaaS-platforms-with-code" class="headerlink" title="Salto raises $27M to let you configure your SaaS platforms with code"></a><a href="https://techcrunch.com/2020/10/27/salto-raises-27m-to-let-you-configure-saas-platform-with-code/" target="_blank" rel="noopener">Salto raises $27M to let you configure your SaaS platforms with code</a></h3><p>Salto 是一間新創公司，他們推出的開源產品讓開發者可以使用程式碼定義 SaaS 平台的組態設定，例如：Salesforce, NetSuite 和 HubSpot…等，在上週他們宣布獲得 2700 萬美金的 A 輪投資，看來在各家 SaaS 平台提供的 API 功能越來越齊全之下，此面向的 Configuration as Code 產品會越來越蓬勃發展！最後附上 <a href="https://github.com/salto-io/salto" target="_blank" rel="noopener">GitHub 連結</a>讓有興趣的人可以試試看</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 52 期 - 有人沒去 mopcon 的嗎？</title>
      <link href="/2020/10/27/52-devops-where-is-my-podpod-resource-management/"/>
      <url>/2020/10/27/52-devops-where-is-my-podpod-resource-management/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="DevOps-Where-is-My-PodPod-Pod-Arrangement"><a href="#DevOps-Where-is-My-PodPod-Pod-Arrangement" class="headerlink" title="DevOps: Where is My PodPod - Pod Arrangement"></a><a href="https://medium.com/starbugs/devops-where-is-my-podpod-pod-arrangement-2a5e772a579d" target="_blank" rel="noopener">DevOps: Where is My PodPod - Pod Arrangement</a></h3><p>使用 K8S 的人其實跟在管理牧場並沒有什麼兩樣，從前用來戲謔工程師的詞彙 (碼農)，如今好像想賴也賴不掉了XD 此篇文章的重點為 如何管理牧地 (K8S Node) 讓每隻牛 (K8S Pod) 都可以開開心心地吃到草 (CPU, Memory)</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="I-Wish-I-Never-Learned-to-Code"><a href="#I-Wish-I-Never-Learned-to-Code" class="headerlink" title="I Wish I Never Learned to Code"></a><a href="https://hackernoon.com/i-wish-i-never-learned-to-code-7a1m3wwx" target="_blank" rel="noopener">I Wish I Never Learned to Code</a></h3><p>不曉得大家是否會在某些時候浮現「真希望我從來沒學過程式。」的念頭，打程式不只有很多職業病（例如到一個新網站就開始拖拉網頁的長寬，看看 RWD 做得如何），還有你另外一個工程師之間的話題總是只能狂聊程式（像是你寫測試嗎？還是有導入 CI/CD？），或者你必須常常在下班後用你自己的時間學習程式，但是以上的所有令人討厭的事情全都來自於一個原因，那就是「因為熱愛程式」。</p><h3 id="超详-2020年你不应该错过的CSS新特性"><a href="#超详-2020年你不应该错过的CSS新特性" class="headerlink" title="超详|2020年你不应该错过的CSS新特性"></a><a href="https://juejin.im/post/6886258269137043464#heading-7" target="_blank" rel="noopener">超详|2020年你不应该错过的CSS新特性</a></h3><p><a href="https://www.londoncss.dev/" target="_blank" rel="noopener">LondonCSS 2020</a> 是一個在倫敦的 CSS 社群，而筆者在 2020/09/10 的 LondonCSS 2020 活動裡整理了將近 24 個有趣的 CSS 新特性，因為文章中真的提到滿多東西的，建議各位從右方的目錄中選擇有興趣的閱讀。</p><h3 id="10-useful-HTML-file-upload-tips-for-web-developers"><a href="#10-useful-HTML-file-upload-tips-for-web-developers" class="headerlink" title="10 useful HTML file upload tips for web developers"></a><a href="https://dev.to/atapas/10-useful-html-file-upload-tips-for-web-developers-2d1d" target="_blank" rel="noopener">10 useful HTML file upload tips for web developers</a></h3><p>在 HTML 中，想要做一個檔案上傳器也許只需要把 <code>input</code> 的 <code>type</code> 屬性設置為 <code>file</code> 就行了，但你知道單用 HTML 和簡單的幾行原生 JavaScript 還能輕鬆做到進度條和拖拉上傳嗎？</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="【译】用-Python-编写的-Python-解释器"><a href="#【译】用-Python-编写的-Python-解释器" class="headerlink" title="【译】用 Python 编写的 Python 解释器"></a><a href="https://juejin.im/entry/6844903592210644999" target="_blank" rel="noopener">【译】用 Python 编写的 Python 解释器</a></h3><p>Allison 是 Dropbox 的工程師。她撰寫了這篇文章。她用 Python 實現了一款 Python 的直譯器叫做 Byterun。Byterun 包含了 VirtualMachine、Frame、Function、Block 四種 class。滿酷的，讓我想起 Ruby 的 VM 實作。</p><h3 id="只需十四步：从零开始掌握-Python-机器学习（附资源）"><a href="#只需十四步：从零开始掌握-Python-机器学习（附资源）" class="headerlink" title="只需十四步：从零开始掌握 Python 机器学习（附资源）"></a><a href="https://juejin.im/entry/6844903469833256973" target="_blank" rel="noopener">只需十四步：从零开始掌握 Python 机器学习（附资源）</a></h3><p>本教程或許能幫你成功上手，從0到1掌握Python機器學習，至於後面再從1到100變成機器學習專家，就要看你自己的努力了。短評：其實機器學習難的是後面，但是稍微了解一下似乎也是不錯的選擇。</p><h3 id="教你阅读-Python-开源项目代码"><a href="#教你阅读-Python-开源项目代码" class="headerlink" title="教你阅读 Python 开源项目代码"></a><a href="https://juejin.im/entry/6844903455451004935" target="_blank" rel="noopener">教你阅读 Python 开源项目代码</a></h3><p>閱讀Python開源項目代碼主要有如下三個原因：</p><p>1.在工作過程中遇到一些問題，Google和StackOverFlow等網站找到解決方法，只能去翻原始碼。<br>2.對某些項目或方向非常感興趣，希望深入。<br>3.學習遇到難題需要汲取開源項目的經驗和適當來做提高。</p><p>没有目的的阅读开源项目就是耍流氓。浪费了时间，但是能学到的东西也很少。怎么样根据自身情况去阅读呢？ … (閱讀更多)</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="How-Docker-Can-Help-You-Become-A-More-Effective-Data-Scientist"><a href="#How-Docker-Can-Help-You-Become-A-More-Effective-Data-Scientist" class="headerlink" title="How Docker Can Help You Become A More Effective Data Scientist"></a><a href="https://link.medium.com/lbrZmOtZRab" target="_blank" rel="noopener">How Docker Can Help You Become A More Effective Data Scientist</a></h3><p>因為 Docker 方便部署的特性，很多後端工程師都會使用 Docker 來進行部署，網路上大部分介紹 Docker 的文章也大多是以 Web 後端為例。但除了後端之外，Docker 也可以幫助到資料科學家，尤其在用 GPU train model 時常常會需要裝一堆有的沒的套件，而且又必須是固定版本，這時就很適合使用 Docker，反正環境壞了就刪掉重建一個就好了 XD</p><h3 id="3-steps-to-drastically-improve-your-docker-build-performances"><a href="#3-steps-to-drastically-improve-your-docker-build-performances" class="headerlink" title="3 steps to drastically improve your docker build performances"></a><a href="https://dev.to/gasparev/3-steps-to-drastically-improve-your-docker-build-performances-17jg" target="_blank" rel="noopener">3 steps to drastically improve your docker build performances</a></h3><p>三個方法，教你怎麼讓 docker build 的過程更快，並且 build 出一個儘可能小的 image，有常在用 Docker 的話這篇文章非常實用</p><h3 id="It’s-Time-to-Say-Goodbye-to-Docker"><a href="#It’s-Time-to-Say-Goodbye-to-Docker" class="headerlink" title="It’s Time to Say Goodbye to Docker"></a><a href="https://dev.to/martinheinz/it-s-time-to-say-goodbye-to-docker-386h" target="_blank" rel="noopener">It’s Time to Say Goodbye to Docker</a></h3><p>只要提到容器（container），大部分人都是第一時間就想到 Docker，但 Docker 並不等於容器，他只是一種容器化的技術而已。而這篇文章就要跟大家介紹另一個容器化的工具 Podman，用起來跟 Docker 非常類似，但解決了一些 Docker 的缺點，等以後成熟了之後說不定會慢慢取代 Docker</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Public-Preview-–-AWS-Distro-for-OpenTelemetry"><a href="#Public-Preview-–-AWS-Distro-for-OpenTelemetry" class="headerlink" title="Public Preview – AWS Distro for OpenTelemetry"></a><a href="https://aws.amazon.com/blogs/aws/public-preview-aws-distro-open-telemetry/" target="_blank" rel="noopener">Public Preview – AWS Distro for OpenTelemetry</a></h3><p>AWS 於上週宣布了 AWS Distro for OpenTelemetry，讓開發以及維運人員可以觀察系統的運行狀況，目前開發預覽版支援的程式語言僅有 Java，不過未來當然會加入更多的語言；收集到的資料除了可以往自家的服務 (CloudWatch, X-Ray, ElasticSearch) 存放之外，也可以往其他整合的第三方工具傳送過去，而且還不少家一起加入這個行列：<a href="https://www.appdynamics.com/blog/product/what-is-opentelemetry/" target="_blank" rel="noopener">AppDynamics</a>, <a href="https://www.datadoghq.com/blog/aws-opentelemetry/" target="_blank" rel="noopener">Datadog</a>, <a href="https://grafana.com/blog/2020/10/21/grafana-modernizing-observability-with-aws-opentelemetry-openmetrics-and-beyond/" target="_blank" rel="noopener">Grafana</a>, <a href="https://blog.newrelic.com/product-news/aws-distro-for-opentelemetry/" target="_blank" rel="noopener">New Relic</a>, <a href="https://www.splunk.com/en_us/blog/devops/splunk-and-aws-partnering-to-accelerate-production-ready-opentelemetry.html" target="_blank" rel="noopener">Splunk</a>，感覺後市看漲</p><h3 id="Failing-over-without-falling-over"><a href="#Failing-over-without-falling-over" class="headerlink" title="Failing over without falling over"></a><a href="https://stackoverflow.blog/2020/10/23/adrian-cockcroft-aws-failover-chaos-engineering-fault-tolerance-distaster-recovery/" target="_blank" rel="noopener">Failing over without falling over</a></h3><p>Adrian Cockcroft (目前是 AWS 的 VP of Cloud Architecture Strategy ) 歷任過 Sun Microsystems, Netflix，而在 Netflix 期間則是幫忙建置和討論 Chaos Engineering，多重 Zone 和區域的雲端架構，而在設計一個強大可靠的系統時，需要注意的事情當然不會少，文章從可能遇到的問題還有建議的做法一一談到</p><h3 id="APIs-101-Everything-you-need-to-know-about-API-design"><a href="#APIs-101-Everything-you-need-to-know-about-API-design" class="headerlink" title="APIs 101: Everything you need to know about API design"></a><a href="https://cloud.google.com/blog/products/api-management/google-cloud-api-design-tips" target="_blank" rel="noopener">APIs 101: Everything you need to know about API design</a></h3><p>API 是當前應用服務間最廣泛採用的對話方式，文章中提到不同協定的差異 (REST, RPC 和 GraphQL)，並且提到如何設計一個整體性的 API 可能遇到的挑戰和最佳做法</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 51 期 - 聽說貓亢要舉辦了，是不是要貓一下</title>
      <link href="/2020/10/20/51-mopcon-is-coming-cats-are-also-coming/"/>
      <url>/2020/10/20/51-mopcon-is-coming-cats-are-also-coming/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="IT邦幫忙鐵人賽懶人包-2020-原來鄰居的-wifi-密碼那麼容易取得"><a href="#IT邦幫忙鐵人賽懶人包-2020-原來鄰居的-wifi-密碼那麼容易取得" class="headerlink" title="IT邦幫忙鐵人賽懶人包 2020 原來鄰居的 wifi 密碼那麼容易取得"></a><a href="https://medium.com/starbugs/7e17edc0ea27" target="_blank" rel="noopener">IT邦幫忙鐵人賽懶人包 2020 原來鄰居的 wifi 密碼那麼容易取得</a></h3><p>這篇文章蒐集了 IT 邦幫忙第 12 屆鐵人賽 的好文。習慣性的整理一下今年新的鐵人賽資訊，方便以後查找。今年我覺得資安系列非常精采，許多令人眼睛為之一亮的系列。<br>今年除了官方網站的排行榜外，也再次感謝熱心的 qrtt1 大大幫大家製作了排行榜，大家可以藉由這個排行榜來得知哪些系列是目前最多人觀看與訂閱的。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="10年網頁設計流行風格回顧與趨勢分析（2010-2020）"><a href="#10年網頁設計流行風格回顧與趨勢分析（2010-2020）" class="headerlink" title="10年網頁設計流行風格回顧與趨勢分析（2010~2020）"></a><a href="https://medium.com/as-a-product-designer/10%E5%B9%B4%E7%B6%B2%E9%A0%81%E8%A8%AD%E8%A8%88%E6%B5%81%E8%A1%8C%E9%A2%A8%E6%A0%BC%E5%9B%9E%E9%A1%A7%E8%88%87%E8%B6%A8%E5%8B%A2%E5%88%86%E6%9E%90-2010-2020-60319fdfd2d6" target="_blank" rel="noopener">10年網頁設計流行風格回顧與趨勢分析（2010~2020）</a></h3><p>你知道響應式網站的概念從被發表開始，已經過了十年了嗎？文章用許多網頁一一介紹了近十年的網頁設計發展史，並且用心說明在該年代背景中，那些風格會成為主流的原因。</p><h3 id="What-is-Front-End-Development-Necessary-Web-Development-Job-Skills-Explained"><a href="#What-is-Front-End-Development-Necessary-Web-Development-Job-Skills-Explained" class="headerlink" title="What is Front-End Development? Necessary Web Development Job Skills Explained."></a><a href="https://www.freecodecamp.org/news/what-is-front-end-development/" target="_blank" rel="noopener">What is Front-End Development? Necessary Web Development Job Skills Explained.</a></h3><p>你知道前端工程師最需要的技能是什麼嗎？作者從前端工程師的角色出發，從工作範圍帶出什麼樣的角色才是前端工程師該有的樣子，文章內容非常有趣，沒有技術成分，適合全家大小一起觀賞 🙌。</p><h3 id="Typing-effect-without-Javascript"><a href="#Typing-effect-without-Javascript" class="headerlink" title="Typing effect without Javascript"></a><a href="https://dev.to/stokry/typing-effect-without-javascript-54ol" target="_blank" rel="noopener">Typing effect without Javascript</a></h3><p>這篇文章的作者在沒有使用 JavaScript 的情況下就做出了打字機的效果，文章範例僅僅只使用不到 30 行的 CSS 設置，就展現了 CSS 的強大之處，而且一樓的留言讓整個文章內容更完美了！</p><h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><h3 id="Vue-3-0-正式版-輕前端視角"><a href="#Vue-3-0-正式版-輕前端視角" class="headerlink" title="Vue 3.0 正式版 - 輕前端視角"></a><a href="https://blog.darkthread.net/blog/vue-3-release/" target="_blank" rel="noopener">Vue 3.0 正式版 - 輕前端視角</a></h3><p>這週來了解 vue 3 改了些什麼東西。1. Composition API。2. 效能提昇：與 Vue 2 相比，初始 Render 速度加快 55%，更新速度加快 133%，記憶體使用減少 54%。Vue 3 全面改用 TypeScript 開發，跟 TypeScript/VSCode 的整合性大增。不過開發者仍可以使用 javascript 開發。官方文件有篇升級指南，<a href="https://v3.vuejs.org/guide/migration/introduction.html#breaking-changes" target="_blank" rel="noopener">Breaking Changes</a> 章節是最權威的參考來源。- 部分內容來自原文</p><h3 id="Vue-3-0-升級紀錄"><a href="#Vue-3-0-升級紀錄" class="headerlink" title="Vue 3.0 升級紀錄"></a><a href="https://kuro.tw/posts/2020/07/06/Vue-3-0-%E5%8D%87%E7%B4%9A%E7%B4%80%E9%8C%84/" target="_blank" rel="noopener">Vue 3.0 升級紀錄</a></h3><p>Kuro 大大升級 vue 3.0 的實戰升級過程。Event bus 的寫法需要修改，所以如果之後要使用 event bus 的話乾脆直接使用 vuex 吧。過去我們透過 prop 與 .sync 來同步上下層 component 狀態 (俗稱雙向綁定) 的方式， 現在可以改由多組 v-model 來做到了。目前升級 Vue 3.0 的開發體驗相當好，像是大家都很熟悉的 composition api、直接在 component 使用 v-model， 以及新增的 async-component 與 <code>&lt;Suspense&gt;</code> 等等，都是非常實用的功能。- 部分內容來自原文</p><h3 id="Vue-3-0-来了，我们该做些什么？"><a href="#Vue-3-0-来了，我们该做些什么？" class="headerlink" title="Vue 3.0 来了，我们该做些什么？"></a><a href="https://juejin.im/post/6874604408030789640" target="_blank" rel="noopener">Vue 3.0 来了，我们该做些什么？</a></h3><p>Composition API解決了什麼問題？使用傳統的 Vue2.x 配置方法寫組件的時候問題，隨著業務複雜度越來越高，代碼量會不斷的加大。由於相關業務的代碼需要遵循option 的配置寫到特定的區域，導致後續維護非常的複雜，同時代碼可複用性不高，你常常會發現一個頁面組件，寫著寫著就寫到了三四百行去了。而 Composition API 解決了這個令人頭疼的問題。它為我們提供了幾個函數，如下所示：reactive, watchEffect, computed, ref, toRefs, hooks。- 部分內容來自原文</p><h2 id="React-js"><a href="#React-js" class="headerlink" title="React.js"></a>React.js</h2><h3 id="React-Hooks-新手筆記：關於這些時日與-React-Hooks-為伍的簡易記錄"><a href="#React-Hooks-新手筆記：關於這些時日與-React-Hooks-為伍的簡易記錄" class="headerlink" title="React Hooks 新手筆記：關於這些時日與 React Hooks 為伍的簡易記錄"></a><a href="https://medium.com/@z3388638/react-hooks-%E6%96%B0%E6%89%8B%E7%AD%86%E8%A8%98-8c9f1cccd142" target="_blank" rel="noopener">React Hooks 新手筆記：關於這些時日與 React Hooks 為伍的簡易記錄</a></h3><p>React Hook 已經出來好一陣子了，但想必還是有人跟我一樣對他們不太熟悉。而這篇 React Hooks 新手筆記除了講解 Hook 的語法之外，還給了非常多的範例，真的是給新手看的 XD</p><h3 id="了解這些，更快掌握-TypeScript-在-React-中的使用"><a href="#了解這些，更快掌握-TypeScript-在-React-中的使用" class="headerlink" title="了解這些，更快掌握 TypeScript 在 React 中的使用"></a><a href="https://pjchender.blogspot.com/2020/07/typescript-react-using-typescript-in.html" target="_blank" rel="noopener">了解這些，更快掌握 TypeScript 在 React 中的使用</a></h3><p>這篇文章主要是給想在 React 專案裡面導入 TypeScript 的人看的，隨著專案越來越龐大，太過自由的 JS 語法可能會使得程式碼越來越難維護，這時候也許就可以導入 TypeScript，透過型別以及 interface 的限制，讓彼此的合作更順暢</p><h3 id="初探-Server-Side-Rendering-與-Next-js"><a href="#初探-Server-Side-Rendering-與-Next-js" class="headerlink" title="初探 Server-Side-Rendering 與 Next.js"></a><a href="https://oldmo860617.medium.com/%E5%88%9D%E6%8E%A2-server-side-rendering-%E8%88%87-next-js-%E6%8E%A8%E5%9D%91%E8%A8%88%E7%95%AB-d7a9fb48a964" target="_blank" rel="noopener">初探 Server-Side-Rendering 與 Next.js</a></h3><p>身為人氣最高的 React SSR Framework，Next.js 大幅降低了 SSR 的技術門檻。以前開發者要自己維護超複雜的 webpack 設定，而且設定好之後就不太敢更新，怕一動就會把整個編譯的過程弄壞（就是我 XD）。但有了 Next.js 之後終於又可以專心寫扣，不用自己搞那些有的沒的效能調校，就可以生出一個高效能而且支援 SSR 的網站，真的很推</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Announcing-HashiCorp-Boundary"><a href="#Announcing-HashiCorp-Boundary" class="headerlink" title="Announcing HashiCorp Boundary"></a><a href="https://www.hashicorp.com/blog/hashicorp-boundary" target="_blank" rel="noopener">Announcing HashiCorp Boundary</a></h3><p>Hashicorp <strong>Boundary</strong> 是一套讓使用者可以透過 Role Base 方式來安全地存取位於公司內部重要系統的工具，之前有介紹過一套以 Zero Trust 為精神開發的類似工具 Teleport，傳統系統管理人員會透過 VPN, Gateway, Bastion 再加上防火牆的設定來管控使用者可以存取到哪些網段的機器；而 Boundary 這類工具則是以使用者認證出發，透過使用者角色來允許可以存取的系統有哪些，不再需要透過設定一堆防火牆規則 (不過自己還是覺得有些還是要設定比較好XD)，很開心這個領域又有新的競爭者加入，不過目前的版本 (0.1) 還不算可以用，或是說主要企業 TA 需要的重要功能我在文件區都沒有看到，例如整合第三方 Identity Provider, Auditing, Recording, Blocking Command…等功能，只有看到他儲存 Key 和 Role Base 的設定方式</p><h3 id="Announcing-HashiCorp-Waypoint"><a href="#Announcing-HashiCorp-Waypoint" class="headerlink" title="Announcing HashiCorp Waypoint"></a><a href="https://www.hashicorp.com/blog/announcing-waypoint" target="_blank" rel="noopener">Announcing HashiCorp Waypoint</a></h3><p>HashiCorp 推出專門用來部署應用服務的 <strong>Waypoint</strong> ！繼推出跟資安比較相關的 <strong>Boundary</strong> 之後，今天又推出可以用 HCL 定義 Build, Deploy 跟 Release 流程的 Waypoint！因為 HashiCorp 發現目前要部署個應用程式所需要學會的東西太多太複雜了，而且要使用很多的工具整合達成，所以推出 Waypoint ，讓開發者下個 <code>~$ waypoint up</code> 就完成所有的事情，主要功能有…</p><ul><li>讓開發者使用 HCL 定義好 Build, Deploy 跟 Release 流程，而且可以一鍵發佈</li><li>為每一個應用服務的每一個部署產生一個 URL，用來快速驗證部署上去的東西有沒有問題</li><li>透過 waypoint exec 可以對應用程式執行特定指令，用來除錯，或是執行資料庫 Migration…等需求</li><li>直接使用 waypoint logs 或從 Web UI 查詢應用服務的即時 Log，讓開發者快速處理緊急狀況使用</li><li>雖然 CLI 可以自動化很多的事情，但 Waypoint 目前還是提供唯讀的 Web UI 讓使用者可以快速看到應用服務的部署情況</li><li>而怎麼讓 Build, Deploy 跟 Release 的這些步驟可以各自支援各種不同的工具或是服務呢？答案是使用 Plugin 來擴展支援不同開發者所需要的不同需求，例如透過 Kubernets Plugin 部署應用服務到 K8S 中</li></ul><h3 id="Announcing-HashiCorp-Terraform-0-14-Beta"><a href="#Announcing-HashiCorp-Terraform-0-14-Beta" class="headerlink" title="Announcing HashiCorp Terraform 0.14 Beta"></a><a href="https://www.hashicorp.com/blog/announcing-hashicorp-terraform-0-14-beta" target="_blank" rel="noopener">Announcing HashiCorp Terraform 0.14 Beta</a></h3><p>感覺當年 Terraform 官方從 0.11 升級到 0.12 費時最久，後續版本的推出相對快很多，例如支援 Module Dependency 的 0.13，以及今天又宣布的準備要朝向 1.0 邁進的 0.14！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 50 期 - 像這樣的程式，讓我苦惱</title>
      <link href="/2020/10/13/50-the-code-make-me-distressed/"/>
      <url>/2020/10/13/50-the-code-make-me-distressed/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Heroku-將靜態網站部署到-Heroku-上吧！feat-Vue、Node-js"><a href="#Heroku-將靜態網站部署到-Heroku-上吧！feat-Vue、Node-js" class="headerlink" title="Heroku | 將靜態網站部署到 Heroku 上吧！feat. Vue、Node.js"></a><a href="https://medium.com/starbugs/heroku-%E5%B0%87%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99%E9%83%A8%E7%BD%B2%E5%88%B0-heroku-%E4%B8%8A%E5%90%A7-feat-vue-node-js-2dfe8b912fbe" target="_blank" rel="noopener">Heroku | 將靜態網站部署到 Heroku 上吧！feat. Vue、Node.js</a></h3><p>本週文章要分享的是關於 Heroku 這個非常好用的平台，雖然 Heroku 沒辦法讓只部署靜態網站，但我們還是可以寫一些簡單的 Node.js 來達到相同的目標（其實只要寫了 Node.js 就不再是靜態網站了 😂），一起來看看怎麼做吧！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Webpack-5-release-2020-10-10"><a href="#Webpack-5-release-2020-10-10" class="headerlink" title="Webpack 5 release (2020-10-10)"></a><a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/" target="_blank" rel="noopener">Webpack 5 release (2020-10-10)</a></h3><p>在各位放雙十連假的時候，Webpack 5 已經發布囉！雖然官方自己也提到 Webpack 這種東西一年可能只會用個兩次，然後就不斷重複使用 😂，但它還是默默地做了許多更新，特別要注意的是如果想要玩玩看 Webpack 5，記得要把 Node 升到 10.13.0 以上的版本哦，再低就不支援了！</p><h3 id="Imperative-vs-Declarative-Programming-–-the-Difference-Explained-in-Plain-English"><a href="#Imperative-vs-Declarative-Programming-–-the-Difference-Explained-in-Plain-English" class="headerlink" title="Imperative vs Declarative Programming – the Difference Explained in Plain English"></a><a href="https://www.freecodecamp.org/news/imperative-vs-declarative-programming-difference/" target="_blank" rel="noopener">Imperative vs Declarative Programming – the Difference Explained in Plain English</a></h3><p>從英文閱讀的角度來看待用「命令式」與「聲明式」來打程式的區別，因為良好的變數命名加上語意化的關係，使得在閱讀程式碼更容易知道變數裡應該是什麼，這會讓查找錯誤以及閱讀程式碼變得更簡單。</p><h3 id="The-Code-Review-Guide"><a href="#The-Code-Review-Guide" class="headerlink" title="The Code Review Guide"></a><a href="https://medium.com/an-idea/the-code-review-guide-9e793edcd683" target="_blank" rel="noopener">The Code Review Guide</a></h3><p>在做 Code Review 的時候畢竟不是寫程式的人，而當你開始需要 Review 其他人的程式碼時，應該要從何種角度思考？很喜歡作者她說「code reviews are not just for looking at what’s wrong, but for learning from others」</p><h2 id="軟體開發-in-鐵人賽"><a href="#軟體開發-in-鐵人賽" class="headerlink" title="軟體開發 in 鐵人賽"></a>軟體開發 in 鐵人賽</h2><h3 id="Functional-Programming-in-JS"><a href="#Functional-Programming-in-JS" class="headerlink" title="Functional Programming in JS"></a><a href="https://ithelp.ithome.com.tw/users/20106426/ironman/3024" target="_blank" rel="noopener">Functional Programming in JS</a></h3><p>Hannah 本屆鐵人賽帶來 functional programming 的系列文，平常就有在關注她的 blog，這次鐵人賽更是一個完整的系列文。繼上一屆鐵人賽講演算法之後又一經典。真是太有心了。</p><h3 id="Why-Flutter-why-從表層到底層，從如何到為何。"><a href="#Why-Flutter-why-從表層到底層，從如何到為何。" class="headerlink" title="Why Flutter why? 從表層到底層，從如何到為何。"></a><a href="https://ithelp.ithome.com.tw/users/20129053/ironman/3029" target="_blank" rel="noopener">Why Flutter why? 從表層到底層，從如何到為何。</a></h3><p>Flutter 是最新一個新的跨平台框架，Flutter 有著完整的 Google 提供的官方文件，如果你學過 React Vue 等等的 UI 框架，</p><h3 id="看對話學-Python-資料分析，用情境故事帶你入門"><a href="#看對話學-Python-資料分析，用情境故事帶你入門" class="headerlink" title="看對話學 Python 資料分析，用情境故事帶你入門"></a><a href="https://ithelp.ithome.com.tw/articles/10235397" target="_blank" rel="noopener">看對話學 Python 資料分析，用情境故事帶你入門</a></h3><p>大寶寶將會把資料分析的技能，融入在文章之中，透過輕鬆有趣的對話，把 Python 程式中 AI &amp; Data 的基礎知識走過一次，希望能夠幫助大家建立基礎的資料分析概念及技能。 - 引用自內文</p><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><h3 id="Rust-Inside-Other-Languages"><a href="#Rust-Inside-Other-Languages" class="headerlink" title="Rust Inside Other Languages"></a><a href="https://doc.rust-lang.org/1.2.0/book/rust-inside-other-languages.html" target="_blank" rel="noopener">Rust Inside Other Languages</a></h3><p>Rust 身為一個高效能而且記憶體安全的語言，很適合用來執行一些高效能的任務，但因為 Rust 寫起來要注意的細節比較多，所以開發效率可能不如 Python、Node.JS、Ruby 等動態語言。這時如果想同時保有高開發效率跟關鍵之處的高效能，就可以使用 FFI(Foreign Function Interface) 的方式把 Rust 程式碼編譯成 share library，再讓其他動態語言拿去用。</p><h3 id="Rust-程式設計語言"><a href="#Rust-程式設計語言" class="headerlink" title="Rust 程式設計語言"></a><a href="https://rust-lang.tw/book-tw/title-page.html" target="_blank" rel="noopener">Rust 程式設計語言</a></h3><p>這本《Rust 程式設計語言》電子書是由台灣的 Rust 社群翻譯將《The Rust Programming Language》翻譯過來的，內容與原版一致而且全部都是繁體中文，除此之外也有提供 PlayGround 的功能讓你能即時看到程式執行的結果，想要有系統的學 Rust 就從這裡開始吧！</p><h3 id="Why-Not-Rust"><a href="#Why-Not-Rust" class="headerlink" title="Why Not Rust?"></a><a href="https://matklad.github.io/2020/09/20/why-not-rust.html" target="_blank" rel="noopener">Why Not Rust?</a></h3><p>Rust 近兩年來越來越紅，網路上也不乏叫人去學 Rust 的文章，但我覺得 Rust 並沒有如很多文章所講的全部都是優點，尤其是他真的不好入門。所以雖然我也覺得 Rust 不錯，但我還是想推薦這篇講 Rust 缺點的文章，提醒大家任何程式語言都有他的局限性，正所謂沒有所謂最好的語言，只有最適合的語言。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Simple-Anomaly-Detection-Using-Plain-SQL"><a href="#Simple-Anomaly-Detection-Using-Plain-SQL" class="headerlink" title="Simple Anomaly Detection Using Plain SQL"></a><a href="https://hakibenita.com/sql-anomaly-detection" target="_blank" rel="noopener">Simple Anomaly Detection Using Plain SQL</a></h3><p>需多開發者覺得在程式碼中有嚴重的 Bug 是很糟糕的一件事情，但其實當 Bug 沒有被發現才是最恐怖的，所以此篇文章的作者嘗試使用簡單的 SQL 語法來分析 Nginx, Apache 或是 IIS Log，當有不正常的行為 Log 模式發生時，可以很快地就被發現到</p><h3 id="Enter-the-Vault-Authentication-Issues-in-HashiCorp-Vault"><a href="#Enter-the-Vault-Authentication-Issues-in-HashiCorp-Vault" class="headerlink" title="Enter the Vault: Authentication Issues in HashiCorp Vault"></a><a href="https://googleprojectzero.blogspot.com/2020/10/enter-the-vault-auth-issues-hashicorp-vault.html" target="_blank" rel="noopener">Enter the Vault: Authentication Issues in HashiCorp Vault</a></h3><p>在此篇文章中，作者詳細的演示 HashiCorp Vault 的兩個漏洞 (CVE-2020-16250 / 16251)，這些漏洞可能會導致整合 AWS 和 GCP Auth Method 時會被繞開 ，而 HashiCorp 官方已在8月發布的Vault版本1.2.5、1.3.8、1.4.4和1.5.1中修復，因此有使用 Vault 的人不要忘記升級啦！</p><h3 id="Promscale-An-analytical-platform-and-long-term-store-for-Prometheus-with-the-combined-power-of-SQL-and-PromQL"><a href="#Promscale-An-analytical-platform-and-long-term-store-for-Prometheus-with-the-combined-power-of-SQL-and-PromQL" class="headerlink" title="Promscale: An analytical platform and long-term store for Prometheus, with the combined power of SQL and PromQL"></a><a href="https://blog.timescale.com/blog/promscale-analytical-platform-long-term-store-for-prometheus-combined-sql-promql-postgresql/" target="_blank" rel="noopener">Promscale: An analytical platform and long-term store for Prometheus, with the combined power of SQL and PromQL</a></h3><p>Promscale 是一個新的開源專案，他能夠讓 Prometheus 擁有橫向擴展的能力 (建立在 TimescaleDB 上)，而且提供  PromQL 和 SQL 的組合功能，讓開發人員可以查詢到任何想知道的資料，進而創建出具有更高可見度的儀表板！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 49 期 - 最近假好多，才剛收假又準備要出去玩囉！</title>
      <link href="/2020/10/06/49-so-many-holidays/"/>
      <url>/2020/10/06/49-so-many-holidays/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="裝上這十個-CLI-工具，一起成為終端機大師吧！"><a href="#裝上這十個-CLI-工具，一起成為終端機大師吧！" class="headerlink" title="裝上這十個 CLI 工具，一起成為終端機大師吧！"></a><a href="https://medium.com/starbugs/become-a-command-line-master-together-47a0ad5dd41d" target="_blank" rel="noopener">裝上這十個 CLI 工具，一起成為終端機大師吧！</a></h3><p>一代武術宗師李小龍曾經說過：「天下武功，唯快不破」。武術是這樣，工程師的工作也是這樣，想要成為頂尖的工程師，就不得不注重自己的開發效率。所以這禮拜的專欄要跟大家分享我自己的 <strong>終端機環境</strong> 還有 <strong>十個增進效率的 CLI 工具</strong>，希望大家在看完這篇後都能更善用終端機，工作效率提高了，才有更多時間可以偷懶～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Getting-Started-with-Svelte-JS"><a href="#Getting-Started-with-Svelte-JS" class="headerlink" title="Getting Started with Svelte JS"></a><a href="https://dev.to/soorajsnblaze333/getting-started-with-svelte-js-nkp" target="_blank" rel="noopener">Getting Started with Svelte JS</a></h3><p>身為前端工程師，總是把目光放在前端御三家身上，一直到今天才發現這個默默耕耘的第四個框架 Svelte JS，Svelte JS 拋棄了與 React 或 Vue 相同的 virtual DOM，而是採用真實的 DOM，因此渲染速度會較快一些，而且沒有相對複雜的 API，取而代之的是更接近原生 JS 的寫法，雖然不曉得用在大型專案上會是如何，但實在是很令人期待這個前端框架將來的發展！看著看著都想要試試看了 😂（如果想要看更多關於 Svelte JS，也可以看「<a href="https://blog.kalan.dev/2020-04-19-svelte-%E2%80%94-%E6%98%AF%E4%BB%80%E9%BA%BC%E8%AE%93%E6%88%91%E9%81%87%E8%A6%8B%E9%80%99%E6%A8%A3%E7%9A%84%E4%BD%A0/" target="_blank" rel="noopener">Svelte — 是什麼讓我遇見這樣的你</a>」哦）</p><h3 id="CSS-實作小品-30-天-Demo-總整理"><a href="#CSS-實作小品-30-天-Demo-總整理" class="headerlink" title="CSS 實作小品 30 天 Demo 總整理"></a><a href="https://medium.com/@snh90100/css-%E5%AF%A6%E4%BD%9C%E5%B0%8F%E5%93%8130%E5%A4%A9-demo-%E7%B8%BD%E6%95%B4%E7%90%86-4f1dc5766c8f" target="_blank" rel="noopener">CSS 實作小品 30 天 Demo 總整理</a></h3><p>很喜歡看這種簡單的小作品，在看程式碼的時候也不會閱讀到多餘的部分，又很清楚的表達該作品小要展現什麼技巧！而且作者還把 30 天的作品整合起來成一篇文章閱讀，完全是佛心來的 😭!</p><h3 id="I-can’t-write-a-JavaScript-for-loop-and-it-does-not-matter"><a href="#I-can’t-write-a-JavaScript-for-loop-and-it-does-not-matter" class="headerlink" title="I can’t write a JavaScript for loop, and it does not matter"></a><a href="https://dev.to/sebastienlorber/i-can-t-write-a-javascript-for-loop-and-it-does-not-matter-11jb" target="_blank" rel="noopener">I can’t write a JavaScript for loop, and it does not matter</a></h3><p>有些時候，當我在解釋關於 JavaScript 提供的陣列 API（例如 <code>filter</code>、<code>forEach</code> 或是最常讓人感到疑惑的 <code>map</code>），總是會聽到「啊 <code>for</code> 迴圈不是也可以做到嗎？」之類的反應，我不否認這一點，但是如果你能夠用更簡單而且語意化的方式達到目的，為何還要選擇 <code>for</code> 呢？</p><h2 id="資訊安全-in-鐵人賽"><a href="#資訊安全-in-鐵人賽" class="headerlink" title="資訊安全 in 鐵人賽"></a>資訊安全 in 鐵人賽</h2><h3 id="從-0-開始的-Web-Security-連結層攻擊實作-ARP-Spoofing"><a href="#從-0-開始的-Web-Security-連結層攻擊實作-ARP-Spoofing" class="headerlink" title="從 0 開始的 Web Security 連結層攻擊實作 - ARP Spoofing"></a><a href="https://ithelp.ithome.com.tw/articles/10246385?sc=hot" target="_blank" rel="noopener">從 0 開始的 Web Security 連結層攻擊實作 - ARP Spoofing</a></h3><p>ARP Spoofing 是一個很經典的攻擊方式。原來 NetCut 利用的就是 ARP Spoofing，長知識了。</p><h3 id="那些年還給老師的-TCP-IP-五層結構"><a href="#那些年還給老師的-TCP-IP-五層結構" class="headerlink" title="那些年還給老師的 TCP/IP 五層結構"></a><a href="https://ithelp.ithome.com.tw/articles/10235733" target="_blank" rel="noopener">那些年還給老師的 TCP/IP 五層結構</a></h3><p>這系列文不是歸類資訊安全中，因為資安是基於網路之上，所以可以趁機複習一下網路的協議。用 Python 自幹一系列的網路協議，讚讚的！</p><h3 id="資安這條路-─-以自建漏洞環境學習資訊安全"><a href="#資安這條路-─-以自建漏洞環境學習資訊安全" class="headerlink" title="資安這條路 ─ 以自建漏洞環境學習資訊安全"></a><a href="https://ithelp.ithome.com.tw/articles/10237904" target="_blank" rel="noopener">資安這條路 ─ 以自建漏洞環境學習資訊安全</a></h3><p>這系列滿棒的，用 docker-compose 自建環境，透過攻擊自建環境學習資訊安全，配合<a href="https://ithelp.ithome.com.tw/articles/10200876" target="_blank" rel="noopener">資安大補帖</a> 系列效果更佳。</p><h2 id="開發效率"><a href="#開發效率" class="headerlink" title="開發效率"></a>開發效率</h2><h3 id="Rewritten-in-Rust-Modern-Alternatives-of-Command-Line-Tools"><a href="#Rewritten-in-Rust-Modern-Alternatives-of-Command-Line-Tools" class="headerlink" title="Rewritten in Rust: Modern Alternatives of Command-Line Tools"></a><a href="https://zaiste.net/posts/shell-commands-rust/" target="_blank" rel="noopener">Rewritten in Rust: Modern Alternatives of Command-Line Tools</a></h3><p>Rust 作為一個高效能、高安全性的語言，還滿適合拿來寫接近系統底層的 CLI 工具。如果平常工作會需要監控網路、CPU 使用率、做一些 benchmarking，或是常常要看看 Linux Kernel 的 log，那可以看看這一系列由 Rust 寫成的 CLI 工具</p><h3 id="VSCode-如何提高我的寫扣效率"><a href="#VSCode-如何提高我的寫扣效率" class="headerlink" title="VSCode 如何提高我的寫扣效率"></a><a href="https://larrylu.blog/vscode-tips-fe3320f9032a" target="_blank" rel="noopener">VSCode 如何提高我的寫扣效率</a></h3><p>身為一個工程師，除了要注重終端機的使用效率之外，編輯器用得順不順手也是很重要的事情。所以在這邊推薦這篇我自己寫的 VSCode tips 給大家參考（真不要臉 XD），希望大家都能調校出自己用得習慣的開發環境</p><h3 id="打造-10X-Engineer-Shell-工作環境"><a href="#打造-10X-Engineer-Shell-工作環境" class="headerlink" title="打造 10X Engineer Shell 工作環境"></a><a href="https://medium.com/starbugs/%E6%89%93%E9%80%A0-10x-engineer-zsh-shell-97e40db76391" target="_blank" rel="noopener">打造 10X Engineer Shell 工作環境</a></h3><p>雖然這篇跟本週的專欄一樣都是在講 Shell 的工作環境還有 CLI 工具，不過因為小城哥對於 DevOps 領域研究特別深入， 所以也推薦了一些常人如我不知道的工具，很適合有在研究 K8s、Vault、Terraform 的朋友們來看看</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Announcing-11-Verified-Providers-for-Terraform"><a href="#Announcing-11-Verified-Providers-for-Terraform" class="headerlink" title="Announcing 11 Verified Providers for Terraform"></a><a href="https://www.hashicorp.com/blog/announcing-11-verified-providers-for-terraform" target="_blank" rel="noopener">Announcing 11 Verified Providers for Terraform</a></h3><p>HashiCorp 這邊一次宣布多了 11 個 Terraform Provider，有一種讓其他 IaC 工具望塵莫及的味道存在 XD</p><ul><li>Splunk</li><li>JFrog</li><li>Sematext</li><li>Cloudsmith</li><li>OneLogin</li><li>Amixr</li><li>NetApp</li><li>phoenixNAP</li><li>Rancher</li><li>StrongDM</li><li>Transloadit</li></ul><h3 id="Announcing-support-for-gRPC"><a href="#Announcing-support-for-gRPC" class="headerlink" title="Announcing support for gRPC"></a><a href="https://blog.cloudflare.com/announcing-grpc/" target="_blank" rel="noopener">Announcing support for gRPC</a></h3><p>沒有想到 Cloudflare 也開始支援 gRPC Protocol 了，假如想要直接對外提供 gRPC 服務的人可以試用看看 (目前為 Beta 階段)，不知道其他家 CDN 廠商有沒有要跟進？！</p><h3 id="Racist-term-in-kubectl-command-941"><a href="#Racist-term-in-kubectl-command-941" class="headerlink" title="Racist term in kubectl command #941"></a><a href="https://github.com/kubernetes/kubectl/issues/941" target="_blank" rel="noopener">Racist term in kubectl command #941</a></h3><p>kubectl 有一個 subcommand 叫做 cordon，功能為讓 Kubernetes Scheduler 不再把 Pod 安排到某個節點上運行，有人表示這個字眼有警察防止有色人種進入某個警戒區域的意思，所以發了 GitHub Issue 要求改掉，不知道後續會如何…</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 48 期 - 我身為一個牧場主人，擁有 K8S 相關使用經驗也很合邏輯</title>
      <link href="/2020/09/29/48-devops-where-is-my-podpod-pod-arrangement/"/>
      <url>/2020/09/29/48-devops-where-is-my-podpod-pod-arrangement/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="DevOps-Where-is-My-PodPod-Pod-Arrangement"><a href="#DevOps-Where-is-My-PodPod-Pod-Arrangement" class="headerlink" title="DevOps: Where is My PodPod - Pod Arrangement"></a><a href="https://medium.com/starbugs/devops-where-is-my-podpod-pod-arrangement-2a5e772a579d" target="_blank" rel="noopener">DevOps: Where is My PodPod - Pod Arrangement</a></h3><p>Kubernetes 將 DevOps 領域重要概念 <strong>Pets vs Cattle</strong> 發揮地淋漓盡致，Pod 可以在 Cluster 任意 Node 運行，遇到問題也會被自動修復，甚至有人利用此特性來解決 Memory Leak，所以應用程式直接無腦地丟進 K8S 中就可以了？但是現實往往是殘酷的，在 1）公私雲底層架構；2）應用程式特性；3）日常維運需求的互相作用之下，Pod 必須要在<strong>適當的</strong> Node 運行才能確保服務品質，所以此篇文章透過淺顯易懂的例子來說明 <del>如何讓牛隻走到他該去的草地上吃草！</del> 如何讓 Pod 在 Cluster 不斷地變動之下，依然持續在運行在<strong>適當的</strong>節點中，確保服務不中斷。</p><h2 id="前端開發（Without-鐵人賽-😂）"><a href="#前端開發（Without-鐵人賽-😂）" class="headerlink" title="前端開發（Without 鐵人賽 😂）"></a>前端開發（Without 鐵人賽 😂）</h2><h3 id="Recreating-The-Instagram-Double-Tap-with-JavaScript-❤️"><a href="#Recreating-The-Instagram-Double-Tap-with-JavaScript-❤️" class="headerlink" title="Recreating The Instagram Double-Tap with JavaScript ❤️"></a><a href="https://daily-dev-tips.com/posts/double-click-to-like-instagram-effect-in-javascript-%E2%9D%A4%EF%B8%8F/?ref=hackernoon.com" target="_blank" rel="noopener">Recreating The Instagram Double-Tap with JavaScript ❤️</a></h3><p>此篇文章的內容就是說他用 JavaScript 實現了 IG 上點兩下按愛心的操作！從實作中熟悉程式碼一直是很讚的方法，但是在沒有工作的情況下，大部分的人都不曉得可以做什麼來練習，但是其實不需要一開始就給自己多大的目標，就算只是個小小的練習也可以哦！</p><h3 id="JavaScript-Runtime-and-Its-Components-For-Web-Developers-ECMAScript-DOM-and-the-BOM"><a href="#JavaScript-Runtime-and-Its-Components-For-Web-Developers-ECMAScript-DOM-and-the-BOM" class="headerlink" title="JavaScript Runtime and Its Components For Web Developers - ECMAScript, DOM, and the BOM"></a><a href="https://cloudaffle.com/javascript-runtime-components-ecmascript-dom-bom/?ref=hackernoon.com" target="_blank" rel="noopener">JavaScript Runtime and Its Components For Web Developers - ECMAScript, DOM, and the BOM</a></h3><p>雖然文章不常，但是仍然很清楚的說明了 JavaScript 在瀏覽器中執行的三個部分，很適合利用一點時間補足基本的觀念，等到有時間後再來針對這三個部分深入研究（但絕對研究不完的 😂）</p><h3 id="Top-10-Pieces-of-Advice-for-Becoming-the-Worst-Developer-Possible"><a href="#Top-10-Pieces-of-Advice-for-Becoming-the-Worst-Developer-Possible" class="headerlink" title="Top 10 Pieces of Advice for Becoming the Worst Developer Possible"></a><a href="https://dev.to/dabit3/top-10-pieces-of-advice-for-becoming-the-worst-developer-possible-3kke" target="_blank" rel="noopener">Top 10 Pieces of Advice for Becoming the Worst Developer Possible</a></h3><p><strong>這是今年看過最反指標的文章沒有之一，新手閱讀可能會有相當大的風險被誤導</strong>，所以在看著文章笑笑的同時，千萬不要錯誤理解作者的意思了哦！</p><h2 id="前端-in-鐵人賽"><a href="#前端-in-鐵人賽" class="headerlink" title="前端 in 鐵人賽"></a>前端 in 鐵人賽</h2><h3 id="『-Vue-2-1-Day1-』Hello-Vue-2-1"><a href="#『-Vue-2-1-Day1-』Hello-Vue-2-1" class="headerlink" title="『 Vue 2+1 Day1 』Hello Vue 2+1"></a><a href="https://ithelp.ithome.com.tw/articles/10237485" target="_blank" rel="noopener">『 Vue 2+1 Day1 』Hello Vue 2+1</a></h3><p>隨著 2020/07/18 Vue3 RC (Release Candidate) 的發佈 Vue 3 is now in RC 代表著我們已經快要迎接 Vue 的下一個世代了~<br>也意味著在這每天醒來都有新玩意的前端世界，應該要好好的加緊腳步跟上了！ Vue3 多了什麼好用的功能，以及有哪些變動？一起來看看。- 引用自原文</p><h3 id="JavaScript基本功修練：Day2-瀏覽器與JavaScript引擎"><a href="#JavaScript基本功修練：Day2-瀏覽器與JavaScript引擎" class="headerlink" title="JavaScript基本功修練：Day2 - 瀏覽器與JavaScript引擎"></a><a href="https://ithelp.ithome.com.tw/articles/10238495" target="_blank" rel="noopener">JavaScript基本功修練：Day2 - 瀏覽器與JavaScript引擎</a></h3><p>JS 基本功修煉是每年我最喜歡的系列，基本功就是要不斷複習呀！V8 引擎, AST tree 的生成，各種原理是需要知道的。</p><h3 id="你所不知道的各種前端-Debug-技巧"><a href="#你所不知道的各種前端-Debug-技巧" class="headerlink" title="你所不知道的各種前端 Debug 技巧"></a><a href="https://ithelp.ithome.com.tw/users/20129636/ironman/3382" target="_blank" rel="noopener">你所不知道的各種前端 Debug 技巧</a></h3><p>相信 Debug 是開發者每天必經的過程，能否順利 Debug 決定了開發者一整天的心情，即使如此卻較少看到開發者著墨在 Debug 技巧上，因此接下來的 30 天中，我將會介紹各種前端 Debug 技巧，還有我常用的小撇步，解救那些時常陷於 Debug 之苦卻難以脫身的網頁開發者們。- 引用自原文</p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><h3 id="Understanding-Memory-Leaks-in-Nodejs"><a href="#Understanding-Memory-Leaks-in-Nodejs" class="headerlink" title="Understanding Memory Leaks in Nodejs"></a><a href="https://link.medium.com/cpIEnhGz89" target="_blank" rel="noopener">Understanding Memory Leaks in Nodejs</a></h3><p>Memory Leak 是指因為程式沒寫好，導致程式在執行過程中沒辦法釋放那些不會再用到的記憶體，嚴重時可能會把系統的所有的記憶體都吃完造成 OOM(Out Of Memory)。雖然 Node.js 已經有 GC 會把用不到的記憶體釋放掉，但某些特殊情況下還是有可能發生 Memory Leak，一起來看看怎麼預防吧！</p><h3 id="We’re-under-attack-23-Node-js-security-best-practices"><a href="#We’re-under-attack-23-Node-js-security-best-practices" class="headerlink" title="We’re under attack! 23+ Node.js security best practices"></a><a href="https://link.medium.com/pwree6Mz89" target="_blank" rel="noopener">We’re under attack! 23+ Node.js security best practices</a></h3><p>雖然 server 被駭客入侵、資料被竊取聽起來很像是電影裡面才會有的情節，平常根本不會遇到，但現實生活中只要發生了可能就會造成非常嚴重的後果，像是網站被癱瘓、使用者資料外洩等等，所以在服務正式上線之前，記得要看看資安方面的 best practice</p><h3 id="非同步程式碼之霧：Node-js-的事件迴圈與-EventEmitter"><a href="#非同步程式碼之霧：Node-js-的事件迴圈與-EventEmitter" class="headerlink" title="非同步程式碼之霧：Node.js 的事件迴圈與 EventEmitter"></a><a href="https://www.eebreakdown.com/2016/09/nodejs-eventemitter.html" target="_blank" rel="noopener">非同步程式碼之霧：Node.js 的事件迴圈與 EventEmitter</a></h3><p>事件迴圈（Event Loop）是 Node.js 最核心的 feature 之一，他讓 Node.js 可以用很快的速度在各個非同步 function 間進行切換，而且使用者也不用自己對各個 Thread 進行管理。雖然如此，如果沒有真正搞懂 Event Loop 的運作機制，可能會讓你程式跑起來跟預期的不一樣，所以快來看看這篇關於 Event Loop 與 EventEmitter 的分析吧～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="SAM-Seamless-Network：FortiGate-VPN裝置含有中間人攻擊風險-amp-駭客開始利用Windows-Server的Zerologon漏洞發動攻擊"><a href="#SAM-Seamless-Network：FortiGate-VPN裝置含有中間人攻擊風險-amp-駭客開始利用Windows-Server的Zerologon漏洞發動攻擊" class="headerlink" title="SAM Seamless Network：FortiGate VPN裝置含有中間人攻擊風險 &amp; 駭客開始利用Windows Server的Zerologon漏洞發動攻擊"></a><a href="https://www.ithome.com.tw/news/140233" target="_blank" rel="noopener">SAM Seamless Network：FortiGate VPN裝置含有中間人攻擊風險</a> &amp; <a href="https://www.ithome.com.tw/news/140190" target="_blank" rel="noopener">駭客開始利用Windows Server的Zerologon漏洞發動攻擊</a></h3><p>雖然已經有很多的 IT 新聞跟消息都在講這兩個漏洞，但是因為這兩個的風險都滿高的，所以在此特別再提一次，提醒還沒有更新的人趕快排時程更新，不然等到被駭客利用這兩個漏洞鑽進來就不好了 T_T</p><h3 id="TOC-Approves-KubeEdge-as-Incubating-Project"><a href="#TOC-Approves-KubeEdge-as-Incubating-Project" class="headerlink" title="TOC Approves KubeEdge as Incubating Project"></a><a href="https://www.cncf.io/blog/2020/09/16/toc-approves-kubeedge-as-incubating-project/" target="_blank" rel="noopener">TOC Approves KubeEdge as Incubating Project</a></h3><p>KubeEdge 是一個讓原生容器化應用篇排系統可以架設於 Edge 的開源專案，而他其實是站在巨人 (Kubernetes) 的肩膀上開發而成，於九月中被加入到 CNCF 的 Incubating Project，看來後市看漲，自己對於 Edge Computing 這塊是還沒有什麼涉略，不過看起來是個很有趣的專案</p><h3 id="Offensive-Terraform-Modules"><a href="#Offensive-Terraform-Modules" class="headerlink" title="Offensive Terraform Modules"></a><a href="https://offensive-terraform.github.io/" target="_blank" rel="noopener">Offensive Terraform Modules</a></h3><p>好酷的網頁，裡面提供了幾種攻擊者會使用的模式，而且附上了使用 Terraform 的實作方式XD</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 47 期 - 鐵人賽開賽了，那就來新增一個鐵人賽的分類推薦好文給大家</title>
      <link href="/2020/09/22/47-iron-man-game-is-starting/"/>
      <url>/2020/09/22/47-iron-man-game-is-starting/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="GitOps-—-透過-Argo-CD-認識-GitOps"><a href="#GitOps-—-透過-Argo-CD-認識-GitOps" class="headerlink" title="GitOps — 透過 Argo CD 認識 GitOps"></a><a href="https://medium.com/starbugs/gitops-%E9%80%8F%E9%81%8E-argo-cd-%E8%AA%8D%E8%AD%98-gitops-f0a596764fdd" target="_blank" rel="noopener">GitOps — 透過 Argo CD 認識 GitOps</a></h3><p>兩年前初次聽到 GitOps 的時候，我想說是不是只要 Git tag 觸發一些部屬相關的事情，像是下了某個 tag，就會觸發某 Ansible 的工作，部屬某一台伺服器。很遺憾，完全不是我想的那樣。在最近實際將 GitOps 整合進開發流程的過程中，深入研究了一下 GitOps。對 GitOps 有了多一點的了解，趁這個機會來跟大家分享一下。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="5-SOLID-principles-with-JavaScript-How-to-make-your-code-SOLID"><a href="#5-SOLID-principles-with-JavaScript-How-to-make-your-code-SOLID" class="headerlink" title="5 SOLID principles with JavaScript. How to make your code SOLID"></a><a href="https://dev.to/denisveleaev/5-solid-principles-with-javascript-how-to-make-your-code-solid-1kl5" target="_blank" rel="noopener">5 SOLID principles with JavaScript. How to make your code SOLID</a></h3><p>SOLID 是物件導向的基本原則，但是主要都是為了讓程式好維護且易於擴充的程式碼而已，一起來看看如何運用 JavaScript 玩轉 SOLID 的特性吧！</p><h3 id="How-to-Build-and-Validate-Beautiful-Forms-with-Vanilla-HTML-CSS-amp-JS"><a href="#How-to-Build-and-Validate-Beautiful-Forms-with-Vanilla-HTML-CSS-amp-JS" class="headerlink" title="How to Build and Validate Beautiful Forms with Vanilla HTML, CSS, &amp; JS"></a><a href="https://www.freecodecamp.org/news/build-and-validate-beautiful-forms-with-vanilla-html-css-js/" target="_blank" rel="noopener">How to Build and Validate Beautiful Forms with Vanilla HTML, CSS, &amp; JS</a></h3><p>如果你使用 React、Vue 或 Angular，那你一定可以用它們製作許多厲害的表單，但如果你還不熟網頁開發的話，建議還是可以先用原生的方式撰寫一些簡單的頁面，來加強自己的基本知識哦！</p><h3 id="Vue3-0-不畏惧祖传代码的-Composition-API"><a href="#Vue3-0-不畏惧祖传代码的-Composition-API" class="headerlink" title="Vue3.0 不畏惧祖传代码的 Composition API"></a><a href="https://juejin.im/post/6874748339246776327" target="_blank" rel="noopener">Vue3.0 不畏惧祖传代码的 Composition API</a></h3><p>前陣子才知道原來 Vue 在 GitHub 上的 star 數已經比 React 還要高了，而前陣子我也才剛學習 Vue 框架，Vue3 就接著出來，從文中的計時器例子來看 Vue3 真的改善了 Vue 需要定義許多區塊的問題（但別看一開始的那幾張圖，我完全看不懂，哈哈哈哈哈）！</p><h2 id="電腦科學"><a href="#電腦科學" class="headerlink" title="電腦科學"></a>電腦科學</h2><h3 id="進程、線程、協程，傻傻分得清楚！"><a href="#進程、線程、協程，傻傻分得清楚！" class="headerlink" title="進程、線程、協程，傻傻分得清楚！"></a><a href="https://medium.com/@oldmo860617/%E9%80%B2%E7%A8%8B-%E7%B7%9A%E7%A8%8B-%E5%8D%94%E7%A8%8B-%E5%82%BB%E5%82%BB%E5%88%86%E5%BE%97%E6%B8%85%E6%A5%9A-a09b95bd68dd" target="_blank" rel="noopener">進程、線程、協程，傻傻分得清楚！</a></h3><p>要成為一個優秀的軟體工程師，一定要掌握作業系統中進程（Process）跟線程（Thread）的概念，雖然不了解也可以寫出跑得動的程式，但效能方面可能就不會太好</p><h3 id="前端工程師用-javaScript-學演算法"><a href="#前端工程師用-javaScript-學演算法" class="headerlink" title="前端工程師用 javaScript 學演算法"></a><a href="https://ithelp.ithome.com.tw/articles/10213184" target="_blank" rel="noopener">前端工程師用 javaScript 學演算法</a></h3><p>要成為一個優秀的軟體工程師（怎麼又是這個開場 XD），資料結構跟演算法也是不可或缺的。這一系列介紹了各種資料結構如 Stack、Queue、Linked List 還有很多種演算法，重點是他還是用 JS 寫的！不太熟悉 C/C++ 又想練演算法的話看這個就對了</p><h3 id="顛覆世界的「電腦」是怎麼誕生的呢？"><a href="#顛覆世界的「電腦」是怎麼誕生的呢？" class="headerlink" title="顛覆世界的「電腦」是怎麼誕生的呢？"></a><a href="https://pansci.asia/archives/119338" target="_blank" rel="noopener">顛覆世界的「電腦」是怎麼誕生的呢？</a></h3><p>身為一個軟體工程師，就算不懂作業系統跟演算法，也一定要知道電腦是怎麼怎麼發明出來的。這篇文章會跟大家介紹到 <strong>馮．紐曼</strong> 跟 <strong>圖靈</strong> 這兩個電腦科學界的名人，沒有他們兩個，很可能就沒有今天的電腦（後面太偏數學看不懂沒關係，只要知道這兩個人就可以了 XD）</p><h2 id="鐵人賽"><a href="#鐵人賽" class="headerlink" title="鐵人賽"></a>鐵人賽</h2><h3 id="歐洲碼農的新手村任務“專欄介紹"><a href="#歐洲碼農的新手村任務“專欄介紹" class="headerlink" title="歐洲碼農的新手村任務“專欄介紹"></a><a href="https://ithelp.ithome.com.tw/articles/10237516" target="_blank" rel="noopener">歐洲碼農的新手村任務“專欄介紹</a></h3><p>由在柏林工作的資料科學家 bymiachang 帶來歐洲的求職經驗分享。內容包含個面相的求職思考，好期待這個系列文阿。</p><h3 id="I-Want-To-Know-React-Component-內部原理-amp-使用技巧"><a href="#I-Want-To-Know-React-Component-內部原理-amp-使用技巧" class="headerlink" title="I Want To Know React - Component 內部原理 &amp; 使用技巧"></a><a href="https://ithelp.ithome.com.tw/articles/10241673" target="_blank" rel="noopener">I Want To Know React - Component 內部原理 &amp; 使用技巧</a></h3><p>我想知道 React 多一點，這個系列文介紹了 React.js 的運用方式，與內部原理。這篇介紹的是 prop，下一篇則是介紹 state。</p><h3 id="拯救資工系學生的基本素養—使用-GDB-除錯基本教學"><a href="#拯救資工系學生的基本素養—使用-GDB-除錯基本教學" class="headerlink" title="拯救資工系學生的基本素養—使用 GDB 除錯基本教學"></a><a href="https://ithelp.ithome.com.tw/articles/10241563" target="_blank" rel="noopener">拯救資工系學生的基本素養—使用 GDB 除錯基本教學</a></h3><p>由知名技術人微中子帶來的，GDB Debug Rust 的影片教學。也有<a href="https://tigercosmos.xyz/post/2020/09/system/debug-gdb/" target="_blank" rel="noopener">文章</a>可以看。我 ok，你先看。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Docker-Desktop-把-Snyk-直接整合在一起了！"><a href="#Docker-Desktop-把-Snyk-直接整合在一起了！" class="headerlink" title="Docker Desktop 把 Snyk 直接整合在一起了！"></a><a href="https://www.docker.com/blog/secure-from-the-start-shift-vulnerability-scanning-left-in-docker-desktop/" target="_blank" rel="noopener">Docker Desktop 把 Snyk 直接整合在一起了！</a></h3><p>今年五月就有發佈 Docker 跟 Snyk 要一起合作的消息，而今天一起推出直接在 Docker Desktop CLI 中可以透過 Snyk Sacn Container Image 的功能，沒錯！以後只要在 Docker Image 已經在本機端，再多下一個 <code>~$ docker scan #{IMAGE_NAME}</code> 就可以幫開發者立即完成掃描，立即更新 Docker Desktop 到最新版，馬上離 DevSecOps 又更近了一步XD</p><h3 id="GitHub-CLI-GA-啦～"><a href="#GitHub-CLI-GA-啦～" class="headerlink" title="GitHub CLI GA 啦～"></a><a href="https://github.blog/2020-09-17-github-cli-1-0-is-now-available/" target="_blank" rel="noopener">GitHub CLI GA 啦～</a></h3><p>再經過 Beta 公測之後，GitHub CLI 於今天正式宣布 GA，以後滿多 GitHub 平台的操作都可以透過 CLI 來完成，讓熱愛使用 Terminal 的開發者更方便了XD 例如可以列出有什麼 Issue，簡易的管理 PR；而且他有個 subcommand <code>~$ gh api</code> 允許使用者可以無受限地直接存取 GitHub API，底下附上 Repository，有興趣的人可以趕快裝來玩玩看嘍！</p><h3 id="gitlab-com-搬遷到-K8S-運行一年的酸甜苦辣"><a href="#gitlab-com-搬遷到-K8S-運行一年的酸甜苦辣" class="headerlink" title="gitlab.com 搬遷到 K8S 運行一年的酸甜苦辣"></a><a href="https://about.gitlab.com/blog/2020/09/16/year-of-kubernetes/" target="_blank" rel="noopener">gitlab.com 搬遷到 K8S 運行一年的酸甜苦辣</a></h3><p>差不多在一年前 GitLab 的 Infra 部門決定要將運行在 gitlab.com 上的所有服務搬遷到 K8S 上，一路上遇到許多的挑戰，因為不只是要搬而已，還必須要管理搬遷過渡時期的混和部署，在過程中學習到了不少值得分享的課題，因此有了這篇文章；在舊環境是使用 VM 搭配上 Chef 來做 Provision 或是既有環境的管理，而新的環境則是則是使用 Terraform 跟 Helm 來完成所有的事情，也把這些設定的相關組態開源成三個專案 k8s-workloads/gitlab-com, k8s-workloads/gitlab-helmfiles, gitlab-com-infrastructure (Terraform + Heml 真的是在 Cloud Native 時代很棒的管理組合，自己也都是這樣弄)，而搬遷過程中學習到了幾件事情包含了…</p><ol><li><p>跨 Availability Zone 網路流量所造成的 GCP 帳單金額上升，所以他們正在考慮將使用到大量頻寬服務拆分到其他獨立的單一 AZ K8S Cluster，將 Redundancy 實作在 Cluster 層級</p></li><li><p>在 K8S Pod 資源的管理上，本來是使用較低的 Request 搭配上較高 Limit，不過這樣會造成 Pod 一直在 Node 之間被趕來趕去的；所以後來對於 Memory 需求量比較大的應用服務會使用 較高的 Request 搭上上較低的 Limit</p></li><li><p>在這一年間也順便改進了監控跟管理 SLO 的方式，而且在搬遷的過程中除了要一直持續的監看 Metric 變化之外，也要搭配 Log 一起看，因為有一些問題發生了也無法立即從 Metric 觀察出來，而且 User Ruqest 會同時被送到舊的 VM 跟新的 K8S 環境上，必須要有辦法兩個同時一起監控</p></li><li><p>利用 Canary 的方式，再將流量逐漸導流到新的 K8S Cluster 時，持續的監控是否有達到訂定的 SLO，舊的 VM 環境還是會留著，因為要是遇到問題的話就要 Rollback 回舊的環境</p></li><li><p>Pod 啟動時間太長在準備搬遷的一開始就有被發現，例如 Sidekiq 花了兩分鐘才啟動完畢，而原因是因為 HPA 雖然可以很好的應付增長的流量，但是遇到突然的 Spike 時，節點會來不及生出來；所以後來使用比較大的 Pod Budget，並且讓 Scale Down 發生的時間點往後，在持續透過監控 SLO 的調教過程後，目前已經將時間縮短到 40 秒</p></li></ol><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 46 期 - 我叫姍姍，然後就遲到了</title>
      <link href="/2020/09/15/46-writing-drive-learn/"/>
      <url>/2020/09/15/46-writing-drive-learn/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="你應該要嘗試的-WDL（Writing-Drive-Learn，寫作驅動學習）"><a href="#你應該要嘗試的-WDL（Writing-Drive-Learn，寫作驅動學習）" class="headerlink" title="你應該要嘗試的 WDL（Writing-Drive Learn，寫作驅動學習）"></a><a href="https://medium.com/starbugs/%E4%BD%A0%E6%87%89%E8%A9%B2%E8%A6%81%E5%98%97%E8%A9%A6%E7%9A%84-wdl-writing-drive-learn-%E5%AF%AB%E4%BD%9C%E9%A9%85%E5%8B%95%E5%AD%B8%E7%BF%92-3f157c0ab30c" target="_blank" rel="noopener">你應該要嘗試的 WDL（Writing-Drive Learn，寫作驅動學習）</a></h3><p>Hi！大家好，我是神 Q 超人！這篇文章一樣先不談技術，想要和大家說說我已經持續快三年的習慣（其實我滿訝異自己能夠維持一個習慣那麼長的時間），那就是打技術文章這件事情。</p><p>先說結論，我認為編寫技術文章加速了我學習的速度和深度，也開拓了我與許多人的連結，包含各位正在看的 StarBugs 😃。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="7-JavaScript-blogs-to-follow-going-into-2021"><a href="#7-JavaScript-blogs-to-follow-going-into-2021" class="headerlink" title="7 JavaScript blogs to follow going into 2021"></a><a href="https://dev.to/mildrenben/javascript-blogs-to-follow-going-into-2021-29df" target="_blank" rel="noopener">7 JavaScript blogs to follow going into 2021</a></h3><p>你喜歡閱讀其他人寫的部落文章嗎？在本篇文章中列出了七個擁有豐富內容的 Blog 網站，如果你常常無聊就想要看國外的開發者都在幹嘛，那一定要全部發漏起來。</p><h3 id="10-UI-Elements-Web-Developers-Should-Know-About"><a href="#10-UI-Elements-Web-Developers-Should-Know-About" class="headerlink" title="10 UI Elements Web Developers Should Know About"></a><a href="https://hackernoon.com/10-ui-elements-web-developers-should-know-about-n1q3t3z" target="_blank" rel="noopener">10 UI Elements Web Developers Should Know About</a></h3><p>在我們選擇使用輸入框或是下拉選單的時候，各位有想過為什麼要使用嗎？文章中以 UX 的角度解析去分析各個 UI 對 UX 的價值在哪裡。</p><h3 id="React-TypeScript-❤️-The-good-parts-⚡"><a href="#React-TypeScript-❤️-The-good-parts-⚡" class="headerlink" title="React + TypeScript ❤️: The good parts ⚡"></a><a href="https://dev.to/diemax/react-typescript-the-good-parts-428f" target="_blank" rel="noopener">React + TypeScript ❤️: The good parts ⚡</a></h3><p>React 是國外最多人用的前端框架，而為了彌補 JavaScript 的缺點（或特色？）TypeScript 又慢慢在興起，雖然要導入 TypeScript 有點麻煩，但也還是能先來看看 TypeScript 幫了 React 什麼！</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="透過-Multi-Stage-Builds-改善持續交付流程"><a href="#透過-Multi-Stage-Builds-改善持續交付流程" class="headerlink" title="透過 Multi-Stage Builds 改善持續交付流程"></a><a href="https://tachingchen.com/tw/blog/docker-multi-stage-builds/" target="_blank" rel="noopener">透過 Multi-Stage Builds 改善持續交付流程</a></h3><p>在寫 Dockerfile 時 Multi-Stage Build 是個很好用的小技巧，透過在不同 stage 使用不同的 base image 可以讓你打包出來的 image 更輕量，不會東包西包把一堆用不到的東西都放在裡面</p><h3 id="使用-Docker-BuildKit-加速編譯-Image"><a href="#使用-Docker-BuildKit-加速編譯-Image" class="headerlink" title="使用 Docker BuildKit 加速編譯 Image"></a><a href="https://blog.wu-boy.com/2020/04/speed-up-docker-build-using-docker-buildkit/" target="_blank" rel="noopener">使用 Docker BuildKit 加速編譯 Image</a></h3><p>有時候 Dockerfile 一長，<code>docker build</code> 就要跑好久才能打包出 image，但透過 Docker 推出的 BuildKit 功能可以大幅加速打包的時間，而且啟用的方式也超簡單，還沒聽過 BuildKit 的朋友們趕快來看看吧</p><h3 id="10-Docker-Security-Best-Practices"><a href="#10-Docker-Security-Best-Practices" class="headerlink" title="10 Docker Security Best Practices"></a><a href="https://snyk.io/blog/10-docker-image-security-best-practices/" target="_blank" rel="noopener">10 Docker Security Best Practices</a></h3><p>雖然 Docker container 在執行時會跟 host 的環境隔離開來，但若一些地方沒注意的話還是有一些安全上的疑慮，所以快來看看這篇關於 Docker 的 security best practice 吧！</p><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h3 id="A-Guide-for-Contributing-to-Any-Open-Source-JavaScript-Project-Ever"><a href="#A-Guide-for-Contributing-to-Any-Open-Source-JavaScript-Project-Ever" class="headerlink" title="A Guide for Contributing to Any Open Source JavaScript Project Ever "></a><a href="https://dev.to/saurabhdaware/a-guide-for-contributing-to-any-open-source-javascript-project-ever-hi" target="_blank" rel="noopener">A Guide for Contributing to Any Open Source JavaScript Project Ever </a></h3><p>一個可以貢獻任何 JS 開源專案的指南。作者總結了一些貢獻 Open Source 的思維，例如：選擇一個正確的 Repository，選擇一個正確的 Issue 去貢獻。跟之前文章不同的是，這是屬於作者的經驗談。如何觀看巨型的程式碼。</p><h3 id="LocalStorage-vs-Cookies-All-You-Need-To-Know-About-Storing-JWT-Tokens-Securely-in-The-Front-End"><a href="#LocalStorage-vs-Cookies-All-You-Need-To-Know-About-Storing-JWT-Tokens-Securely-in-The-Front-End" class="headerlink" title="LocalStorage vs Cookies: All You Need To Know About Storing JWT Tokens Securely in The Front-End"></a><a href="https://dev.to/cotter/localstorage-vs-cookies-all-you-need-to-know-about-storing-jwt-tokens-securely-in-the-front-end-15id" target="_blank" rel="noopener">LocalStorage vs Cookies: All You Need To Know About Storing JWT Tokens Securely in The Front-End</a></h3><p>Local Strorage vs Cookies，所有你需要知道的運用 JWT 的前端安全知識。前端一定會用到 JS，加上 hash tag 有下 #javascript 就分類到 JS 囉。我覺得 JWT 的出現帶給前端無限可能，如果可以掌握 JWT 的安全知識，對整體實力會有很大的提升。</p><h3 id="Learn-Data-Structure-and-Algorithm-in-JavaScript-Part-17"><a href="#Learn-Data-Structure-and-Algorithm-in-JavaScript-Part-17" class="headerlink" title="Learn Data Structure and Algorithm in JavaScript | Part 17"></a><a href="https://dev.to/edisonpebojots/learn-data-structure-and-algorithm-in-javascript-part-17-2ej0" target="_blank" rel="noopener">Learn Data Structure and Algorithm in JavaScript | Part 17</a></h3><p>從 JS 中學資料結構與演算法第 17 集，這系列滿有誠意的，好好打基礎。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Chef-以-US-220-Million-賣給-Progress！"><a href="#Chef-以-US-220-Million-賣給-Progress！" class="headerlink" title="Chef 以 US$ 220 Million 賣給 Progress！"></a><a href="https://investors.progress.com/news-releases/news-release-details/progress-announces-acquisition-chef" target="_blank" rel="noopener">Chef 以 US$ 220 Million 賣給 Progress！</a></h3><p>Chef 這幾年來也算是 <strong>DevSecOps</strong> 的領頭羊，因為 Configuration Manager 的角色其實在幾年前大家就已經做得差不多了，也開始進入比較不需要 CM 的 <strong>Container</strong> 時代，所以他開始投注很多的心血在 <strong>Security</strong> 跟 <strong>Compliance</strong> 領域上，當年一起打拼的 CM 工具就比較沒有花時間在此著墨，而 Progress 本身提供的產品和解決方案就是以大企業客戶為主，所以這樁交易其實不算意外；突然想起當年 Ansible 以 US$ 150 Million 賣給 Redhat，看來 Chef 比較值錢XD</p><h3 id="KubeSecOps-Pipeline-Container-security-in-a-cloudnative-ecosystem"><a href="#KubeSecOps-Pipeline-Container-security-in-a-cloudnative-ecosystem" class="headerlink" title="KubeSecOps Pipeline(Container security) in a cloudnative ecosystem"></a><a href="https://medium.com/@vaib16dec/kubesecops-pipeline-container-security-in-a-cloudnative-ecosystem-e59bf19a713d" target="_blank" rel="noopener">KubeSecOps Pipeline(Container security) in a cloudnative ecosystem</a></h3><p>Cloud Native 的 Security 這幾年越來越受到重視，尤其是在 Container Security 上面，每個相關的領域：Image Scanning, Container Compliance, Runtime Security, Network Security, Forensics, Kubernetes Audit 都已經有相對應的解決方案在蓬勃發展中，因此這篇文章想要分享如何透過這些解決方案來設計 Security Pipeline，對於 Cloud Native Security 有興趣的人可以參考看看此篇文章</p><h3 id="Letsencrypt-the-Good-The-bad-and-the-Ugly"><a href="#Letsencrypt-the-Good-The-bad-and-the-Ugly" class="headerlink" title="Letsencrypt, the Good, The bad and the Ugly"></a><a href="https://jacquesmattheij.com/letsencrypt-good-bad-ugly/" target="_blank" rel="noopener">Letsencrypt, the Good, The bad and the Ugly</a></h3><p>Letsencrypt 核心思想是希望為網路應用服務提供免費的 SSL Certificate, 用以提高 HTTPS 在整個網路世界中的普及程度，從 2016年4月至今同已頒發了超過 10 億張 Certificate，不過他同時也有一些缺點，就讓這篇文章的作者來述說他遇到的諸多問題！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 45 期 - 別猶豫了，今天就上 Github 參與開源專案吧！</title>
      <link href="/2020/09/08/45-start-contributing-to-open-source-today/"/>
      <url>/2020/09/08/45-start-contributing-to-open-source-today/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="別猶豫了，今天就上-Github-參與開源專案吧！"><a href="#別猶豫了，今天就上-Github-參與開源專案吧！" class="headerlink" title="別猶豫了，今天就上 Github 參與開源專案吧！"></a><a href="https://medium.com/starbugs/start-contributing-to-open-source-projects-today-5daa4dda2b3e" target="_blank" rel="noopener">別猶豫了，今天就上 Github 參與開源專案吧！</a></h3><p>想讓自己的 Github profile 更精彩，但卻不知道怎麼開始參與開源專案嗎？<br>這週的專欄會跟大家分享 <strong>我自己都是怎麼找到適合的開源專案</strong> 以及 <strong>我可以為專案貢獻什麼</strong>，希望大家在看完之後都能夠鼓起勇氣送出 PR，不只為了自己的技術成長，也為開源的世界貢獻一份心力</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="【前端体系】从一道面试题谈谈对-EventLoop-的理解"><a href="#【前端体系】从一道面试题谈谈对-EventLoop-的理解" class="headerlink" title="【前端体系】从一道面试题谈谈对 EventLoop 的理解"></a><a href="https://juejin.im/post/6868849475008331783" target="_blank" rel="noopener">【前端体系】从一道面试题谈谈对 EventLoop 的理解</a></h3><p>JavaScript 的 Event Loop 一直是相當重要的觀念，在 JavaScript 有許多同步與非同步的事件，當它們被寫在一起的時候，你會知道誰先執行了嗎？</p><h3 id="10-lesser-known-Web-APIs-you-may-want-to-use"><a href="#10-lesser-known-Web-APIs-you-may-want-to-use" class="headerlink" title="10 lesser-known Web APIs you may want to use"></a><a href="https://dev.to/atapas/10-lesser-known-web-apis-you-may-want-to-use-5g0g" target="_blank" rel="noopener">10 lesser-known Web APIs you may want to use</a></h3><p>作者介紹了幾個沒什麼人知道的 API，但看了一下後發現其實有些功能的實用度滿高的啊！</p><h3 id="Semantic-HTML-And-Why-Does-it-Matter"><a href="#Semantic-HTML-And-Why-Does-it-Matter" class="headerlink" title="Semantic HTML And Why Does it Matter"></a><a href="https://dev.to/dailydotdev/semantic-html-and-why-does-it-matter-4kjh" target="_blank" rel="noopener">Semantic HTML And Why Does it Matter</a></h3><p>哈哈哈，不得不說這篇文章的第一張圖片非常加分，看到第一眼直接噗嗤笑出來。之前曾經看到有人在討論說，前端切版只用一堆 <code>div</code> 加 CSS 是非常不專業的做法，因為在 HTML 裡其實還提供了許多語意性更強的標籤讓你在各種不同的情況下做使用。</p><h2 id="Open-Source"><a href="#Open-Source" class="headerlink" title="Open Source"></a>Open Source</h2><h3 id="用-Git-這麼久了，你知道-commit-是可以偽造的嗎"><a href="#用-Git-這麼久了，你知道-commit-是可以偽造的嗎" class="headerlink" title="用 Git 這麼久了，你知道 commit 是可以偽造的嗎"></a><a href="https://medium.com/starbugs/how-to-fake-the-author-of-git-commit-f44453b70afc" target="_blank" rel="noopener">用 Git 這麼久了，你知道 commit 是可以偽造的嗎</a></h3><p>雖然推薦自己的文章有點不好意思 XD，不過很多比較大的開源專案會希望你在參與時，最好可以用 gpg 簽署自己的 commit，這樣才不會有身份被冒用的情況</p><h3 id="我在-GitHub-參與開源貢獻專案的日子"><a href="#我在-GitHub-參與開源貢獻專案的日子" class="headerlink" title="我在 GitHub 參與開源貢獻專案的日子"></a><a href="https://coscup.org/2018/programs/github/" target="_blank" rel="noopener">我在 GitHub 參與開源貢獻專案的日子</a></h3><p>這是 2018 年 COSCUP（開源人年會）的其中一場議程，講者 Peter 在演講中分享了他是如何誤打誤撞加入了貢獻開源專案的行列，而且也分享了參與開源專案好幾年以來的心得，滿有趣的</p><h3 id="8-Productivity-Tips-for-GitHub"><a href="#8-Productivity-Tips-for-GitHub" class="headerlink" title="8 Productivity Tips for GitHub"></a><a href="https://dev.to/_darrenburns/8-productivity-tips-for-github-44kn" target="_blank" rel="noopener">8 Productivity Tips for GitHub</a></h3><p>如果沒有常用 Github 可能會不知道某些很好用的功能，像是 Github 現在可以像 IDE 一樣直接跳到某個函式，在搜尋檔案時也支援模糊搜尋，還有按個快捷鍵就可以看到專案的 git blame，如果懶得 clone 到本機的話完全可以在 Github 上進行 code review XD</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><h3 id="The-Top-Ruby-Weekly-links-of-2018"><a href="#The-Top-Ruby-Weekly-links-of-2018" class="headerlink" title="The Top Ruby Weekly links of 2018"></a><a href="https://medium.com/rubyinside/the-top-ruby-weekly-links-of-2018-4b1dc99bd171" target="_blank" rel="noopener">The Top Ruby Weekly links of 2018</a></h3><p>追一下未追的 Ruby Weekly 推薦文章。Ruby Weekly 是 Ruby 知名的週刊，來看看 2018 年哪些推薦連結是最熱門的，第一個是由 DHH 宣布的 Action Text for Rails 6。第二個是 Serverless 的未來。第三個是各種使用一行 Ruby 的方式。非常有趣且具指標性的一篇文章。</p><h3 id="Soft-Delete-with-Discard"><a href="#Soft-Delete-with-Discard" class="headerlink" title="Soft Delete with Discard"></a><a href="https://www.driftingruby.com/episodes/soft-delete-with-discard" target="_blank" rel="noopener">Soft Delete with Discard</a></h3><p>用 Discard 來實作軟刪除，軟刪除自幹的比較不美麗，Discard 提供了一致的介面來實作軟刪除。繞了一圈回頭看 Gem 的設計有不一樣的風景。</p><h3 id="Rails-adds-a-minimal-flag-to-generate-a-new-application"><a href="#Rails-adds-a-minimal-flag-to-generate-a-new-application" class="headerlink" title="Rails adds a minimal flag to generate a new application"></a><a href="https://blog.saeloun.com/2020/09/02/rails-adds-scaffolding-new-app-with-minimal-flag.html" target="_blank" rel="noopener">Rails adds a minimal flag to generate a new application</a></h3><p>Rails 新增了一個很方便的指令，來新增一個新的專案，叫做 <code>rails --minimal</code>，以往需要手動的手續少了一點，黑魔法多了一點。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Announcing-the-General-Availability-of-Bottlerocket-a-new-open-source-Linux-based-operating-system-purpose-built-to-run-containers"><a href="#Announcing-the-General-Availability-of-Bottlerocket-a-new-open-source-Linux-based-operating-system-purpose-built-to-run-containers" class="headerlink" title="Announcing the General Availability of Bottlerocket, a new open source Linux-based operating system purpose-built to run containers"></a><a href="https://aws.amazon.com/about-aws/whats-new/2020/08/announcing-general-availability-of-bottlerocket/" target="_blank" rel="noopener">Announcing the General Availability of Bottlerocket, a new open source Linux-based operating system purpose-built to run containers</a></h3><p><strong>CoreOS</strong> 在五月 EoS 之後，想要使用 Container Linux 有兩條去路，比較無痛的方式為轉換到 <a href="https://www.flatcar-linux.org/" target="_blank" rel="noopener"><strong>FlatCar</strong></a>，小小痛的方式為轉換到 <a href="https://getfedora.org/en/coreos?stream=stable" target="_blank" rel="noopener"><strong>Fedora CoreOS</strong></a>，而在今天有了一個新的選擇 AWS Bottlerocket！把文件大概看了一下之後，發現真的要從 CoreOS 體系轉換過來應該跟砍掉重練沒有兩樣 XD 因為…</p><ol><li><p>他並不支援 Ignition 的 Provision 方式，而是使用相近於 Cloud-Init 的做法，使用一個 TOML 格式的 userdata 來達成一些簡單的初始設定方式</p></li><li><p>在 K8S Control Plane 已經存在的前提下，要使用他應該會滿簡單的 (不存在的話，我目前看文件還沒有找到怎麼比較簡單把 K8S Control Plane 在裡面跑起來)</p></li><li><p>他比較獨特的地方在於他是有提供 API 的 OS，可以讓維運人員透過 API 來做一些日常工作，例如更新東西，重開機之類的，我覺得這個功能好棒 XD</p></li><li><p>他還有提供 Admin Container (預設是關閉的)，需要的時候他會使用獨立的 containerd 來啟動，其中含有 SSH Server，讓使用者可以登入進去救火或是 Trouble Shooting，而這個 Container 也可以替換成自己客製化過的版本</p></li><li><p>在維運上最重要的版本更新還有安全問題也都有特別設計過，有興趣的人可以進去文件裡面看一下<br>自己覺得比當年 CoreOS 做到的又更完整且更多，很多創新的東西加在裡面，目前缺乏的就是更多人使用的經驗，還有週邊工具生態系的建立，處於既期待又怕受傷害的階段 XD</p></li></ol><h3 id="Introducing-GitHub-Container-Registry"><a href="#Introducing-GitHub-Container-Registry" class="headerlink" title="Introducing GitHub Container Registry"></a><a href="https://github.blog/2020-09-01-introducing-github-container-registry/" target="_blank" rel="noopener">Introducing GitHub Container Registry</a></h3><p>GitHub 最近好多消息，包含把 <a href="https://github.blog/2020-08-25-upgrading-github-to-ruby-2-7/" target="_blank" rel="noopener"><strong>Ruby 升級到 2.7</strong></a>，<a href="https://github.blog/2020-08-27-secure-at-every-step-putting-devsecops-into-practice-with-code-scanning/" target="_blank" rel="noopener"><strong>推出 Code Scanning 來達成 Shift Left 的 DevSecOps 目標</strong></a>，而在今天推出了 Container Registry (很剛好 #Dockerhub 最近也有一些動作)，每兩三天就有一個新功能 PR 宣布；GitHub 目前身為 VCS 的領頭羊，這一年來站在這個位置上所推出的新功能除了有示範作用之外，也對於整體軟體生態圈有正面的幫助，帶領著開發者一起往更好的方面邁進，看來被微軟收購完沒有走下坡？！</p><h3 id="5-hottest-startups-in-the-cloud-and-Kubernetes-monitoring-space"><a href="#5-hottest-startups-in-the-cloud-and-Kubernetes-monitoring-space" class="headerlink" title="5 hottest startups in the cloud and Kubernetes monitoring space"></a><a href="https://techgenix-com.cdn.ampproject.org/v/techgenix.com/cloud-and-kubernetes-monitoring/amp/?usqp=mq331AQFKAGwASA%3D&amp_js_v=0.1#referrer=https%3A%2F%2Fwww.google.com&amp_tf=From%20%251%24s&ampshare=http%3A%2F%2Ftechgenix.com%2Fcloud-and-kubernetes-monitoring%2F" target="_blank" rel="noopener">5 hottest startups in the cloud and Kubernetes monitoring space</a></h3><p>五間最火紅的雲端及 Kubernetes 監控新創公司，自己是都還沒有用過，先筆記下來等有需要的時候再來試試看了 = =+</p><ul><li>Glasnostic</li><li>OverOps</li><li>ChaosSearch</li><li>Lightstep</li><li>Humio</li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 44 期 - 連起來很慢! 慢在哪? - 網路延遲的小知識</title>
      <link href="/2020/09/01/44-network-latency-knownledge/"/>
      <url>/2020/09/01/44-network-latency-knownledge/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="連起來很慢-慢在哪-網路延遲的小知識"><a href="#連起來很慢-慢在哪-網路延遲的小知識" class="headerlink" title="連起來很慢! 慢在哪? - 網路延遲的小知識"></a><a href="https://medium.com/starbugs/%E9%80%A3%E8%B5%B7%E4%BE%86%E5%BE%88%E6%85%A2-%E6%85%A2%E5%9C%A8%E5%93%AA-%E7%B6%B2%E8%B7%AF%E5%BB%B6%E9%81%B2%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AD%98-6395ddcc227" target="_blank" rel="noopener">連起來很慢! 慢在哪? - 網路延遲的小知識</a></h3><p>維護的雲端服務有沒有遇過一種狀況就是…看著綠油油的 Dashboard 想說一切都好好的啊！但真實使用者卻已經火冒三丈，客服電話也已經被打到滿線，因為一般的監控工具都是架設在內部網路 (Intranet) 從內部來進行監控，跟來自於世界各地的一般使用者是完全不同的出發點，所以會有監控上的盲點，這種情形就會需要外部的監控服務來模擬一般使用者行為，用以確保服務是否在正常運作中，而在外部網路的監控中，通常會有哪一些重點需要注意，遇到問題的時候又該如何找出癥結點？</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="What-is-ECMAScript-and-How-is-it-Different-From-JavaScript"><a href="#What-is-ECMAScript-and-How-is-it-Different-From-JavaScript" class="headerlink" title="What is ECMAScript and How is it Different From JavaScript?"></a><a href="hhttps://hackernoon.com/what-is-ecmascript-and-how-is-it-different-from-javascrip-m1263u76" target="_blank" rel="noopener">What is ECMAScript and How is it Different From JavaScript?</a></h3><p>大家知道 ECMAScript 和 JavaScript 有什麼不一樣嗎？有些時候你會看到這兩個名詞被擺在一起，甚至是從 ECMAScript 的規範中了解 JavaScript。但是即使如此，這 ECMAScrip 與 JavaScript 終究還是不同的東西，文章很清楚地說明了這件事，以及它們兩個的關係。</p><h3 id="How-to-Add-TypeScript-to-a-JavaScript-Project"><a href="#How-to-Add-TypeScript-to-a-JavaScript-Project" class="headerlink" title="How to Add TypeScript to a JavaScript Project"></a><a href="https://www.freecodecamp.org/news/how-to-add-typescript-to-a-javascript-project/" target="_blank" rel="noopener">How to Add TypeScript to a JavaScript Project</a></h3><p>如何把 TypeScript 加到 JavaScript 中，文章中不是只有告訴你如何導入而已，還介紹了 TypeScript 以及使用它的優勢，最後還會教你怎麼去洗腦團隊使用 TypeScript😂。</p><h3 id="Web开发应该知道的数据结构🍊"><a href="#Web开发应该知道的数据结构🍊" class="headerlink" title="Web开发应该知道的数据结构🍊"></a><a href="https://juejin.im/post/6866970001409064967" target="_blank" rel="noopener">Web开发应该知道的数据结构🍊</a></h3><p>隨著前端要處理的資料越來越多，但又不像後端有著強大的 Server 可以依靠，這時候如何選擇處理資料的方法就會變得很重要，本文不只介紹了資料結構的核心原理，還根據原理把資料結構用程式碼進行實作。</p><h2 id="CSS-樣式"><a href="#CSS-樣式" class="headerlink" title="CSS 樣式"></a>CSS 樣式</h2><h3 id="What-does-100-mean-in-CSS"><a href="#What-does-100-mean-in-CSS" class="headerlink" title="What does 100% mean in CSS?"></a><a href="https://wattenberger.com/blog/css-percents" target="_blank" rel="noopener">What does 100% mean in CSS?</a></h3><p>在寫 CSS 時我們很常會用到 <code>100%</code>，但 <code>100%</code> 放在不同屬性會有完全不同的效果，而這篇文分析了各種 <code>100%</code> 到底是怎麼計算出來的，而且還可以讓你用拖拉的方式調整樣式，讀完之後覺得學到很多新技巧 XD</p><h3 id="10-Ways-to-Center-a-Div-Horizontally-and-Vertically-in-CSS"><a href="#10-Ways-to-Center-a-Div-Horizontally-and-Vertically-in-CSS" class="headerlink" title="10 Ways to Center a Div Horizontally and Vertically in CSS"></a><a href="https://levelup.gitconnected.com/10-ways-to-center-a-div-horizontally-and-vertically-in-css-53ca5eb912db" target="_blank" rel="noopener">10 Ways to Center a Div Horizontally and Vertically in CSS</a></h3><p>不管是實際開發還是面試前端時都很常需要做到「水平垂直置中」，根據你想要置中的是 inline、block 還是 inline-block 元素又有不同的作法，所以這篇文直接幫你整理了十種方法，下次又忘記怎麼做時就看這篇吧！</p><h3 id="You-can-create-these-elements-without-JavaScript"><a href="#You-can-create-these-elements-without-JavaScript" class="headerlink" title="You can create these elements without JavaScript"></a><a href="https://dev.to/adrianbdesigns/you-can-create-these-elements-without-javascript-525a" target="_blank" rel="noopener">You can create these elements without JavaScript</a></h3><p>隨著 CSS 的語法越來越強大、瀏覽器的支援度也越來越高，現在很多效果像是 Modal 跟 Toggle 完全不用 JS 也能做出來，如果有時只是想做個簡單的靜態網站，又不想寫太多 JS，那就可以改成用 CSS 做～</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="Guide-to-GitOps"><a href="#Guide-to-GitOps" class="headerlink" title="Guide to GitOps"></a><a href="https://www.weave.works/technologies/gitops/" target="_blank" rel="noopener">Guide to GitOps</a></h3><p>GitOps 指南，介紹 GitOps 的原則，GitOps 與 IAC 到底有什麼不同？GitOps 原則一：整個系統都是聲明式的。<br>原則二：在Git中規範化了所需的規範系統狀態。原則三：被允許的改變可以自動套用到系統。原則四：軟體代理可以確保正確性，並且在有分歧時發出警報。</p><h3 id="Prometheus-Book"><a href="#Prometheus-Book" class="headerlink" title="Prometheus Book"></a><a href="https://yunlzheng.gitbook.io/prometheus-book/" target="_blank" rel="noopener">Prometheus Book</a></h3><p>看起來好像不錯的 Prometheus 書籍，收藏起來。</p><h3 id="Stop-only-using-console-log-and-use-the-built-in-node-debugger"><a href="#Stop-only-using-console-log-and-use-the-built-in-node-debugger" class="headerlink" title="Stop only using console.log and use the built-in node debugger"></a><a href="https://dev.to/nyxtom/stop-using-console-log-and-use-the-node-debugger-4402" target="_blank" rel="noopener">Stop only using console.log and use the built-in node debugger</a></h3><p>停止使用 console.log 在 node.js 除錯，用內建的 node debugger 吧！內文介紹了兩種 Debug 工具，node.js 原生的 inspect 指令與 Chrome 的 inspector，加速你的開發效率。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Jenkins-Git-Plugin-Performance-Improvement"><a href="#Jenkins-Git-Plugin-Performance-Improvement" class="headerlink" title="Jenkins Git Plugin Performance Improvement"></a><a href="https://www.jenkins.io/blog/2020/08/29/git-performance-improvement-phase3/" target="_blank" rel="noopener">Jenkins Git Plugin Performance Improvement</a></h3><p>從七月初開始就有看到 Jenkins 老爺爺使用到的 Git Plugin 即將更新的<a href="https://www.jenkins.io/blog/2020/07/09/git-performance-improvement-phase1/" target="_blank" rel="noopener">消息</a>，七月底的時候又發了一篇<a href="https://www.jenkins.io/blog/2020/07/29/git-performance-improvement-phase2/" target="_blank" rel="noopener">文章</a>更新一下進度，就在無聲無息一個月之後，總算盼到這次主要針對效能改善的改版發佈啦！透過 GitToolChooser 功能的實作之後，讓 Git Plugin 可以在 CLI Git 和 JGit 中間作切換，來達成讓整體 Git Fetch 解省將近 50 % 的時間，因此有在使用的人，推薦一定要更新此 Plugin 並且搭配這篇文章一起服用！</p><h3 id="Terraform-Feature-Flags-amp-Environment-Toggle-Design-Patterns"><a href="#Terraform-Feature-Flags-amp-Environment-Toggle-Design-Patterns" class="headerlink" title="Terraform Feature Flags &amp; Environment Toggle Design Patterns"></a><a href="https://build5nines.com/terraform-feature-flags-environment-toggle-design-patterns/" target="_blank" rel="noopener">Terraform Feature Flags &amp; Environment Toggle Design Patterns</a></h3><p>Infrastructure as Code 領域中最多人使用的 Terraform 也可以達成 Feature Toggle? 此篇文章鉅細彌遺地講解在 Terraform 中如何做到 Feature Toggle，讓使用 Terraform 管理雲端環境的開發者在此 Design Pattern 下，就算是使用同一份 HCL 程式碼也可以讓不同環境所管理的資源有所不同</p><h3 id="Secure-at-every-step-Putting-DevSecOps-into-practice-with-code-scanning"><a href="#Secure-at-every-step-Putting-DevSecOps-into-practice-with-code-scanning" class="headerlink" title="Secure at every step: Putting DevSecOps into practice with code scanning"></a><a href="https://github.blog/2020-08-27-secure-at-every-step-putting-devsecops-into-practice-with-code-scanning/" target="_blank" rel="noopener">Secure at every step: Putting DevSecOps into practice with code scanning</a></h3><p>身為管理地球上最多程式碼的 GitHub 在這兩三年來也逐漸地往 DevSecOps 靠攏當中，之前可以透過掃描套件管理程式定義檔按來發現有沒有引用到具有 Vulnerability 的函式庫，最近又發表了靜態程式碼掃描 Beta 測試版本，讓大家可以透過 Shift Left 來達成 DevSecOps，在問題發生之前就先把它解決掉！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 43 期 - 把握夏天的尾巴，曬太陽曬到烤焦</title>
      <link href="/2020/08/25/43-bask-in-the-sun/"/>
      <url>/2020/08/25/43-bask-in-the-sun/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="從-Github-開源指南｜學習如何貢獻開源專案"><a href="#從-Github-開源指南｜學習如何貢獻開源專案" class="headerlink" title="從 Github 開源指南｜學習如何貢獻開源專案"></a><a href="https://medium.com/starbugs/52807c598ed9" target="_blank" rel="noopener">從 Github 開源指南｜學習如何貢獻開源專案</a></h3><p>本週我們來讀一下「如何為開源做貢獻」。這份文件是 Github 的 Open Source Guide 開源指南，約莫兩年前剛出的時候全部是英文版的，已經三年了，拖到現在才讀（汗）。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="The-Boring-React-State-Management-Guide"><a href="#The-Boring-React-State-Management-Guide" class="headerlink" title="The Boring React State Management Guide"></a><a href="https://hackernoon.com/the-boring-react-state-management-guide-ee173ufl" target="_blank" rel="noopener">The Boring React State Management Guide</a></h3><p>標題雖然看起來很無聊，但內文一點也不！文章用許多實際的例子告訴你該如何正確的管理 React 的 State，值得一讀！</p><h3 id="被低估的CSS滤镜：drop-shadow"><a href="#被低估的CSS滤镜：drop-shadow" class="headerlink" title="被低估的CSS滤镜：drop-shadow"></a><a href="https://juejin.im/post/6863028044165038088" target="_blank" rel="noopener">被低估的CSS滤镜：drop-shadow</a></h3><p>相當有趣的 CSS 屬性，之前如果需要陰影就會馬上去找 <code>box-shadow</code> 來使用，但現在又多了一個很棒的選擇囉！</p><h3 id="21-Awesome-DEV-portfolios-for-your-inspiration"><a href="#21-Awesome-DEV-portfolios-for-your-inspiration" class="headerlink" title="21 Awesome DEV portfolios for your inspiration"></a><a href="https://dev.to/madza/21-awesome-dev-portfolios-for-your-inspiration-85n" target="_blank" rel="noopener">21 Awesome DEV portfolios for your inspiration</a></h3><p>每個前端工程師都會想要擁有一個屬於自己的網站，但是卻永遠都少了那麼一點靈感，告訴你這篇文一次就 21 個最讚的作品集通通送給你，讓靈感整個滿出來。</p><h2 id="Git-版本控制"><a href="#Git-版本控制" class="headerlink" title="Git 版本控制"></a>Git 版本控制</h2><h3 id="為你自己學-Git"><a href="#為你自己學-Git" class="headerlink" title="為你自己學 Git"></a><a href="https://gitbook.tw/#git--1" target="_blank" rel="noopener">為你自己學 Git</a></h3><p>雖然之前好像已經推薦過了，但說到 Git 還是得推一下龍哥的「為你自己學 Git」，雖然某一些章節需要付費才能解鎖，不過即便不付費也還是可以把 Git 的基本概念學好，很推薦對於 Git 的原理不太熟悉的新手讀</p><h3 id="9-useful-tricks-of-git-branch-you-might-not-know"><a href="#9-useful-tricks-of-git-branch-you-might-not-know" class="headerlink" title="9 useful tricks of git branch you might not know"></a><a href="https://link.medium.com/RnDtTUZzb9" target="_blank" rel="noopener">9 useful tricks of git branch you might not know</a></h3><p>如果你用 Git 已經好一陣子了，想學一些跟 git branch 有關的小技巧，譬如說快速切換到最近有新 commit 的 branch、列出已經被 merge 的 branch 等等，那可以看看這篇（不推薦入門 Git 的初學者看，可能會越看越亂）</p><h3 id="7-Amazing-Git-Extensions-for-VS-Code"><a href="#7-Amazing-Git-Extensions-for-VS-Code" class="headerlink" title="7 Amazing Git Extensions for VS Code"></a><a href="https://medium.com/better-programming/7-amazing-git-extensions-for-vs-code-4a8bd36c074b" target="_blank" rel="noopener">7 Amazing Git Extensions for VS Code</a></h3><p>如果你很常用 Git 而且剛好也有在用 VSCode，這邊有幾個超神的 extension 要推薦給你～文中推薦的 Git History、Git Blame 還有 GitLens 我都有在用，沒有他們真的不知道怎麼寫扣 XD</p><blockquote><p>這篇文是發佈在 Medium 付費牆上，看不到的人可以試試 <a href="https://github.com/manojVivek/medium-unlimited" target="_blank" rel="noopener">medium unlimited</a> 這個瀏覽器插件，Chome 跟 Firefox 都有哦</p></blockquote><h2 id="Ruby-語言"><a href="#Ruby-語言" class="headerlink" title="Ruby 語言"></a>Ruby 語言</h2><h3 id="What-Makes-Ruby-Beautiful-Metaprogramming"><a href="#What-Makes-Ruby-Beautiful-Metaprogramming" class="headerlink" title="What Makes Ruby Beautiful: Metaprogramming"></a><a href="https://dev.to/alexlion/what-makes-ruby-beautiful-metaprogramming-536a" target="_blank" rel="noopener">What Makes Ruby Beautiful: Metaprogramming</a></h3><p>是什麼讓 Ruby 變得那麼美：Metaprogramming。如果我要向一個五歲的小孩解釋 Meta Programming 是什麼？假設你想要畫一個陽光燦爛的城市，你用筆在紙上寫下「陽光燦爛的城市」，然後魔術就發生了。</p><h3 id="Rake-Task-enhance-Method-Explained"><a href="#Rake-Task-enhance-Method-Explained" class="headerlink" title="Rake::Task .enhance() Method Explained"></a><a href="https://dev.to/molly_struve/rake-task-enhance-method-explained-3bo0" target="_blank" rel="noopener">Rake::Task .enhance() Method Explained</a></h3><p>解釋 Rake::Task 中的 <code>.enhance()</code> 方法。Molly Struve 在貢獻 <a href="https://github.com/forem/forem" target="_blank" rel="noopener">forum software</a> 開源專案的時候，遇到了一個執行順序不固定的 bug，於是她去從 Rake::Task 中，發現了 <code>.enhance</code> 方法，成功了解決了這個 Bug，可喜可賀！</p><h3 id="Ruby-Literals"><a href="#Ruby-Literals" class="headerlink" title="Ruby Literals"></a><a href="https://www.w3resource.com/ruby/ruby-literals.php#:~:text=We%20have%20already%20seen%20literals,Booleans%20and%20nil" target="_blank" rel="noopener">Ruby Literals</a></h3><p>Ruby 的文字值，基本資料型態，例如：200 + 2_00 會等於 400，這是 Ruby 中的特殊寫法。% 在 Ruby 中的的使用。一些語言的基本，越熟悉閱讀的時候就不需要不斷查找。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="What’s-new-in-Kubernetes-1-19"><a href="#What’s-new-in-Kubernetes-1-19" class="headerlink" title="What’s new in Kubernetes 1.19?"></a><a href="https://sysdig.com/blog/whats-new-kubernetes-1-19/" target="_blank" rel="noopener">What’s new in Kubernetes 1.19?</a></h3><p>這次 1.19 的 34 個更新中，有 10 個是全新推出的功能， 8 個從 Beta 變成 Stable，2 個 K8S 專案的管理變更，其他 14 個則是既有功能的持續改善，依照慣例，讓我們來看看這次的重點更新：</p><ul><li><p>支援的時間週期將從 9 個月延長到 12 個月：隨著 K8S 專案越發穩定，而且根據調查結果，很多使用者都無法在 9 個月內升級，有將近 1/3 的使用者都還在使用已經沒有支援的版本，因此 LTS 團隊決定將本來 9 個月支援時間延長到 12 個月，讓大家多 3 個月的時間可以喘息一下</p></li><li><p>Deprecated API 的警告機制：從現在起 API Server 將會包含一個 Deprecated 相關資訊的警告 Header，告知 Client 這個 API 什麼時候會進入 Deprecated，什麼時候會真的被移除掉，有興趣的人可以使用最新版的 kubectl 就可以看到相關警告訊息</p></li><li><p>Beta 功能的存亡生死戰：以前一個功能進到 Beta 階段之後，就會被預設開啟，讓使用者可以使用，但這也造成此功能朝向更穩定的開發動力逐漸地消失掉，導致他可能在 Beta 停留的時間太久，例如 Ingress，所以以後假如一個功能進到 Beta 之後在 9 個月內就會被 Deprecated，除非 1) 他達成 GA 的條件變成 Stable，或是 2) 有準備好新的 Beta 版本，並且將舊的 Beta 版本淘汰掉</p></li><li><p>通用的短暫型儲存空間：有數種方式可以讓開發者定義短暫型的儲存空間，但是對於 K8S 支援的短暫型儲存空間 (例如：EmptyDir, Secrets, ConfigMap)，其功能也被限縮在 K8S 內，假如要讓特定的 CSI 也支援的話，那就還要去更新此 CSI Driver 才可以；所以此新功能提供了一個簡單的 API 讓任何的 Storage Driver 都可以直接動態來使用</p></li><li><p>讓 kubeadm 使用客製化的 Patch：不同的環境 (Dev, Test, Prod) 會有不同的組態設定是一件再正常不過的事情了，所以現在 kubeadm 工具提供了一個 flag –experimental-patches (從 –experimental-kustomize 複製過來，以後會變成 –patches)，讓使用者可以根據不同的環境使用不同的組態設定檔案</p></li></ul><h3 id="Announcing-Snyk’s-developer-first-Infrastructure-as-Code-security-capabilities"><a href="#Announcing-Snyk’s-developer-first-Infrastructure-as-Code-security-capabilities" class="headerlink" title="Announcing Snyk’s developer-first Infrastructure as Code security capabilities"></a><a href="https://snyk.io/blog/infrastructure-as-code-security/" target="_blank" rel="noopener">Announcing Snyk’s developer-first Infrastructure as Code security capabilities</a></h3><p>現在開發者有越來越多的機會使用 Code/Configuration 去定義資源，例如 <strong>Docker</strong>, <strong>Kubernetes</strong> 和 <strong>Terraform</strong> …等，所以 Snyk 平台現在推出 Security 掃描功能，底下範例是從 GitHub 匯入的 Terraform Module，透過 Synk 掃描之後，馬上就發現他並沒有通過 CIS 要求，而且應該要修正的地方會很清楚的被標示出來，讓開發者方便把問題修復掉，目前先支援 Docker, Kubernets 和 Terraform 管理 AWS 的部分，看來 IaC 的 Security 市場有越來越多人開始進來搶攻了！</p><h3 id="Graceful-shutdown-and-zero-downtime-deployments-in-Kubernetes"><a href="#Graceful-shutdown-and-zero-downtime-deployments-in-Kubernetes" class="headerlink" title="Graceful shutdown and zero downtime deployments in Kubernetes"></a><a href="https://learnk8s.io/graceful-shutdown" target="_blank" rel="noopener">Graceful shutdown and zero downtime deployments in Kubernetes</a></h3><p>建立/刪除 Deployment，其實牽扯到的操作都是 Pod，在建立 Pod 的時候，其實是循序漸進地把許多步驟一個一個完成 (Scheduler 分配 Pod 要去哪一個 Node，Kubelet 透過 CRI, CNI, CSI 的幫忙把 Pod 建立完畢，最後 Control Plane 再將 Pod IP 更新到 Endpoint 內)，其實只要有把 Readiness Probe 設定得當應該就不會遇到什麼大問題，不過再將 Pod 刪除的時候，把 Pod 砍掉跟把 IP 從 Endpoint 移除掉是同時發生的，假如 Pod 先被砍掉了，但是 IP 還在 Endpoint 內的話，還在運作或是服務中的請求就會收到影響，所以這邊會分成兩種型態來說明要怎麼讓 Pod 優雅的死掉</p><ul><li><p>General Pod: 解法當然就是讓 Pod 等一下再死，等到 IP 不存在於 Endpoint 時再死，K8S 預設會等待 30 秒才把 Process 砍掉，除非特別修改 terminationGracePeriodSeconds 在 Pod 中的預設值，也可以透過 preStop Hook 來延長被砍掉的時間，透過這些設定等到 Pod IP 被從 Endpoint 被移除掉之後再開始進行被砍掉的步驟，如此一來既有的服務請求就可以安心完成不會被影響到</p></li><li><p>Long-Running Pod: 但假如 Pod 要處理幾小時的影片轉檔，或是像 Websocket 這種類型的 Workload，就會建議使用 Rainbow Deployment 的方式，每次的部屬是建立新的 K8S Deployment，舊的 Deployment 繼續服務/運行既有的請求，新的 Deployment 就負責新的請求/任務；舊的 Deployment 等到沒有人用的時候再手動砍掉，或是自動砍掉 (Osiris 這個開源專案就是想要達成這個需求)</p></li></ul><h3 id="Critical-Jenkins-Server-Vulnerability-Could-Leak-Sensitive-Information"><a href="#Critical-Jenkins-Server-Vulnerability-Could-Leak-Sensitive-Information" class="headerlink" title="Critical Jenkins Server Vulnerability Could Leak Sensitive Information"></a><a href="https://thehackernews.com/2020/08/jenkins-server-vulnerability.html" target="_blank" rel="noopener">Critical Jenkins Server Vulnerability Could Leak Sensitive Information</a></h3><p>有在使用 <strong>Jenkins</strong> 的組織最近記得更新，因為根據最近揭露的 CVE-2019-17638 (CVSS 標記為 9.4 分) 顯示，Jenkins 使用到的 Eclipse Jetty 從版本 9.4.27.v20200227 到 9.4.29.v20200521 都有受到影響，可以讓未經授權的駭客擅自從 HTTP 回應中取得其他使用者的機敏資訊；Jetty 本身已經在上個月釋出更新版本 9.4.30.v20200611，Jenkins 昨天也隨著發佈了 2.243 還有 LTS 版本 2.235.5，大家趕緊看看自己的版本有沒有更新到此版</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 42 期 - 跨出國界！一起把英文文章寫起來！</title>
      <link href="/2020/08/18/42-start-your-writing-of-english/"/>
      <url>/2020/08/18/42-start-your-writing-of-english/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="跨出國界-寫出照樣照句的英文文章-實用度極高的-7-個句型分享"><a href="#跨出國界-寫出照樣照句的英文文章-實用度極高的-7-個句型分享" class="headerlink" title="跨出國界-寫出照樣照句的英文文章-實用度極高的 7 個句型分享"></a><a href="https://medium.com/starbugs/%E8%B7%A8%E5%87%BA%E5%9C%8B%E7%95%8C-%E5%AF%AB%E5%87%BA%E7%85%A7%E6%A8%A3%E7%85%A7%E5%8F%A5%E7%9A%84%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0-%E5%AF%A6%E7%94%A8%E5%BA%A6%E6%A5%B5%E9%AB%98%E7%9A%84-7-%E5%80%8B%E5%8F%A5%E5%9E%8B%E5%88%86%E4%BA%AB-4e5d5c1f88bc" target="_blank" rel="noopener">跨出國界-寫出照樣照句的英文文章-實用度極高的 7 個句型分享</a></h3><p>在文章裡分享的句型，都沒有很嚴格的告訴大家什麼時候要用名詞、副詞、形容詞等等的（因為我也不會），而是直接把實戰會用到的句型列出來，我們只要把相同的類型的單字替換進句型中就可以了。雖然一開始很難，但只要能試著打出一句話，慢慢的就會有第二句話，一直到整篇文章的產出。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Vue-3-is-coming-what-to-expect-and-how-to-prepare"><a href="#Vue-3-is-coming-what-to-expect-and-how-to-prepare" class="headerlink" title="Vue 3 is coming - what to expect and how to prepare"></a><a href="https://dev.to/dailydotdev/vue-3-is-coming-what-to-expect-and-how-to-prepare-2p1k" target="_blank" rel="noopener">Vue 3 is coming - what to expect and how to prepare</a></h3><p>Vue3 終於要來啦！第一次聽到 Vue3 已經是去年的事情了，而根據目前官方的計畫，發布日期會在從現在起到 2020/9/30 號之間的任一時間（說不定就是明天 XD）！在 Vue3 裡會出現哪些方便的功能？又該如何做什麼準備來迎接新版本呢？你想知道的文章裡通通有！</p><h3 id="開發必備，摸索不完的-Chrome-DevTools-小技巧之設置斷點篇"><a href="#開發必備，摸索不完的-Chrome-DevTools-小技巧之設置斷點篇" class="headerlink" title="開發必備，摸索不完的 Chrome DevTools 小技巧之設置斷點篇"></a><a href="https://medium.com/unalai/%E9%96%8B%E7%99%BC%E5%BF%85%E5%82%99-%E6%91%B8%E7%B4%A2%E4%B8%8D%E5%AE%8C%E7%9A%84-chrome-devtools-%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8B%E8%A8%AD%E7%BD%AE%E6%96%B7%E9%BB%9E%E7%AF%87-4d72cb35fa39" target="_blank" rel="noopener">開發必備，摸索不完的 Chrome DevTools 小技巧之設置斷點篇</a></h3><p>雖然 <code>console.log</code> 在 debug 上是無敵的，但是如果能夠透過 chrome 提供的開發者工具更方便的看到程式執行的流程，以及每個變數的值呢？</p><h3 id="Flexbox-vs-Grid-How-to-Build-the-Most-Common-HTML-Layouts"><a href="#Flexbox-vs-Grid-How-to-Build-the-Most-Common-HTML-Layouts" class="headerlink" title="Flexbox vs Grid - How to Build the Most Common HTML Layouts"></a><a href="https://www.freecodecamp.org/news/flexbox-vs-grid-how-to-build-the-most-common-html-layouts/" target="_blank" rel="noopener">Flexbox vs Grid - How to Build the Most Common HTML Layouts</a></h3><p>大家都在搭配使用 Flex 和 Grid，但這篇文章用比較的方式，顯示了兩者在幾個普遍的排版上會出現什麼樣的差異。</p><h2 id="Linux-學習"><a href="#Linux-學習" class="headerlink" title="Linux 學習"></a>Linux 學習</h2><h3 id="Linux-I-O-輸入與輸出重新導向"><a href="#Linux-I-O-輸入與輸出重新導向" class="headerlink" title="Linux I/O 輸入與輸出重新導向"></a><a href="https://blog.gtwang.org/linux/linux-io-input-output-redirection-operators/" target="_blank" rel="noopener">Linux I/O 輸入與輸出重新導向</a></h3><p>Linux 有個很厲害的地方，就是任何指令的執行結果都可以透過 pipeline 重新導向到其他指令或是檔案，而這篇文章就是在介紹 Stdin、Stdout、Stderr 這三個資料流要怎麼進行重新導向，如果是剛入門 Linux 還在熟悉 command line 的朋友們很推薦讀讀這篇</p><h3 id="An-Introduction-to-Linux-File-Permissions"><a href="#An-Introduction-to-Linux-File-Permissions" class="headerlink" title="An Introduction to Linux File Permissions"></a><a href="https://www.booleanworld.com/introduction-linux-file-permissions/" target="_blank" rel="noopener">An Introduction to Linux File Permissions</a></h3><p>Linux 的設計是允許很多使用者同時在上面使用的，如果你有在跟別人共用 Linux 機器，但又不希望自己放在機器上的檔案被其他人偷看或是修改，那一定要來了解一下 Linux 的檔案權限機制</p><h3 id="CLI-improved"><a href="#CLI-improved" class="headerlink" title="CLI: improved"></a><a href="https://remysharp.com/2018/08/23/cli-improved" target="_blank" rel="noopener">CLI: improved</a></h3><p>Linux 上很多內建的 command line 工具都是很久之前就開發出來了，所以有些指令並不是那麼好用。因此 Github 上也有很多大神開發了各種加強版的內建工具，像 <code>bat</code> 就是有 syntax highlight 的 <code>cat</code>、<code>htop</code> 是用起來比較簡單的 <code>top</code> 等等，如果覺得內建工具太難用的話就趁這個機會 alias 一波吧</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="How-to-Write-Useful-Commit-Messages"><a href="#How-to-Write-Useful-Commit-Messages" class="headerlink" title="How to Write Useful Commit Messages"></a><a href="https://dev.to/jacobherrington/how-to-write-useful-commit-messages-my-commit-message-template-20n9" target="_blank" rel="noopener">How to Write Useful Commit Messages</a></h3><p>如何寫出有用的 Commit Message? 本文提供一個好用的模版，讓你的 commit message 更加清楚。</p><h3 id="How-to-write-a-good-commit-message"><a href="#How-to-write-a-good-commit-message" class="headerlink" title="How to write a good commit message"></a><a href="https://dev.to/chrissiemhrk/git-commit-message-5e21" target="_blank" rel="noopener">How to write a good commit message</a></h3><p>另一種 Commit 的寫法，跟上方比起來較為簡單，基於 Udacity Git Commit Message 指南所使用的一種 Git commit 方式。</p><h3 id="Learn-git-concepts-not-commands"><a href="#Learn-git-concepts-not-commands" class="headerlink" title="Learn git concepts, not commands"></a><a href="https://dev.to/unseenwizzard/learn-git-concepts-not-commands-4gjc" target="_blank" rel="noopener">Learn git concepts, not commands</a></h3><p>學習 git 的概念，而非指令。手繪畫出 Git 概念，將 Git 概念講解的很清楚。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Telltale-Netflix-Application-Monitoring-Simplified"><a href="#Telltale-Netflix-Application-Monitoring-Simplified" class="headerlink" title="Telltale: Netflix Application Monitoring Simplified"></a><a href="https://netflixtechblog.com/telltale-netflix-application-monitoring-simplified-5c08bfa780ba" target="_blank" rel="noopener">Telltale: Netflix Application Monitoring Simplified</a></h3><p>半夜被 On Call 電話叫了起床，心中雖然還在納悶到底是真的系統有問題，還是只需要調整一下監測的閥值，就在思考的過程中一邊查看訊息跟 Dashboard，時間也一分一秒正在消逝中，這應該是所有 On Call 工程師都有遇過的情況，太多的 Alert，太多的 Dashboard，太多要維護的服務；Netflix 內部的串流團隊需要一個可以快速分析和發現問題的監控系統，也就是說內部的 Node 團隊需要開發一個系統，讓一小群人可以透過它來駕馭一整個大系統，就在這樣的時空環境之下 Telltale 被開發了出來！</p><p>Telltale 想要解決上面提到的問題，所以著重在於使用鮮明的顏色來讓人可以一眼看出有沒有問題發生，而且只顯示出最相關的上下游資訊，利用之前已經提過的眾多開源工具來幫忙 Telltale 有效地發揮作用，例如 Atlas (Telemetry Platform)，Mantis, Nimble…等；利用通知工具時除了單純地發出訊息之外，也會把後續資訊提供在通知內，並且將處理狀況更新在其中，同時也會做到事件管理 (Incident Management) 跟 部署監控 (Deployment Monitoring)，看來 Telltale 什麼都做到了，只是其實這篇文章提到的架構其實相當的龐大，感覺不是單純把 Telltale 拿來用就可以了…</p><h3 id="HashiCorp-Terraform-生態系大更新！-Terraform-Cloud"><a href="#HashiCorp-Terraform-生態系大更新！-Terraform-Cloud" class="headerlink" title="HashiCorp Terraform 生態系大更新！ Terraform Cloud"></a><a href="https://www.hashicorp.com/blog/announcing-hashicorp-terraform-0-13/" target="_blank" rel="noopener">HashiCorp Terraform 生態系大更新！</a> <a href="https://www.hashicorp.com/blog/announcing-hashicorp-terraform-cloud-business/" target="_blank" rel="noopener">Terraform Cloud</a></h3><p>上週 Terraform 本身跟 Cloud 服務都發布了滿多新的功能，眾所期待的 Terraform 0.13 已經 GA 可以開始下載來使用，這次最重要的功能在於 Module Resource 的強化上，因為開發者可以在 Module 開始使用 count, depends_on 和 for_each 的功能；除此之外，Terraform 強大的 Provider 生態系開始允許開發者可以使用自定義的安裝來源，不像以前會被綁死只能下載公開 Registry 內的那一些 Provider；而在 Cloud 這邊今天登入應該會發現變得不太一樣了，主要是因為多了 Business Tier 企業用戶需要的功能，例如在 SSO 開始支援 Okta，並且新增可以使用自己的架的機器來管理內部的私有資源，並且也開始可以使用 Splunk 透過 Audit Logging 來增加維運層面的能見度</p><h3 id="Announcing-New-Pulumi-Open-Source-Projects-for-Kubernetes"><a href="#Announcing-New-Pulumi-Open-Source-Projects-for-Kubernetes" class="headerlink" title="Announcing New Pulumi Open Source Projects for Kubernetes"></a><a href="https://www.pulumi.com/blog/new-kubernetes-superpowers/" target="_blank" rel="noopener">Announcing New Pulumi Open Source Projects for Kubernetes</a></h3><p>Pulumi 宣布的幾項新的開源專案，用以增加其對於 Kubernets 的支援程度，其中包含用來提供K8S GitOps 功能的 <strong>Pulumi Kubernetes Operator</strong>，用來把 YAML 轉換成 Pulumi Python, TypeScript, Go 或是 .NET 的 <strong>kube2pulumi</strong> 工具，讓 Pulumi 的 PaC 工具 CrossGuard 可以支援使用 Open Policy Agent 開發出來的 Policy…等，完整內容請參閱內文</p><h2 id="社群活動"><a href="#社群活動" class="headerlink" title="社群活動"></a>社群活動</h2><h3 id="HITCON-Training-2020-報名倒數-2-天"><a href="#HITCON-Training-2020-報名倒數-2-天" class="headerlink" title="HITCON Training 2020 報名倒數 2 天"></a><a href="https://www.facebook.com/HITCON/photos/pcb.3463154017049229/3463153793715918/?type=3&theater" target="_blank" rel="noopener">HITCON Training 2020 報名倒數 2 天</a></h3><p>好評延長招生中 ‼ 至 8/19 (三) 23：59 截止招生 📣</p><p>手把手小班教學，精彩攻防課程帶您剖析資安奧妙，業界講師帶您實機演練各式駭客攻擊情境、傳授實戰經驗與調查工具及分析心法～快來解鎖資安新技能！一同掌握資安新視野！</p><h3 id="Modern-Web-2020-徵稿中"><a href="#Modern-Web-2020-徵稿中" class="headerlink" title="Modern Web 2020 徵稿中"></a><a href="https://modernweb.tw/index.html?fbclid=IwAR0Z_m2UQk94XunVVa5g30Z806iEy4c_r7QtUCQuAQAUwEJ7jwdOxr9JTGA#cfp" target="_blank" rel="noopener">Modern Web 2020 徵稿中</a></h3><p>一年一度的 Modern Web 持續徵稿中，這次採用 Webinar 線上研討會的型式呈現，熱愛技術的你不能錯過。</p><h3 id="Pycon-2020-一般票熱賣中"><a href="#Pycon-2020-一般票熱賣中" class="headerlink" title="Pycon 2020 一般票熱賣中"></a><a href="https://www.facebook.com/pycontw/photos/a.161497130635804/3147110645407756/?type=3&theater" target="_blank" rel="noopener">Pycon 2020 一般票熱賣中</a></h3><p>Pycon 2020 早鳥票已結束售票，其餘票種於「 8 月 21 日」結束販售。但是要買票還是要動作快喔~!😇😇</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 41 期 - 偷天換日：用 Stub 寫出不依賴資料庫的單元測試</title>
      <link href="/2020/08/11/41-use-stub-to-break-dependency/"/>
      <url>/2020/08/11/41-use-stub-to-break-dependency/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="偷天換日-—-善用-Stub-寫出不依賴資料庫的單元測試"><a href="#偷天換日-—-善用-Stub-寫出不依賴資料庫的單元測試" class="headerlink" title="偷天換日 — 善用 Stub 寫出不依賴資料庫的單元測試"></a><a href="https://medium.com/@larry850806/using-stub-to-break-dependency-on-database-8cef505f9dfa" target="_blank" rel="noopener">偷天換日 — 善用 Stub 寫出不依賴資料庫的單元測試</a></h3><p>說到單元測試，大家馬上想到的應該都是像 <code>sum</code> 這類沒有副作用的 pure function，他們就只是把參數拿來做一些運算，所以測試寫起來也簡單。但真實世界的應用往往不是如此，總有一些 function 會需要發出網路請求、或是對資料庫進行讀寫。所以今天的主題就是講怎麼用 Sinon.JS 的測試替身打破依賴，讓原本需要資料庫的單元測試，在沒有資料庫的環境下跑起來</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="How-I-Cloned-VSCode-to-use-as-my-Portfolio"><a href="#How-I-Cloned-VSCode-to-use-as-my-Portfolio" class="headerlink" title="How I Cloned VSCode to use as my Portfolio"></a><a href="https://dev.to/greedybrain/i-used-vscode-itself-as-my-portfolio-1fg5" target="_blank" rel="noopener">How I Cloned VSCode to use as my Portfolio</a></h3><p>太厲害了各位，這個文章的作者用了 VSCode 的風格做了介紹自己的履歷！除此之外，他也在下方的留言區說了很棒的話我想分享給大家：「我們要盡可能的展現創造力，因為這些事與我們前端開發者有關！」他完全把自己的價值提高到思維方面，我覺得這非常重要。另外也附上我覺得很猛的作品，他是製造了一個<a href="https://peteroravec.com/" target="_blank" rel="noopener">遊戲</a>去呈現自己。</p><h3 id="Why-React-projects-still-use-Redux-in-2020"><a href="#Why-React-projects-still-use-Redux-in-2020" class="headerlink" title="Why React projects still use Redux in 2020?"></a><a href="https://dev.to/alexandrudanpop/why-react-projects-still-use-redux-in-2020-395p" target="_blank" rel="noopener">Why React projects still use Redux in 2020?</a></h3><p>記得之前也有分享過類似的文章，但是每隔一段期間就會有新人詢問相同的問題，那就是現在還需要學 Redux 嗎？</p><p>其實我不太理解為什麼一開始就要考慮他，因為當你學到 Hooks 或是先學到 Redux，這兩種寫法一定會給你不同的感受，你也會去思考或是意會到什麼情境會適合哪種解法，或是解決了什麼問題，而不是一開始就想說選一個學就好啦！而且我相信像文章說的：「當你進到一間公司，一定會有 50% 的機率會碰到 Redux。」</p><h3 id="Functional-Programming-Paradigm-in-JavaScript"><a href="#Functional-Programming-Paradigm-in-JavaScript" class="headerlink" title="Functional Programming Paradigm in JavaScript"></a><a href="https://hackernoon.com/functional-programming-paradigm-in-javascript-km173u4i" target="_blank" rel="noopener">Functional Programming Paradigm in JavaScript</a></h3><p>這篇文章把 JavaScript 函式編程講的真的很棒，他運用了簡單的範例以及清楚的解說，把每種概念都展示的很清楚，很適合剛學習 JavaScript 的初學者看，而如果已經相當熟練 JavaScript 的開發也能再看一次當做複習！</p><h2 id="單元測試"><a href="#單元測試" class="headerlink" title="單元測試"></a>單元測試</h2><h3 id="純粹的好，Pure-Function-知道"><a href="#純粹的好，Pure-Function-知道" class="headerlink" title="純粹的好，Pure Function 知道"></a><a href="https://link.medium.com/lgHNPrfXP8" target="_blank" rel="noopener">純粹的好，Pure Function 知道</a></h3><p>怎麼樣的 function 才算是 pure function？除了方便測試之外，pure function 在開發上還有什麼其他的益處？這些問題在這篇文章裡面都有講到。除此之外，作者也分享了對於 React、Redux 的想法，看完之後會覺得真的到處都有 pure function 的影子</p><h3 id="Test-Doubles-—-Fakes-Mocks-and-Stubs"><a href="#Test-Doubles-—-Fakes-Mocks-and-Stubs" class="headerlink" title="Test Doubles — Fakes, Mocks and Stubs"></a><a href="https://link.medium.com/dkCLR94TP8" target="_blank" rel="noopener">Test Doubles — Fakes, Mocks and Stubs</a></h3><p>看完專欄之後還覺得意猶未盡，想了解其他的測試替身嗎？這篇文介紹了 Fake、Mock 跟 Stub 兩種替身，並且分析了他們的使用時機</p><h3 id="Best-Practices-for-Spies-Stubs-and-Mocks-in-Sinon-js"><a href="#Best-Practices-for-Spies-Stubs-and-Mocks-in-Sinon-js" class="headerlink" title="Best Practices for Spies, Stubs and Mocks in Sinon.js"></a><a href="https://semaphoreci.com/community/tutorials/best-practices-for-spies-stubs-and-mocks-in-sinon-js" target="_blank" rel="noopener">Best Practices for Spies, Stubs and Mocks in Sinon.js</a></h3><p>Sinon.JS 是一個用來建立各種測試替身的 library，文中講了很多該如何在 Spy、Stub 跟 Mock 之間做選擇，也分享了很多 Sinon.JS 在使用時的 best practice</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="Python初学者的自我修养，找到自己的方向"><a href="#Python初学者的自我修养，找到自己的方向" class="headerlink" title="Python初学者的自我修养，找到自己的方向"></a><a href="https://juejin.im/post/6854573220054433805" target="_blank" rel="noopener">Python初学者的自我修养，找到自己的方向</a></h3><p>學習一門語言，不論是哪一個應用場景都不只一個方向，所以其中一個重要的東西，就是方向的選擇。而 Python 在各個領域中，跟其他語言的特性也有差異，以 Web 為例，Python 的優勢在於快而敏捷。機器學習對 Python 的要求只需要會基本的語法，但是背後的知識體系，卻是龐大的：例如：推薦、搜尋、廣告、NLP … 等等。</p><h3 id="1万-接口测试与管理的进阶之路"><a href="#1万-接口测试与管理的进阶之路" class="headerlink" title="1万+接口测试与管理的进阶之路"></a><a href="https://juejin.im/post/6857028286826315790" target="_blank" rel="noopener">1万+接口测试与管理的进阶之路</a></h3><p>接口是應用開發中必然存在的產物，無論你是開發，測試還是運維人員，你都會與接口產生千絲萬縷的聯繫。開發是接口的創造者，他們定義了接口，同時帶來了他們血肉之主軸。測試是接口的健康守護者，無論在哪個階段，都在默默的為他們發現傷害他們健康的“寄生蟲”（致BUG）。聽了我的YY，有沒有覺得接口是有生命的，如果沒有，那麼可以看下下圖</p><h3 id="一本《Redis-深度历险》，我能躺挣多少钱？"><a href="#一本《Redis-深度历险》，我能躺挣多少钱？" class="headerlink" title="一本《Redis 深度历险》，我能躺挣多少钱？"></a><a href="https://juejin.im/post/6844903735693426696" target="_blank" rel="noopener">一本《Redis 深度历险》，我能躺挣多少钱？</a></h3><p>有人問我，你之前的小冊才賣 19.9 元，而一本紙書居然要定價 79 元，你是不是膨脹了？我很想告訴他的是這一本紙書作者的抽成只佔 7％，如果是黑白印刷，能抽成 8％。但是為了保持好的閱讀體驗，還是堅持了全彩印刷。雖然我明白抽成的額度少了，同時因為彩印價格偏高會導致銷量相對較高，最終會導致總收入下降。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Jenkins-graduates-in-the-Continuous-Delivery-Foundation"><a href="#Jenkins-graduates-in-the-Continuous-Delivery-Foundation" class="headerlink" title="Jenkins graduates in the Continuous Delivery Foundation"></a><a href="https://www.jenkins.io/blog/2020/08/04/cdf-graduation/" target="_blank" rel="noopener">Jenkins graduates in the Continuous Delivery Foundation</a></h3><p>Jenkins 是一個已經在業界存在十年以上的老前輩了，加入 CI/CD 組織然後說他畢業了，感覺有點怪怪的，不知道算不算是在洗學歷XD 不過從畢業感言裡面找到了 <a href="https://www.jenkins.io/project/roadmap/" target="_blank" rel="noopener"><strong>Public Roadmap</strong></a>，以後可以從這邊知道老爺爺準備要帶給大家什麼新玩意兒 = =+</p><h3 id="Pysa-An-open-source-static-analysis-tool-to-detect-and-prevent-security-issues-in-Python-code"><a href="#Pysa-An-open-source-static-analysis-tool-to-detect-and-prevent-security-issues-in-Python-code" class="headerlink" title="Pysa: An open source static analysis tool to detect and prevent security issues in Python code"></a><a href="https://engineering.fb.com/security/pysa/" target="_blank" rel="noopener">Pysa: An open source static analysis tool to detect and prevent security issues in Python code</a></h3><p>Pysa (Python Static Analyzer) 是 Facebook 最近開源的靜態程式碼分析工具，FB 建造並且使用該工具來檢測和預防 Python 程式碼中的安全性和隱私相關問題。FB 中最大的 Python 程式碼 Repository 是用來運行 Instagram 服務，裡面有數百萬行程式碼，Pysa 可以根據開發人員提交的程式碼在一個小時內就提拱分析結果，而不用花費幾週甚至數個月來手動檢查數百萬行的程式碼，這些快速被找到的問題就可以被避免有問題的程式碼被 Merge 進入 Repository 的 Main Branch 中，而且也會根據問題去做分類，發送通知給開發人員或是安全工程師</p><h3 id="How-we-learned-to-improve-Kubernetes-CronJobs-at-Scale-Part-I-Part-II"><a href="#How-we-learned-to-improve-Kubernetes-CronJobs-at-Scale-Part-I-Part-II" class="headerlink" title="How we learned to improve Kubernetes CronJobs at Scale [Part I] [Part II]"></a><a href="https://eng.lyft.com/improving-kubernetes-cronjobs-at-scale-part-1-cf1479df98d4" target="_blank" rel="noopener">How we learned to improve Kubernetes CronJobs at Scale</a> <a href="https://eng.lyft.com/improving-kubernetes-cronjobs-at-scale-part-1-cf1479df98d4" target="_blank" rel="noopener">[Part I]</a> <a href="https://eng.lyft.com/how-we-learned-to-improve-kubernetes-cronjobs-at-scale-part-2-of-2-dad0c973ffca" target="_blank" rel="noopener">[Part II]</a></h3><p>Lyft 使用了兩篇的文章篇幅來述說公司內部使用 #Kubernetes 內建的 CronJob 遇到的痛點與解決的方式，目前 Lyft Production K8S 環境內有將近五百個 CronJob，每個小時會被執行 1500 多次，在使用 K8S 之前，這些 Job 本來是使用 Linux 內建的 Cron 機制，然後透過 CM 工具來做管理；像許多人一樣選擇 K8S 的原因一樣，因為其最大的好處之一是可以有效地利用資源，因此 Lyft 便開始將這些 Cron Job 容器化然後遷移到 K8S 中，畢竟傳統的 Linux Cron 機制當機器沒有在運行任務的時候，可能有 99% 的資源是閒置沒有被使用到的，但是使用 K8S CronJob 之後，所有的 CPU 和 Memory…等資源可以被所有的 Cron Job 有效的利用</p><p>不過紙上談兵總是比較簡單的，實際跑下去就遇到問題了，因為 K8S 的 CronJob 在 #啟動所花的時間 和 #故障處理 上跟 Liunux Cron 有一些關鍵性上的差異，所以 Lyft 詳細的分析為什麼會造成這樣的原因，然後透過 1) 增加 CronJob 的可觀察性，方便開發者查找問題，維運者監控，2) 建立工具讓 K8S CronJob 的臨時調用變得更容易，3) 把 K8S 一些內部本身長期存在的問題給修復掉，所以雖然 K8S CronJob 並非完美的解決方案，但如果願意花時間弄的話，他還是可以完成大規模的工作，詳細監控跟解決方式可以參閱內容，這邊只有大概提一下大綱</p><h2 id="社群活動"><a href="#社群活動" class="headerlink" title="社群活動"></a>社群活動</h2><h3 id="Modern-Web-2020-徵稿中"><a href="#Modern-Web-2020-徵稿中" class="headerlink" title="Modern Web 2020 徵稿中"></a><a href="https://modernweb.tw/index.html?fbclid=IwAR0Z_m2UQk94XunVVa5g30Z806iEy4c_r7QtUCQuAQAUwEJ7jwdOxr9JTGA#cfp" target="_blank" rel="noopener">Modern Web 2020 徵稿中</a></h3><p>一年一度的 Modern Web 持續徵稿中，這次採用 Webinar 線上研討會的型式呈現，熱愛技術的你不能錯過。</p><h3 id="Pycon-2020-一般票熱賣中"><a href="#Pycon-2020-一般票熱賣中" class="headerlink" title="Pycon 2020 一般票熱賣中"></a><a href="https://www.facebook.com/pycontw/photos/a.161497130635804/3147110645407756/?type=3&theater" target="_blank" rel="noopener">Pycon 2020 一般票熱賣中</a></h3><p>Pycon 2020 早鳥票已結束售票，其餘票種於「 8 月 21 日」結束販售。但是要買票還是要動作快喔~!😇😇</p><h3 id="Kubernetes-Summit-2020-議程公布中"><a href="#Kubernetes-Summit-2020-議程公布中" class="headerlink" title="Kubernetes Summit 2020 議程公布中"></a><a href="https://k8s.ithome.com.tw/" target="_blank" rel="noopener">Kubernetes Summit 2020 議程公布中</a></h3><p>沒想到今年還有 Kubernetes Summit 可以參加，看起來官方已經開始慢慢把議程放上去了～</p><h3 id="Taiwan-CDK-Meetup-2"><a href="#Taiwan-CDK-Meetup-2" class="headerlink" title="Taiwan CDK Meetup #2"></a><a href="https://cdkmeetup.kktix.cc/events/fristmeetup2" target="_blank" rel="noopener">Taiwan CDK Meetup #2</a></h3><p>Taiwan CDK Meetup 這週準備舉辦第二次啦～不過聽說票在一瞬間就被搶購一空了 T_T</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 40 期 - CDK for Terraform 初試啼聲</title>
      <link href="/2020/08/04/40-cdk-for-terraform/"/>
      <url>/2020/08/04/40-cdk-for-terraform/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="CDK-for-Terraform-初試啼聲"><a href="#CDK-for-Terraform-初試啼聲" class="headerlink" title="CDK for Terraform 初試啼聲"></a><a href="https://medium.com/starbugs/cdk-for-terraform-%E5%88%9D%E8%A9%A6%E5%95%BC%E8%81%B2-86a80f1315db" target="_blank" rel="noopener">CDK for Terraform 初試啼聲</a></h3><p>2020 的七月底，突然冒出 HashiCorp 與 AWS 合作的消息，推出了 CDK for Terraform，讓開發者可以透過自己熟悉的語言來撰寫 Terraform，而不用再去撰寫 HCL，廢話不多說，首先讓我們來開箱試玩看看</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="「一劳永逸」送你21道高频JavaScript手写面试题"><a href="#「一劳永逸」送你21道高频JavaScript手写面试题" class="headerlink" title="「一劳永逸」送你21道高频JavaScript手写面试题"></a><a href="https://juejin.im/post/6855129007852093453" target="_blank" rel="noopener">「一劳永逸」送你21道高频JavaScript手写面试题</a></h3><p>文章中解析了許多 JavaScript 函式的實現原理，實作的程式碼非常乾淨且容易理解，而且每個例子也會標出需要注意的地方，但是建議要在思緒清晰的時候看，不然會越看越昏 😂</p><h3 id="How-to-Check-Internet-Connection-Status-Using-Async-JavaScript"><a href="#How-to-Check-Internet-Connection-Status-Using-Async-JavaScript" class="headerlink" title="How to Check Internet Connection Status Using Async JavaScript"></a><a href="https://www.freecodecamp.org/news/how-to-check-internet-connection-status-with-javascript/" target="_blank" rel="noopener">How to Check Internet Connection Status Using Async JavaScript</a></h3><p>用 JavaScript 判斷當前的電腦是否有連上網路，原理非常簡單，只要發送一個請求然後在沒有網路的時候 catch 住 <code>fetch</code> 回來的錯誤就可以了，寫起來也很有趣！可以把它應用在 PWA 上面！因為 PWA 沒有瀏覽器幫你處理無網路連線的狀況 😭</p><h3 id="8-amazing-HTML-button-hover-effects-that-will-make-your-website-memorable"><a href="#8-amazing-HTML-button-hover-effects-that-will-make-your-website-memorable" class="headerlink" title="8 amazing HTML button hover effects, that will make your website memorable"></a><a href="https://dev.to/duomly/8-amazing-html-button-hover-effects-that-will-make-your-website-memorable-386e" target="_blank" rel="noopener">8 amazing HTML button hover effects, that will make your website memorable</a></h3><p>8 個炫砲的按鈕 hover 效果，不得不說我真的很喜歡第二種開燈的那種效果，然後看著看著就會有不想要把它看完的感覺，因為每種效果都超棒的！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Introduction-to-modern-network-load-balancing-and-proxying"><a href="#Introduction-to-modern-network-load-balancing-and-proxying" class="headerlink" title="Introduction to modern network load balancing and proxying"></a><a href="https://link.medium.com/qf0eeKyCD8" target="_blank" rel="noopener">Introduction to modern network load balancing and proxying</a></h3><p>這篇文講各種 Load Balancer 講得超級詳細又深入，雖然這麼說有點浮誇，但看完真的覺得我以前根本就不瞭解 Load Balancer 吧 XD，只知道是拿來做負載平衡，根本不知道還有分哪幾種</p><h3 id="讓任務排隊吧：Message-Queue"><a href="#讓任務排隊吧：Message-Queue" class="headerlink" title="讓任務排隊吧：Message Queue"></a><a href="https://link.medium.com/ncbnrf0DD8" target="_blank" rel="noopener">讓任務排隊吧：Message Queue</a></h3><p>在一個比較大的系統中，通常都會有非常多支程式在運作，這時各個程式之間要怎麼溝通就很重要了。這篇文講了幾種應用之間溝通的方式，並且介紹了怎麼用 Message Queue 來幫忙做訊息傳輸</p><h3 id="Microservice-Architecture-at-Medium"><a href="#Microservice-Architecture-at-Medium" class="headerlink" title="Microservice Architecture at Medium"></a><a href="https://link.medium.com/PAhfLgfED8" target="_blank" rel="noopener">Microservice Architecture at Medium</a></h3><p>這篇是 Medium 分享了他們使用 Microservice 架構的經驗，隨著後端服務越來越龐大，這樣的架構確實帶來許多好處。雖然如此，但 Medium 團隊也建議開發初期還是以單體式（monolithic）架構會比較好維護，等到應用越來越複雜，團隊也足夠大時，再逐漸轉移到 Microservice 會比較好</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="🧰-50-Developer-tools-to-make-your-life-a-little-easie"><a href="#🧰-50-Developer-tools-to-make-your-life-a-little-easie" class="headerlink" title="🧰 50 Developer tools to make your life a little easie"></a><a href="https://dev.to/iainfreestone/50-developer-tools-to-make-your-life-a-little-easier-4oc5" target="_blank" rel="noopener">🧰 50 Developer tools to make your life a little easie</a></h3><p>50 個開發者工具，讓你的生活更簡單。舉幾個例子：RegEx 101 學正規表達式。Keycode，按下任何的按鍵，以取得對應的 JS code。Mocky，不用等待 backend 的 API，模仿一個，開始開發。Explain Shell，解釋 shell 是什麼意思。</p><h3 id="🚀10-Trending-projects-on-GitHub-for-web-developers-31st-July-2020"><a href="#🚀10-Trending-projects-on-GitHub-for-web-developers-31st-July-2020" class="headerlink" title="🚀10 Trending projects on GitHub for web developers - 31st July 2020"></a><a href="https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-31st-july-2020-4dd6" target="_blank" rel="noopener">🚀10 Trending projects on GitHub for web developers - 31st July 2020</a></h3><p>這篇滿有意思的，每週介紹 10 個熱門的 web 開源專案，形成一個系列文。這篇文章介紹了一個所見即所得編輯器 draft.js，採用的技術是 React.js。PeerJS - 使用 WebRTC 來傳輸檔案與廣播。</p><h3 id="A-Complete-Beginner-Guide-To-React-Js"><a href="#A-Complete-Beginner-Guide-To-React-Js" class="headerlink" title="A Complete Beginner Guide To React Js"></a><a href="https://dev.to/hemant/a-complete-beginner-s-guide-to-react-js-learning-path-and-resources-np7" target="_blank" rel="noopener">A Complete Beginner Guide To React Js</a></h3><p>給新手看的 React.js 教學，條例了一些重點，學 React.js 該學會哪些基礎，可以用哪些專案來實作？</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Logging-in-Kubernetes-EFK-vs-PLG-Stack"><a href="#Logging-in-Kubernetes-EFK-vs-PLG-Stack" class="headerlink" title="Logging in Kubernetes: EFK vs PLG Stack"></a><a href="https://www.cncf.io/blog/2020/07/27/logging-in-kubernetes-efk-vs-plg-stack/" target="_blank" rel="noopener">Logging in Kubernetes: EFK vs PLG Stack</a></h3><p>ELK/EFK/ELFK…在 Logging 管理領域經過差不多十年的稱霸之後，總算有新的挑戰者來了，叫做 PLG (Promtail + Loki + Grafana)，不過感覺 <strong>Elastic</strong> 近年來腹背受敵，前方有 <strong>Loki 正面迎擊</strong>，然後 <strong>Open Distro for ElasticSearch</strong> 從後面…補刀/捅一刀?! (不知道用什麼詞彙比較不會那麼負面XD) 不過真的是有競爭有進步就是了~<br>先把焦點拉回這篇文章，內文主要描述在 <strong>Kubernetes</strong> 中的 Log 分別要怎麼透過這兩個方案來做處理，我想大家對於 Elastic 的解決方案應該都很熟稔了，所以可以多看看裡面提到 PLG 的架構，了解他是怎麼把 Log 收進去做中心化的處理跟管理</p><h3 id="Announcing-the-GitHub-public-roadmap"><a href="#Announcing-the-GitHub-public-roadmap" class="headerlink" title="Announcing the GitHub public roadmap"></a><a href="https://github.blog/2020-07-28-announcing-the-github-public-roadmap/" target="_blank" rel="noopener">Announcing the GitHub public roadmap</a></h3><p>GitHub 也要開始使用自己的 Project 功能來弄公開的 Roadmap，滿多大型專案其實都有在使用這個功能，沒有想到過了這麼多年，GitHub 總算有了自己的公開版本XD 我覺得超棒的！不然根本就不知道接下來會有什麼新功能可以期待，或是明明 Community 版本已經有的功能，到底要過多久才會在 Enteraprise 版本釋出都沒有人可以給一個交代的說 ╮（╯＿╰）╭</p><h3 id="How-We-Cut-Our-Docker-Push-Time-by-90"><a href="#How-We-Cut-Our-Docker-Push-Time-by-90" class="headerlink" title="How We Cut Our Docker Push Time by 90%"></a><a href="https://kelda.io/blog/speed-up-docker-push-by-90/" target="_blank" rel="noopener">How We Cut Our Docker Push Time by 90%</a></h3><p>Kelda 提供了 Docker-Compose 線上版本 (Blimp)，其中一個功能是可以讓使用者把 Build 好的 Docker Image Push 到該服務上之後運行起來，但是從本機端 Push Docker Image 到遠端有時候是非常耗費時間跟頻寬的，所以這篇文章描述了 Kelda 剖析 Docker API 的行為，分析 Dockerfile 的 Base Image，利用 Docker Image Layer 可以共享的概念，來減少開發者使用他們家的服務 Push Docker Image 多達 90% 的時間！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 39 期 - 中了大樂透，你還會寫程式嘛？</title>
      <link href="/2020/07/28/39-do-you-still-coding-after-winning-the-Lotto/"/>
      <url>/2020/07/28/39-do-you-still-coding-after-winning-the-Lotto/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Linux-新手入門必裝-TLDR-命令列神兵"><a href="#Linux-新手入門必裝-TLDR-命令列神兵" class="headerlink" title="Linux 新手入門必裝 | TLDR 命令列神兵"></a><a href="https://medium.com/starbugs/9fbba0d4f028" target="_blank" rel="noopener">Linux 新手入門必裝 | TLDR 命令列神兵</a></h3><p>TLDR 能夠用最簡短的方式告訴你各種指令的用法。TL;DR 是 too long; didn’t read 的縮寫，初學 Linux 的時候一堆指令的縮寫有夠難懂，什麼 ls、pwd、mv … 諸如此類的指令。當你不懂的時候怎麼辦？用 TLDR 就對了！</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Next-js-初探單元測試，使用-Jest-React-Testing-Library"><a href="#Next-js-初探單元測試，使用-Jest-React-Testing-Library" class="headerlink" title="Next.js | 初探單元測試，使用 Jest + React Testing Library"></a><a href="https://medium.com/%E6%89%8B%E5%AF%AB%E7%AD%86%E8%A8%98/nextjs-testing-tutorial-1-ed4b27563761" target="_blank" rel="noopener">Next.js | 初探單元測試，使用 Jest + React Testing Library</a></h3><p>雖然是用 Next.js 的專案下去寫單元測試，但是文章裡更多的其實是描述該如何對 React 的 component 做測試，以及在測試的時候會踩到那些坑和該注意的事情。</p><h3 id="How-to-Create-and-Publish-a-Vue-Component-Library"><a href="#How-to-Create-and-Publish-a-Vue-Component-Library" class="headerlink" title="How to Create and Publish a Vue Component Library"></a><a href="https://www.freecodecamp.org/news/how-to-create-and-publish-a-vue-component-library/" target="_blank" rel="noopener">How to Create and Publish a Vue Component Library</a></h3><p>在各個框架崛起的現在，許多 Vue 或 React 的開發者都會將一些常用的 UI 包成 Component 讓人直接使用，但你知道該如何打包一個 Component 到 npm 上嗎？以 Vue 為例，一起來看看吧！</p><h3 id="YOU-DON’T-HARNESS-THE-FULL-POWER-OF-JS-CONSOLE-👎"><a href="#YOU-DON’T-HARNESS-THE-FULL-POWER-OF-JS-CONSOLE-👎" class="headerlink" title="YOU DON’T HARNESS THE FULL POWER OF JS CONSOLE 👎 :("></a><a href="https://dev.to/tilakmaddy/why-you-don-t-know-basic-console-log-must-read-now-46n1" target="_blank" rel="noopener">YOU DON’T HARNESS THE FULL POWER OF JS CONSOLE 👎 :(</a></h3><p>看過了那麼多關於 console 的各種奇招，本來想說不會再為關於 <code>console</code> 的應用內容感到驚訝，但我還是第一次知道 <code>console</code> 可以顯示圖片…</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="使用-WSL-2-打造優質的多重-Linux-開發環境"><a href="#使用-WSL-2-打造優質的多重-Linux-開發環境" class="headerlink" title="使用 WSL 2 打造優質的多重 Linux 開發環境"></a><a href="https://blog.miniasp.com/post/2020/07/26/Multiple-Linux-Dev-Environment-build-on-WSL-2" target="_blank" rel="noopener">使用 WSL 2 打造優質的多重 Linux 開發環境</a></h3><p>以前要在 Windows 電腦上使用 Linux 不是要 VM 就是要灌雙系統，但 VM 用起來很麻煩效能又很差，雙系統則是一不小心就會灌壞，一邊灌還要一邊祈禱就算壞了資料也不要不見。但自從 Windows 有了 WSL 之後一切都不一樣了，尤其現在 WSL2 用起來真的就是 Linux，如果有想要 Windows 上打造 Linux 開發環境，那絕對不能錯過保哥的經驗分享。</p><h3 id="JavaScript-Visualized-Event-Loop"><a href="#JavaScript-Visualized-Event-Loop" class="headerlink" title="JavaScript Visualized: Event Loop"></a><a href="https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif" target="_blank" rel="noopener">JavaScript Visualized: Event Loop</a></h3><p>昨天意外發現有一篇文用動畫的方式講解 Node.js 的 Event Loop，想當年我初學 JS 時也是被各種同步、非同步搞得頭昏腦脹，花了好大一番力氣才終於搞懂，如果當時也有這麼簡單的動畫說明就好了。</p><h3 id="Things-I-Wished-More-Developers-Knew-About-Databases"><a href="#Things-I-Wished-More-Developers-Knew-About-Databases" class="headerlink" title="Things I Wished More Developers Knew About Databases"></a><a href="https://medium.com/@rakyll/things-i-wished-more-developers-knew-about-databases-2d0178464f78" target="_blank" rel="noopener">Things I Wished More Developers Knew About Databases</a></h3><p>這篇文寫得超好但也超長，他列出身為開發者平常在使用、挑選資料庫時該注意的 17 個點，包括 Consistency 跟 Isolation 分為哪些級別、Latency 可能會從哪裡來、資料庫不見得會照你請求的順序執行等等。想了解資料庫，看這篇就對了！</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="LocalStorage-vs-Cookies-All-You-Need-To-Know-About-Storing-JWT-Tokens-Securely-in-The-Front-End"><a href="#LocalStorage-vs-Cookies-All-You-Need-To-Know-About-Storing-JWT-Tokens-Securely-in-The-Front-End" class="headerlink" title="LocalStorage vs Cookies: All You Need To Know About Storing JWT Tokens Securely in The Front-End"></a><a href="https://dev.to/cotter/localstorage-vs-cookies-all-you-need-to-know-about-storing-jwt-tokens-securely-in-the-front-end-15id" target="_blank" rel="noopener">LocalStorage vs Cookies: All You Need To Know About Storing JWT Tokens Securely in The Front-End</a></h3><p>LocalStorage 與 Cookies 所有你需要知道的知識。從 Access token、Refresh Token 開始複習，接著分析 Local Storage 的優缺點，很方便但是有可能受到 XSS 的攻擊。Cookies，不能被 JS 存取，所以沒有 XSS 的風險，如果遇到跨 API Server 的情況，無法共用 Cookies。最後作者總結了 Cookies 在 Oauth 2.0 的使用經驗。</p><h3 id="🚀🚀10-sites-or-apps-that-can-make-your-frontend-development-to-pro-level"><a href="#🚀🚀10-sites-or-apps-that-can-make-your-frontend-development-to-pro-level" class="headerlink" title="🚀🚀10 sites or apps that can make your frontend development to pro* level"></a><a href="https://dev.to/karthick3018/10-sites-or-apps-that-can-make-your-frontend-development-to-pro-level-459p" target="_blank" rel="noopener">🚀🚀10 sites or apps that can make your frontend development to pro* level</a></h3><p>十個能讓你前端技巧變成專家級得網站。文中推薦了 10 個很實用的工具或網站，包含如何產生各種形狀，產生各種動畫，CSS 剪貼區域的技巧。形狀的 template … 等等。真的不錯耶，非常實用。</p><h3 id="Have-You-Mastered-These-9-Vue-Techniques"><a href="#Have-You-Mastered-These-9-Vue-Techniques" class="headerlink" title="Have You Mastered These 9 Vue Techniques?"></a><a href="https://pitayan.com/posts/vue-techniques/?ref=dev.to" target="_blank" rel="noopener">Have You Mastered These 9 Vue Techniques?</a></h3><p>你是否精通了 9 個 vue.js 技術？Functional Component、Deep Selectors、進階 watcher、事件引數 $event …，這篇棒棒的。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="12-Container-image-scanning-best-practices-to-adopt-in-production"><a href="#12-Container-image-scanning-best-practices-to-adopt-in-production" class="headerlink" title="12 Container image scanning best practices to adopt in production"></a><a href="https://sysdig.com/blog/image-scanning-best-practices/" target="_blank" rel="noopener">12 Container image scanning best practices to adopt in production</a></h3><p>sysdig 分享了 12 個掃描 container image 的最佳守則：</p><ol><li>把 Image 掃描的程序融合到 CI/CD Pipeline 中</li><li>使用 inline 掃描，避免機敏資料儲存於 Container Image 中</li><li>在 Image Registry 也要執行 Image 掃描</li><li>利用 Kubernetes admission controllers 限制使用的 Container Image 來源</li><li>確保 Image 使用的版本，不要使用 latest 或是 staging 這種 tag</li><li>OS 的 Vulnerability 也要記得掃描</li><li>使用乾淨的 Distroless Container Image，避免裝一堆有的沒的</li><li>掃描使用到第三方函式庫的 Vulnerability</li><li>最佳化 Image Layer 的順序</li><li>掃描 Dockerfile ，找出沒有寫好的地方</li><li>快速標記被 Kubernets 使用到含有 Vulnerability 的 Container Image</li><li>選擇 SaaS 為基底的掃描解決方案</li></ol><h3 id="Announcing-Clutch-the-Open-source-Platform-for-Infrastructure-Tooling"><a href="#Announcing-Clutch-the-Open-source-Platform-for-Infrastructure-Tooling" class="headerlink" title="Announcing Clutch, the Open-source Platform for Infrastructure Tooling"></a><a href="https://eng.lyft.com/announcing-clutch-the-open-source-platform-for-infrastructure-tooling-143d00de9713" target="_blank" rel="noopener">Announcing Clutch, the Open-source Platform for Infrastructure Tooling</a></h3><p>Lyft 宣布開源 Clutch 這個千秋萬載，一種江湖的 Infrastructure Workflow 工具XD 介紹文寫得讓我有點看不懂，不過實際去看他的組態設定，可以發現可以利用它來整合各種服務，然後再利用它來管理，例如：可以把 EC2 ASG 整合進來，就可以透過它來得知 ASG 的 Size 變化狀況 (透過 Slack)，或是把他跟 Kubernetes 整合在一起，透過它來砍掉 Pod 或是調整 HPA，也可以把他跟 GitHub 整合在一起，就可以控制 Repository，簡而言之就是要你命 3000 XD</p><h3 id="Introducing-Domain-Oriented-Microservice-Architecture"><a href="#Introducing-Domain-Oriented-Microservice-Architecture" class="headerlink" title="Introducing Domain-Oriented Microservice Architecture"></a><a href="https://eng.uber.com/microservice-architecture/" target="_blank" rel="noopener">Introducing Domain-Oriented Microservice Architecture</a></h3><p>幾年前大家推崇 Microservices 的好處，開始一窩蜂地開始使用它來構築組織內的服務，不過在最近幾年，大家開始撻伐 Micro Service 的缺點，覺得他會使得複雜性大大增加，而在 Uber 內大約有 2200 個重要的 Microservices，在過去的兩年中，Uber 嘗試降低 Microservices 的複雜性，同時仍保持 Microservices 架構的優勢。所以 Uber 希望通過這篇文章介紹Microservices 架構的通用方法，此方法被稱為 “Domain-Oriented Microservice Architecture” (DOMA)，前面也提到很多人開始在嫌棄 Microservices 架構，但是很少人會提議測底拒絕，因為它還是有它的優點，似乎目前也沒有比較好的替代品，所以 Uber 希望 DOMA 可以降低系統整體的複雜性，但又保持 Microservices 架構的靈活性</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 38 期 - 就是要做出最酷最炫砲的 GitHub Profile</title>
      <link href="/2020/07/21/38-how-to-create-a-amazing-profile-on-github/"/>
      <url>/2020/07/21/38-how-to-create-a-amazing-profile-on-github/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="如何建立獨一無二的-GitHub-Profile！與三個很酷的設計及應用-🚀"><a href="#如何建立獨一無二的-GitHub-Profile！與三個很酷的設計及應用-🚀" class="headerlink" title="如何建立獨一無二的 GitHub Profile！與三個很酷的設計及應用 🚀"></a><a href="https://medium.com/starbugs/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E7%8D%A8%E4%B8%80%E7%84%A1%E4%BA%8C%E7%9A%84-github-profile-%E8%88%87%E4%B8%89%E5%80%8B%E5%BE%88%E9%85%B7%E7%9A%84%E8%A8%AD%E8%A8%88%E5%8F%8A%E6%87%89%E7%94%A8-ef1cbb4b42c1" target="_blank" rel="noopener">如何建立獨一無二的 GitHub Profile！與三個很酷的設計及應用 🚀</a></h3><p>在 GitHub 的 Overview 上，每次點進個人頁，在 Overview 上映入眼簾的總是 Popular repositories，然後就是下方的 Contributions 熱力圖和活動紀錄，我就問你：「這樣子的頁面到底哪裡吸引人了？」</p><p>難道我沒有辦法讓人點進我的 Overview 就有像被海嘯打到的驚奇感嗎？在這篇文章裡面，我就要來介紹 GitHub 最近推出的新功能，它可以讓你在 GitHub 個人頁中的 Overview 上放上自己設計的 README.md</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="GitHub-Archive-Program-the-journey-of-the-world’s-open-source-code-to-the-Arctic"><a href="#GitHub-Archive-Program-the-journey-of-the-world’s-open-source-code-to-the-Arctic" class="headerlink" title="GitHub Archive Program: the journey of the world’s open source code to the Arctic"></a><a href="https://github.blog/2020-07-16-github-archive-program-the-journey-of-the-worlds-open-source-code-to-the-arctic/" target="_blank" rel="noopener">GitHub Archive Program: the journey of the world’s open source code to the Arctic</a></h3><p>哇！你各位快檢查一下自己的 GitHub 有沒有多了一個「Arctic Code Vault Contributor（北極圈的程式碼貢獻者）」的稱號啊？如果有的話恭喜你的程式碼被送到北極去封存啦！快來看看程式碼被送到北極的過程，然後也恭喜各位真的在歷史中留下足跡了！而如果沒有拿到稱號也不要難過，只要持續 Coding，下一個就是你！</p><h3 id="How-to-Build-Reusable-HTML-Components-Without-Component-Based-Frameworks"><a href="#How-to-Build-Reusable-HTML-Components-Without-Component-Based-Frameworks" class="headerlink" title="How to Build Reusable HTML Components Without Component-Based Frameworks"></a><a href="https://www.freecodecamp.org/news/how-to-build-reusable-html-components-without-component-based-frameworks/" target="_blank" rel="noopener">How to Build Reusable HTML Components Without Component-Based Frameworks</a></h3><p>當你在無法使用 React 與 Vue 之類 JavaScript 的框架環境作業時，該如何使用原生的 JavaScript 做一個可重用的 HTML Component 呢？</p><h3 id="心得-英文-如何命名「數量變數」"><a href="#心得-英文-如何命名「數量變數」" class="headerlink" title="[心得][英文] 如何命名「數量變數」"></a><a href="https://www.ptt.cc/bbs/Soft_Job/M.1594363672.A.7D0.html" target="_blank" rel="noopener">[心得][英文] 如何命名「數量變數」</a></h3><p>對工程師來說有時候取變數就很苦惱了，如果還要搭上英文的文法規則更是困難。像是數量就分了 count、number 和 quantity 等等，到底什麼時候要用什麼以及怎麼用，文章整理了幾個非常實用的例子！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Channel-Use-Cases-Go-101"><a href="#Channel-Use-Cases-Go-101" class="headerlink" title="Channel Use Cases - Go 101"></a><a href="https://go101.org/article/channel-use-cases.html" target="_blank" rel="noopener">Channel Use Cases - Go 101</a></h3><p>很多人剛學 Go 的時候會覺得 channel 的概念比較難，或是學完語法後還是不知道哪些情境可以使用 channel。而這篇文章就是要告訴你 channel 有哪些 use case，包括可以當成 promise 跟 lock 用，或是拿來做 rate limit 等等</p><h3 id="How-Operating-Systems-Work"><a href="#How-Operating-Systems-Work" class="headerlink" title="How Operating Systems Work"></a><a href="https://link.medium.com/TMShYyyxf8" target="_blank" rel="noopener">How Operating Systems Work</a></h3><p>想把程式寫好，不能不懂作業系統。這篇文簡單介紹了作業系統到底在做什麼，像是 Thread Model 有分成哪幾種，或是 memory management 是在幹嘛，雖然整篇文章爆炸長，但對於不熟悉作業系統的人來說真的是一篇好文</p><h3 id="系統設計-設計縮網址服務"><a href="#系統設計-設計縮網址服務" class="headerlink" title="系統設計 - 設計縮網址服務"></a><a href="https://www.jyt0532.com/2019/12/05/design-tiny-url/" target="_blank" rel="noopener">系統設計 - 設計縮網址服務</a></h3><p>如果要你設計一個短網址服務，你會想怎麼設計呢？短網址要用什麼演算法生成、過期數據要怎麼處理、database 要怎麼選都是需要經過考慮的。不管你對於系統設計有沒有興趣，我個人是覺得這篇的內容滿有趣的，所以推薦大家都看看</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="写给女友的秘籍-浏览器工作原理（上）篇"><a href="#写给女友的秘籍-浏览器工作原理（上）篇" class="headerlink" title="写给女友的秘籍-浏览器工作原理（上）篇"></a><a href="https://juejin.im/post/5f007d32f265da22b64936bf" target="_blank" rel="noopener">写给女友的秘籍-浏览器工作原理（上）篇</a></h3><p>1.2 萬字的一篇文章，讀完這篇你會學到前端優化的底層邏輯、瀏覽器渲染的過程、javascript 運行機制解析。不過還是想對作者說：醒醒吧你沒有女友！</p><h3 id="程序员成长指北-全栈开发"><a href="#程序员成长指北-全栈开发" class="headerlink" title="程序员成长指北 - 全栈开发"></a><a href="https://github.com/koala-coding/goodBlog" target="_blank" rel="noopener">程序员成长指北 - 全栈开发</a></h3><p>Node.js 為底的成長指北，從 Node.js 比較進階的議題到 Vue.js 比較常見的面試題都有帶到。</p><h3 id="我向面试官讲解了单例模式，他对我竖起了大拇指"><a href="#我向面试官讲解了单例模式，他对我竖起了大拇指" class="headerlink" title="我向面试官讲解了单例模式，他对我竖起了大拇指"></a><a href="https://juejin.im/post/5f13ad426fb9a07e8849d260" target="_blank" rel="noopener">我向面试官讲解了单例模式，他对我竖起了大拇指</a></h3><p>因為標題很好笑，就收錄進來了。Singleton 是許多人學 Design Pattern 的第一個或是前幾個 Pattern。這篇文章有提到一些比較進階的觀點，例如：鎖的競爭。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="CDK-for-Terraform-Enabling-Python-amp-TypeScript-Support"><a href="#CDK-for-Terraform-Enabling-Python-amp-TypeScript-Support" class="headerlink" title="CDK for Terraform: Enabling Python &amp; TypeScript Support"></a><a href="https://www.hashicorp.com/blog/cdk-for-terraform-enabling-python-and-typescript-support/" target="_blank" rel="noopener">CDK for Terraform: Enabling Python &amp; TypeScript Support</a></h3><p>很多人當初不想當 <strong>YAML</strong> / <strong>JSON</strong> 工程師，而從 <strong>AWS Cloudformation</strong> 跳槽到 <strong>Terraform</strong>，後來 <strong>AWS CDK</strong> 的推出，讓開發者可以使用自己喜歡的語言來達成 IaC 而且減少碰到 YAML / JSON 檔案的機會；今天 HashiCorp 跟 AWS 合作推出了 CDK for Terraform!! 讓開發者可以使用 <strong>TypeScript</strong> 跟 <strong>Python</strong> 透過 Terraform 來達成 IaC，除了再也不用看到 YAML / JSON 檔案之外，Terraform 強大的特性也一併存在！</p><h3 id="🔑-OAuth-2-0-flows-explained-in-GIFs"><a href="#🔑-OAuth-2-0-flows-explained-in-GIFs" class="headerlink" title="🔑 OAuth 2.0 flows explained in GIFs"></a><a href="https://dev.to/hem/oauth-2-0-flows-explained-in-gifs-2o7a" target="_blank" rel="noopener">🔑 OAuth 2.0 flows explained in GIFs</a></h3><p>OAuth 每天都在用，聽過很多次，但是怎麼達成的呢？此篇文章用生動的 GIF 圖檔詳述 OAuth 2.0 的完整 Flow，，讓大家可以用更輕鬆的方式來了解這個比較複雜但卻相當重要的 Authorization 方式</p><h3 id="10-YAML-tips-for-people-who-hate-YAML"><a href="#10-YAML-tips-for-people-who-hate-YAML" class="headerlink" title="10 YAML tips for people who hate YAML"></a><a href="https://www.redhat.com/sysadmin/yaml-tips" target="_blank" rel="noopener">10 YAML tips for people who hate YAML</a></h3><p>身為 <strong>YAML 工程師</strong> 必須要知道的十件事情:</p><ol><li>讓文字編輯器可以閱讀 YAML 檔案格式</li><li>使用 Linter</li><li>真的很討厭 YAML 的話，可以試試看 pyyaml</li><li>嘗試把 YAML 轉換成別種格式來查找問題</li><li>很久沒用忘光了，可以拜訪一下 yaml.org</li><li>真的開始寫 YAML 之前，可以先來個 Pseudo-config</li><li>到底該用 Space 還是 Tab ?!</li><li>縮排的適當使用時機</li><li>把常用的 YAML 內容存下來，方便重複使用</li><li>YAML 不是萬能的！</li></ol><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 37 期 - 不想離開沙發，只好自己寫一個電腦遙控器了</title>
      <link href="/2020/07/14/37-how-to-be-a-couch-potato/"/>
      <url>/2020/07/14/37-how-to-be-a-couch-potato/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="不想離開沙發，只好自己寫一個電腦遙控器了"><a href="#不想離開沙發，只好自己寫一個電腦遙控器了" class="headerlink" title="不想離開沙發，只好自己寫一個電腦遙控器了"></a><a href="https://link.medium.com/2moWegDw57" target="_blank" rel="noopener">不想離開沙發，只好自己寫一個電腦遙控器了</a></h3><p>這週的專欄沒有太高深的技術，只是想跟大家分享我最近在做的 Side Project：電腦遙控器。</p><p>因為我在家時很喜歡把電腦螢幕投影到電視上，不管是追劇還是上 Youtube 通通是躺在沙發上用電視看。因此我做了一個網頁版的電腦遙控器，用來命令我的電腦做暫停、快轉、調音量等等動作，讓我可以徹底當一個沙發馬鈴薯～</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Learn-to-Code-Challenge"><a href="#Learn-to-Code-Challenge" class="headerlink" title="Learn-to-Code Challenge"></a><a href="https://lawsonblake.com/learn-to-code-challenge/?ref=hackernoon.com" target="_blank" rel="noopener">Learn-to-Code Challenge</a></h3><p>很喜歡作者在文中點出在學習程式或時其他新技能時，要試著去克服自我懷疑，嘗試跳脫那些先入為主的概念，並且以一個小孩子的心態重新看待事物。簡單來說就是別為自己找藉口啦！什麼「程式好像很難」、「我沒有時間學習」、「這個我做不到」或是「我就爛！」，在這些藉口之前更重要的是自身到底為了學習做了什麼？</p><h3 id="How-To-Create-A-GitHub-Profile-README"><a href="#How-To-Create-A-GitHub-Profile-README" class="headerlink" title="How To Create A GitHub Profile README"></a><a href="https://dev.to/m0nica/how-to-create-a-github-profile-readme-1paj" target="_blank" rel="noopener">How To Create A GitHub Profile README</a></h3><p>你已經厭倦每次點到自己的 GitHub 首頁就是那些平淡無奇的專案列表嗎？你是不是想要讓別人進到你的 GitHub 就有耳目一心又怦然心動的初戀感覺？快來看看 GitHub 釋出的新功能！文章中有簡單的說明一下如何使用，也有貼出幾個非常 fancy 頁面讓各位參考！什麼？你說還不夠沒辦法激發靈感嗎？快往下滑到 Smalltown，小城哥也貼了一篇開源的 Repository，讓大家放上自己的個人頁面。有了開源 support 還不快設計（clone）一波嗎？</p><h3 id="Why-IDs-Can-be-Problematic-in-CSS"><a href="#Why-IDs-Can-be-Problematic-in-CSS" class="headerlink" title="Why IDs Can be Problematic in CSS"></a><a href="https://hackernoon.com/why-ids-can-be-problematic-in-css-gt103uh6" target="_blank" rel="noopener">Why IDs Can be Problematic in CSS</a></h3><p>為什麼我們不能在 CSS 裡面用 ID 選擇器？除了我們已經知道 ID 是唯一，而 Class 可重複之外，使用 ID 的問題在哪？在文章裡作者沒有直接告訴你「你不能用！」，而是說所有的工具像是 <code>!important</code>、ID、Class 都是 CSS 工具的一部分，它的好壞取決於怎麼去使用，因此為了避免錯誤的使用它們，好好的了解適當的使用時機是很重要的事情！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="30-天精通-RxJS"><a href="#30-天精通-RxJS" class="headerlink" title="30 天精通 RxJS"></a><a href="https://blog.jerry-hong.com/series/rxjs/thirty-days-RxJS-00" target="_blank" rel="noopener">30 天精通 RxJS</a></h3><p>近年來的前端應用越來越複雜，很多時候為了要處理一些複雜的事件流，常常會把扣寫得亂七八糟，而 RxJS 就是專門用來這類事件流的。這一系列由 Jerry 寫的 RxJS 30 天是我看過講 reactive 的概念講得最清楚的文章，想學 RxJS 就從這裡開始吧～</p><h3 id="A-Few-More-Reasons-Rust-Compiles-Slowly"><a href="#A-Few-More-Reasons-Rust-Compiles-Slowly" class="headerlink" title="A Few More Reasons Rust Compiles Slowly"></a><a href="https://pingcap.com/blog/reasons-rust-compiles-slowly" target="_blank" rel="noopener">A Few More Reasons Rust Compiles Slowly</a></h3><p>究竟為什麼 Rust 編譯起來這麼慢呢？這篇文章從 LLVM 及 compiler 架構的角度切入，告訴你究竟是哪些原因，導致 Rust 編譯所需的時間比其他語言多上好幾倍</p><h3 id="Choosing-a-Rust-web-framework-2020-edition"><a href="#Choosing-a-Rust-web-framework-2020-edition" class="headerlink" title="Choosing a Rust web framework, 2020 edition"></a><a href="https://www.lpalmieri.com/posts/2020-07-04-choosing-a-rust-web-framework-2020-edition/" target="_blank" rel="noopener">Choosing a Rust web framework, 2020 edition</a></h3><p>想要用 Rust 寫一個 Web 服務但不知道 Web 框架該怎麼選嗎？這篇文章從各個面向幫你比較了 <code>actix-web</code>、<code>rocket</code>、<code>tide</code> 跟 <code>warp</code> 這四個比較熱門的框架，不管你是想要好入門的、語法精簡的還是最多人用的，都可以在這邊找到</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="I-want-off-Mr-Golang’s-Wild-Ride"><a href="#I-want-off-Mr-Golang’s-Wild-Ride" class="headerlink" title="I want off Mr. Golang’s Wild Ride"></a><a href="https://fasterthanli.me/articles/i-want-off-mr-golangs-wild-ride" target="_blank" rel="noopener">I want off Mr. Golang’s Wild Ride</a></h3><p>這篇目測至少 1 萬字  左右，作者本來是 Go 的愛用者，而今年卻覺得 Go 不太好用。他用範例比較了 Shell Script / Go / Rust 寫起來會是怎麼樣，有什麼優缺點。如果你對 Rust / Go 有興趣，這篇是必讀之作。</p><h3 id="What-Time-Is-It-in-London"><a href="#What-Time-Is-It-in-London" class="headerlink" title="What Time Is It in London?"></a><a href="https://daringfireball.net/2020/05/what_time_is_it_in_london" target="_blank" rel="noopener">What Time Is It in London?</a></h3><p>如果你問 Siri, What time is it in London? 他會回答你多倫多的時間。你的雇主不會因為你說了一個錯誤答案就炒掉你。但公司永遠不會雇用一個沒有基本常識的員工。所有其他的服務，例如：Google、Alexa、DuckDuckGo…等等。你問他們 What time is it in London? 都會得到正確答案，只有 Siri 不會。</p><h3 id="New-grad-vs-senior-dev"><a href="#New-grad-vs-senior-dev" class="headerlink" title="New grad vs senior dev"></a><a href="https://ericlippert.com/2020/03/27/new-grad-vs-senior-dev/" target="_blank" rel="noopener">New grad vs senior dev</a></h3><p>畢業生 vs 資深工程師。本篇作者分享了自己在畢業時遇到資深工程師的反應，當時的他覺得資深工程師的回應是不禮貌的，他詳細敘述了問問題的過程，資深工程師會怎麼想，畢業生會怎麼想。最後，他用自己的經驗提醒自己，對新手多一點耐心。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="GitHub-Awesome-Profile-README-templates"><a href="#GitHub-Awesome-Profile-README-templates" class="headerlink" title="GitHub Awesome-Profile-README-templates"></a><a href="https://github.com/kautukkundan/Awesome-Profile-README-templates" target="_blank" rel="noopener">GitHub Awesome-Profile-README-templates</a></h3><p>前幾天 #GitHub 發布的新功能可以讓使用者建立跟自己名稱一樣的 Repository 來管理自己的 Profile, 結果馬上就有鄉民開一個 Repository 讓大家把自己的創意當成 Profile Template 放上去，這下子大家不用怕沒有靈感了 XD 趕緊一起來更新自己的 GitHub Profile 吧！</p><h3 id="Open-Distro-for-Elasticsearch-1-9-0-Release-Notes"><a href="#Open-Distro-for-Elasticsearch-1-9-0-Release-Notes" class="headerlink" title="Open Distro for Elasticsearch 1.9.0 Release Notes"></a><a href="https://github.com/opendistro-for-elasticsearch/opendistro-build/blob/master/release-notes/opendistro-for-elasticsearch-release-notes-1.9.0.md" target="_blank" rel="noopener">Open Distro for Elasticsearch 1.9.0 Release Notes</a></h3><p>WOW OpenDistro for ElasticSearch 1.9.0 總算出了，對應到官方 ElasticSearch 的版本是 7.8.0，多了不少新功能，譬如 Root Cause Analysis, 新的 Anomaly Detection Actions…等，不過自己最在意的其實沒有列在 Release Note 裡面，就是這版的 Dockerfile 總算不是自己去安裝 JDK 了，而是改成直接使用 ElasticSearch 官方綁定的版本，因此從 JDK 12 -&gt; 14，GC 模式變成使用 G1GC，對於效能上來說改善超級多的，本來使用 Docker Image 在運行的人一定要記得升級一下，會有本來是用爬的，突然跑起來的感覺 XD</p><h3 id="A-comprehensive-guide-to-managing-secrets-in-your-Terraform-code"><a href="#A-comprehensive-guide-to-managing-secrets-in-your-Terraform-code" class="headerlink" title="A comprehensive guide to managing secrets in your Terraform code"></a><a href="https://blog.gruntwork.io/a-comprehensive-guide-to-managing-secrets-in-your-terraform-code-1d586955ace1" target="_blank" rel="noopener">A comprehensive guide to managing secrets in your Terraform code</a></h3><p>Terraform 可以幫忙管理各種資源，但也因為如此，他會需要存取到各種 Credentials，那麼該如何處理這些 Createntials 會比較好呢？Gruntwork 提出了 3 種保管 Credential 的方法(但其實還有第 4 種就是… 可以試試看 Terraform Cloud XD)，並且都有附上詳細的實作內容，推薦有使用 Terraform 的人可以參考看看！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 36 期 - 我的 ElasticSearch 調校之旅</title>
      <link href="/2020/07/07/36-elastic-tuning/"/>
      <url>/2020/07/07/36-elastic-tuning/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="我的-ElasticSearch-調校之旅"><a href="#我的-ElasticSearch-調校之旅" class="headerlink" title="我的 ElasticSearch 調校之旅"></a><a href="https://medium.com/starbugs/%E6%88%91%E7%9A%84-elasticsearch-%E8%AA%BF%E6%A0%A1%E4%B9%8B%E6%97%85-89c380b5673c" target="_blank" rel="noopener">我的 ElasticSearch 調校之旅</a></h3><p>分享 MaiCoin SRE 團隊在久病成良醫的 Elastic Performance Tuning 過程中，如何在合理的系統資源下，以最佳維運方式的角度，來使用 Logstash + ElasticSearch 處理最多的 Log Event</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="How-to-Learn-a-New-Skill"><a href="#How-to-Learn-a-New-Skill" class="headerlink" title="How to Learn a New Skill"></a><a href="https://www.freecodecamp.org/news/how-to-learn-a-new-skill/" target="_blank" rel="noopener">How to Learn a New Skill</a></h3><p>想分享這篇是因為看到印象深刻的一句「Anyone can master a skill with 10,000 hours of practice.」。然後不曉得大家知不知道 steam 上的一款遊戲叫做「星露谷物語」，聽說那個遊戲是作者想要學習 C# 所做的練習作品，連續四年每天花費超過十小時的一萬小時以上練習的產物（<a href="https://buzzorange.com/techorange/2016/07/04/stardew-velley-ape/" target="_blank" rel="noopener">資料來源</a>），有人說「平庸和超凡的界線，就在於那一萬小時的練習」，想不到可以用英文看到這句話，太感人了 😭</p><h3 id="5-Things-To-Ask-About-the-Engineering-Team-to-Avoid-Taking-a-Job-From-Hell"><a href="#5-Things-To-Ask-About-the-Engineering-Team-to-Avoid-Taking-a-Job-From-Hell" class="headerlink" title="5 Things To Ask About the Engineering Team to Avoid Taking a Job From Hell"></a><a href="https://hackernoon.com/5-things-to-ask-about-the-engineering-team-to-avoid-taking-a-job-from-hell-h0453uj4" target="_blank" rel="noopener">5 Things To Ask About the Engineering Team to Avoid Taking a Job From Hell</a></h3><p>很喜歡這篇這個作者撰寫的風格，文章內容闡述了幾點團隊協作的風格，並且透過問與答讓你去發現你的團隊需要的是什麼，或是在團隊裡你想要得到的是什麼，是篇很適合思考的一篇文章。</p><h3 id="6-HTML-Bad-Coding-Habits"><a href="#6-HTML-Bad-Coding-Habits" class="headerlink" title="6 HTML Bad Coding Habits"></a><a href="https://dev.to/melnik909/6-html-bad-coding-habits-3ljj" target="_blank" rel="noopener">6 HTML Bad Coding Habits</a></h3><p>不要以為在 HTML 裡就不會有爛 Code 的風險，HTML 的每個標籤都代表著他自己的意思，瀏覽器也會針對不同的標籤去做特別的處理，作者列出了在 HTML 中 6 個不是很好的習慣，然後如果你看到第二點時感到疑惑，可以滑到下面看看第一則留言！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Kubernetes-ClusterIP-vs-NodePort-vs-LoadBalancer-Services-and-Ingress"><a href="#Kubernetes-ClusterIP-vs-NodePort-vs-LoadBalancer-Services-and-Ingress" class="headerlink" title="Kubernetes: ClusterIP vs NodePort vs LoadBalancer, Services, and Ingress"></a><a href="https://link.medium.com/DHokjaFaS7" target="_blank" rel="noopener">Kubernetes: ClusterIP vs NodePort vs LoadBalancer, Services, and Ingress</a></h3><p>Kubernetes 有四種跟網路有關的 service，分別是 ClusterIP、NodePort、LoadBalancer 跟 ExternalName，這篇文章用手繪圖的方式介紹這四種 service 分別有什麼功用，很適合像我這種剛入門 K8s 很多東西都搞不清楚的人來讀 XD</p><h3 id="Is-Deno-Secure-Fast-Lightweight-and-Better-than-Node"><a href="#Is-Deno-Secure-Fast-Lightweight-and-Better-than-Node" class="headerlink" title="Is Deno Secure, Fast, Lightweight, and Better than Node?"></a><a href="https://link.medium.com/QFeLTrObS7" target="_blank" rel="noopener">Is Deno Secure, Fast, Lightweight, and Better than Node?</a></h3><p>自從 Deno 發佈第一個版本之後，到處都可以看到勸人不要再學 Node，直接改用 Deno 的言論。但 Deno 真的又安全、又快速而且各方面都比 Node 好嗎？這篇文章我覺得滿客觀的，如果好奇 Deno 跟 Node 之間到底誰輸誰贏的話就快點進來看看吧！</p><h3 id="Git-Concepts-I-Wish-I-Knew-Years-Ago"><a href="#Git-Concepts-I-Wish-I-Knew-Years-Ago" class="headerlink" title="Git Concepts I Wish I Knew Years Ago"></a><a href="https://dev.to/g_abud/advanced-git-reference-1o9j" target="_blank" rel="noopener">Git Concepts I Wish I Knew Years Ago</a></h3><p>雖然這篇標題寫的是 Git Concepts，但他其實是在介紹一些比較少用到的 git 指令 XD，像比較新的 <code>git switch</code> 跟 <code>git restore</code> 我之前都沒有聽過，<code>.gitattributes</code> 這個檔案雖然有聽過但也從來沒有去研究怎麼用。看完這篇讓我不禁感嘆東西真的學都學不完，用 Git 這麼多年了竟然還有很多技巧不會用</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="How-I-passed-the-Solutions-Architect-Professional-with-mostly-free-content"><a href="#How-I-passed-the-Solutions-Architect-Professional-with-mostly-free-content" class="headerlink" title="How I passed the Solutions Architect Professional with mostly free content"></a><a href="https://dev.to/aws-heroes/how-i-passed-the-solutions-architect-professional-with-mostly-free-content-ine" target="_blank" rel="noopener">How I passed the Solutions Architect Professional with mostly free content</a></h3><p>文中作者依靠免費資源來考取 AWS Solutions Architect Professional 真是令人驚奇呀. 來看看他怎麼做到的，check it out!</p><h3 id="Mysql2-Ruby-Gem-for-AWS-Lambda"><a href="#Mysql2-Ruby-Gem-for-AWS-Lambda" class="headerlink" title="Mysql2 Ruby Gem for AWS Lambda"></a><a href="https://dev.to/aws-heroes/mysql2-ruby-gem-for-aws-lambda-koj" target="_blank" rel="noopener">Mysql2 Ruby Gem for AWS Lambda</a></h3><p>Mysql 出了一個給 AWS Lambda 專用的 Gem，縮小了，並且可以支援各種連線模式。這可能是要支援 Auroa API 版本的一個更方便使用的方案？不確定，先讓子彈飛一會兒。</p><h3 id="Important-CSS-Concepts-To-Learn"><a href="#Important-CSS-Concepts-To-Learn" class="headerlink" title="Important CSS Concepts To Learn"></a><a href="https://dev.to/frontenddude/important-css-concepts-to-learn-57j3" target="_blank" rel="noopener">Important CSS Concepts To Learn</a></h3><p>一些重要的 CSS 觀念，寫得很細，適合新手觀看，和老手複習。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="The-Current-State-of-Kubernetes-Threat-Modelling"><a href="#The-Current-State-of-Kubernetes-Threat-Modelling" class="headerlink" title="The Current State of Kubernetes Threat Modelling"></a><a href="https://www.marcolancini.it/2020/blog-kubernetes-threat-modelling/" target="_blank" rel="noopener">The Current State of Kubernetes Threat Modelling</a></h3><p>Kubernetes 主宰雲端市場已經是無庸置疑的一件事實了，越多人使用的技術對於攻擊者來說就越有研究的價值性，這篇文章嘗試從 NCC, CNCF 和 Kubernetes Security Audit Working Group 來分析 Kubernetes 的威脅模型總共有哪幾種，對於資訊安全日益重要的今天是一篇滿值得參考的文章</p><h3 id="10-VSCode-extensions-that-make-your-life-easier-2020"><a href="#10-VSCode-extensions-that-make-your-life-easier-2020" class="headerlink" title="10 VSCode extensions that make your life easier [2020]"></a><a href="https://dev.to/amir/10-vscode-extensions-that-make-your-life-easier-2020-114h" target="_blank" rel="noopener">10 VSCode extensions that make your life easier [2020]</a></h3><p>每過一段時間都會出現的 VSCode Extension 推薦文章XD 這次列出作者覺得 2020 年最推薦的十個 VSCode Extension，有在使用 VSCode 的人可以參考看看有沒有什麼是自己有缺的XD</p><h3 id="17-NO-CODE-TOOLS-FOR-EACH-STAGE-OF-APPLICATION-DEVELOPMENT-INFOGRAPHIC"><a href="#17-NO-CODE-TOOLS-FOR-EACH-STAGE-OF-APPLICATION-DEVELOPMENT-INFOGRAPHIC" class="headerlink" title="17 NO-CODE TOOLS FOR EACH STAGE OF APPLICATION DEVELOPMENT [INFOGRAPHIC]"></a><a href="https://www.testcraft.io/no-code-tools-application-development/" target="_blank" rel="noopener">17 NO-CODE TOOLS FOR EACH STAGE OF APPLICATION DEVELOPMENT [INFOGRAPHIC]</a></h3><p>不曉得為什麼最近好像又吹起 No Code 開發的風潮/議題，這篇文章介紹了一些想要把一個新創服務端出來，但是卻不需要寫程式的工具箱，讓不會寫程式的人也可以把想法透過這些工具組合出一個有模有樣的服務來</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 35 期 - 端午節後體重奔向天際，極速動腦消耗熱量</title>
      <link href="/2020/06/30/35-I-should-diet-after-dragon-boat-festival/"/>
      <url>/2020/06/30/35-I-should-diet-after-dragon-boat-festival/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Kubernetes-殺手級-IDE-—-Lens"><a href="#Kubernetes-殺手級-IDE-—-Lens" class="headerlink" title="Kubernetes 殺手級 IDE — Lens"></a><a href="https://medium.com/starbugs/kubernetes-%E6%AE%BA%E6%89%8B%E7%B4%9A-ide-lens-a43af6a481b0" target="_blank" rel="noopener">Kubernetes 殺手級 IDE — Lens</a></h3><p>以往我們在管理 Kubernetes 集群的時候，需要大量的命令列操作，需要去四處找尋需要的資訊，這些功能現在 Lens 全部幫你整合進去了。它能夠讓你快速的瀏覽你的 K8S 集群狀況，並且即時反應 K8S 集群的狀態讓你可以做相對應的反應。我們就來看看 Lens 有哪些殺手級的功能吧！</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Mythbusting-Competitive-Programming-You-don’t-need-to-learn-it"><a href="#Mythbusting-Competitive-Programming-You-don’t-need-to-learn-it" class="headerlink" title="Mythbusting Competitive Programming - You don’t need to learn it"></a><a href="https://www.freecodecamp.org/news/mythbusting-competitive-programming/" target="_blank" rel="noopener">Mythbusting Competitive Programming - You don’t need to learn it</a></h3><p>Competitive Programming 是指在短時間內用演算法解題的過程，許多公司將 Competitive Programming 給放入面試的環節中，有許多人因為沒辦法通過這項考驗而喪失資格，但是他們真的沒辦法寫出良好的程式或是優秀的功能嗎？像文章中說的，世界上某些最好的介面不可能是在 30 分鐘內設計出來的，那那些公司中的人資又怎麼能在 30 分鐘內斷定你的價值呢？</p><h3 id="3-cool-CSS-tricks-to-impress-your-friends-at-parties"><a href="#3-cool-CSS-tricks-to-impress-your-friends-at-parties" class="headerlink" title="3 cool CSS tricks to impress your friends at parties"></a><a href="https://dev.to/vtrpldn/3-cool-css-tricks-to-impress-your-friends-at-parties-k19" target="_blank" rel="noopener">3 cool CSS tricks to impress your friends at parties</a></h3><p>這篇文章運用了 CSS 的特別技巧！尤其是最後的「No JS, show on click」，自從把這篇文章裡的內容都學起來後，每次考試都考一百分！就連走在路上看見喜歡的女生，直接拿出電腦 Show 一波，Line 就輕易到手。</p><h3 id="Understand-Memoization-in-5-Minutes"><a href="#Understand-Memoization-in-5-Minutes" class="headerlink" title="Understand Memoization in 5 Minutes"></a><a href="https://dev.to/nas5w/an-introduction-to-memoization-59o" target="_blank" rel="noopener">Understand Memoization in 5 Minutes</a></h3><p>這篇文章看完會有哦～的感覺，但簡單來說就是利用另一個 function 去做判斷，如果沒執行過就執行，有執行過的話就把執行結果保存到某個物件中，之後在執行時的參數如果都一樣，那就直接丟出之前執行過的結果囉！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Avoiding-CSRF-Attacks-with-API-Design"><a href="#Avoiding-CSRF-Attacks-with-API-Design" class="headerlink" title="Avoiding CSRF Attacks with API Design"></a><a href="https://www.thedreaming.org/2020/05/26/avoid-csrf-attacks-with-api-design/" target="_blank" rel="noopener">Avoiding CSRF Attacks with API Design</a></h3><p>CSRF 是很常見的 Web 攻擊手法，他可以利用後端伺服器對瀏覽器的信任進行攻擊。而防止 CSRF 攻擊也有很多種方式，包括使用正確的 HTTP method 跟 CSRF token 等等，身為 Web 開發者，如果忘記了可以趁這機會惡補一下</p><h3 id="為了瞭解原理，那就來實作一個簡易-Virtual-DOM-吧！"><a href="#為了瞭解原理，那就來實作一個簡易-Virtual-DOM-吧！" class="headerlink" title="為了瞭解原理，那就來實作一個簡易 Virtual DOM 吧！"></a><a href="https://link.medium.com/1meWudFeG7" target="_blank" rel="noopener">為了瞭解原理，那就來實作一個簡易 Virtual DOM 吧！</a></h3><p>前端兩大框架 React 跟 Vue 為了效能都有用到Virtual DOM 的技術，想知道 Virtual DOM 內部是怎麼運作的嗎？那就自己實作一個吧！如果真的不想做的話也可以直接看文末的 demo XD，應該就會有點感覺了</p><h3 id="Tips-for-Faster-Rust-Compile-Times"><a href="#Tips-for-Faster-Rust-Compile-Times" class="headerlink" title="Tips for Faster Rust Compile Times"></a><a href="https://endler.dev/2020/rust-compile-times/" target="_blank" rel="noopener">Tips for Faster Rust Compile Times</a></h3><p>眾所皆知，Rust 編譯速度真的很慢很慢，而這篇文章提供了一些可以讓速度變快的方法。如果只是要看看語法有沒有寫錯，那可以試試看 <code>cargo check</code> 而不需要 <code>cargo build</code>，若是不需要 serde 這麼多功能，也可以改用 miniserde 或是 nanoserde，希望在看完這篇文章後大家寫 Rust 能寫得更開心XD，不然光是等編譯就會等到懷疑人生</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Get-Paid-Writing-Articles-for-These-14-Companies-100-Per-Article"><a href="#Get-Paid-Writing-Articles-for-These-14-Companies-100-Per-Article" class="headerlink" title="Get Paid Writing Articles for These 14 Companies ($100+ Per Article)"></a><a href="https://dev.to/hyvortalk/10-companies-that-you-can-write-for-and-get-paid-as-a-developer-100-per-article-4dd7" target="_blank" rel="noopener">Get Paid Writing Articles for These 14 Companies ($100+ Per Article)</a></h3><p>這邊有 14 家公司如果你寫的文章被刊登上去你是可以賺稿費的，大家趕快來鍛鍊自己的寫作能力吧！在開始寫作前記得先看看每家公司的寫作指南，在重複刊登前先問問你要投稿的公司。這篇文章很完整的提供整個思路。</p><h3 id="Why-Writing-is-Important-for-Your-Developer-Career"><a href="#Why-Writing-is-Important-for-Your-Developer-Career" class="headerlink" title="Why Writing is Important for Your Developer Career"></a><a href="https://dev.to/steelwolf180/why-writing-is-important-for-your-developer-career-2of8" target="_blank" rel="noopener">Why Writing is Important for Your Developer Career</a></h3><p>為什麼寫作對你的工程師生涯非常重要？寫作能夠讓你的思考更清晰，更容易的溝通，並在社群上產生漣漪效應。</p><h3 id="How-to-do-technical-blogging"><a href="#How-to-do-technical-blogging" class="headerlink" title="How to do technical blogging"></a><a href="https://dev.to/yelluw/how-to-do-technical-blogging" target="_blank" rel="noopener">How to do technical blogging</a></h3><p>如何做技術寫作？這篇文章提供了一個技術寫作的架構，從標題，摘要，需求，介紹，多步驟解釋，範例，小秘訣，總結。架構看起來挺一般的，Tips 部分倒是提供了許多不錯的建議，KISS 原則，多讀文件，使用圖片來分解文字，不要將原始碼放在圖片內。用平淡的方式取代掉幽默的表達方式，因為讀者不一定懂你的幽默。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="AWS-IAM-Authenticator"><a href="#AWS-IAM-Authenticator" class="headerlink" title="AWS IAM Authenticator"></a><a href="https://github.com/kubernetes-sigs/aws-iam-authenticator" target="_blank" rel="noopener">AWS IAM Authenticator</a></h3><p>第一次使用 AWS EKS 感到最卡的就是那份用來管理 IAM Mapping K8S RBAC 的 Kubernetes Auth ConfigMap，因為要透過編輯它才能夠讓既有的 AWS IAM User/Role 跟 K8S 裡面的 RBAC 權限管理整合在一起，平心而論，這樣的做法在自動化和管理上並不漂亮；而這個功能其實有開源出來叫做 aws-iam-authenticator，最新版 0.5.1 已經可以使用 CRD 來管理 IAM User/Role Identity Mapping 了！這兩天測試了一下還滿好用的，猜測 EKS 在不久的將來可能也會支援，大家可以拭目以待！</p><h3 id="HashiCorp-推出滿滿的大平台-HCP"><a href="#HashiCorp-推出滿滿的大平台-HCP" class="headerlink" title="HashiCorp 推出滿滿的大平台 HCP"></a><a href="https://www.hashicorp.com/blog/announcing-cloud-platform/" target="_blank" rel="noopener">HashiCorp 推出滿滿的大平台 HCP</a></h3><p>體恤大家自己在雲端平台裡面架設和管理 Consul, Vault Cluster 要耗費很多的精神跟時間，所以 HashiCorp 推出 HCP (HashiCorp Cloud Platform) 來幫助使用者在任意的 Cloud Provider 中自動完成這些事情，目前第一版先推出的為 Consul on AWS Beta 版本，下一個會是 Vault on AWS，雖然只先點出了兩個，但官方的展望是希望未來任何的 Cloud Provider 都可以使用這個平台來幫忙託管 HashiCorp 在各大 Cloud Provider 運行的服務；除了 HCP 之外，<a href="https://www.hashicorp.com/blog/announcing-the-terraform-0-13-beta/" target="_blank" rel="noopener"><strong>Terraform 0.13</strong></a> 跟 <a href="https://www.hashicorp.com/blog/announcing-hashicorp-nomad-0-12-beta/" target="_blank" rel="noopener"><strong>Nomad 0.12</strong></a> 都推出了 Beta 版本，Terraform 更新的重點在於 Module 的 count, depends_on 和 for_each 功能新增，還有跟 Provider 比較相關的改善功能；而 Nomad 企業版支援了多個 Cluster 的部署功能，OSS 版本支援新的 Schedule 機制，還有 CNI 插件系統讓使用者可以選擇自己想要的 Container Network 組態…等</p><h3 id="The-Cool-top-Alternative-bashtop"><a href="#The-Cool-top-Alternative-bashtop" class="headerlink" title="The Cool top Alternative- bashtop"></a><a href="https://haydenjames.io/bashtop/" target="_blank" rel="noopener">The <strong>Cool</strong> top Alternative- bashtop</a></h3><p>用膩了在 Linux 系統裡面的 Top 工具了嗎？！這邊介紹一個完全用 Bash 寫成的替代工具 <a href="https://github.com/aristocratos/bashtop" target="_blank" rel="noopener">bashtop</a>，顯示出來的整個介面絢麗很多，不像預設的 Top 黑黑白白的那麼單調，而且除了 CPU 跟 Loading 之外，連 Memory 跟 Disk 都顯示在同一個頁面裡，讓系統管理員不用再另外下 <code>df -ah</code> 跟 <code>free -h</code> XD</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 34 期 - 大家 OK，我先試之超 Q 的 Deno 初體驗 🦕</title>
      <link href="/2020/06/23/34-let-me-try-Deno-first/"/>
      <url>/2020/06/23/34-let-me-try-Deno-first/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Side-Project-從無到有-大家-OK，我先試之超-Q-的-Deno-初體驗-🦕"><a href="#Side-Project-從無到有-大家-OK，我先試之超-Q-的-Deno-初體驗-🦕" class="headerlink" title="Side Project 從無到有-大家 OK，我先試之超 Q 的 Deno 初體驗 🦕"></a><a href="https://medium.com/starbugs/side-project-%E5%BE%9E%E7%84%A1%E5%88%B0%E6%9C%89-%E5%A4%A7%E5%AE%B6-ok-%E6%88%91%E5%85%88%E8%A9%A6%E4%B9%8B%E8%B6%85-q-%E7%9A%84-deno-%E5%88%9D%E9%AB%94%E9%A9%97-b1359ab51892" target="_blank" rel="noopener">Side Project 從無到有-大家 OK，我先試之超 Q 的 Deno 初體驗 🦕</a></h3><p>Hi！大家好，我是神 Q 超人。不知道大家記不記得上禮拜我分享了 這篇文章，然後我就說最近可能會做出第六個 Joke of the Day，雖然我挖了很多坑還沒填，但這次不就直接來了嗎 🙌！不過只是做出來真的太無聊了，想說再尬一下最近很火熱的 Deno，希望和大家一起體會 Deno 和 Node 有什麼不同！</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Do-I-need-to-code-in-my-free-time-to-be-a-good-developer"><a href="#Do-I-need-to-code-in-my-free-time-to-be-a-good-developer" class="headerlink" title="Do I need to code in my free time to be a good developer?"></a><a href="https://dev.to/chechenev/do-i-need-to-code-in-my-free-time-to-be-a-good-developer-10h9" target="_blank" rel="noopener">Do I need to code in my free time to be a good developer?</a></h3><p>持續學習是工程師絕對需要的特質之一，你是否為自己做了「我要變得更好，我要繼續學習！我不能因為下班停止下來！」的設定呢？也許很多篇文章都告訴你你該這麼做，可是每個人都有自己的生活，都需要從生活中找到平衡，甚至是不需要為了自己沒有在下班時間學習而感到罪惡，因為你一天當中的三分之一已經投入在程式中了。你是對程式有熱情所以才追逐他，程式並不是讓你變得痛苦的東西。</p><p>很喜歡作者最後一句話：「Do what you love and what you are passionate about! And don’t let anyone make you feel bad about it.」</p><h3 id="Top-5-Websites-For-Design-Inspiration-Opinion"><a href="#Top-5-Websites-For-Design-Inspiration-Opinion" class="headerlink" title="Top 5 Websites For Design Inspiration [Opinion]"></a><a href="https://dev.to/memahesh/top-5-websites-for-design-inspiration-opinion-4b11" target="_blank" rel="noopener">Top 5 Websites For Design Inspiration [Opinion]</a></h3><p>可以啦！自認為沒有美感的前端工程師都看過來，還在因為「哦！畫面不要太醜就好了！」這種話而感到困擾嗎？作者提供了五個充滿許多好看頁面的網站，讓你想選擇多漂亮就多漂亮，不要猶豫，通通加進我的最愛就對了！</p><h3 id="你知道空白网页的颜色是什么吗？"><a href="#你知道空白网页的颜色是什么吗？" class="headerlink" title="你知道空白网页的颜色是什么吗？"></a><a href="https://juejin.im/post/5eed946ef265da02ce217d3a" target="_blank" rel="noopener">你知道空白网页的颜色是什么吗？</a></h3><p>意識下就直接回答是白色了，這算是超級科普文，不知道不會怎樣，但知道也不會變得不一樣 😂！至於為什麼分享這篇文章嘛…因為我覺得滿有趣的，而且看完後就能馬上去問朋友一樣的問題，然後很裝 B 地告訴對方你！答！錯！惹！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="为什么键盘以-QWER-排列，而不是-ABCD？"><a href="#为什么键盘以-QWER-排列，而不是-ABCD？" class="headerlink" title="为什么键盘以 QWER 排列，而不是 ABCD？"></a><a href="https://mp.weixin.qq.com/s/7TTvFK-bfBxgvXWoFD1_sQ" target="_blank" rel="noopener">为什么键盘以 QWER 排列，而不是 ABCD？</a></h3><p>為什麼鍵盤的最左上方是從 QWER 開始而不是 ABCD 呢？這篇跟技術沒什麼關係，但鍵盤畢竟是工程師不可或缺的工具之一，今天就一起來看看這段有趣的歷史故事吧～</p><h3 id="Terraform-Code-Quality"><a href="#Terraform-Code-Quality" class="headerlink" title="Terraform Code Quality"></a><a href="https://link.medium.com/s6qewByXu7" target="_blank" rel="noopener">Terraform Code Quality</a></h3><p>隨著用 Terraform 的人越來越多，怎麼把 TF 的設定檔寫好也越來越重要。這篇文章提供了一些工具跟方法教你怎麼寫出好的 TF 設定，雖然文有點長，但有在用 TF 的話很建議讀讀這篇。</p><h3 id="Deep-dive-into-Docker-architecture"><a href="#Deep-dive-into-Docker-architecture" class="headerlink" title="Deep dive into Docker architecture"></a><a href="https://link.medium.com/gHaBwsdYu7" target="_blank" rel="noopener">Deep dive into Docker architecture</a></h3><p>對 Docker 原理有興趣的朋友們，這篇文章帶你由淺入深慢慢了解 docker engine 。首先是講 docker daemon 跟 cli 是怎麼溝通的，再來是 docker 用了哪些 Linux kernel 的功能，最後還有補充一下 Dockerfile 是怎麼被讀進去的。雖然不知道這些還是可以把 docker 用得很好，但身為工程師還要有追根究底的精神對吧！</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="The-Top-12-YouTube-Channels-For-Programmers"><a href="#The-Top-12-YouTube-Channels-For-Programmers" class="headerlink" title="The Top 12 YouTube Channels For Programmers"></a><a href="https://codeslaw.com/blog/the-top-12-youtube-channels-for-programmers-1066535" target="_blank" rel="noopener">The Top 12 YouTube Channels For Programmers</a></h3><p> 這週來介紹程式相關的 youtube 頻道。挑這篇文中的三個來介紹。Hack，一個惡搞各種東西 youtube 頻道，突破你對技術的想像力。Google Developers，google 官方的 youtube 頻道，裡面有關於 google 的產品，google 工程師的分享，與 google 工程師的咖啡時間。DevTips，提供一些開發的技巧，幫助你的寫程式技巧。</p><h3 id="27-Programming-Youtube-channels-you-should-know"><a href="#27-Programming-Youtube-channels-you-should-know" class="headerlink" title="27 Programming Youtube channels you should know"></a><a href="https://dev.to/jasterix/27-programming-youtube-channels-you-should-know-4c39" target="_blank" rel="noopener">27 Programming Youtube channels you should know</a></h3><p>翻譯與摘錄：你可以從 Youtube 上學習任何的東西。基於 Brad Traversy 推薦的 22 個程式 youtube 頻道，這篇文章額外推薦了五個不在清單上很棒的頻道。分別是 Traversy Media 全面的覆蓋了幾乎所有的程式語言的主題。Web Dev Simplified 較小的 youtube 頻道，但是麻雀雖小五臟俱全。Programming with Mosh ，非常的直覺且容易聽懂。All Things JavaScript，另一個小 youtube 頻道，每週三放上新的影片。Crash Computer Science，這不是一個常見的清單上的頻道，談論著早期的計算機理論，讓我深深著迷。</p><h2 id="Top-Front-End-Development-YouTube-Channels"><a href="#Top-Front-End-Development-YouTube-Channels" class="headerlink" title="Top Front-End Development YouTube Channels"></a><a href="https://dev.to/gregfletcher/top-front-end-development-youtube-channels-4ihg" target="_blank" rel="noopener">Top Front-End Development YouTube Channels</a></h2><p>有很多的 coding 相關頻道在學前端，但是實在是太多不知道如何開始，這是一個不會讓你疲於奔命的 youtube 推薦清單。The Coding Traind，Daniel Shiffman 從來不會在娛樂觀眾這一方面失敗，他所採用的方法是有趣且可以達到的。我們可以在他的頻道中找到動畫與一些機器學習。Low Level Javascript，youtube 頻道中的寶石，拆解和用優雅的程式碼解釋一系列的主題。這些東西全部都是低階的東西，但你看到仍然會感覺到不知所措。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="7-Python-Mistakes-You-Don’t-Want-to-Make"><a href="#7-Python-Mistakes-You-Don’t-Want-to-Make" class="headerlink" title="7 Python Mistakes You Don’t Want to Make"></a><a href="https://towardsdatascience.com/7-python-mistakes-you-dont-want-to-make-77ac068c847" target="_blank" rel="noopener">7 Python Mistakes You Don’t Want to Make</a></h3><p>在撰寫程式的時候，總是會遇到那種表面上看起來很簡單，但卻必須要花幾個小時甚至一兩天才能找出來的問題，此篇文章列出七個 Python 開發者絕對不會想要犯下的錯誤，避免寶貴的時間被 Bug 吃掉</p><h3 id="Terraform-Code-Quality-1"><a href="#Terraform-Code-Quality-1" class="headerlink" title="Terraform Code Quality"></a><a href="https://cloudskiff.com/terraform-code-quality/" target="_blank" rel="noopener">Terraform Code Quality</a></h3><p>此篇文章是從倫敦 CNCF Meetup 翻譯而來，從 Terraform 基礎開始提起要如何提升 Terraform 的程式品質，每一個小細節都不放過，不管身為 Terraform 的初學者或是老司機，看完之後都還是可以學到不少的東西</p><h3 id="Container-technologies-at-Coinbase"><a href="#Container-technologies-at-Coinbase" class="headerlink" title="Container technologies at Coinbase"></a><a href="https://blog.coinbase.com/container-technologies-at-coinbase-d4ae118dcb6c" target="_blank" rel="noopener">Container technologies at Coinbase</a></h3><p>Coinbase 在這篇文章中描述要如何克服使用 Container 技術所帶來的一系列挑戰，避免生產環境出現故障，內容從 Container 技術的歷史開始介紹起，一步一步帶著讀者了解 Container 技術的前因後果，最後當然帶到了 Kubernetes 所面臨到的問題，還有 Knative, Fargate, Cloud Run 想要解決的事情</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 33 期 - 今天可以打羽球嗎？問問決策樹吧！</title>
      <link href="/2020/06/16/33-can-I-play-badminton-today/"/>
      <url>/2020/06/16/33-can-I-play-badminton-today/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="以數據為師，用決策樹模型判斷今天能不能打羽球"><a href="#以數據為師，用決策樹模型判斷今天能不能打羽球" class="headerlink" title="以數據為師，用決策樹模型判斷今天能不能打羽球"></a><a href="https://medium.com/starbugs/decision-tree-can-i-play-badminton-today-1a39cc03850b" target="_blank" rel="noopener">以數據為師，用決策樹模型判斷今天能不能打羽球</a></h3><p>大家好，我是 Larry，這週的專欄要跟大家分享我最近在做的 Side Project，是個用機器學習來判斷能不能打羽球的小應用。文章內容老少咸宜，不管你是對資料科學有興趣的前端工程師，或是壓根沒聽過機器學習的路人甲，都可以一起來看看～</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="The-Best-Code-Interview-Prep-Platforms-in-2020"><a href="#The-Best-Code-Interview-Prep-Platforms-in-2020" class="headerlink" title="The Best Code Interview Prep Platforms in 2020"></a><a href="https://www.freecodecamp.org/news/the-best-code-interview-prep-platforms-in-2020/" target="_blank" rel="noopener">The Best Code Interview Prep Platforms in 2020</a></h3><p>資訊領域的業界發展超級快速，以前可能只要學好資料結構或演算法就能找到一份好工作，但是現在業界會更希望每個面試者都還能擁有實務經驗，對於不斷改變的環境，面試難度也跟著增加！面對這些考驗，文章中推薦幾個可以讓你更容易準備面試的網站！</p><h3 id="How-To-Write-Unit-Tests-Elegantly"><a href="#How-To-Write-Unit-Tests-Elegantly" class="headerlink" title="How To Write Unit Tests, Elegantly"></a><a href="https://hackernoon.com/how-to-write-unit-tests-elegantly-vd3w3wo7" target="_blank" rel="noopener">How To Write Unit Tests, Elegantly</a></h3><p>如果你不想要為你的產品寫下單元測試，那你的客戶也不會想要為它測試。沒錯！誰會去試一個沒有保障的東西？尤其保障是由開發者自己或是根本就不了解產品開發的業務口中說出來的。寫下單元測試是使你的產品變得成熟的關鍵，也能夠減少將來在開發時出錯的機率。</p><h3 id="22-Things-You-Should-Give-Up-If-You-Want-To-Be-A-Successful-Developer"><a href="#22-Things-You-Should-Give-Up-If-You-Want-To-Be-A-Successful-Developer" class="headerlink" title="22 Things You Should Give Up If You Want To Be A Successful Developer"></a><a href="https://dev.to/iamdidev/22-things-you-should-give-up-if-you-want-to-be-a-successful-developer-2f0o" target="_blank" rel="noopener">22 Things You Should Give Up If You Want To Be A Successful Developer</a></h3><p>點進這篇突然有一種在看工程師版本的心靈雞湯 😂，但還是很建議大家讀一下，說不定能意外看到自己還緊緊握著的東西？雖然 22 項有點多，不過每項都是一句名言加上一些解釋，比起那些面試題目，其實看完還是滿快的，哈哈哈哈哈！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="決策樹-Decision-Tree-以及隨機森林-Random-Forest-介紹"><a href="#決策樹-Decision-Tree-以及隨機森林-Random-Forest-介紹" class="headerlink" title="決策樹(Decision Tree)以及隨機森林(Random Forest)介紹"></a><a href="https://link.medium.com/9Z9iXTQHl7" target="_blank" rel="noopener">決策樹(Decision Tree)以及隨機森林(Random Forest)介紹</a></h3><p>如果看完這週的專欄覺得實在太簡單還意猶未盡的話，可以來看看這篇對於決策樹原理的介紹。文中有簡單提到決策樹是怎麼選擇分割條件，在講完決策樹之後也有簡單介紹一下隨機森林演算法。</p><h3 id="資料視覺化-Matplotlib-Seaborn-Plotly"><a href="#資料視覺化-Matplotlib-Seaborn-Plotly" class="headerlink" title="資料視覺化(Matplotlib, Seaborn, Plotly)"></a><a href="https://link.medium.com/9bkaeUXHl7" target="_blank" rel="noopener">資料視覺化(Matplotlib, Seaborn, Plotly)</a></h3><p>將資料視覺化除了可以讓你的研究結果看起來更炫炮之外，在分析的過程中也扮演了很重要的角色。這篇文章介紹了 Matplotlib、Seaborn、Plotly 這三套 Python 的資料視覺化工具，也對他們各自的優缺點進行了分析</p><h3 id="那些做-Data-Science-的心酸血淚分享"><a href="#那些做-Data-Science-的心酸血淚分享" class="headerlink" title="那些做 Data Science 的心酸血淚分享"></a><a href="https://medium.com/@benbenbang/%E9%82%A3%E4%BA%9B%E5%81%9Adata-science%E7%9A%84%E5%BF%83%E9%85%B8%E8%A1%80%E6%B7%9A%E5%88%86%E4%BA%AB-a86c423216fb" target="_blank" rel="noopener">那些做 Data Science 的心酸血淚分享</a></h3><p>隨著這波 AI 潮流的興起，資料科學家 (Data Scientist) 也逐漸成為熱門的工作選項，但當 Data Scientist 真的這麼好嗎？如果真的想成為 Data Scientist 又該從哪裡開始呢？一起來看看這篇心酸血淚的分享吧</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Junior-Developers-Checklist-for-Landing-a-Remote-Job"><a href="#Junior-Developers-Checklist-for-Landing-a-Remote-Job" class="headerlink" title="Junior Developers Checklist for Landing a Remote Job"></a><a href="https://dev.to/ugglr/junior-developers-checklist-for-landing-a-remote-job-2ldb" target="_blank" rel="noopener">Junior Developers Checklist for Landing a Remote Job</a></h3><p>如何從初階軟體工程師轉變成一個遠端工作者。作者從硬體工程師轉直成軟體工程師，辭掉了他的工作，從 youtube 自學，經過了九個月的自學後，他得到了兩個面試機會。並且他得到了完全遠端的工作。作者整理了一份清單，他費時一年半整理出來了一份，成為遠端工作者的清單。</p><h3 id="The-Realistic-Guide-to-Remote-Work"><a href="#The-Realistic-Guide-to-Remote-Work" class="headerlink" title="The Realistic Guide to Remote Work"></a><a href="https://dev.to/stephsmithio/the-guide-to-remote-work-that-isnt-trying-to-sell-you-anything-498m" target="_blank" rel="noopener">The Realistic Guide to Remote Work</a></h3><p>Remote 工作不是你最終的目標，我摘入文中比較吸引我的觀點來討論。邊旅行邊工作可以讓你得到更多的刺激，到處旅遊會讓你新的東西讓你的生活更豐富。同時旅行中你的理念也會慢慢改變，不僅僅在文化上，也包含你的思維方式，工作方式與目標的設定。在辦公室理你的可以針對一個小盒子中思考，但是 remote 可以擴大你的眼界。最後作者放慢了旅途，將注意力回到工作上，最大程度的發揮影響，並且消除浪費。</p><h3 id="A-New-Age-Finding-Non-Tech-Remote-Jobs"><a href="#A-New-Age-Finding-Non-Tech-Remote-Jobs" class="headerlink" title="A New Age: Finding Non-Tech Remote Jobs"></a><a href="https://dev.to/stephsmithio/a-new-age-finding-non-tech-remote-jobs-1fgo" target="_blank" rel="noopener">A New Age: Finding Non-Tech Remote Jobs</a></h3><p>現在非技術型工作也出現了越來越多的 remote job，文中大部分的職缺還是管理值比較，簡單的下個評論，如果你是夠優秀的人才，Remote 工作機會還是會為你而開。不過文中的顧客成功主管，還有行銷主管，我覺得面對面還是有顯著效果。工程師這種需要也很適合獨立作業的工作，還是會是主流。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Terraform-VSCode-Extension-總算可以裝回來了-XD"><a href="#Terraform-VSCode-Extension-總算可以裝回來了-XD" class="headerlink" title="Terraform VSCode Extension 總算可以裝回來了 XD"></a><a href="https://medium.com/@smalltown/hashicorp-terraform-visual-studio-code-extension-%E7%B8%BD%E7%AE%97%E5%8F%AF%E4%BB%A5%E8%A3%9D%E5%9B%9E%E4%BE%86%E4%BA%86xd-86ba868e4a0b" target="_blank" rel="noopener">Terraform VSCode Extension 總算可以裝回來了 XD</a></h3><p>歷經了很長的一段時間 (感覺有一年了吧)，在社群很多人的努力之下 VSCode Terraform Extension 總算支援 0.12，不過我看升級上去的人都遇到不少問題 😭 而就在不久前官方決定把相關專案收歸國有，並在昨天宣布推出新版本，剛剛迫不期待把它安裝回來使用 XD 歷時一年的大改版到底更新了哪些東西呢？</p><h3 id="Open-sourcing-Kube2Hadoop-Secure-access-to-HDFS-from-Kubernetes"><a href="#Open-sourcing-Kube2Hadoop-Secure-access-to-HDFS-from-Kubernetes" class="headerlink" title="Open sourcing Kube2Hadoop: Secure access to HDFS from Kubernetes"></a><a href="https://engineering.linkedin.com/blog/2020/open-sourcing-kube2hadoop" target="_blank" rel="noopener">Open sourcing Kube2Hadoop: Secure access to HDFS from Kubernetes</a></h3><p>LinkedIn 公司內的 AI 是構築於傳統的 Hadoop/YARN 之下，其中包含的資料涵蓋了 4,500 個使用者而且是將近 500PB 的資料，在過去幾年來，K8S 在 LinkedIn 公司內 AI 相關的 Workload 都大受歡迎，而 K8S 和 Hadoop 間其實是有一道隔閡的，因為 Hadoop 的認證是使用 Kerberos，但是 K8S 是以 Certificate 為主，因此原生 K8S 是無法安全的去存取 HDFS 的，因此 LinkedIn 開發了 Kube2Hadoop 來解決這個問題</p><h3 id="25-API-Security-Tips-You’re-Probably-Not-Considering"><a href="#25-API-Security-Tips-You’re-Probably-Not-Considering" class="headerlink" title="25 API Security Tips You’re Probably Not Considering"></a><a href="https://cisoseries.com/25-api-security-tips-youre-probably-not-considering/" target="_blank" rel="noopener">25 API Security Tips You’re Probably Not Considering</a></h3><p>API 常常是通往重要資料的渠道，駭客也很清楚這一點，因此如何保護他便顯得相當的重要，這篇文章提供了 25 個小秘訣來提醒在開發跟維護 API 的時候應該要注意哪些地方</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 32 期 - 打造 10X Engineer Zsh Shell</title>
      <link href="/2020/06/09/32-10x-engineer-zsh-shell/"/>
      <url>/2020/06/09/32-10x-engineer-zsh-shell/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="打造-10X-Engineer-Zsh-Shell-SRE-討生活篇"><a href="#打造-10X-Engineer-Zsh-Shell-SRE-討生活篇" class="headerlink" title="打造 10X Engineer Zsh Shell - SRE 討生活篇"></a><a href="https://medium.com/starbugs/%E6%89%93%E9%80%A0-10x-engineer-zsh-shell-97e40db76391" target="_blank" rel="noopener">打造 10X Engineer Zsh Shell - SRE 討生活篇</a></h3><p>身為一位 SRE/DevOps 可能有一半的工作時間都必須跟 Shell 打交道，既然使用 Shell 工作的時間那麼多，正所謂工欲善其事必先利其器，有沒有什麼辦法可以讓我們使用它的時候更有效率而且還要可以符合目前的主流使用工具呢？</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="9-Javascript-project-ideas-for-beginners-that-help-you-to-build-an-amazing-coding-portfolio"><a href="#9-Javascript-project-ideas-for-beginners-that-help-you-to-build-an-amazing-coding-portfolio" class="headerlink" title="9 Javascript project ideas for beginners, that help you to build an amazing coding portfolio"></a><a href="https://www.blog.duomly.com/9-javascript-project-ideas-for-beginners-that-help-you-to-build-an-amazing-coding-portfolio" target="_blank" rel="noopener">9 Javascript project ideas for beginners, that help you to build an amazing coding portfolio</a></h3><p>9 個 JavaScript Project 的 idea！如果你是初學者，又不知道學程式的目標或者點子的話，一定要試試看文章內舉出的幾個想法！本人我最喜歡的是 Joke of the Day，說不定這幾天就會找時間做出來。 😂</p><h3 id="Why-Developers-Are-Not-Using-the-Latest-CSS-Features-In-2020"><a href="#Why-Developers-Are-Not-Using-the-Latest-CSS-Features-In-2020" class="headerlink" title="Why Developers Are Not Using the Latest CSS Features In 2020"></a><a href="https://dzone.com/articles/why-masses-are-not-using-latest-css-features-in-20" target="_blank" rel="noopener">Why Developers Are Not Using the Latest CSS Features In 2020</a></h3><p>如果沒有看到這篇文章，我還不會意識到分享了那麼多關於 JavaScript 或是 React 等等的新語法，但卻從沒分享過關於 CSS 的最新資訊，到底為什麼 CSS 那麼容易被忽略呢？他明明就很重要不是嗎？看看文章怎麼說！</p><h3 id="🚀-26-Built-in-String-Methods-JavaScript"><a href="#🚀-26-Built-in-String-Methods-JavaScript" class="headerlink" title="🚀 26 Built-in String Methods | JavaScript"></a><a href="https://dev.to/nialljoemaher/26-built-in-string-methods-javascript-56p" target="_blank" rel="noopener">🚀 26 Built-in String Methods | JavaScript</a></h3><p>雖然常用的字串處理方式就是那些，但看到這篇文章才驚覺，其實也有很多很方便的方法。大家可以先看過，對這些方法有個記憶點，今後如果遇到類似的需要，就可以直接連結到並拿出來使用！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="SSH-Tunneling-Port-Forwarding-詳解"><a href="#SSH-Tunneling-Port-Forwarding-詳解" class="headerlink" title="SSH Tunneling (Port Forwarding) 詳解"></a><a href="https://johnliu55.tw/ssh-tunnel.html" target="_blank" rel="noopener">SSH Tunneling (Port Forwarding) 詳解</a></h3><p>這篇 SSH Tunneling 詳解把原理跟每台機器扮演的角色講得非常清楚，而且也提供了幾個很實用的使用情境。雖然一開始看可能會看不太懂，但多看幾次之後會發現真的是一篇好文。</p><h3 id="RxJS-fruits"><a href="#RxJS-fruits" class="headerlink" title="RxJS-fruits"></a><a href="https://www.rxjs-fruits.com/subscribe-next" target="_blank" rel="noopener">RxJS-fruits</a></h3><p>這篇不是文章而是一個讓你練習 RxJS 的小遊戲 XD，他總共有十六關，過程中會讓你練習到很多常用的 operator，到後面幾關甚至需要把 operator 組合起來才能達成目標，真的玩完這個也差不多學會 RxJS 了。</p><h3 id="尤雨溪自述：打造-Vue-3-背后的故事"><a href="#尤雨溪自述：打造-Vue-3-背后的故事" class="headerlink" title="尤雨溪自述：打造 Vue 3 背后的故事"></a><a href="https://www.infoq.cn/article/rTS3OweiTlA8OldIidBz" target="_blank" rel="noopener">尤雨溪自述：打造 Vue 3 背后的故事</a></h3><p>Vue 雖然是前端三大框架中最晚起步的，但因為上手簡單、環境架設容易，所以現在使用者的數量也是非常龐大。而 Vue 的作者尤雨溪在今年發佈 Vue 3 之前先寫了這篇文，裡面有提到為什麼要重寫整個 Vue 還有為何要轉向 TypeScript，希望看完這篇後大家都能了解 Vue 背後的故事。</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Building-the-most-inaccessible-site-possible-with-a-perfect-Lighthouse-score"><a href="#Building-the-most-inaccessible-site-possible-with-a-perfect-Lighthouse-score" class="headerlink" title="Building the most inaccessible site possible with a perfect Lighthouse score"></a><a href="https://www.matuzo.at/blog/building-the-most-inaccessible-site-possible-with-a-perfect-lighthouse-score/" target="_blank" rel="noopener">Building the most inaccessible site possible with a perfect Lighthouse score</a></h3><p>如何建立一個百分之百有障礙，但是 Lighthouse 一百分的網頁，這個作者真是有才。</p><h3 id="Exploring-Vim"><a href="#Exploring-Vim" class="headerlink" title="Exploring Vim"></a><a href="https://dev.to/vintharas/exploring-vim-4k1i" target="_blank" rel="noopener">Exploring Vim</a></h3><p>這是一個 Vim 教學的系列文，一共由十篇組成，我覺得寫的還不錯，可以作為 Vim 從入門到放棄的第一份教材。</p><h3 id="What’s-inside-a-container"><a href="#What’s-inside-a-container" class="headerlink" title="What’s inside a container?"></a><a href="https://dev.to/gauravratnawat/what-s-inside-a-container-5g03" target="_blank" rel="noopener">What’s inside a container?</a></h3><p>Container 裡面到底有什麼東東？這篇帶你走過 Process、Namespace 還有一堆東東，這篇真的不錯，挖到寶了。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="中國不能夠使用-HashiCorp-相關軟體"><a href="#中國不能夠使用-HashiCorp-相關軟體" class="headerlink" title="中國不能夠使用 HashiCorp 相關軟體"></a><a href="https://news.ycombinator.com/item?id=23349635" target="_blank" rel="noopener">中國不能夠使用 HashiCorp 相關軟體</a></h3><p>有不少人在討論中國不能夠使用 HashiCorp 相關軟體的消息，再更近一步抽絲剝繭之下，其實是只有 <strong>Enterprise</strong> 版本不能夠在中國銷售，<strong>OSS</strong> 版本還是可以繼續自由使用的；而其中最大的問題在於做為密碼管理的 <strong>Vault</strong> 違反中國的法律，其加密演算法不符合該國家的規定，換言之要在中國賣 Enterprise 版本的話就必須要修改 Vault 程式碼，但 HashiCorp 官方不打算做這件事情，所以直接修改 TOE 讓 Enterprise 版本不能在中國販售使用，不過或許有人會納悶，那為什麼 HashiCorp 旗下另外幾個產品的 Enterprise 版本也一樣不能在該國銷售了？因為其他幾個產品假如有密碼管理需求的話，後面都是直接使用 Vault 來保管的，例如 <strong>Terraform Cloud</strong> 內儲存的第三方 DB Account/Password, API Token, AWS AK/SK…等，所以大家是不是應該要好好考慮用 Vault 來保護密碼了呢？</p><h3 id="How-we-use-HashiCorp-Nomad"><a href="#How-we-use-HashiCorp-Nomad" class="headerlink" title="How we use HashiCorp Nomad"></a><a href="https://blog.cloudflare.com/how-we-use-hashicorp-nomad/" target="_blank" rel="noopener">How we use HashiCorp Nomad</a></h3><p>難得有 <strong>HashiCorp Nomad</strong> 相關的分享文章，在此文中，Cloudflare 介紹了如何維持位於全球多達 200 多個城市中運行 Edge 伺服器的可靠性模型，接著深入探討如何利用 <strong>HashiCorp Nomad</strong> 部署動態型的工作任務，好用來提高每個資料中心內運行服務的可靠性，其中涵蓋了要如何克服部署 Nomad 面臨的挑戰，也展示了目前內部是如何使用 Nomad，最後提到了對於未來繼續使用 Nomad 的相關規劃</p><h3 id="Identifying-and-monitoring-key-metrics-for-your-hosts-and-systems"><a href="#Identifying-and-monitoring-key-metrics-for-your-hosts-and-systems" class="headerlink" title="Identifying and monitoring key metrics for your hosts and systems"></a><a href="https://www.elastic.co/blog/identifying-and-monitoring-key-metrics-for-your-hosts-and-systems" target="_blank" rel="noopener">Identifying and monitoring key metrics for your hosts and systems</a></h3><p>這是 Elastic 官方出的監控系列文章，旨在分享如何有效地監控組織內維運的整個生態系統內的各種系統和機器，而第一篇文章是先從距離大家最近的個人電腦開始談起，內容主要是在討論當要監控自己使用的電腦時，會有哪一些重要的數據必須要被收集起來，雖然最後一定又是要賣自己產品，但其中一些內容還是可以稍微借鏡一下</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 31 期 - 梅雨季節沒下雨就是開心啦</title>
      <link href="/2020/06/02/31-good-weather-make-me-happy/"/>
      <url>/2020/06/02/31-good-weather-make-me-happy/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="tpm-—-套件管理工具-，讓你的-tmux-更好用"><a href="#tpm-—-套件管理工具-，讓你的-tmux-更好用" class="headerlink" title="tpm — 套件管理工具 ，讓你的 tmux 更好用"></a><a href="https://medium.com/starbugs/95ecd924c9d" target="_blank" rel="noopener">tpm — 套件管理工具 ，讓你的 tmux 更好用</a></h3><p>最近因為工作上需要用到開很多個視窗的情景，研究了一下如何把 tmux 變得更具有生產力。一個螢幕當三個螢幕用，用起來又有點 Geek 感，讚！</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="5-Things-I-Wish-I-Knew-When-Learning-to-Code"><a href="#5-Things-I-Wish-I-Knew-When-Learning-to-Code" class="headerlink" title="5 Things I Wish I Knew When Learning to Code"></a><a href="https://hackernoon.com/5-things-i-wish-i-knew-when-learning-to-code-l1ai3z37" target="_blank" rel="noopener">5 Things I Wish I Knew When Learning to Code</a></h3><p>學程式需要什麼特別的條件嗎？是不是與眾不同的人才能學，不是哦！文章中五件事來說明學習程式希望你知道的事情，而就我自己而言當初開始學程式就是覺得程式可以做到任何事情，讓我的生活變得更方便，特別是當我擁有什麼想法的時候，我的能力是有辦法讓我實踐他的！</p><h3 id="Free-Software-vs-Open-Source-vs-Freeware-What’s-the-Difference"><a href="#Free-Software-vs-Open-Source-vs-Freeware-What’s-the-Difference" class="headerlink" title="Free Software vs Open Source vs Freeware: What’s the Difference?"></a><a href="https://dzone.com/articles/free-software-vs-open-source-vs-freeware-whats-the" target="_blank" rel="noopener">Free Software vs Open Source vs Freeware: What’s the Difference?</a></h3><p>這篇文章沒有任何技術含量，但算是資訊界必備的小知識文章。開源專案內的標準先不說，就以大方向而言，各位知道「自由軟體」、「開源專案」和「免費軟體」這三者間的不同嗎？</p><h3 id="How-to-Choose-and-Care-for-a-Secure-Open-Source-Project"><a href="#How-to-Choose-and-Care-for-a-Secure-Open-Source-Project" class="headerlink" title="How to Choose and Care for a Secure Open Source Project"></a><a href="https://www.freecodecamp.org/news/how-to-choose-and-care-for-a-secure-open-source-project/" target="_blank" rel="noopener">How to Choose and Care for a Secure Open Source Project</a></h3><p>大家都提倡要對開源界做出貢獻，不只是對自己的學習程式語言很好，也對職涯發展有相當的幫助，但是開源專案百百種，該怎麼選擇及做出貢獻好好照顧他呢？</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="What’s-the-difference-between-a-Rust-char-and-a-Go-rune"><a href="#What’s-the-difference-between-a-Rust-char-and-a-Go-rune" class="headerlink" title="What’s the difference between a Rust char and a Go rune?"></a><a href="https://www.christianfscott.com/rust-chars-vs-go-runes/" target="_blank" rel="noopener">What’s the difference between a Rust char and a Go rune?</a></h3><p>Rust 跟 Go 內部處理字元的方式非常相似，基本上都是存 Unicode。但 Rust 的 char 存的是 Unicode Scalar Value 而 Go 的 rune 是 Unicode Code Point，雖然不知道好像也沒什麼關係XD，但如果想更了解 Unicode 的話很推薦這篇</p><h3 id="Better-git-diffs-with-FZF"><a href="#Better-git-diffs-with-FZF" class="headerlink" title="Better git diffs with FZF"></a><a href="https://link.medium.com/eCLM10b7V6" target="_blank" rel="noopener">Better git diffs with FZF</a></h3><p>每次下 <code>git diff</code> 指令時都會看到落落長的一大串，總是要花很多時間往下才能看到想要找的東西，但搭配上 fzf preview 就完全不一樣了，用起來就像是IDE 裡面的功能一樣</p><h3 id="Go-and-CPU-Caches"><a href="#Go-and-CPU-Caches" class="headerlink" title="Go and CPU Caches"></a><a href="https://link.medium.com/VRvUcJg7V6" target="_blank" rel="noopener">Go and CPU Caches</a></h3><p>平常在開發時不太會需要去了解 CPU cache line 是怎麼運作的，因為編譯器跟直譯器會負責幫你最佳化。但如果是要做特定運算譬如說矩陣加法那就是另一回事了，因為有時不同的讀取記憶體順序可能會導致好幾倍的效能差異，所以在寫底層的 library 給別人用時一定要注意一下</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="How-to-get-hired-by-a-remote-first-company-🏝️"><a href="#How-to-get-hired-by-a-remote-first-company-🏝️" class="headerlink" title="How to get hired by a remote-first company 🏝️"></a><a href="https://dev.to/willemwijnans/how-to-get-hired-by-a-remote-first-company-2h0n" target="_blank" rel="noopener">How to get hired by a remote-first company 🏝️</a></h3><p>如何找到一份遠端工作？在開始之前，有些事情你需要了解到，選擇遠端工作，你需要意識到，你的競爭者會來自世界各地，變得很激烈。遠端工作用文字溝通是最主要的溝通方式。你可以用一些策略來讓你的機會更多。這篇我覺得滿不錯，推薦大家一讀。</p><h3 id="How-to-make-remote-a-success"><a href="#How-to-make-remote-a-success" class="headerlink" title="How to make remote a success"></a><a href="https://dev.to/bearer/how-to-make-remote-a-success-16cl" target="_blank" rel="noopener">How to make remote a success</a></h3><p>像一等公民一樣 remote，假設當你開始家的 CTO 開始 remote 的時候，你就會開始把以前寫在白板上的東西，開始記錄、儲存下來。</p><h3 id="18-websites-where-you-can-find-a-remote-job"><a href="#18-websites-where-you-can-find-a-remote-job" class="headerlink" title="18 websites, where you can find a remote job"></a><a href="https://dev.to/duomly/18-websites-where-you-can-find-a-remote-job-3a91" target="_blank" rel="noopener">18 websites, where you can find a remote job</a></h3><p>18 個你可以找到遠端工作的網站，第一種是全職工作、簽約的類型。第二種是接外包，free lancer。最後一種是介紹屬於設計師的 remote job 工作網站。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="超級精美的-Kubernetes-架構詳細解說"><a href="#超級精美的-Kubernetes-架構詳細解說" class="headerlink" title="超級精美的 Kubernetes 架構詳細解說"></a><a href="https://dev.to/kodekloud/kubernetes-architecture-overview-1418" target="_blank" rel="noopener">超級精美的 Kubernetes 架構詳細解說</a></h3><p>大家都知道 Container 中文翻譯成容器，常常被具現化為貨櫃的圖案，而 K8S 則是用來當成 Container 載體的貨輪；不過這篇文章好屌啊～竟然把 K8S Master/Worker，底層的 etcd, scheduler, api server…等元件也都類比到貨櫃的操作上XD 推薦這篇文章給大家，尤其對初學者來說，這真的是一篇超級友善的 K8S 介紹文章！</p><h3 id="Kubernetes-十大慣犯！！"><a href="#Kubernetes-十大慣犯！！" class="headerlink" title="Kubernetes 十大慣犯！！"></a><a href="https://blog.pipetail.io/posts/2020-05-04-most-common-mistakes-k8s/" target="_blank" rel="noopener">Kubernetes 十大慣犯！！</a></h3><p>作者公司擁有多年的 K8S 使用經驗 (自駕或是託管都有 - 包含在 GCP, AWS 和 Azure 上)，而他們常常看到某一些錯誤一再的重複發生，因此撰寫這篇文章來談談這些問題，並且會提到如何修掉他們</p><h3 id="在-ssh-和-kubectl-exec-時如何達成-ZeroTrust"><a href="#在-ssh-和-kubectl-exec-時如何達成-ZeroTrust" class="headerlink" title="在 ssh 和 kubectl exec 時如何達成 ZeroTrust"></a><a href="https://gravitational.com/blog/applying-principles-of-zero-trust-to-ssh/" target="_blank" rel="noopener">在 ssh 和 kubectl exec 時如何達成 ZeroTrust</a></h3><p>常常聽到 Zero Trust 這個名詞，但是對於確切定義總是似懂非懂，這篇文章是想推廣 <a href="https://github.com/gravitational/teleport" target="_blank" rel="noopener"><strong>teleport</strong></a> 這套可以讓使用 ssh 和 kubectl exec 的組織可以達成 Zero Trust 的開源軟體，不過也花了不少篇幅點出一些 Zero Trust 的定義以及重點，最核心的概念應該就是利用 Zero Trust 來達成安全性 #並不是基於你存取資源的當下人在哪裡，#而是在於你是誰，所以整個實作方式會從以前使用圍欄式的防護手段轉換成身份認證為主，也就是說….</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 30 期 - 一寸光陰一寸金，冗長的技術文章先放一邊</title>
      <link href="/2020/05/26/30-time-is-money/"/>
      <url>/2020/05/26/30-time-is-money/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="React-用十分鐘對自定義-Hooks-寫個測試"><a href="#React-用十分鐘對自定義-Hooks-寫個測試" class="headerlink" title="React | 用十分鐘對自定義 Hooks 寫個測試"></a><a href="https://medium.com/starbugs/react-%E7%94%A8%E5%8D%81%E5%88%86%E9%90%98%E5%B0%8D%E8%87%AA%E5%AE%9A%E7%BE%A9-hooks-%E5%AF%AB%E5%80%8B%E6%B8%AC%E8%A9%A6-d0b8a6c66c40" target="_blank" rel="noopener">React | 用十分鐘對自定義 Hooks 寫個測試</a></h3><p> Hooks 推出很久很久了（其實也才去年初 😂），也把測試 Hooks 放到學習清單中，但都很懶的沒有去碰，直到今天才把清單中的這項給打勾。相信有很多人已經學習過，也著手開始寫關於 Hooks 的測試，甚至遇到過各種情況或是問題，歡迎和我分享寶貴的經驗 😃。</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="A-Practical-Guide-to-TypeScript-How-to-Build-a-Pokedex-App-Using-HTML-CSS-and-TypeScript"><a href="#A-Practical-Guide-to-TypeScript-How-to-Build-a-Pokedex-App-Using-HTML-CSS-and-TypeScript" class="headerlink" title="A Practical Guide to TypeScript - How to Build a Pokedex App Using HTML, CSS, and TypeScript"></a><a href="https://www.freecodecamp.org/news/a-practical-guide-to-typescript-how-to-build-a-pokedex-app-using-html-css-and-typescript/" target="_blank" rel="noopener">A Practical Guide to TypeScript - How to Build a Pokedex App Using HTML, CSS, and TypeScript</a></h3><p>我一直相信想要學習一個新技術或是有動力去完成一個新作品，就是要選擇自己喜歡的事情，以這篇推薦文章為例，你覺得 TypeScript 很難嗎？其實不會啊！就一篇文章就可以搞定了，再加上 Pokemon API，甚至能馬上變成一個小作品。要愛上自己在做的事情太難了，不如直接選擇自己所愛的！</p><h3 id="不知道怎么封装代码？看看这几种设计模式吧！"><a href="#不知道怎么封装代码？看看这几种设计模式吧！" class="headerlink" title="不知道怎么封装代码？看看这几种设计模式吧！"></a><a href="https://juejin.im/post/5ec737b36fb9a04799583002" target="_blank" rel="noopener">不知道怎么封装代码？看看这几种设计模式吧！</a></h3><p>設計模式一直是耳熟能詳的名詞，但又不知道到底該不該學他，或是學了以後會有什麼幫助，事實上我認為設計模式是為了解決程式碼中某些常見的問題而誕生，就像是圍棋中的棋譜，遇到相似的狀況就該怎麼應對下一步，設計模式也是如此，它就是前人的智慧，每種設計模式都是為了讓程式碼變得更容易閱讀或修改。</p><h3 id="14-Developers-to-Follow-on-Twitter"><a href="#14-Developers-to-Follow-on-Twitter" class="headerlink" title="14 Developers to Follow on Twitter"></a><a href="https://dev.to/adriantwarog/14-developers-to-follow-on-twitter-570h" target="_blank" rel="noopener">14 Developers to Follow on Twitter</a></h3><p>前一陣子 Luka 介紹了值得訂閱的 Podcaster，此篇文章也整理了再 Twitter 上可以追蹤的開發者！他們都會在 Twitter 上分享自己學習程式的大小事情，再看的過程中也可以當作練習英文，真是一舉兩得 😂</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Things-I-hate-about-Rust"><a href="#Things-I-hate-about-Rust" class="headerlink" title="Things I hate about Rust"></a><a href="https://blog.yossarian.net/2020/05/20/Things-I-hate-about-rust" target="_blank" rel="noopener">Things I hate about Rust</a></h3><p>看到這篇真的深有同感，我自己寫 Rust 也好一陣子了，但到現在還是分不太清楚 <code>&amp;str</code>、<code>String</code>、<code>OsString</code> 這幾種字串到底誰是誰、彼此間要怎麼轉換。每次也都要跟編譯器奮戰好久才能過關，真心覺得那些用 Rust 開發大型應用的人超厲害</p><h3 id="Faking-stdin-and-stdout-in-Go"><a href="#Faking-stdin-and-stdout-in-Go" class="headerlink" title="Faking stdin and stdout in Go"></a><a href="https://eli.thegreenplace.net/2020/faking-stdin-and-stdout-in-go/" target="_blank" rel="noopener">Faking stdin and stdout in Go</a></h3><p>在 Go 裡面，有時會需要對某些從 stdin/stdout 進行輸入輸出的 function 進行測試，但因為從 stdin/stdout 很難用程式化的方式來測，所以可以把 stdin/stdout 進行轉向，這樣就不用再手動用終端機做測試了～</p><h3 id="From-Node-to-Deno"><a href="#From-Node-to-Deno" class="headerlink" title="From Node to Deno"></a><a href="https://dev.to/aralroca/from-node-to-deno-5gpn" target="_blank" rel="noopener">From Node to Deno</a></h3><p>雖然 Deno 看起來很多地方都設計得比 Node 好，但因為 Node 在經過日積月累之後生態圈已經很成熟了，而 Deno 卻是剛起步而已，所以就算真的要用 Deno 開發應用也很可能面臨找不到 package 可用的囧境。而這篇文章就是在說如果你打算從 Node 換到 Deno，那該用哪些 Deno package 來做到類似 express、pm2、nodemon 等等 Node package 的功能，不用連很多基本的功能都要自己刻一遍</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Interviewed-with-Triplebyte-Your-profile-is-about-to-become-public"><a href="#Interviewed-with-Triplebyte-Your-profile-is-about-to-become-public" class="headerlink" title="Interviewed with Triplebyte? Your profile is about to become public"></a><a href="https://news.ycombinator.com/item?id=23279837" target="_blank" rel="noopener">Interviewed with Triplebyte? Your profile is about to become public</a></h3><p>Triplebyte 是一家線上考試平台，提供面試者做題目，並讓企業參考。本篇作者用 Triplebyte 面試過後一陣子，突然收到一封 CEO 的信，Triplebyte 宣布一個很令人興奮的消息，讓你的個人資訊變成展示案例！讓你的個人資訊公開在網路上。這個不尊重隱私的作法立刻受到 HN 上鄉民的撻伐。</p><h3 id="Ikea-swaps-its-brand-typeface-to-Google-and-Monotype’s-Noto"><a href="#Ikea-swaps-its-brand-typeface-to-Google-and-Monotype’s-Noto" class="headerlink" title="Ikea swaps its brand typeface to Google and Monotype’s Noto"></a><a href="https://www.itsnicethat.com/news/ikea-changes-typeface-to-noto-monotype-google-graphic-design-210819" target="_blank" rel="noopener">Ikea swaps its brand typeface to Google and Monotype’s Noto</a></h3><p>Ikea 將字型從原本一直在使用的 Ikea Sans 換成了 <a href="https://www.itsnicethat.com/news/google-monotype-noto-type-family-061016" target="_blank" rel="noopener">Noto</a>，Noto 字型家族屬於 Monotype and Google。來看看使用了 10 年的 Ikea Sans 跟新的 Noto 呈現出來的感覺有什麼差別吧！第一次分享設計的文章感覺很不錯，以後要多多分享才是。</p><h3 id="Kubetab-kubectl-plugin-to-deploy-intercepting-proxies-to-K8s-Services"><a href="#Kubetab-kubectl-plugin-to-deploy-intercepting-proxies-to-K8s-Services" class="headerlink" title="Kubetab - kubectl plugin to deploy intercepting proxies to K8s Services"></a><a href="https://soluble-ai.github.io/kubetap/" target="_blank" rel="noopener">Kubetab - kubectl plugin to deploy intercepting proxies to K8s Services</a></h3><p>Kubetab，圖案是一杯生啤和一個水龍頭，然後一堆手繪圖案。我還以為是來搞笑的，沒想到看完影片後感覺很好用。Kubetab 是一個 kubectl plugin，可以讓你的瀏覽器攔截 Kubernetes Proxy，在瀏覽器中就可以顯示 K8S 的服務。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Grafana-也來到-7-0-啦～"><a href="#Grafana-也來到-7-0-啦～" class="headerlink" title="Grafana 也來到 7.0 啦～"></a><a href="https://grafana.com/blog/2020/05/18/grafana-v7.0-released-new-plugin-architecture-visualizations-transformations-native-trace-support-and-more/" target="_blank" rel="noopener">Grafana 也來到 7.0 啦～</a></h3><p>感覺這一年來 Grafana 的開發力道相當的驚人，譬如意圖想要取代 ELK 的 Loki, 以及用來儲存 Time Serier Metric 的 Cortex，不過其最招牌的當然還是 Grafana，這次的發布相當驚人@@ 多了好多恐怖又實用的功能，讓我們來瞧瞧看有什麼吧！</p><ul><li><p>UX Enhancements and Unified Data Model: 加強了使用者體驗跟視覺化設定的選項，例如多了新的 Table Panel，Grid Layout，而且也改善了編輯 Panel 時的體驗；在資料視覺化的方面，改良過的 Data Model 使其擁有更一致性的設定方式，讓資料的各種格式設定不再散落於各處</p></li><li><p>Plugins Platform: 新的套件平台讓使用者可以更快且有效率的新增 Plugin</p></li><li><p>Tracing: 透過使用 Jaeger 當成資料來源便可以支援 Tracing 功能</p></li><li><p>Transformations: 這是滿多使用者要求的功能之一，現在使用者可以把非時間序列的資料轉換到 Table 中 (例如外部資料庫或是既有的 Panel)， 除此之外還可以將這些非時間序列的資料結合存在於 Grafana 裡面的任何資料，並且透過 join, pivot, filter, re-name 來取得你想要的結果，用以客製化 Panel</p></li><li><p>Inspect and Export: 透過新的 Panel Inspector 可以讓使用者把整理完的資料給輸出成 CSV 檔案</p></li><li><p>AWS CloudWatch Logs: 一直以來都有支援 AWS CloudWatch，沒有想到現在連 AWS CloudWatch Logs 都吃下來了 </p></li><li><p>Usage Analytics and Presence: 這個 Enterprise 的功能幫助大型公司得知大家使用 Grafana 的情況，譬如得知大家最常看哪個 Dashboard，誰最常用…等</p></li></ul><h3 id="Terraform-0-13-準備在下個月釋出啦！"><a href="#Terraform-0-13-準備在下個月釋出啦！" class="headerlink" title="Terraform 0.13 準備在下個月釋出啦！"></a><a href="https://github.com/hashicorp/terraform/issues/25016" target="_blank" rel="noopener">Terraform 0.13 準備在下個月釋出啦！</a></h3><p>最近看到同事分享 Terraform 0.13 準備在下個月釋出的消息，目前自己公司內部是正在慢慢 Refactory 並且升級到 0.12 當中，0.13 提到兩個我個人也覺得滿重要的更新</p><ul><li>Provider 的安裝來源可以自訂，不用一定需要從官方來的 (這點滿重要的，因為有時候官方的 Provider 其實不太符合自己的組織需求，或是開發的太慢；就可以自己客製化)</li><li>Module 這邊很多為人詬病的問題可能都可以獲得解決，例如有 count 跟 for_each，而我自己覺得最重要的 depends_on 目前官方開發團隊正在趕工中，並且期望可以一起在 0.13 一起完成</li></ul><p>這樣一來大家從 0.11 往上升級的意願應該會在高一些了吧XD</p><h3 id="15-testing-methods-all-developers-should-know"><a href="#15-testing-methods-all-developers-should-know" class="headerlink" title="15 testing methods all developers should know"></a><a href="https://circleci.com/blog/testing-methods-all-developers-should-know/" target="_blank" rel="noopener">15 testing methods all developers should know</a></h3><p>在軟體業界工作時可以發現，有時候某些技術術語在不同的公司明明是指同一件事情，但卻可能使用不同的名字來稱呼，測試領域就常常會發生這樣的事情XD 而隨著越來越多的公司在實踐 DevOps 的過程中，對軟體測試跟測試自動化的重視程度也越來越高，為了不要讓大家迷失在不同的專業術語中，circleci 這篇文章嘗試將軟體測試常見的類型給列了出來</p><ol><li>Unit testing: 測試邏輯的完整性，測出每一段程式碼應該要做的事情</li><li>Integration testing: 測試在不同元件或是模組間彼此關係和資料流程的完整性</li><li>End-to-End testing (E2E, System): 確保整個應用程式或是系統運作符合預期</li><li>Acceptance testing: 驗證產品跟功能是否有根據客戶所提出的規格來進行開發</li><li>White box testing (structural, clear box): 在軟體詳的細資訊和內部工作方式是已知的情況下來進行測試</li><li>Black box testing (functional, behavioral, closed box): 在軟體詳的細資訊和內部工作方式是未知的情況下來進行測試</li><li>Gray box testing: 因為黑箱跟白箱測試可能會導致某些重要的功能沒有測試到，所以有了灰箱測試，既可以輕鬆地實現黑箱測試 (輸入-&gt;輸出)，並且又可以針對特定的程式碼進行白箱測試</li><li>Manual testing: 手動測試當然就是使用者手動輸入東西並且跟系統進行互動，最後也是由使用者來評斷測試的結果</li><li>Static testing: 不真的去執行程式碼的測試方式，就像手動測試一樣會比較緩慢，但可以提早發現問題，例如有些公司會有 Code Review 的機制</li><li>Dynamic testing: 實際執行代碼的測試方式，其實上面提到的測試方式，大部分都算是在此類別中，除了手動和某些 acceptance tseting</li><li>UI/Visual testing (browser testing): 針對使用者介面操作行為的測試方式</li><li>Smoke testing: 相對小的測試案例集合，用來驗證系統是否可以正常運作</li><li>Regression testing: 用來驗證先前可以正常使用的功能是否都還可以運行無誤</li><li>Load testing: 測試應用程式在工作量增加的情況下會如何回應</li><li>Penetration testing: 滲透測試為一種安全測試，用來驗證應用程式的安全穩定性</li></ol><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 29 期 - 用 Git 這麼久了，你知道 commit 是可以偽造的嗎？</title>
      <link href="/2020/05/19/29-fake-git-commit/"/>
      <url>/2020/05/19/29-fake-git-commit/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="用-Git-這麼久了，你知道-commit-是可以偽造的嗎"><a href="#用-Git-這麼久了，你知道-commit-是可以偽造的嗎" class="headerlink" title="用 Git 這麼久了，你知道 commit 是可以偽造的嗎"></a><a href="https://medium.com/starbugs/how-to-fake-the-author-of-git-commit-f44453b70afc" target="_blank" rel="noopener">用 Git 這麼久了，你知道 commit 是可以偽造的嗎</a></h3><p>身為一個開發者，不管你寫的是什麼語言、用的是什麼框架，一定多少會用到 Git 版本控制系統，但你知道 git commit 的作者是可以偽造的嗎？本週的專欄從如何偽造別人的 commit 開始談起，也教你如何使用 GPG 數位簽章證明你就是本人，推薦有在使用 Git 跟 Github 的開發者都來看看～</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="The-most-successful-developers-share-more-than-they-take"><a href="#The-most-successful-developers-share-more-than-they-take" class="headerlink" title="The most successful developers share more than they take"></a><a href="https://stackoverflow.blog/2020/05/14/the-most-successful-developers-share-more-than-they-take/" target="_blank" rel="noopener">The most successful developers share more than they take</a></h3><p>「It’s not enough to share your successful projects and knowledge, but additionally to bring the humility to share your learning and failures.」分享知識及成功的專案是遠遠不夠的，比那些更重要的是抱持謙虛及珍惜失敗的經歷。這篇文章雖然很短，但是句句的是金言，可以在通勤或是吃早餐的時候順便看一下。😂</p><h3 id="How-to-Stay-Motivated-to-Keep-Learning-to-Code"><a href="#How-to-Stay-Motivated-to-Keep-Learning-to-Code" class="headerlink" title="How to Stay Motivated to Keep Learning to Code"></a><a href="https://www.freecodecamp.org/news/how-to-stay-motivated-to-keep-learning-to-code/" target="_blank" rel="noopener">How to Stay Motivated to Keep Learning to Code</a></h3><p>大家都是如何刺激自己繼續學習的，畢竟程式根本就沒學完的一天，很喜歡作者提到的第一點「5 minutes of Learning」，五分鐘看起來什麼事情都做不了，但真正重要的是讓你開始學習，你不需要想說每天都要花幾個小時讀書或學習，也許你只需要五分鐘，然後回神時就過了五十分鐘 😃</p><h3 id="How-to-SEO-your-website-in-10-minutes"><a href="#How-to-SEO-your-website-in-10-minutes" class="headerlink" title="How to SEO your website in 10 minutes"></a><a href="https://dev.to/christiankastner/how-to-seo-your-website-in-10-minutes-6mk" target="_blank" rel="noopener">How to SEO your website in 10 minutes</a></h3><p>來學習一些簡單的 SEO 吧！大家有想過會被 Google 或其他瀏覽器的瀏覽顯示出來的資料需要放在網站中的哪裡嗎？如果想要更容易的被尋找到該如何放在 HTML 裡的哪個標籤呢？來看看最入門的簡單解說！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="為你自己學-Git-高見龍"><a href="#為你自己學-Git-高見龍" class="headerlink" title="為你自己學 Git | 高見龍"></a><a href="https://gitbook.tw/#git--1" target="_blank" rel="noopener">為你自己學 Git | 高見龍</a></h3><p>這週是 Git 相關的主題，那就順便來推一下龍哥寫的〈為你自己學 Git〉。這本書真的是我看過最好的 Git 教材，不僅把每個指令的原理都講到了，甚至還有對 Git 內部物件的解析。雖然有少部分的內容需要付費才能解鎖（其實也不貴，我就有買），但絕大部分的內容都是免費、公開的，如果你有打算認真學 Git 的話真的超推這本書</p><h3 id="CS-Visualized-Useful-Git-Commands"><a href="#CS-Visualized-Useful-Git-Commands" class="headerlink" title="CS Visualized: Useful Git Commands"></a><a href="https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1" target="_blank" rel="noopener">CS Visualized: Useful Git Commands</a></h3><p>常常搞混 Git 指令的工程師們有福了～這篇文章把 Git 的很多指令如 merge、reset、rebase 做成很療癒的動畫，讓你看了一目瞭然，以後就不會再搞混了</p><h3 id="The-anatomy-of-a-Git-commit"><a href="#The-anatomy-of-a-Git-commit" class="headerlink" title="The anatomy of a Git commit"></a><a href="https://blog.thoughtram.io/git/2014/11/18/the-anatomy-of-a-git-commit.html" target="_blank" rel="noopener">The anatomy of a Git commit</a></h3><p>一個 Git commit 內部到底長什麼樣子？每個 Git commit 的 ID 又是根據哪些屬性產生出來？雖然不知道好像也沒關係，但當作冷知識增廣見聞一下也是不錯～</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Learn-Deno-Chat-app"><a href="#Learn-Deno-Chat-app" class="headerlink" title="Learn Deno: Chat app"></a><a href="https://dev.to/aralroca/learn-deno-chat-app-37f0" target="_blank" rel="noopener">Learn Deno: Chat app</a></h3><p>呼應一下樓上 Q 超人的 Deno 1.0 釋出，短短幾天內已經獲得大量的關注。我來推薦一篇熱騰騰的 5/13 剛剛寫出的文章「用 Deno 寫聊天 APP」。這篇文章從 hello world 到 debug，並使用 websocket 來開發聊天軟體，很充實，獲得很多迴響。私心認為 deno 的賣點是 logo 太可愛了啦。</p><h3 id="PushBullet：Let’s-Guess-What-Google-Requires-In-14-Days-Or-They-Kill-Our-Extension"><a href="#PushBullet：Let’s-Guess-What-Google-Requires-In-14-Days-Or-They-Kill-Our-Extension" class="headerlink" title="PushBullet：Let’s Guess What Google Requires In 14 Days Or They Kill Our Extension"></a><a href="https://blog.pushbullet.com/2020/05/13/lets-guess-what-google-requires-in-14-days-or-they-kill-our-extension/" target="_blank" rel="noopener">PushBullet：Let’s Guess What Google Requires In 14 Days Or They Kill Our Extension</a></h3><p>PushBullet 是一款可以將 Chrome 的訊息推送到手機上的 Chrome Extension. Google 最近要求 Pushbullet 改善權限問題否則要在 14 天後下架 PushBullet 的 chrome extension. 為此 PushBullet 感到非常的不爽。而這篇文章就是 PushBullet 說明了用了哪些權限來做什麼事情。雖然 PushBullet 很不爽，我個人覺得 Google 做的好，你一個推送訊息的 app 要求使用的 copy paste 的權限幹嘛？</p><h3 id="TSMC-Announces-Intention-to-Build-and-Operate-an-Advanced-Semiconductor-Fab-in-the-United-States"><a href="#TSMC-Announces-Intention-to-Build-and-Operate-an-Advanced-Semiconductor-Fab-in-the-United-States" class="headerlink" title="TSMC Announces Intention to Build and Operate an Advanced Semiconductor Fab in the United States"></a><a href="https://www.tsmc.com/tsmcdotcom/PRListingNewsAction.do?action=detail&language=E&newsid=THGOANPGTH" target="_blank" rel="noopener">TSMC Announces Intention to Build and Operate an Advanced Semiconductor Fab in the United States</a></h3><p>台積電有意在美國設先進的半導體廠，沒寫清楚是什麼原因，這是台積電準備在美國設的第二個廠，這個新聞是在 5/15 發佈的，美國目前的疫情可以工作嘛？抱持好奇態度。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Top-10-must-know-Kubernetes-design-patterns"><a href="#Top-10-must-know-Kubernetes-design-patterns" class="headerlink" title="Top 10 must-know Kubernetes design patterns"></a><a href="https://developers.redhat.com/blog/2020/05/11/top-10-must-know-kubernetes-design-patterns/" target="_blank" rel="noopener">Top 10 must-know Kubernetes design patterns</a></h3><p>十個 K8S 初學者一定要知道的 Design Pattern！除了可以透過瞭解這些 Pattern 來更熟悉 K8S 底層的概念之外，當你在設計 K8S 相關的應用程式時也可以幫上忙</p><ul><li>Foundational patterns<ul><li>Health Probe pattern: 每一個 Container 都必須要實作特定的 API 讓 K8S 透過此來觀察和管理應用程式，盡可能讓其保持最健康的狀態</li><li>Predictable Demands pattern: 每一個 Container 都必須要定義好會使用到多少的資源，這樣 K8S 底層才能夠在一個共享的環境中來成功的部署和管理應用程式</li><li>Automated Placement patterns: 了解 K8S 如何將 Workload 分散在多個節點的叢集中</li></ul></li><li>Structural patterns<ul><li>Init Container pattern: Init Container 獨立於主要應用程式運行的 Container，讓他可以先幫主要應用程式進行初始化環境所需要的任務</li><li>Sidecar patterns: 如何拓展和加強既有的應用程式 Container，但是卻不需要改變它</li></ul></li><li>Behavioral patterns<ul><li>Batch Job patterns: 在分散系的系統中如何運行獨立且單一的工作</li><li>Stateful Service patterns: 如何在 K8S 中運行 Stateful 應用程式，例如使用到的永久性磁碟空間，特殊的網路設定…等</li><li>Service Discovery pattern: Client 如何去存取和發現運行在 K8S 裡面的服務端點</li></ul></li><li>Higher-level patterns<ul><li>Controller pattern: 如何監控和維護一系列的 K8S 資源維持在希望的狀態中</li><li>Operator pattern: 如何使用 CustomResourceDefinitions 來將日常操作和維護應用服務的動作封裝起來</li></ul></li></ul><h3 id="Top-10-Courses-to-Learn-Linux-Command-Line-in-2020-—-Best-and-FREE"><a href="#Top-10-Courses-to-Learn-Linux-Command-Line-in-2020-—-Best-and-FREE" class="headerlink" title="Top 10 Courses to Learn Linux Command Line in 2020 — Best and FREE"></a><a href="https://medium.com/javarevisited/top-10-courses-to-learn-linux-command-line-in-2020-best-and-free-f3ee4a78d0c0" target="_blank" rel="noopener">Top 10 Courses to Learn Linux Command Line in 2020 — Best and FREE</a></h3><p>即使已經有數以百計對於人類來說相對友善的 GUI 可以用來管理系統，但是為什麼 Command Line 仍然還是一直在被使用呢？我想每個工程師應該都會同意其實 Command Line 比 GUI 介面強太多了；而目前 Linux 也是運行應用服務最主流的作業系統，因此身為一位程式設計師，IT 專業人員，或是研發工程師，其實都逃不了去學習跟了解 Liunx，當然還有用來管理他的 Command Line，因此這篇文章推薦了 10 堂最棒的 Linux 線上訓練課程</p><ol><li><a href="https://www.udemy.com/course/introduction-to-linux-centos-7/?LSNPUBID=JVFxdTr9V80&ranEAID=JVFxdTr9V80&ranMID=39197&ranSiteID=JVFxdTr9V80-sw4jr3M94ge0NCAZfEn9MQ" target="_blank" rel="noopener">Introduction To Linux</a></li><li><a href="https://www.udemy.com/course/linux-command-line-volume1/?ranMID=39197&ranEAID=JVFxdTr9V80&ranSiteID=JVFxdTr9V80-a4Y05gxWjTXwLpspifvP9g&LSNPUBID=JVFxdTr9V80" target="_blank" rel="noopener">Linux Command Line Basics</a></li><li><a href="https://www.udemy.com/course/vim-commands-cheat-sheet/?ranMID=39197&ranEAID=JVFxdTr9V80&ranSiteID=JVFxdTr9V80-BoEjAQC8JlwiWklRZ5EvQg&LSNPUBID=JVFxdTr9V80" target="_blank" rel="noopener">Vim Masterclass</a></li><li><a href="https://www.educative.io/courses/bash-for-programmers?authorName=Educative?affiliate_id=5073518643380224" target="_blank" rel="noopener">Bash for Programmers</a></li><li><a href="https://www.udemy.com/course/command-line/?LSNPUBID=JVFxdTr9V80&ranEAID=JVFxdTr9V80&ranMID=39197&ranSiteID=JVFxdTr9V80-LlQcd2gIrhD0xD6L0YD3OQ" target="_blank" rel="noopener">Learn The Linux Command Line: Basic Commands</a></li><li><a href="https://www.udemy.com/course/red-hat-enterprise-linux-technical-overview/?LSNPUBID=JVFxdTr9V80&ranEAID=JVFxdTr9V80&ranMID=39197&ranSiteID=JVFxdTr9V80-Pa9nwMQS9HhzX.tfP4wSQw" target="_blank" rel="noopener">Red Hat Enterprise Linux Technical Overview</a></li><li><a href="https://www.udemy.com/course/linux-tutorials/?LSNPUBID=JVFxdTr9V80&ranEAID=JVFxdTr9V80&ranMID=39197&ranSiteID=JVFxdTr9V80-9k2paW4CKhrDxaDJPwX0JQ" target="_blank" rel="noopener">Linux Tutorials and Projects (Free)</a></li><li><a href="https://www.udemy.com/course/learn-linux-on-a-mac/?LSNPUBID=JVFxdTr9V80&ranEAID=JVFxdTr9V80&ranMID=39197&ranSiteID=JVFxdTr9V80-BxtBII8ebR3KkgxUwCqUVQ" target="_blank" rel="noopener">Learn Linux on a MAC or Windows</a></li><li><a href="https://www.udemy.com/course/linux-academy-linux-operating-system-fundamentals/?LSNPUBID=JVFxdTr9V80&ranEAID=JVFxdTr9V80&ranMID=39197&ranSiteID=JVFxdTr9V80-25M8qANGGKP4HCuyTBqECw" target="_blank" rel="noopener">Linux Operating System Fundamentals</a></li><li><a href="https://www.udemy.com/course/linux-administration-bootcamp/?ranMID=39197&ranEAID=JVFxdTr9V80&ranSiteID=JVFxdTr9V80-KLsjHew85D5uY5hcbnMa1Q&LSNPUBID=JVFxdTr9V80" target="_blank" rel="noopener">Linux Administration Bootcamp: Go from Beginner to Advanced</a></li></ol><h3 id="xxh"><a href="#xxh" class="headerlink" title="xxh"></a><a href="https://github.com/xxh/xxh" target="_blank" rel="noopener">xxh</a></h3><p>在這邊要推薦一個叫做 xxh 的好用工具，身為一位 DevOps/SRE 一定避免不了登入到非工作環境的機器中去查找問題，自己日常在本地端 Terminal 一定會設定很多好用的 Alias, 工具或是顯示顏色，但是一旦 ssh 連線到其他的機器中時，這些設定都不復存在，你就像是一個手無寸鐵的嬰兒一般 XD 而 xxh 的功能就是可以把你最喜愛的 shell 給帶到遠端的機器去，而且不需要 root 權限跟在系統安裝東西！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 28 期 - 使用 cert-manager 管理 K8S TLS 憑證</title>
      <link href="/2020/05/12/28-cert-manager/"/>
      <url>/2020/05/12/28-cert-manager/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="使用-cert-manager-管理-K8S-TLS-憑證"><a href="#使用-cert-manager-管理-K8S-TLS-憑證" class="headerlink" title="使用 cert-manager 管理 K8S TLS 憑證"></a><a href="https://medium.com/starbugs/%E4%BD%BF%E7%94%A8-cert-manager-%E7%AE%A1%E7%90%86-k8s-tls-%E6%86%91%E8%AD%89-ab6258af9195" target="_blank" rel="noopener">使用 cert-manager 管理 K8S TLS 憑證</a></h3><p>在這個對資訊安全越來越要求的時代，想要架設一個線上服務時，透過 HTTPS 協定來傳輸資料是再正常不過的了！不過當手上有一堆 TLS 憑證時要怎麼管理呢？！本週專欄將介紹如何透過 cert-manager 來自動化管理在 K8S 中使用到的 TLS Certificate</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="How-I-Landed-Multiple-Software-Engineer-Interviews-After-Being-Laid-Off"><a href="#How-I-Landed-Multiple-Software-Engineer-Interviews-After-Being-Laid-Off" class="headerlink" title="How I Landed Multiple Software Engineer Interviews After Being Laid Off"></a><a href="https://www.freecodecamp.org/news/how-i-was-landing-software-engineer-interviews-after-being-laid-off-2/" target="_blank" rel="noopener">How I Landed Multiple Software Engineer Interviews After Being Laid Off</a></h3><p>「I was recently laid off for the first time in my life. I realized this meant there was something bigger and more exciting out there for me.」解僱並未說明著一切結束了，而是另一段更讓人興奮的開始！很喜歡作者面對未來的態度，雖然他也許一般人相同，在文章中確實地列出了自己的恐懼，但是在另一面的積極性更值得我們去學習！</p><h3 id="围观-GitHub-重磅推出的四大新功能"><a href="#围观-GitHub-重磅推出的四大新功能" class="headerlink" title="围观 GitHub 重磅推出的四大新功能"></a><a href="https://juejin.im/post/5eb4287a5188255fd54de601" target="_blank" rel="noopener">围观 GitHub 重磅推出的四大新功能</a></h3><p>GitHub 不只在前些時候推出了 APP，現在又要繼續推出新的功能啦！我最喜歡的新功能是 GitHub Discussions！讓全球的工程師能夠有更適合的地方以及更多選擇能無壓力的參與開源！</p><h3 id="今天刻什麼？-—-華麗側邊欄"><a href="#今天刻什麼？-—-華麗側邊欄" class="headerlink" title="今天刻什麼？ — 華麗側邊欄"></a><a href="https://medium.com/@Whien/%E4%BB%8A%E5%A4%A9%E5%88%BB%E4%BB%80%E9%BA%BC-%E8%8F%AF%E9%BA%97%E5%81%B4%E9%82%8A%E6%AC%84-55d76ef321e9" target="_blank" rel="noopener">今天刻什麼？ — 華麗側邊欄</a></h3><p>「相信對一個網頁前端工程師來說，側邊欄是常見的對手，而一般的側邊欄（Sidebar）已經對我們來說漸漸的越來越無感（作者把我想講的話講完了，哈哈哈）」接著說，但有時候面對一些 UI 設計稿，還是會讓人想破頭不知道該如何是好，這篇文章完美的詮釋了想破頭的過程 XD</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Deno-1-0-What-you-need-to-know"><a href="#Deno-1-0-What-you-need-to-know" class="headerlink" title="Deno 1.0: What you need to know"></a><a href="https://blog.logrocket.com/deno-1-0-what-you-need-to-know/" target="_blank" rel="noopener">Deno 1.0: What you need to know</a></h3><p>萬眾矚目的 Deno 總算是要發佈 1.0 版了！作為 Node 的進化版，Deno 強化了對於存取權限的控制、支援 TypeScript 跟 ES Module，而且也提供了很多好用的內建工具，究竟 Deno 會不會就此一炮而紅呢？</p><h3 id="How-I’m-organizing-my-Go-applications"><a href="#How-I’m-organizing-my-Go-applications" class="headerlink" title="How I’m organizing my Go applications"></a><a href="https://link.medium.com/ttcRnLGen6" target="_blank" rel="noopener">How I’m organizing my Go applications</a></h3><p>這篇的作者分享了他都怎麼組織 Go 的程式碼、還有在寫扣時怎麼把邏輯拆分清楚。雖然程式碼怎麼樣才算乾淨這問題見仁見智，但多看看別人都是怎麼做的，有時會有一些意想不到的收穫～</p><h3 id="Design-Pattern-In-React-Component-—-Compound-component-複合元件"><a href="#Design-Pattern-In-React-Component-—-Compound-component-複合元件" class="headerlink" title="Design Pattern In React Component — Compound component (複合元件)"></a><a href="https://link.medium.com/l7j8YaQen6" target="_blank" rel="noopener">Design Pattern In React Component — Compound component (複合元件)</a></h3><p>近年來隨著前端應用越來越複雜，前端工程師也不能只是會刻畫面，還要懂一些基本的 design pattern 才行。這篇用了幾個例子告訴你使用 Compound Component 有什麼好處、什麼時候該用還有該怎麼用，推薦給 React 的開發者們</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Storybook-說說元件的故事吧！"><a href="#Storybook-說說元件的故事吧！" class="headerlink" title="Storybook | 說說元件的故事吧！"></a><a href="https://medium.com/%E6%89%8B%E5%AF%AB%E7%AD%86%E8%A8%98/storybook-tutorial-90189a4d0275" target="_blank" rel="noopener">Storybook | 說說元件的故事吧！</a></h3><p>初次見到 Storybook 是在 ios 的開發上面，沒想到 storybook 也可以運用在前端上了。元件這麼多，怎麼知道哪種元件用在哪些地方？用 Story Book 來說說元件的故事。(標題下的好呀!)</p><h3 id="學習成為不焦慮的PM：我如何克服低潮與倦怠"><a href="#學習成為不焦慮的PM：我如何克服低潮與倦怠" class="headerlink" title="學習成為不焦慮的PM：我如何克服低潮與倦怠"></a><a href="https://medium.com/3pm-lab/how-to-overcome-negative-emotions-and-avoid-burnout-2a0c0c01c78a" target="_blank" rel="noopener">學習成為不焦慮的PM：我如何克服低潮與倦怠</a></h3><p>今天帶來三 PM 實驗室 nana 的文章。在搬來荷蘭之前，我在新加坡的新創工作，大家都知道在新創文化中，員工加入團隊常常不只是工作，而是也對公司願景有信仰，總是盡心盡力的在愛護產品和使用者，加上新加坡的「怕輸」文化，某種程度上也造就了大家有一點工作狂的傾向。職業倦怠像是那些時有時無的頭痛，容易被忽視，卻又在不知不覺中一步步影響我們的生活。</p><h3 id="棄用-Keybase-Zoom-買下-Keybase-的新聞"><a href="#棄用-Keybase-Zoom-買下-Keybase-的新聞" class="headerlink" title="棄用 Keybase (Zoom 買下 Keybase 的新聞)"></a><a href="https://blog.gslin.org/archives/2020/05/10/9520/%E6%A3%84%E7%94%A8-keybase-zoom-%E8%B2%B7%E4%B8%8B-keybase-%E7%9A%84%E6%96%B0%E8%81%9E/" target="_blank" rel="noopener">棄用 Keybase (Zoom 買下 Keybase 的新聞)</a></h3><p>節錄：現有的團隊有 2500 人，裡面的技術團隊沒辦法搞定 end-to-end encryption，ok 沒關係，那現在的 CTO Brendan Ittelson 應該可以建一個團隊吧？所以我翻了一下他的 LinkedIn 看了一下他的經歷，對不起我錯了，我瞬間不知道怎麼寫下去了，我豆頁痛…</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Classic-Mistakes-That-Every-Developer-Has-Made"><a href="#Classic-Mistakes-That-Every-Developer-Has-Made" class="headerlink" title="Classic Mistakes That Every Developer Has Made"></a><a href="https://levelup.gitconnected.com/classic-mistakes-that-every-developer-has-made-b0ed0bc5e087" target="_blank" rel="noopener">Classic Mistakes That Every Developer Has Made</a></h3><p>文章中列出工程師常犯的典型錯誤有哪些，並且點出該怎麼做比較好，看完之後發現自己也犯了好幾條XD 要好好檢討檢討了 T_T</p><ol><li>Commit Code 到錯誤的 Branch</li><li>為求快速而使用很髒的解法</li><li>為求炫技寫出華而不實的程式</li><li>低估工作量</li><li>自以為不用測試自己的程式碼</li><li>沒有 Commit 到正確的檔案</li><li>因為知識的不足，導致重造輪子</li><li>缺乏練習</li><li>繼承所有的事情</li><li>太過有自信</li></ol><h3 id="Attacking-and-Auditing-Docker-Containers-and-Kubernetes-Clusters"><a href="#Attacking-and-Auditing-Docker-Containers-and-Kubernetes-Clusters" class="headerlink" title="Attacking and Auditing Docker Containers and Kubernetes Clusters"></a><a href="https://github.com/appsecco/attacking-and-auditing-docker-containers-and-kubernetes-clusters" target="_blank" rel="noopener">Attacking and Auditing Docker Containers and Kubernetes Clusters</a></h3><p>因為 COVID19 的關係導致很多的 Secrutiy Training 都無法進行，因此 Appsecco 決定將 資安訓練課程給開源出來，讓大家一起來學習，課程的重點主要專注於 Kubernetes 內的容器和叢集管理方面，而大概的重點會擺在以下幾個部分：</p><ul><li>聚焦於應用程式和容器架構的資安方面</li><li>學會如何使用常見的工具和技巧來攻擊運行在容器化環境中的應用程式</li><li>如何攻擊運行在 Kubernetes 中的應用程式</li><li>學會如何使用工具和一些客製化的腳本來進行資安集合的最佳守則</li></ul><h3 id="A-Beginners-Guide-to-Basic-Indexing"><a href="#A-Beginners-Guide-to-Basic-Indexing" class="headerlink" title="A Beginners Guide to Basic Indexing"></a><a href="https://bannister.me/blog/a-beginners-guide-to-basic-indexing/" target="_blank" rel="noopener">A Beginners Guide to Basic Indexing</a></h3><p>大家應該或多或少知道在使用 Database 的時候，透過 Indexing 可以增加查詢的速度，不過具體來說應該要怎麼做呢？這邊文章從搜尋的語法開始介紹起，並且點出哪些搜尋的方式是不好的；接著開始說明要如何做出對的 Indexing 抉擇，以及各種 Scan 的分析，是一篇滿淺顯易懂的入門文章</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 27 期 - 我是一個工程師，晚上的我搖身一變，變成一個加班的工程師</title>
      <link href="/2020/05/05/27-maredevil/"/>
      <url>/2020/05/05/27-maredevil/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Unit-Test-中的替身：搞不清楚的Dummy-、Stub、Spy、Mock、Fake"><a href="#Unit-Test-中的替身：搞不清楚的Dummy-、Stub、Spy、Mock、Fake" class="headerlink" title="Unit Test 中的替身：搞不清楚的Dummy 、Stub、Spy、Mock、Fake"></a><a href="https://medium.com/starbugs/unit-test-%E4%B8%AD%E7%9A%84%E6%9B%BF%E8%BA%AB-%E6%90%9E%E4%B8%8D%E6%B8%85%E6%A5%9A%E7%9A%84dummy-stub-spy-mock-fake-cc4d23c53fcf" target="_blank" rel="noopener">Unit Test 中的替身：搞不清楚的Dummy 、Stub、Spy、Mock、Fake</a></h3><p>最近開始接觸單元測試，一堆名詞看不懂，來狠狠地 K 一下。而單元測試中的最佳男配角，就是替身 Double。藉由寫一篇文章的方式來讓自己更了解單元測試中的重要部分。一起來學測試，Go Go !!</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="What-is-Testing-in-Software-—-The-Three-Main-Types-of-Testing-Explained-in-Simple-English"><a href="#What-is-Testing-in-Software-—-The-Three-Main-Types-of-Testing-Explained-in-Simple-English" class="headerlink" title="What is Testing in Software? — The Three Main Types of Testing Explained in Simple English"></a><a href="https://levelup.gitconnected.com/what-is-testing-in-software-the-three-main-types-of-testing-explained-in-simple-english-da0fec7ae5d6" target="_blank" rel="noopener">What is Testing in Software? — The Three Main Types of Testing Explained in Simple English</a></h3><p>如果你還不曉得為什麼要做測試，甚至是困惑說「我都寫完程式了？我還要另外寫程式來確認他沒有問題？」那你應該要看一下這篇文章，作者很循序漸進的告訴你為什麼需要做測試。最後的結論也分享了我很感同身受的一段話「If you’re still a developer that doesn’t write tests for your code, you’re missing out on a lot of these benefits.」是寫過測試才能懂的。</p><h3 id="CSS-Background-Image-Size-Tutorial-–-How-to-Code-a-Full-Page-Background-Image"><a href="#CSS-Background-Image-Size-Tutorial-–-How-to-Code-a-Full-Page-Background-Image" class="headerlink" title="CSS Background Image Size Tutorial – How to Code a Full Page Background Image"></a><a href="https://www.freecodecamp.org/news/css-full-page-background-image-tutorial/" target="_blank" rel="noopener">CSS Background Image Size Tutorial – How to Code a Full Page Background Image</a></h3><p>自認為處理圖片的擺放一直是我的罩門之一，現在都用同一種方法把圖片放到 <code>div</code> 的 <code>background</code> 上，但一直都沒有去好好了解為什麼 😭，但這篇文章逐步告訴你為什麼需要設定那些屬性，能對和我一樣對圖片苦手的人來說幫助很大！</p><h3 id="51-Most-popular-JS-repositories-on-GitHub-in-March-and-April-2020-during-quarantine"><a href="#51-Most-popular-JS-repositories-on-GitHub-in-March-and-April-2020-during-quarantine" class="headerlink" title="51 Most popular JS repositories on GitHub in March and April 2020 (during quarantine)"></a><a href="https://dev.to/iriskatastic/51-most-popular-js-repositories-on-github-in-march-and-april-2020-during-quarantine-1h1l" target="_blank" rel="noopener">51 Most popular JS repositories on GitHub in March and April 2020 (during quarantine)</a></h3><p>GitHub 上在 2020 年的 3, 4月最受歡迎的 51 個 repositories！因為剛好受到病毒肆虐，導致許多人都在家工作，所以這段時間各個 epositories 的變化剛好體現了目前遠端工作的趨勢，也可以幫助預測未來五月份的走向。</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="為了瞭解原理，那就來實作一個-Redux-Saga-吧！"><a href="#為了瞭解原理，那就來實作一個-Redux-Saga-吧！" class="headerlink" title="為了瞭解原理，那就來實作一個 Redux-Saga 吧！"></a><a href="https://link.medium.com/y4lyWF4Fb6" target="_blank" rel="noopener">為了瞭解原理，那就來實作一個 Redux-Saga 吧！</a></h3><p>想了解 Redux-Saga 的原理有很多種方法，其中最 hardcore 的就是自己手刻一個。雖然這篇文章有點長，但看完真的會完全了解 Redux-Saga 內部是怎麼做的</p><h3 id="Rust-and-Node-js-A-match-made-in-heaven"><a href="#Rust-and-Node-js-A-match-made-in-heaven" class="headerlink" title="Rust and Node.js: A match made in heaven"></a><a href="https://blog.logrocket.com/rust-and-node-js-a-match-made-in-heaven/" target="_blank" rel="noopener">Rust and Node.js: A match made in heaven</a></h3><p>程式語言之間不一定總是競爭關係，反而還有可能是合作，這篇文章就完美示範了如何把 Rust 程式碼編譯成 addon，並且在 Nodejs 使用 N-API 把 addon 載入進去。如此一來就可以把兩者的優點結合起來，平常用 JS 開發速度快，需要高效能的地方則用 Rust 進行處理</p><h3 id="Best-Practices-for-Bash-Scripts"><a href="#Best-Practices-for-Bash-Scripts" class="headerlink" title="Best Practices for Bash Scripts"></a><a href="https://link.medium.com/UEtk22FHb6" target="_blank" rel="noopener">Best Practices for Bash Scripts</a></h3><p>Shell Script 是工程師的好朋友，但你真的了解他嗎？快來看看 Shell Script 的 best practice 還有一些小技巧，看完這篇感覺功力又更強了</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="搶救茶壺大作戰：418-I-am-a-teapot"><a href="#搶救茶壺大作戰：418-I-am-a-teapot" class="headerlink" title="搶救茶壺大作戰：418 I am a teapot"></a><a href="https://blog.huli.tw/2019/06/14/http-status-code-418-teapot/" target="_blank" rel="noopener">搶救茶壺大作戰：418 I am a teapot</a></h3><p>這太好笑了，原來有個 HTTP Status Code 狀態碼 418，當你呼叫它的時候，它會回應你：我是個茶壺，你幹嘛拿我來泡咖啡阿蛤？github 上從 2017 年開始論戰，到底應不應該保留茶壺呢？</p><h3 id="👨🏻‍💻-How-to-solve-the-Z-index-issue-Within-1-minute😲😲"><a href="#👨🏻‍💻-How-to-solve-the-Z-index-issue-Within-1-minute😲😲" class="headerlink" title="👨🏻‍💻 How to solve the Z-index issue Within 1 minute😲😲"></a><a href="https://dev.to/sharmakushal/how-to-solve-the-z-index-issue-within-1-minute-4pn9" target="_blank" rel="noopener">👨🏻‍💻 How to solve the Z-index issue Within 1 minute😲😲</a></h3><p>如何用一分鐘的時間解決 z-index 問題？當你遇到 z-index 問題時，深吸一口氣，不要驚慌，緩緩的打開你的瀏覽器 … 。</p><h3 id="Don’t-Mock-What-You-Don’t-Own"><a href="#Don’t-Mock-What-You-Don’t-Own" class="headerlink" title="Don’t Mock What You Don’t Own"></a><a href="https://dev.to/satansdeer/dont-mock-what-you-dont-own-cd6" target="_blank" rel="noopener">Don’t Mock What You Don’t Own</a></h3><p>不要 Mock 你不知道的東西。在你不知道這個物件代表什麼意思的時候，如果你去 Mock 它會發生很恐怖的事情。因為 unit test 不僅僅代表是測試，而是代表一種設計。Mock 外部的相依函式庫可以幫助你設計更好的程式。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Celebrating-Helm’s-CNCF-Graduation"><a href="#Celebrating-Helm’s-CNCF-Graduation" class="headerlink" title="Celebrating Helm’s CNCF Graduation"></a><a href="https://helm.sh/blog/celebrating-helms-cncf-graduation/" target="_blank" rel="noopener">Celebrating Helm’s CNCF Graduation</a></h3><p>哇！就在即將邁入五月之前，Helm 從 CNCF 畢業了！相當年 Helm 只是 Deis 的一個小小的黑客松專案而已，在歷經五年之後，主要維護者學提到很多關於撰寫程式，社群和組織政治的相關知識，而目前 Helm 被將近 70 % 的 Kubernetes 使用者所使用著；那麼 Helm 將來會發生什麼樣的變化呢？在開發流程方面將不會有什麼改變，新版的 Helm 將會繼續往穩定性和兼容性前進，而且主要維護者已經開始在對 Helm 4 要開發什麼樣的新功能在調查中，就讓我們拭目以待吧！</p><h3 id="Grafana-7-0-sneak-peek-Query-history-in-Explore"><a href="#Grafana-7-0-sneak-peek-Query-history-in-Explore" class="headerlink" title="Grafana 7.0 sneak peek: Query history in Explore"></a><a href="https://grafana.com/blog/2020/04/30/grafana-7.0-sneak-peek-query-history-in-explore/" target="_blank" rel="noopener">Grafana 7.0 sneak peek: Query history in Explore</a></h3><p>Grafana 7.0 即將發佈，這次多了可以檢閱歷史查詢的功能，而從過去歷史撈出來的搜尋紀錄可以做什麼呢？簡而言之就是可以把常用的搜尋紀錄記下來，方便使用者可以重複利用，詳細功能如下：</p><ul><li>再執行一次此搜尋</li><li>建立或是修改註解</li><li>把搜尋紀錄複製到剪貼簿內</li><li>把擁有這個搜尋的網址複製到剪貼簿中</li><li>將此搜尋紀錄標上星星</li></ul><h3 id="Getting-Started-With-Pulumi-Go-SDK"><a href="#Getting-Started-With-Pulumi-Go-SDK" class="headerlink" title="Getting Started With Pulumi Go SDK"></a><a href="https://itnext.io/getting-started-with-pulumi-sdk-22dc0b7ab83f" target="_blank" rel="noopener">Getting Started With Pulumi Go SDK</a></h3><p>IaC 的領域競爭越來越白熱化，相對於 Terraform 來說，Pulumi 可能會更接近撰寫一班程式的感覺，而今天這篇文章，便是帶著大家學習如何使用 Pulumi Go SDK 來撰寫程式管理雲端資源！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 26 期 - 讓瀏覽器自己說話原來那麼簡單！</title>
      <link href="/2020/04/28/26-let-webpage-speak/"/>
      <url>/2020/04/28/26-let-webpage-speak/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Side-Project-從無到有-讓網頁自己說話！"><a href="#Side-Project-從無到有-讓網頁自己說話！" class="headerlink" title="Side Project 從無到有-讓網頁自己說話！"></a><a href="https://medium.com/starbugs/side-project-%E5%BE%9E%E7%84%A1%E5%88%B0%E6%9C%89-%E8%AE%93%E7%B6%B2%E9%A0%81%E8%87%AA%E5%B7%B1%E8%AA%AA%E8%A9%B1-785bc67f6c3b" target="_blank" rel="noopener">Side Project 從無到有-讓網頁自己說話！</a></h3><p>目標是讓瀏覽器能夠閱讀 Time for kids 的文章內容，這個部分利用了 Chrome extension 來獲取網頁中的內容，說話的部分也有 JavaScript 的原生方法，SpeechSynthesisUtterance 和 SpeechSynthesis 可以使用，是個簡單好上手的 Project！</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="【無障礙網頁祕技】前端切版前要注意什麼細節呢？"><a href="#【無障礙網頁祕技】前端切版前要注意什麼細節呢？" class="headerlink" title="【無障礙網頁祕技】前端切版前要注意什麼細節呢？"></a><a href="https://medium.com/@ru.hsu916/%E7%84%A1%E9%9A%9C%E7%A4%99%E7%B6%B2%E9%A0%81%E7%A5%95%E6%8A%80-%E5%89%8D%E7%AB%AF%E5%88%87%E7%89%88%E5%89%8D%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E9%BA%BC%E7%B4%B0%E7%AF%80%E5%91%A2-f1b5715a2c06" target="_blank" rel="noopener">【無障礙網頁祕技】前端切版前要注意什麼細節呢？</a></h3><p>無障礙網頁主要是要讓「視覺障礙者」或「聽覺障礙者」可以使用其他替代方式獲得網頁的資訊內容，為了讓他們能夠更方便地閱讀網站，切版時需要注意哪些事情呢？本篇文章用了一些網站為範本來講解無障礙網站的特色。</p><p>如果對無障礙有更深的興趣，也非常推薦第 11 屆鐵人賽的得獎作品「<a href="https://ithelp.ithome.com.tw/users/20108045/ironman/2454" target="_blank" rel="noopener">實踐無障礙網頁設計（Web Accessibility）</a>」</p><h3 id="10-Best-of-Javascript-Games"><a href="#10-Best-of-Javascript-Games" class="headerlink" title="10+ Best of Javascript Games"></a><a href="https://dev.to/gscode/10-best-of-javascript-games-3mjj" target="_blank" rel="noopener">10+ Best of Javascript Games</a></h3><p>如果你既是個前端工程師也喜歡遊戲，那絕對不能錯過這 10 個有趣的 JavaScript 遊戲！只是第一個和最後一個我實在是捉摸不定他們的玩法 😭</p><h3 id="How-to-Build-a-Simple-Pokemon-Web-App-with-React-Hooks-and-the-Context-API"><a href="#How-to-Build-a-Simple-Pokemon-Web-App-with-React-Hooks-and-the-Context-API" class="headerlink" title="How to Build a Simple Pokémon Web App with React Hooks and the Context API"></a><a href="https://www.freecodecamp.org/news/building-a-simple-pokemon-web-app-with-react-hooks-and-context-api/" target="_blank" rel="noopener">How to Build a Simple Pokémon Web App with React Hooks and the Context API</a></h3><p>這是個很有愛的 Side Project 😂，讓我想到之前也曾經因為無聊做了一個<a href="https://ms314006.github.io/team-of-pokemon/dist/" target="_blank" rel="noopener">神奇寶貝背包</a>，雖然在文章中是用 React 完成的，但因為作者有把思考的一切都用文字清楚地表達出來，所以不妨可以用自己的做法重新跟著做一遍（無聊的話啦 😂），或是想一下要是你會如何去解決碰到的問題！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="What-is-the-toJSON-Function-in-JavaScript"><a href="#What-is-the-toJSON-Function-in-JavaScript" class="headerlink" title="What is the toJSON() Function in JavaScript?"></a><a href="http://thecodebarbarian.com/what-is-the-tojson-function-in-javascript.html" target="_blank" rel="noopener">What is the <code>toJSON()</code> Function in JavaScript?</a></h3><p>在 JS 中，當你嘗試把一個物件進行 <code>JSON.stringify</code> 時他會呼叫物件的 <code>toJSON</code> method，所以可以透過自己實作 <code>toJSON</code> 讓那些複雜的物件只顯示出比較重要的資訊，滿實用的一個小技巧</p><h3 id="How-to-Manage-Database-Timeouts-and-Cancellations-in-Go"><a href="#How-to-Manage-Database-Timeouts-and-Cancellations-in-Go" class="headerlink" title="How to Manage Database Timeouts and Cancellations in Go"></a><a href="https://www.alexedwards.net/blog/how-to-manage-database-timeouts-and-cancellations-in-go" target="_blank" rel="noopener">How to Manage Database Timeouts and Cancellations in Go</a></h3><p>在開發後端 API 時有時會遇到 SELECT 操作超時，或是資料還沒撈出來但請求已經被取消了，這時就可以用 Go 的 context 優雅的取消資料庫的操作，避免那些需要跑很久的指令把資料庫卡死</p><h3 id="How-Netflix-brings-safer-and-faster-streaming-experiences-to-the-living-room-on-crowded-networks-using-TLS-1-3"><a href="#How-Netflix-brings-safer-and-faster-streaming-experiences-to-the-living-room-on-crowded-networks-using-TLS-1-3" class="headerlink" title="How Netflix brings safer and faster streaming experiences to the living room on crowded networks using TLS 1.3"></a><a href="https://netflixtechblog.com/how-netflix-brings-safer-and-faster-streaming-experience-to-the-living-room-on-crowded-networks-78b8de7f758c" target="_blank" rel="noopener">How Netflix brings safer and faster streaming experiences to the living room on crowded networks using TLS 1.3</a></h3><p>Netflix 最近為了提升使用者體驗開始採用 TLS 1.3，而這篇文章大概介紹了 TLS 是什麼，以及 TLS 1.3 跟舊版比起來有什麼特別厲害之處。雖然 TLS 不是應用層協定所以一般人不太會接觸到，但文章本身不難可以當作增廣見聞看看</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="7-amazing-CSS-properties-you-may-not-know-yet"><a href="#7-amazing-CSS-properties-you-may-not-know-yet" class="headerlink" title="7 amazing CSS properties you may not know (yet)"></a><a href="https://dev.to/mustapha/7-amazing-css-properties-you-may-not-know-yet-eej" target="_blank" rel="noopener">7 amazing CSS properties you may not know (yet)</a></h3><p>你可能沒看過的 7 個令人驚艷的 CSS 屬性。極度炫炮的 7 個 CSS 屬性，原來還可以這樣喔？嗯嗯嗯嗯阿阿嗯嗯阿。</p><h3 id="TDD-Changed-My-Life"><a href="#TDD-Changed-My-Life" class="headerlink" title="TDD Changed My Life"></a><a href="https://medium.com/javascript-scene/tdd-changed-my-life-5af0ce099f80" target="_blank" rel="noopener">TDD Changed My Life</a></h3><p>TDD 改變了我的生活。學 TDD 有什麼好處？可以學到軟體的經濟學。可以學到五個寫 unit test 必須問自己的問題。可測試的程式碼帶來更好的軟體架構。如何使用更多的 pure funtion？測試 React.js 的元件。</p><h3 id="Building-a-Rails-App-With-Multiple-Subdomains"><a href="#Building-a-Rails-App-With-Multiple-Subdomains" class="headerlink" title="Building a Rails App With Multiple Subdomains"></a><a href="https://dev.to/appsignal/building-a-rails-app-with-multiple-subdomains-g05" target="_blank" rel="noopener">Building a Rails App With Multiple Subdomains</a></h3><p>Ruby on Rails 中如何實作 subdomain 呢？看這篇就對了！即使你使用的框架不是 Rails，也可以借此觀念思考看看，你使用的框架該如何實作 subdomain 的功能。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="來瞧瞧看-Kubernetes-Cluster-API-v1alpha3-多了什麼樣的新功能吧！"><a href="#來瞧瞧看-Kubernetes-Cluster-API-v1alpha3-多了什麼樣的新功能吧！" class="headerlink" title="來瞧瞧看 Kubernetes Cluster API v1alpha3 多了什麼樣的新功能吧！"></a><a href="https://kubernetes.io/blog/2020/04/21/cluster-api-v1alpha3-delivers-new-features-and-an-improved-user-experience/" target="_blank" rel="noopener">來瞧瞧看 Kubernetes Cluster API v1alpha3 多了什麼樣的新功能吧！</a></h3><p>Cluster API 是一個 Kubernetes 的專案，希望可以使用宣告式而且類似於 K8S 風格的 API 來新增，設定組態跟管理叢集，而在 v1alpha3 多了不少實用的功能！</p><ul><li><p>Declarative Control Plane Management: 提供 API 讓使用者可以 Deploy 跟 Scale K8S 的 Control Plane (包含 etcd)，這個是很多 Cluster API 使用者很想要的功能，因為現在要做到這些事情，尤其是 etcd 的管理，其實都是有點手工在進行操作的</p></li><li><p>Support for Distributing Control Plane Nodes Across Failure Domains To Reduce Risk: Cluster API 使用者可以把 Control Plane 節點分成多群的概念，要是今天有某一群的 Control Plane 節點壞掉了也不用擔心，可以切到另外一群去做使用</p></li><li><p>Automated Replacement of Unhealthy Nodes: 讓一個 K8S 的節點壞掉的原因可能有很多種，新的 Cluster API 現在包含 MachineHealthCheck 這個資源，並且還多了一個 Controller 來監控節點的健康情況，要是今天某一個節點出問題了，就會被自動移除掉；而且可以在 Controller 中設定移除掉的條件，例如要等多久，最多只能移除幾個節點…等</p></li><li><p>Support for Infrastructure-Managed Node Groups: 假如使用者維護很大的 Cluster，所以可能會需要一次新增或是刪除數以百計的節點，雖然 Public Cloud 可以乘載很大量的節點，但是針對每一個 Node 的管理都要透過分開的 API 請求去達成，這樣的做法太沒有效率跟擴展性了；所以假如 Public Cloud 有提供節點的分群機制，例如 AWS Auto Scaling Grup，Azure Machine Scale Set, GCP Managed Instance Group…等，透過 Infrastructure Providers 整合來支援這個新的 Cluster API 的話，使用者就可以直接 Deploy 整群的節點</p></li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 25 期 - 面對威脅，資安也需要超前部署！</title>
      <link href="/2020/04/21/25-prepare-for-security-in-advance/"/>
      <url>/2020/04/21/25-prepare-for-security-in-advance/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="聽說不能用明文存密碼，那到底該怎麼存？"><a href="#聽說不能用明文存密碼，那到底該怎麼存？" class="headerlink" title="聽說不能用明文存密碼，那到底該怎麼存？"></a><a href="https://medium.com/starbugs/how-to-store-password-in-database-sefely-6b20f48def92" target="_blank" rel="noopener">聽說不能用明文存密碼，那到底該怎麼存？</a></h3><p>不管資料庫再怎麼安全，還是有可能會有被入侵的一天。所以這篇文章要教大家怎麼超前部署，從最簡單的編碼開始探討各種儲存密碼的方式，看看要怎麼做到即使資料庫被駭了，使用者的密碼也不會洩漏出去</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="How-to-Inject-JavaScript-Code-to-Manipulate-Websites-Automatically"><a href="#How-to-Inject-JavaScript-Code-to-Manipulate-Websites-Automatically" class="headerlink" title="How to Inject JavaScript Code to Manipulate Websites Automatically"></a><a href="https://www.freecodecamp.org/news/how-to-inject-javascript-code-to-manipulate-websites-automatically/" target="_blank" rel="noopener">How to Inject JavaScript Code to Manipulate Websites Automatically</a></h3><p>「知己知彼，百戰百勝！」，如果想要知道該怎麼預防自己的網站被注入 JavaScript 的程式碼，就得先看看該怎麼在別人的網頁中使用 JavaScript！</p><h3 id="🍥-9-张看面试题也写不出来的-CSS-图案！"><a href="#🍥-9-张看面试题也写不出来的-CSS-图案！" class="headerlink" title="🍥 9 张看面试题也写不出来的 CSS 图案！"></a><a href="https://juejin.im/post/5e983158f265da480e68e658" target="_blank" rel="noopener">🍥 9 张看面试题也写不出来的 CSS 图案！</a></h3><p>看完這篇文章真的對 CSS 的思考又向上突破一個層級 XD，雖然現實生活中可能不會做到那麼精細的動畫，但仍然覺得作者對動畫的思路有夠 Amazing</p><h3 id="React-window-與-IntersectionObserver-API-實現無限捲動-Dcard-文章閱讀器之心得紀錄"><a href="#React-window-與-IntersectionObserver-API-實現無限捲動-Dcard-文章閱讀器之心得紀錄" class="headerlink" title="React window 與 IntersectionObserver API 實現無限捲動 Dcard 文章閱讀器之心得紀錄"></a><a href="https://medium.com/@oldmo860617/react-window-%E8%88%87-intersectionobserver-api-%E5%AF%A6%E7%8F%BE%E7%84%A1%E9%99%90%E6%8D%B2%E5%8B%95-dcard-%E6%96%87%E7%AB%A0%E9%96%B1%E8%AE%80%E5%99%A8%E4%B9%8B%E5%BF%83%E5%BE%97%E7%B4%80%E9%8C%84-97bc1c3faa07" target="_blank" rel="noopener">React window 與 IntersectionObserver API 實現無限捲動 Dcard 文章閱讀器之心得紀錄</a></h3><p>用常見的網站來當作練習前端的技巧非常有趣，作者參考 Dcard 為自己列了一些挑戰項目（基本要求就是無限滾動，然後 call API 載入更多文章）和加分條件！並且試著去實現它，然後撰寫一篇文章分享！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Testing-Go-Better-How-To-Create-Testable-Go-Code"><a href="#Testing-Go-Better-How-To-Create-Testable-Go-Code" class="headerlink" title="Testing Go Better - How To Create Testable Go Code"></a><a href="https://engineering.kablamo.com.au/posts/2020/testing-go" target="_blank" rel="noopener">Testing Go Better - How To Create Testable Go Code</a></h3><p>大家都知道 pure function 是最好測試的，因為給相同的輸入就會得到相同的輸出。但實務上不可能所有 function 都是 pure 的，多少會需要做 I/O，所以這篇要教你要怎麼設計 Go 的 function，才能做到即便不是 pure 也能方便測試</p><h3 id="旋轉拍賣-Carousell-Transactional-Service-之產品架構演進"><a href="#旋轉拍賣-Carousell-Transactional-Service-之產品架構演進" class="headerlink" title="旋轉拍賣 Carousell Transactional Service 之產品架構演進"></a><a href="https://link.medium.com/ZSyVxvh0P5" target="_blank" rel="noopener">旋轉拍賣 Carousell Transactional Service 之產品架構演進</a></h3><p>一直以來都很喜歡看這種架構演進的文章，因為架構不可能一開始就是完美的，隨著不同時期的不同需求一定會有所變化，就這樣慢慢進化到現在的樣子</p><h3 id="Clean-Code-無瑕的程式碼-閱讀筆記"><a href="#Clean-Code-無瑕的程式碼-閱讀筆記" class="headerlink" title="Clean Code 無瑕的程式碼 | 閱讀筆記"></a><a href="https://medium.com/@airwaves/clean-code-index-51e209cc47db" target="_blank" rel="noopener">Clean Code 無瑕的程式碼 | 閱讀筆記</a></h3><p>無意間看到這一系列 Clean Code 的筆記，作者目前已經寫到第十篇。推薦給沒時間的大忙人，沒時間看書來看看別人的筆記也是不錯的 XD</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Zoombot-–-Automated-Video-Meeting-AI"><a href="#Zoombot-–-Automated-Video-Meeting-AI" class="headerlink" title="Zoombot – Automated Video Meeting AI"></a><a href="https://redpepper.land/blog/zoombot/" target="_blank" rel="noopener">Zoombot – Automated Video Meeting AI</a></h3><p>WFH 在家工作但是不想坐在電腦前面怎麼辦？Zoombot 幫你自動回覆視訊會議，保證同事傻眼。</p><h3 id="Amazon-to-add-75-000-jobs-as-online-orders-surge-during-lockdowns"><a href="#Amazon-to-add-75-000-jobs-as-online-orders-surge-during-lockdowns" class="headerlink" title="Amazon to add 75,000 jobs as online orders surge during lockdowns"></a><a href="https://www.reuters.com/article/us-health-coronavirus-amazon-com/amazon-to-add-75000-more-jobs-amid-coronavirus-pandemic-idUSKCN21V1DK" target="_blank" rel="noopener">Amazon to add 75,000 jobs as online orders surge during lockdowns</a></h3><p>Amazon 多雇用了 75000 個員工來應對線上訂單的襲捲而來，讓你好好待在家裡，不用出門，以免遭遇病毒的風險。</p><h3 id="Thinking-in-React-The-2020-version"><a href="#Thinking-in-React-The-2020-version" class="headerlink" title="Thinking in React: The 2020 version"></a><a href="https://dev.to/lukeshiru/thinking-in-react-the-2020-version-4c18" target="_blank" rel="noopener">Thinking in React: The 2020 version</a></h3><p>原始的 <a href="https://reactjs.org/docs/thinking-in-react.html" target="_blank" rel="noopener">Thinking in React</a> 還在使用 class 的版本，是時候該更新一下版本了。透過五個簡單的步驟，掌握 React.js 的基本觀念。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="How-to-configure-a-production-grade-CICD-workflow-for-infrastructure-code"><a href="#How-to-configure-a-production-grade-CICD-workflow-for-infrastructure-code" class="headerlink" title="How to configure a production-grade CICD workflow for infrastructure code"></a><a href="https://gruntwork.io/guides/automations/how-to-configure-a-production-grade-ci-cd-setup-for-apps-and-infrastructure-code/" target="_blank" rel="noopener">How to configure a production-grade CICD workflow for infrastructure code</a></h3><p>採用了 Terraform 之後就什麼事都沒有了嗎？答案當然是否定的，IaC 就跟一般的程式碼沒兩樣，採用 Terraform 之後的 CI/CD 流程跟管理都還有很大的學問在，之前有兩條路可以選，分別是官方的 TerraformCloud，以及本來開源但是後來被納入官方底下的 Atlantis，而在最近 Gruntwork 推出了 Gruntwork Pipelines，運用 AWS ECS 來當成運行 Terraform CI/CD Job 的 Runner，讓 Terraform 的 CI/CD 整合解決方案又再多了一個，而且官方還有給出超級詳細的 Production 設定教學，整個設計理念也都涵蓋在其中</p><h3 id="Introducing-Gruntwork’s-AWS-Landing-Zone-Solution"><a href="#Introducing-Gruntwork’s-AWS-Landing-Zone-Solution" class="headerlink" title="Introducing Gruntwork’s AWS Landing Zone Solution"></a><a href="https://blog.gruntwork.io/introducing-gruntworks-aws-landing-zone-solution-fe581b7c7f71" target="_blank" rel="noopener">Introducing Gruntwork’s AWS Landing Zone Solution</a></h3><p>要設定一個 Production 等級的 AWS 管理環境其實是很累的，因為有很多的 AWS Account 需要設定，每個 Account 要有對應的管理權限，稽核日誌設定…等，所以 Gruntwork 這邊推出了 AWS Landing Zone Solution，把這些東西都包成了 Terraform Module，讓需要使用的人可以馬上站在巨人的肩膀上！利用 Terraform 迅速建立完美的多重 AWS 帳號管理架構</p><h3 id="npm-has-joined-GitHub"><a href="#npm-has-joined-GitHub" class="headerlink" title="npm has joined GitHub"></a><a href="https://github.blog/2020-04-15-npm-has-joined-github/" target="_blank" rel="noopener">npm has joined GitHub</a></h3><p>之前就已經有宣布 npm 要被 GitHub 收購的消息，而在上週 2020/04/15 時，收購作業總算是完成，GitHub 這邊給出承諾之後 Public npm registry 會繼續存活著，而且免費的給所有的開發者使用，而在合併完之後，將馬上會針對以下三個領域聚焦投入資源</p><ul><li>參與社群</li><li>投資資源到 registry 使用到的架構和平台</li><li>改善主要的使用體驗</li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 24 期 - Terraform Cloud V.S. 開源版拼裝車</title>
      <link href="/2020/04/14/24-terraform-cloud/"/>
      <url>/2020/04/14/24-terraform-cloud/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Terraform-Cloud-V-S-開源版拼裝車"><a href="#Terraform-Cloud-V-S-開源版拼裝車" class="headerlink" title="Terraform Cloud V.S. 開源版拼裝車"></a><a href="https://medium.com/starbugs/terraform-cloud-v-s-%E9%96%8B%E6%BA%90%E7%89%88%E6%8B%BC%E8%A3%9D%E8%BB%8A-6ce9a5822a26" target="_blank" rel="noopener">Terraform Cloud V.S. 開源版拼裝車</a></h3><p>要把 Terraform 開源版本的最佳實踐守則全部弄完，其實需要不少的時間，但假如今天只是個小團隊沒有那麼多的閒功夫花在 Terraform 生態環境的建置與維護上，有沒有什麼辦法可以讓團隊馬上無痛使用 Terraform 開發？有的，就是今天要介紹的 Terraform Cloud！</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="The-Best-Way-to-Learn-Front-End-Web-Development"><a href="#The-Best-Way-to-Learn-Front-End-Web-Development" class="headerlink" title="The Best Way to Learn Front End Web Development"></a><a href="https://www.freecodecamp.org/news/learn-frontend-web-development/" target="_blank" rel="noopener">The Best Way to Learn Front End Web Development</a></h3><p>看到「The web is vast - start small and keep it small」的時候，就決定要分享這篇文章了。工程師的學習之路真的不會有盡頭，因此不要想太多，重要的是必須要好好掌握語言或是框架的特性，這麼一來不論什麼時候生態圈又發生變化，才不會輕易容易被捲得昏頭轉向。</p><h3 id="CSS-Grid-剛學會怎麼用-Grid，那就來畫個-TV-檢驗圖練練手吧！"><a href="#CSS-Grid-剛學會怎麼用-Grid，那就來畫個-TV-檢驗圖練練手吧！" class="headerlink" title="CSS Grid | 剛學會怎麼用 Grid，那就來畫個 TV 檢驗圖練練手吧！"></a><a href="https://medium.com/%E6%89%8B%E5%AF%AB%E7%AD%86%E8%A8%98/using-css-grid-to-draw-test-card-7ed24d3559ab" target="_blank" rel="noopener">CSS Grid | 剛學會怎麼用 Grid，那就來畫個 TV 檢驗圖練練手吧！</a></h3><p>CSS 的 Grid 和 Flex 絕對是前端工程師的排版利器！如果還在猶豫或是不曉得該不該學習，就看看其他人使用 Grid 可以做到什麼程度來考慮吧！</p><h3 id="新手向：如何给大型前端开源项目贡献源码"><a href="#新手向：如何给大型前端开源项目贡献源码" class="headerlink" title="新手向：如何给大型前端开源项目贡献源码"></a><a href="https://zhuanlan.zhihu.com/p/129036259" target="_blank" rel="noopener">新手向：如何给大型前端开源项目贡献源码</a></h3><p>我曾經聽過一個故事，那就是有個前端工程師一直在幫某個大型專案做 PR 修 Bug，到最後直接變成該公司的首席工程師 😂，但是重點不是這個！而是大部分人都會覺得自己的能力還不足，或是怕自己的 PR 被拒絕等等理由，一直害怕去嘗試踏入開源，我認為這是一件很可惜的事情（包括我自己也是XD），文中非常棒的把一些開源要注意的事情講解的很清楚，想踏出第一步的大家可以看看！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="How-an-anti-ad-blocker-works-Reverse-engineering-BlockAdBlock"><a href="#How-an-anti-ad-blocker-works-Reverse-engineering-BlockAdBlock" class="headerlink" title="How an anti ad-blocker works: Reverse-engineering BlockAdBlock"></a><a href="https://xy2.dev/article/re-bab/" target="_blank" rel="noopener">How an anti ad-blocker works: Reverse-engineering BlockAdBlock</a></h3><p>在這個人人都在用 AdBlocker 的年代，BlockAdBlock 這個反 AdBlocker 的工具也應運而生。如果偵測到使用者有裝 AdBlocker，BlockAdBlock 就會讓整個網站停止運作，直到你關掉 AdBlocker 才能繼續使用網站，但 BlockAdBlock 究竟是根據什麼來判斷使用者有沒有裝 AdBlocker 呢？只好把 BlockAdBlock 的原始碼翻出來看看了！</p><h3 id="爬蟲實戰：怎樣爬到-Instagram-的資料"><a href="#爬蟲實戰：怎樣爬到-Instagram-的資料" class="headerlink" title="爬蟲實戰：怎樣爬到 Instagram 的資料"></a><a href="https://link.medium.com/QapHkIQVA5" target="_blank" rel="noopener">爬蟲實戰：怎樣爬到 Instagram 的資料</a></h3><p>這是一篇爬蟲實戰文，看作者用 Chrome Devtool 抽絲剝繭找到關鍵的線索、爬到想要的資料真的很好玩，而且文中也提到一些找線索的技巧，很有趣的一篇文章</p><h3 id="Good-and-Bad-Practices-of-Coding-in-Python"><a href="#Good-and-Bad-Practices-of-Coding-in-Python" class="headerlink" title="Good and Bad Practices of Coding in Python"></a><a href="https://dev.to/duomly/the-best-practices-of-coding-in-python-and-what-to-avoid-3c65" target="_blank" rel="noopener">Good and Bad Practices of Coding in Python</a></h3><p>最近對於資料分析有點興趣，於是開始寫 Python。但因爲我對 Python 沒有很熟，所以上網找了一些文章看怎麼把扣寫得更 pythonic，然後就看到這篇在講 Python 的 Good and Bad practices，我自己看完覺得很受用，如果你也剛開始寫 Python 的話真的必須讀一下</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Pure-Function－單純的幸福"><a href="#Pure-Function－單純的幸福" class="headerlink" title="Pure Function－單純的幸福"></a><a href="https://jigsawye.gitbooks.io/mostly-adequate-guide/content/ch3.html" target="_blank" rel="noopener">Pure Function－單純的幸福</a></h3><p>首先，我們要釐清 pure function 的概念。Pure function 意指相同的輸入，永遠會得到相同的輸出，而且沒有任何顯著的副作用。為何說 slice 是 pure，因為對於相同的輸入它能保證回傳的輸出是相同的。但 splice 卻會嚼爛呼叫它的陣列，然後吐出來；這產生了顯著的副作用，即這個陣列被永久改變了。</p><h3 id="XState-簡介"><a href="#XState-簡介" class="headerlink" title="XState 簡介"></a><a href="https://blog.jerry-hong.com/posts/xstate-introduction/" target="_blank" rel="noopener">XState 簡介</a></h3><p>為什麼需要 XState? 缺乏清晰的狀態描述、過於自由的狀態轉換、難以與工程師之外的人討論。XState 有什麼優勢？程式碼即 UI Spec、寫更少的測試、更快速的路徑優化。by Jerry</p><h3 id="譯-理解-React-Hooks"><a href="#譯-理解-React-Hooks" class="headerlink" title="[譯] 理解 React Hooks"></a><a href="https://andyyou.github.io/2019/07/29/making-sence-of-react-hooks/" target="_blank" rel="noopener">[譯] 理解 React Hooks</a></h3><p>Hooks 在元件內套用了 React 的哲學（明確定義資料流和可組合的特性），而且不僅僅是組件之間。這也是為什麼 Hooks 可以很自然套用在 React 元件上。不像其他設計模式例如 render props 或 high-order 元件，Hooks 不會在整個元件樹結構中加入多餘的元件結構，也沒有 mixins 的缺點。by Andyou</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Useful-Interactive-Terminal-and-Graphical-UI-Tools-for-Kubernetes"><a href="#Useful-Interactive-Terminal-and-Graphical-UI-Tools-for-Kubernetes" class="headerlink" title="Useful Interactive Terminal and Graphical UI Tools for Kubernetes"></a><a href="https://www.virtuallyghetto.com/2020/04/useful-interactive-terminal-and-graphical-ui-tools-for-kubernetes.html" target="_blank" rel="noopener">Useful Interactive Terminal and Graphical UI Tools for Kubernetes</a></h3><p>本篇文章的作者分享了幾種可以視覺化 K8S 內部資源的工具，大家還有其他推薦的管理工具嗎？(雖然我自己只有用 kubectl 就是了XD)</p><ul><li>Octant</li><li>Lens</li><li>Kubevious</li><li>kubelive</li><li>K9s</li></ul><h3 id="Docker-我還活著喔-lt-￣3￣-y·ξ-而且成立開源社群來開發-Compose"><a href="#Docker-我還活著喔-lt-￣3￣-y·ξ-而且成立開源社群來開發-Compose" class="headerlink" title="Docker: 我還活著喔 &lt;(￣3￣)y·ξ 而且成立開源社群來開發 Compose"></a><a href="https://www.docker.com/blog/announcing-the-compose-specification/" target="_blank" rel="noopener">Docker: 我還活著喔 &lt;(￣3￣)y·ξ 而且成立開源社群來開發 Compose</a></h3><p>其實 Docker Compose 真的滿好用的，可以很迅速地在本地端啟動一個 multi-container 應用服務的開發測試環境，而且他跟雲端環境是獨立的，所以可以幫助大家節省超級多的寶貴時間，這次 Docker 希望透過這個新成立的社群跟 AWS, Microsoft 還有其他的開源社群來擴展 Compose，讓 Docker Compose 可以更彈性的支援 Cloud Native 平台，例如 Kubernetes, Amazon Elastic Container Service…等</p><h3 id="Vault-1-4-新版這次最亮眼的功能是…"><a href="#Vault-1-4-新版這次最亮眼的功能是…" class="headerlink" title="Vault 1.4 新版這次最亮眼的功能是…"></a><a href="https://www.hashicorp.com/blog/vault-1-4/" target="_blank" rel="noopener">Vault 1.4 新版這次最亮眼的功能是…</a></h3><p>以前 Vault 假如要達成 HA，其實是不能夠使用 Local Storage 的，因為資料散佈在多個 Node 中，並無法達成同步，所以官方都是推薦使用其他的 Storage Backend，例如：Consul, AWS Dynamodb (這我自己推薦XD)…等</p><p>而在最新版推出 Integrated Storage 這個新功能，讓使用者不需要使用第三方的 Storage Backend，只要用 Local Storage 就可以達成 HA, Backup, Recovery (透過 Raft Consensus Algorithm)，讓使用者設定 Vault 的時候少一個第三方依賴，增加獨立性，因為每次存取資料不再需要透過網路連到第三方的 Storage Backend</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 23 期 - 三日不出門，在家裡聽 Podcast！</title>
      <link href="/2020/04/07/23-podcast-is-great/"/>
      <url>/2020/04/07/23-podcast-is-great/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="工程師必聽的-Podcast-頻道，矽谷、荷蘭、澳洲、日本生活通通有"><a href="#工程師必聽的-Podcast-頻道，矽谷、荷蘭、澳洲、日本生活通通有" class="headerlink" title="工程師必聽的 Podcast 頻道，矽谷、荷蘭、澳洲、日本生活通通有"></a><a href="https://medium.com/starbugs/ff8edc847f4d" target="_blank" rel="noopener">工程師必聽的 Podcast 頻道，矽谷、荷蘭、澳洲、日本生活通通有</a></h3><p>這兩年來有一件滿棒的風氣，台灣的開發者，特別是海外的開發者，開始錄起了 Podcast。用聲音作為媒介，來傳達與分享自己的生活。所以今天特別蒐集了一系列由台灣的開發者製作的 Podcast 頻道。並且蒐集了許多有意思的主題，跟大家分享。內容包含了各國生活的分享與攻略，矽谷、荷蘭、澳洲、日本生活通通有。</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Why-You-Should-Refactor-Your-Code"><a href="#Why-You-Should-Refactor-Your-Code" class="headerlink" title="Why You Should Refactor Your Code"></a><a href="https://www.freecodecamp.org/news/why-you-should-refactor-your-code/" target="_blank" rel="noopener">Why You Should Refactor Your Code</a></h3><p>文章點出了幾個在 coding 時常會遇到的程式碼品質，以及技術債的問題，這兩個是導致我們需要做重構的最大原因，但是重構到底是什麼？重構時需要遵守那些原則？看看作者怎麼說！</p><h3 id="Build-an-Array-from-Scratch-in-Javascript"><a href="#Build-an-Array-from-Scratch-in-Javascript" class="headerlink" title="Build an Array from Scratch in Javascript"></a><a href="https://hackernoon.com/build-an-array-from-scratch-in-javascript-uc4s3yqw" target="_blank" rel="noopener">Build an Array from Scratch in Javascript</a></h3><p>Array 在 JavaScript 裡一直都是個很方便的資料結構，也擁有許多方便的原生 Method，但大家知道 Array 背後到底怎麼實現的嗎？作者直接帶你從無到有時做起來！</p><h3 id="译-JSON-stringify-的-5-个秘密特性"><a href="#译-JSON-stringify-的-5-个秘密特性" class="headerlink" title="[译] JSON.stringify() 的 5 个秘密特性"></a><a href="https://juejin.im/post/5e842da76fb9a03c854610c7" target="_blank" rel="noopener">[译] JSON.stringify() 的 5 个秘密特性</a></h3><p>還記得上一刊提到可以用 <code>JSON.stringify()</code> 和 <code>JSON.parse()</code> 搭配，在 console 中印出正確的 <code>Object</code> 值，但值得一提的是 <code>JSON.stringify()</code> 比想像中的還猛！如果你只是想確認某些值是否發生變化，善用文中提到的技巧，也許就不用每次都在搭配 <code>JSON.parse()</code> 印出落落長的資料了！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Go-What-Does-a-Goroutine-Switch-Actually-Involve"><a href="#Go-What-Does-a-Goroutine-Switch-Actually-Involve" class="headerlink" title="Go: What Does a Goroutine Switch Actually Involve?"></a><a href="https://medium.com/a-journey-with-go/go-what-does-a-goroutine-switch-actually-involve-394c202dddb7" target="_blank" rel="noopener">Go: What Does a Goroutine Switch Actually Involve?</a></h3><p>Go 裡面的 goroutine 非常輕量，因此不管是要建立或是切換 goroutine 都非常迅速，而這篇文章就是在介紹當 Go scheduler 真的要切換 goroutine 時會發生什麼事，滿有趣的</p><blockquote><p>PS: 如果沒辦法看 Medium 付費牆的文章，可以試試 <a href="https://github.com/manojVivek/medium-unlimited" target="_blank" rel="noopener">medium-unlimited</a> 這個 extension，Chrome 跟 Firefox 都有支援</p></blockquote><h3 id="Optimizing-a-Golang-service-to-reduce-over-40-CPU"><a href="#Optimizing-a-Golang-service-to-reduce-over-40-CPU" class="headerlink" title="Optimizing a Golang service to reduce over 40% CPU"></a><a href="https://medium.com/coralogix-engineering/optimizing-a-golang-service-to-reduce-over-40-cpu-366b67c67ef9" target="_blank" rel="noopener">Optimizing a Golang service to reduce over 40% CPU</a></h3><p>這篇是 Coralogix 的技術團隊在使用 Go 後發現在 production 環境的 CPU 使用率太高，於是他們用了 pprof 檢查到底是誰在佔用 CPU，結果發現是因為 Go 太常進行 GC 了，所以導致很多不必要的浪費，後來他們把 GC 的頻率調低之後就成功解決了～</p><h3 id="Zero-cost-abstractions-in-Rust"><a href="#Zero-cost-abstractions-in-Rust" class="headerlink" title="Zero-cost abstractions in Rust"></a><a href="https://carette.xyz/posts/zero_cost_abstraction/" target="_blank" rel="noopener">Zero-cost abstractions in Rust</a></h3><p>Rust 最廣為人知的就是他的零成本抽象化，但到底怎麼樣算是抽象化，Rust 又是怎麼做到零成本？這篇文章用了幾個範例來介紹，並且比較了他們的執行時間跟編譯時間</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Twitter-Direct-Message-Caching-and-Firefox"><a href="#Twitter-Direct-Message-Caching-and-Firefox" class="headerlink" title="Twitter Direct Message Caching and Firefox"></a><a href="https://hacks.mozilla.org/2020/04/twitter-direct-message-caching-and-firefox/" target="_blank" rel="noopener">Twitter Direct Message Caching and Firefox</a></h3><p>Twitter 發表了一份<a href="https://privacy.twitter.com/en/blog/2020/data-cache-firefox" target="_blank" rel="noopener">聲明</a>，如果你在公用電腦中使用 firefox 的話，你在發訊息時的媒體或訊息，會被 Cache 在 firefox 瀏覽器中，即使你登出了，也不會被刪除。而其他瀏覽器則沒有這個問題。讓我們來看看這個問題究竟是這麼回事。</p><h3 id="How-SEO-Ruined-the-Internet"><a href="#How-SEO-Ruined-the-Internet" class="headerlink" title="How SEO Ruined the Internet"></a><a href="https://www.superhighway98.com/seo" target="_blank" rel="noopener">How SEO Ruined the Internet</a></h3><p>SEO 是如何毀掉 Internet 的？重寫歷史、擦掉文章的軌跡、SEO 的最佳實踐毀了讀者的體驗、一堆專做內容的公司搶占著 Google 搜尋頁面的前幾頁。SEO 是一個零和遊戲，每個遊戲有贏家也有輸家，不可否認的是 SEO 很大的影響了文章的呈現方式，讓我們的文章變得添加了許多調味料。</p><h3 id="Start-all-of-your-commands-with-a-comma"><a href="#Start-all-of-your-commands-with-a-comma" class="headerlink" title="Start all of your commands with a comma"></a><a href="https://rhodesmill.org/brandon/2009/commands-with-comma/" target="_blank" rel="noopener">Start all of your commands with a comma</a></h3><p>如果你有一些自定的指令，你想用一個最懶惰、最快速的方式呼叫他們，你會這麼做？這老兄想出了一個非常天才的方法，加個逗號😂😂😂。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Cortex-v1-0-released-The-highly-scalable-fast-Prometheus-implementation-is-generally-available-for-production-use"><a href="#Cortex-v1-0-released-The-highly-scalable-fast-Prometheus-implementation-is-generally-available-for-production-use" class="headerlink" title="Cortex v1.0 released: The highly scalable, fast Prometheus implementation is generally available for production use"></a><a href="https://grafana.com/blog/2020/04/02/cortex-v1.0-released-the-highly-scalable-fast-prometheus-implementation-is-generally-available-for-production-use/" target="_blank" rel="noopener">Cortex v1.0 released: The highly scalable, fast Prometheus implementation is generally available for production use</a></h3><p>Prometheus 雖然好用，但是在擴展性方面一直為人所詬病，因此很多第三方的解決方案應運而生，例如 Uber 的 M3, Thanos…等，不過官方其實也有注意到這個問題，因此開始投資研發資源在 Cortex 上，而最近 1.0 總算發佈了，宣稱可以讓 Prometheus 在 Production 達成高擴展性，這在一版的文件中有特別詳細說明如何設定好 Production Ready 的 Cortex，Grafana Dashboards 和 Proemtheus Alert 的設定…等</p><h3 id="All-things-Kubernetes-What-you’re-missing-at-KubeCon-this-week"><a href="#All-things-Kubernetes-What-you’re-missing-at-KubeCon-this-week" class="headerlink" title="All things Kubernetes: What you’re missing at KubeCon this week"></a><a href="https://siliconangle.com/2020/03/29/things-kubernetes-missing-kubecon-week/" target="_blank" rel="noopener">All things Kubernetes: What you’re missing at KubeCon this week</a></h3><p>雖然本來 KubeCon + CloudNativeCon 要辦在歐洲的活動已經早就宣告延期到七月或是八月再說了，但是此篇文章的作者還是想要分享一些他覺得這個活動的要點，例如：完整的託管 Data Cloud - Aiven, Container Image 弱點掃描工具 - Anchore…等</p><h3 id="HashiCorp-Joins-the-CNCF"><a href="#HashiCorp-Joins-the-CNCF" class="headerlink" title="HashiCorp Joins the CNCF"></a><a href="https://www.hashicorp.com/blog/hashicorp-joins-the-cncf/" target="_blank" rel="noopener">HashiCorp Joins the CNCF</a></h3><p>為了進一步將 HashiCorp 產品與 Cloud Native Computing Foundation（CNCF）項目整合在一起，並且讓社群彼此更加緊密地合作，HashiCorp 宣布加入了 CNCF。這意味著HashiCorp 將以各種形式更頻繁地出現在 CNCF 的社群中。而且 HashiCpro 也計畫參加更多的 CNCF 活動並且擴大相關的業務範圍，用以確保 HashiCorp 官方可以幫助 CNCF 的技術使用者可以更成功地使用其公司的工具</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 22 期 - 簡單的事交給電腦處理，這樣才有更多時間可以一起去 High 🕺</title>
      <link href="/2020/03/31/22-time-should-be-spent-to-things-of-happy/"/>
      <url>/2020/03/31/22-time-should-be-spent-to-things-of-happy/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Travis-CI-簡單事情就交給電腦去做之CI-CD-初體驗，讓-GitHub-Pages-自動更新！"><a href="#Travis-CI-簡單事情就交給電腦去做之CI-CD-初體驗，讓-GitHub-Pages-自動更新！" class="headerlink" title="Travis CI| 簡單事情就交給電腦去做之CI/CD 初體驗，讓 GitHub Pages 自動更新！"></a><a href="https://medium.com/starbugs/travis-ci-%E7%B0%A1%E5%96%AE%E4%BA%8B%E6%83%85%E5%B0%B1%E4%BA%A4%E7%B5%A6%E9%9B%BB%E8%85%A6%E5%8E%BB%E5%81%9A%E4%B9%8Bci-cd-%E5%88%9D%E9%AB%94%E9%A9%97-%E8%AE%93-github-pages-%E8%87%AA%E5%8B%95%E6%9B%B4%E6%96%B0-7647be30eb1c" target="_blank" rel="noopener">Travis CI| 簡單事情就交給電腦去做之CI/CD 初體驗，讓 GitHub Pages 自動更新！</a></h3><p>每次每次在處理完 issue 或加上 feature 後，都要再重新 build 過並部署到 server，但珍貴的時間就應該要拿來做珍貴的事情，不是浪費在這種無聊的重複指令上。於是利用一點時間研究 CI/CD，好讓專案可以在 Push 到 GitHub 的同時自動部署！像這樣把簡單的事情交給電腦處理，才有更多時間可以一起去 High 🕺</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="A-letter-to-myself-as-a-fresh-software-engineer"><a href="#A-letter-to-myself-as-a-fresh-software-engineer" class="headerlink" title="A letter to myself as a fresh software engineer"></a><a href="https://www.freecodecamp.org/news/a-letter-to-myself-as-a-fresh-software-engineer/" target="_blank" rel="noopener">A letter to myself as a fresh software engineer</a></h3><p>我總是很容易被這種感性的標題吸引 😂，但說真的有時候看這種經驗類型的文章，總是會不小心被撥到幾條心弦，尤其是剛開始成為工程師的時候，就是認為工程師要爆肝到不行，所以就貫徹自己在公司的價值，每天都加加加加加到不行，一直到有天突然驚覺，然後在午夜十一點從辦公室的椅子上摔下來，坐在地上思考「這真的是我理想的工程師嗎？」，於是之後就瞬間成為準時下班一族了。</p><p>但這不代表我沒有將工作的事情處理好，也不代表我沒那麼喜歡寫程式，我仍然做好我在公司的角色，也在下班時繼續用程式學習，並做一些自己喜愛的 Project，這才是我享受生活、享受程式的態度 😎！</p><h3 id="你需要注意的-console-log-問題"><a href="#你需要注意的-console-log-問題" class="headerlink" title="你需要注意的 console.log 問題"></a><a href="https://blog.huli.tw/2020/03/23/console-log-bug/?fbclid=IwAR0bAUvbNN7jULJjca4lqfn5X37P-hYwj_Mp7jw6-IZ6wuCZqsMvEc_qCfE" target="_blank" rel="noopener">你需要注意的 console.log 問題</a></h3><p>一開始在寫 JavaScript 常常被傳來傳去的 Object 搞得很混亂，尤其是連 <code>console.log</code> 出來的值和預期的不同就會開始懷疑人生，因此後來要看 Object 的時候都會特別用 <code>JSON.parse</code> 和 <code>JSON.stringify</code> 大法處理他 XD。而文章中把這個雷點解釋得非常清楚，推薦大家花點時間把它看完！</p><h3 id="5-Great-JavaScript-Projects-to-Code-During-Quarantine"><a href="#5-Great-JavaScript-Projects-to-Code-During-Quarantine" class="headerlink" title="5 Great JavaScript Projects to Code During Quarantine"></a><a href="https://hackernoon.com/5-great-javascript-projects-to-code-during-quarantine-np103y26" target="_blank" rel="noopener">5 Great JavaScript Projects to Code During Quarantine</a></h3><p>雖然標題上是說在隔離期間可以做的幾個小 Project，但我認為對於新手、學生、想要學習程式或每天都苦惱著可以做什麼當作品的人來說，都是不錯的選擇，尤其是最後一個本人覺得超酷！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Rust-编译模型之殇"><a href="#Rust-编译模型之殇" class="headerlink" title="Rust 编译模型之殇"></a><a href="https://zhuanlan.zhihu.com/p/110379613" target="_blank" rel="noopener">Rust 编译模型之殇</a></h3><p>不少人都聽說過 Rust 編譯的速度很慢，慢到由 Rust 實作的 TiKV 資料庫一天只有 24 次編譯機會，用一次少一次。但到底為什麼會慢成這樣，可以看看由 TiDB 團隊對於 Rust 編譯模型的深入分析</p><h3 id="HTTP-2-從零到一"><a href="#HTTP-2-從零到一" class="headerlink" title="HTTP/2 從零到一"></a><a href="https://link.medium.com/14VGAc44e5" target="_blank" rel="noopener">HTTP/2 從零到一</a></h3><p>近年來 HTTP 2 越來越普及，那他究竟比 HTTP 1 好在哪？如果還不太知道的話可以趕快看這篇文惡補一下，文末也有提供在 Nodejs 中使用 HTTP 2 的範例可以跟著做做看</p><h3 id="10-React-mini-patterns"><a href="#10-React-mini-patterns" class="headerlink" title="10 React mini-patterns"></a><a href="https://link.medium.com/pNSTZkT5e5" target="_blank" rel="noopener">10 React mini-patterns</a></h3><p>這篇文講了很多在寫前端時可能會遇到的需求，並且提供了幾個簡單的 React pattern 教你怎麼優雅的完成這些功能、同時保持程式碼的簡單明瞭，很值得一讀</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Throwaway-Code"><a href="#Throwaway-Code" class="headerlink" title="Throwaway Code"></a><a href="https://blog.bencope.land/throwaway-code" target="_blank" rel="noopener">Throwaway Code</a></h3><p>有時候你嘗試性寫的程式碼，突然間要變成產品。那麼這段程式碼會難以維護，該如何是好？本文提供了一個很實際的方法：「不管這個這段程式碼是不是已經被使用，或是已經可以運作了，只要人類無法讀懂，那他是無法維護的程式碼，應該要被重寫。」</p><h3 id="When-a-founder-is-already-wealthy-why-would-they-need-or-want-venture-capital-for-a-new-startup"><a href="#When-a-founder-is-already-wealthy-why-would-they-need-or-want-venture-capital-for-a-new-startup" class="headerlink" title="When a founder is already wealthy, why would they need or want venture capital for a new startup?"></a><a href="https://www.quora.com/When-a-founder-is-already-wealthy-why-would-they-need-or-want-venture-capital-for-a-new-startup/answer/Marc-Andreessen?utm_source=wanqu.co&utm_campaign=Wanqu+Daily&utm_medium=website" target="_blank" rel="noopener">When a founder is already wealthy, why would they need or want venture capital for a new startup?</a></h3><p>為什麼在創辦人已經很富有的情況下，他們還會想要風險投資來創立一個新創公司？第一個原因是讓錢的使用的紀律是一家真實的公司來運作，而不是自己的錢包想怎麼用就怎麼用。第二個原因是讓更多獨立觀點與知識淵博的人一同交流意見。第三個原因是可以藉由這樣的方式來獲得更多優秀的人才、獲取更多顧客、與得到重要夥伴。</p><h3 id="Consume-less-create-more"><a href="#Consume-less-create-more" class="headerlink" title="Consume less, create more"></a><a href="https://tjcx.me/posts/consumption-distraction/?utm_source=wanqu.co&utm_campaign=Wanqu+Daily&utm_medium=website" target="_blank" rel="noopener">Consume less, create more</a></h3><p>(本篇文章有點長，來練習閱讀英文長文。)大多數的時候你都在消化外界資訊，例如：閱讀網路文章、讀書、逛臉書 … 等等。你不自覺的會產生這樣的行為，「被動的」接收這些資訊。當你停下來，想一想，別人寫了多少東西，你也可以試試看自己能夠寫多少東西。多創造一點，少吸收一點，會有更多「屬於你的東西」出現。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="如何-Work-From-Home…但是在有小孩的情況下XD"><a href="#如何-Work-From-Home…但是在有小孩的情況下XD" class="headerlink" title="如何 Work From Home…但是在有小孩的情況下XD"></a><a href="https://grafana.com/blog/2020/03/17/how-to-work-from-home-with-kids-more-tips-from-the-remote-first-grafana-labs-team/" target="_blank" rel="noopener">如何 Work From Home…但是在有小孩的情況下XD</a></h3><p>最近很多人都分享了如何有效率的 WFH，但在疫情比較嚴重的地區，可能連托嬰中心，幼稚園…等這些讓小孩在大人上班時可以待的地方也都關掉了，那在這樣的情況之下該怎麼辦呢？#GrafanaLab 特地寫了一篇要如何與 小朋 (ㄇㄛˊ) 友 (ㄍㄨㄟˇ）一起 WFH 的文章XD</p><h3 id="Navi-–-An-Interactive-Commandline-Cheatsheet-Tool"><a href="#Navi-–-An-Interactive-Commandline-Cheatsheet-Tool" class="headerlink" title="Navi – An Interactive Commandline Cheatsheet Tool"></a><a href="https://www.ostechnix.com/navi-an-interactive-commandline-cheatsheet-tool/" target="_blank" rel="noopener">Navi – An Interactive Commandline Cheatsheet Tool</a></h3><p>Navi 是用 Rust 編寫的 Commandline Cheatsheet 工具。就像 Bro Pages, Cheat, Tldr 等工具一樣，而且 Navi 還提供了想要執行命令的整個列表一次顯示出來，獻給不想要離開 Terminal 的各位工程師!</p><h3 id="14-Kubernetes-interview-questions-For-hiring-managers-and-job-seekers"><a href="#14-Kubernetes-interview-questions-For-hiring-managers-and-job-seekers" class="headerlink" title="14 Kubernetes interview questions: For hiring managers and job seekers"></a><a href="https://enterprisersproject.com/article/2020/3/14-kubernetes-interview-questions" target="_blank" rel="noopener">14 Kubernetes interview questions: For hiring managers and job seekers</a></h3><p>記得最近有一篇文章提到要是企業若不擁抱 K8S，將被多雲環境淘汰?! 我自己不敢說不用的公司會被淘汰，但是還滿肯定以後 IT 圈子的工作職缺都會要求要有使用過 K8S 的經驗，所以趕緊來看看 14 個 K8S 的面試問題吧！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 21 期 - 學完密碼學，還是記不住自己的密碼</title>
      <link href="/2020/03/24/21-still-forget-password-after-learning-cryptography/"/>
      <url>/2020/03/24/21-still-forget-password-after-learning-cryptography/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="一次搞懂密碼學中的三兄弟-—-Encode、Encrypt-跟-Hash"><a href="#一次搞懂密碼學中的三兄弟-—-Encode、Encrypt-跟-Hash" class="headerlink" title="一次搞懂密碼學中的三兄弟 — Encode、Encrypt 跟 Hash"></a><a href="https://medium.com/starbugs/what-are-encoding-encrypt-and-hashing-4b03d40e7b0c" target="_blank" rel="noopener">一次搞懂密碼學中的三兄弟 — Encode、Encrypt 跟 Hash</a></h3><p>今天就要來說說密碼學中大家很容易搞混的三個東西：編碼（Encode）、加密（Encrypt）跟雜湊（Hash），雖然他們三者的比較已經很多人寫過了，但還是有些人搞不清楚，所以這篇決定換個方式：不提太多理論，而是舉大量的例子跟實際應用，如果這些例子你都能看懂，那自然就會知道三者的差別</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="😷🦠-COVID-19-Self-Isolation-Work-From-Home-and-Developers-👩🏻‍💻👩🏽‍⚕️"><a href="#😷🦠-COVID-19-Self-Isolation-Work-From-Home-and-Developers-👩🏻‍💻👩🏽‍⚕️" class="headerlink" title="😷🦠 COVID-19, Self-Isolation, Work From Home and Developers 👩🏻‍💻👩🏽‍⚕️"></a><a href="https://dev.to/teamxenox/covid-19-self-isolation-work-from-home-and-developers-22kd" target="_blank" rel="noopener">😷🦠 COVID-19, Self-Isolation, Work From Home and Developers 👩🏻‍💻👩🏽‍⚕️</a></h3><p>COVID-19 間接推動了 Work From Home 的興起，文中提到了幾點在家或是遠距工作，該注意哪些事情才能使自身強大的生產力不會因為工作型態的改變而降低。</p><h3 id="How-to-Get-a-Developer-Job-with-No-Experience-Like-I-Did"><a href="#How-to-Get-a-Developer-Job-with-No-Experience-Like-I-Did" class="headerlink" title="How to Get a Developer Job with No Experience (Like I Did)"></a><a href="https://hackernoon.com/how-to-get-a-developer-job-with-no-experience-like-i-did-db2e32zz" target="_blank" rel="noopener">How to Get a Developer Job with No Experience (Like I Did)</a></h3><p>作者分享了一些如何在沒有相關工作經驗的狀況下，得到成為開發人員的第一份工作，裡面看到最有感觸的話就是「So stop agonizing about when you should start applying. You’ll never feel ready」，不要去想什麼時候開始可以找工作，因為你永遠不會有準備好的一天！寫好履歷，投就對了！</p><h3 id="HTML6-is-Coming-–-What’s-new-in-HTML6"><a href="#HTML6-is-Coming-–-What’s-new-in-HTML6" class="headerlink" title="HTML6 is Coming – What’s new in HTML6"></a><a href="https://morioh.com/p/6d422fc49bd2?f=5c21fb01c16e2556b555ab32&fbclid=IwAR0NSOEEmoz5vPUByFtXuN20bdOqlA_vAtiDoYPMe-y8lOFkHUUDnsOU2wU" target="_blank" rel="noopener">HTML6 is Coming – What’s new in HTML6</a></h3><p>除了每年都在增加新語法的 JavaScript 之外，HTML6 也要準備橫空出世了！雖然還不曉得最後會出現哪些炫砲的功能，但是文中還是列出了一些在 HTML6 中有可能會出現的變化，及已經確定的新規範！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="5-Recommended-Tools-for-Optimizing-Performance-in-ReactJS"><a href="#5-Recommended-Tools-for-Optimizing-Performance-in-ReactJS" class="headerlink" title="5 Recommended Tools for Optimizing Performance in ReactJS"></a><a href="https://link.medium.com/2kckvbTS34" target="_blank" rel="noopener">5 Recommended Tools for Optimizing Performance in ReactJS</a></h3><p>網站的效能一直以來都是前端開發者關心的重點之一，這篇文章介紹了五個用來量測、最佳化 React 網站的效能的工具，包括 Profile 跟 why-did-you-render 等等，而且這篇用了超多圖，幾乎是手把手教你用這些工具，拯救網站的效能就靠這篇了</p><h3 id="Illustrated-Tales-of-Go-Runtime-Scheduler"><a href="#Illustrated-Tales-of-Go-Runtime-Scheduler" class="headerlink" title="Illustrated Tales of Go Runtime Scheduler"></a><a href="https://medium.com/@ankur_anand/illustrated-tales-of-go-runtime-scheduler-74809ef6d19b" target="_blank" rel="noopener">Illustrated Tales of Go Runtime Scheduler</a></h3><p>之前我讀到講解 Go runtime scheduler 的文章大部分都很生硬，因為這原本就不是個很容易講清楚的東西，但是這篇很特別，他整篇文章有將近二十張圖片，很多重要概念也都用圖解的方式呈現，想了解 Go scheduler 的人我非常推薦這篇</p><h3 id="What-is-SSH"><a href="#What-is-SSH" class="headerlink" title="What is SSH?"></a><a href="https://link.medium.com/DMuIDbyT34" target="_blank" rel="noopener">What is SSH?</a></h3><p>這篇的標題是「What is SSH?」，但他可不是在教你怎麼使用 ssh，而是在講 ssh 這個 protocol 是怎麼傳輸資料的、又是使用加密跟雜湊保證數據的安全性，如果你讀完這週的專欄想更深入了解他們的應用的話，推薦你可以讀讀這篇</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Like-console-log-But-Better"><a href="#Like-console-log-But-Better" class="headerlink" title="Like console.log But Better"></a><a href="https://dev.to/leirasanchez/like-console-log-but-better-nhm" target="_blank" rel="noopener">Like <code>console.log</code> But Better</a></h3><p>喜歡使用 Console.log，這樣還不夠，還有更好用的 <code>console.table</code>、<code>console.table()</code>、<code>console.asseet()</code>… 等等。今天選的這篇文章讓大家 debug 更有效率，眼睛不會看到拖窗。</p><h3 id="6-Months-of-Working-Remotely-Taught-Me-a-Thing-or-Ten"><a href="#6-Months-of-Working-Remotely-Taught-Me-a-Thing-or-Ten" class="headerlink" title="6 Months of Working Remotely Taught Me a Thing or Ten"></a><a href="https://dev.to/peteranglea/6-months-of-working-remotely-taught-me-a-thing-orten" target="_blank" rel="noopener">6 Months of Working Remotely Taught Me a Thing or Ten</a></h3><p>六個月的遠端工作告訴我的十件事：出去走走，過的像個人。給自己一個舒適又高效能的環境。還有最重要的一件事情，記得穿上褲子、剪好你的頭髮，用正式的態度迎接上班。</p><h3 id="How-to-Contribute-to-Open-Source-Software"><a href="#How-to-Contribute-to-Open-Source-Software" class="headerlink" title="How to Contribute to Open Source Software"></a><a href="https://dev.to/integerman/how-to-contribute-to-open-source-software-4pbl" target="_blank" rel="noopener">How to Contribute to Open Source Software</a></h3><p>如何貢獻 Open Source 原始碼？這篇文章帶給我們具體的建議。第一步是找到你想要貢獻的專案、選一個看起來不錯的 Issue，接著了解這個 Issue 的含意。Fork 與 Clone 這個專案、了解團隊的工作流程、 定位自己在專案中的位置。做出修正並且上測試，發 Pull Request，恭喜你，你以踏出貢獻開源專案的第一步 :D</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="默默地-Kubernetes-1-18-即將發佈了…"><a href="#默默地-Kubernetes-1-18-即將發佈了…" class="headerlink" title="默默地 Kubernetes 1.18 即將發佈了…"></a><a href="https://sysdig.com/blog/whats-new-kubernetes-1-18/" target="_blank" rel="noopener">默默地 Kubernetes 1.18 即將發佈了…</a></h3><p>跟 1.17 比起來這次 1.18 加新功能比較多一些，底下是 Sysdig 覺得比較值得關注的新增功能</p><ul><li><p>OIDC discovery for service account token issuer<br>讓 K8S Service Account Token 更好用一些，允許在 Cluster 外面的服務使用他來當作一般的 Authentication 方式，而且不會對 API Server 造成過大的負擔；為了達成這個功能，API Server 提供在 OpenID Connect (OIDC) Discovery Document 的資料中會再多出 Token 的 Public Key，如此一來，既有的 OIDC Authenticator 便可以使用這些 Key 來驗證 K8S Service Account Token</p></li><li><p>CertificateSigningRequest API<br>每個 K8S Cluster 都有一張 Root Certificate Authority 用來確保核心模組間溝通的資料傳輸安全性，現在他終於也可以幫忙準備 Certificate 給一般的服務使用</p></li><li><p>kubectl debug<br>kubectl 增加了 Debug Subcommand，這個 Command 可以產生暫時性的 Container 在已經運行的 Pod 中 (聽起來對於線上查找問題很有幫助)</p></li><li><p>Implement RuntimeClass on Windows<br>使用 RuntimeClass 來定義在 K8S Cluster 中不同種類的 Node，如此一來便可以利用它來指定 Pod 應該要被部署到哪一中 Node，這個功能在 1.12 就被提出來了，並且在 1.14 有做一些大改動，這次主要是加強對 Windows Node 的支援性，譬如指定 Pod 只可以部署到某個版本的 Windows Server</p></li><li><p>Support CRI-ContainerD on Windows<br>讓 Windows 可以使用 ContainerD 1.3 來當作 Container Runtime Interface (CRI)</p></li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 20 期 - YAML Engineer 的愛恨情仇</title>
      <link href="/2020/03/17/20-kubernetes-package-manager/"/>
      <url>/2020/03/17/20-kubernetes-package-manager/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Helm-3-踹踹看-—-YAML-Engineer-的愛恨情仇"><a href="#Helm-3-踹踹看-—-YAML-Engineer-的愛恨情仇" class="headerlink" title="Helm 3 踹踹看 — YAML Engineer 的愛恨情仇"></a><a href="https://medium.com/starbugs/helm-3-%E8%B8%B9%E8%B8%B9%E7%9C%8B-9e7c443fbd7a" target="_blank" rel="noopener">Helm 3 踹踹看 — YAML Engineer 的愛恨情仇</a></h3><p>雖然使用 K8S 會讓人變成充滿怨念的 YAML Engineer，不過我想這也是他可以變成主流 Container Orchestration 的原因之ㄧ，因為不管是開發或是維運人員，只要將運行在 K8S 內的應用服務使用 YAML 檔案格式定義好就可以一起使用，這一週想要分享如何把 Helm2 升級到 Helm3，除此之外也會介紹自己常用的 Helmfile</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Storybook-addons-與他的快樂夥伴"><a href="#Storybook-addons-與他的快樂夥伴" class="headerlink" title="Storybook | addons 與他的快樂夥伴"></a><a href="https://medium.com/%E6%89%8B%E5%AF%AB%E7%AD%86%E8%A8%98/storybook-addons-aa56601aed9a" target="_blank" rel="noopener">Storybook | addons 與他的快樂夥伴</a></h3><p>好不容易寫好了一個自己相當滿意的 Component，但又對再另外花時間描述該 Component 的使用方法感到疲憊，有時候又很難以文字表現出該 Component 的行為或操作方法，而 Storybook 拯救了這一切！它可以記錄你所建構的元件擁有什麼樣的功能，就像一本故事書一樣，描述著屬於該 Component 的故事：）</p><h3 id="The-Best-Developer-Communities-to-Join-in-2020"><a href="#The-Best-Developer-Communities-to-Join-in-2020" class="headerlink" title="The Best Developer Communities to Join in 2020"></a><a href="https://www.freecodecamp.org/news/best-developer-communities-to-be-part-of-in-2020/" target="_blank" rel="noopener">The Best Developer Communities to Join in 2020</a></h3><p>在 2020 年，開發者絕不能錯過這 20 個最讚的技術社群，一起吸收這世界都在用程式討論哪些事情！當然除了他們以外也別忘了還有 StarBugs 陪著大家 😉。</p><h3 id="YouTube-怎麼禁止手機使用者背景播放的？透過-Chrome-開發者工具-深度尋訪-YouTube-的前端程式碼"><a href="#YouTube-怎麼禁止手機使用者背景播放的？透過-Chrome-開發者工具-深度尋訪-YouTube-的前端程式碼" class="headerlink" title="YouTube 怎麼禁止手機使用者背景播放的？透過 Chrome 開發者工具 深度尋訪 YouTube 的前端程式碼"></a><a href="https://medium.com/@realdennis/youtube-%E6%80%8E%E9%BA%BC%E7%A6%81%E6%AD%A2%E6%89%8B%E6%A9%9F%E4%BD%BF%E7%94%A8%E8%80%85%E8%83%8C%E6%99%AF%E6%92%AD%E6%94%BE%E7%9A%84-%E6%B7%B1%E5%BA%A6%E5%B0%8B%E8%A8%AA-youtube-%E7%9A%84%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BC%8F%E7%A2%BC-2551e0941f75" target="_blank" rel="noopener">YouTube 怎麼禁止手機使用者背景播放的？透過 Chrome 開發者工具 深度尋訪 YouTube 的前端程式碼</a></h3><p>很喜歡作者說「YouTube 的 Front-end Engineer 也不是用魔法在寫 code ，所以勢必是透過 JavaScript 、 Browser 的 API 所賦予的能力」，任何在網頁上面看見的東西、酷炫的技巧等等，都有辦法被你創造出來（除了動畫啦 😂）！就從這篇文章開始當個偵探，以後看見喜歡的神奇功能時，就能試著瞧瞧他們是怎麼做到的！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Database-basics-writing-a-SQL-database-from-scratch-in-Go"><a href="#Database-basics-writing-a-SQL-database-from-scratch-in-Go" class="headerlink" title="Database basics: writing a SQL database from scratch in Go"></a><a href="http://notes.eatonphil.com/database-basics.html" target="_blank" rel="noopener">Database basics: writing a SQL database from scratch in Go</a></h3><p>這篇教你怎麼用 Go 從無到有寫出一個簡單的 DB，並且提供 <code>CREATE</code>、<code>SELECT</code> 跟 <code>INSERT</code> 指令，如果你對 DB 的內部構造有興趣的話，這篇文章很適合你讀</p><h3 id="Elixir-Style-Actors-in-Go"><a href="#Elixir-Style-Actors-in-Go" class="headerlink" title="Elixir-Style Actors in Go"></a><a href="https://preslav.me/2020/03/07/elixir-style-actors-in-golang/" target="_blank" rel="noopener">Elixir-Style Actors in Go</a></h3><p>Go 原本的併發模型是 CSP(Communicating Sequential Processes)，也就是透過輕量的 thread(goroutine) 來做到併發，thread 之間的溝通則是使用 channel。但透過把 goroutine 當成一個有狀態的 actor，並且以 channel 來傳遞 message，可以在 Go 裡面實現類似 Elixir 的 Actor model，挺有趣的</p><h3 id="Early-Impressions-of-Go-from-a-Rust-Programmer"><a href="#Early-Impressions-of-Go-from-a-Rust-Programmer" class="headerlink" title="Early Impressions of Go from a Rust Programmer"></a><a href="https://pingcap.com/blog/early-impressions-of-go-from-a-rust-programmer/" target="_blank" rel="noopener">Early Impressions of Go from a Rust Programmer</a></h3><p>這是一篇 Rust 開發者去學 Go 之後寫的心得文，也是我看過最平衡的比較文，Rust 跟 Go 其實可以是好朋友，不需要再比哪個語言比較好，找到適合自己的就可以了</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="你要的-React-面试知识点，都在这了"><a href="#你要的-React-面试知识点，都在这了" class="headerlink" title="你要的 React 面试知识点，都在这了"></a><a href="https://segmentfault.com/a/1190000019339210" target="_blank" rel="noopener">你要的 React 面试知识点，都在这了</a></h3><p>什麼是聲明式語言？聲明式語言是一種語言範式，它關注的是你要做什麼，而不是如何做。它表達邏輯而不顯式地定義步驟。這意味著我們需要根據邏輯的計算來聲明要顯示的組件。它沒有描述控制流步驟。聲明式語言的例子：HTML、SQL等</p><h3 id="React-Hooks-详解-【近-1W-字】-项目实战"><a href="#React-Hooks-详解-【近-1W-字】-项目实战" class="headerlink" title="React Hooks 详解 【近 1W 字】+ 项目实战"></a><a href="https://juejin.im/post/5dbbdbd5f265da4d4b5fe57d#heading-17" target="_blank" rel="noopener">React Hooks 详解 【近 1W 字】+ 项目实战</a></h3><p>什麼是 Hooks？React 一直都提倡使用函數元件，但是有時候需要使用 state 或者其他一些功能時，只能使用類元件，因為函數元件沒有實例，沒有生命週期函數，只有 Class 元件才有。Hooks 是 React 16.8 新增的特性，它可以讓你在不編寫 class 的情況下使用 state 以及其他的 React 特性。如果你在編寫函數元件並意識到需要向其添加一些 state，以前的做法是必須將其它轉化為 class。現在你可以直接在現有的函數元件中使用 Hooks。凡是 use 開頭的 React API 都是 Hooks。</p><h3 id="React源码解析-一-组件的实现与挂载"><a href="#React源码解析-一-组件的实现与挂载" class="headerlink" title="React源码解析(一):组件的实现与挂载"></a><a href="https://juejin.im/post/5983dfbcf265da3e2f7f32de" target="_blank" rel="noopener">React源码解析(一):组件的实现与挂载</a></h3><p>當我們能夠熟練運用React進行前端開發時，不免會對React內部機制產生濃厚的興趣。元件是什麼？是真的DOM嗎？生命週期函數的執行依據又是什麼呢？本篇，我們先來研究React組件的實現與掛載。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="來瞧瞧看-Uber-怎麼測試與開發內部的-Microservice"><a href="#來瞧瞧看-Uber-怎麼測試與開發內部的-Microservice" class="headerlink" title="來瞧瞧看 Uber 怎麼測試與開發內部的 Microservice"></a><a href="https://eng.uber.com/multitenancy-microservice-architecture" target="_blank" rel="noopener">來瞧瞧看 Uber 怎麼測試與開發內部的 Microservice</a></h3><p>Uber 工程師的績效評估來自於多快將新功能部署到 Production 環境中，在 Microservice 架構中搭配著快速地開發節奏要如何確保高 SLA 便成為不小的挑戰，而 Uber 解決問題的方式為貫徹 Multi-Tenant ！此文分享從測試，部署，開發時要注意哪些事情</p><ul><li><p><strong>測試的選擇與挑戰</strong></p><ul><li><p><strong>Parallel Testing</strong>：準備一個跟 Production 一樣的測試環境 (這應該是最常見的做法)</p><ul><li><strong>額外的建置成本</strong>：畢竟要準備另外一套完整的環境，資料庫，機器…等，都是要多燒錢的</li><li><strong>同步問題</strong>：如何確保測試環境跟 Production 環境一直保持一致性</li><li><strong>測試的不可靠性</strong>：譬如自己想要測試 Service A，但是 Service B 上了一包爛 Build 導致你不能測試…</li><li><strong>不確定的服務負載</strong>：在測試環境中作效能測試的結果要如何評估到真實環境中</li></ul></li><li><p><strong>Testing in Production</strong>：讓 Production 環境的服務具有 Multi-Tenant 的能力來允許接受來自測試和 Production 的請求</p><ul><li><strong>請求的導流</strong>：必須要可以根據請求是來自測試或是正式環境來做導流</li><li><strong>隔離性</strong>：測試和 Production 的資源要具有良好的隔離性，測試環境不能影響到正式環境</li></ul></li></ul></li><li><p><strong>部署的方式</strong></p><ul><li><p><strong>Canary Deployment</strong>：就算新版的 Build 已經過詳細的 Review 和 Testing，還是不想要一次讓所有的請求都直接使用新版本，而是在 Multi-Tenant 的架構下，將 Canary 視為一個獨立的 Tenant ，然後再根據請求的使用者屬性 (用路類型，產品類型…等) 把部分請求導流到 Canary 中</p></li><li><p><strong>Capture/Replay and Shadow Traffic</strong>：將 Production 環境中的正式流量給錄製擷取下來當作整合測試使用，其實就像上面提過的架構一樣，所以可以相對輕易地將 Production 環境的請求導流至想要測試的 Microservice</p></li></ul></li><li><p><strong>實作與開發</strong><br>在 Multi-Tenant Microservice 架構中，每個 Tenant 都被視為 First Class Object 然後根據各種靜態和請求中的動態資料來組成 Context，整個系統便是根據這些 Context 來決定請求該被導流到哪邊去</p><ul><li><p><strong>Tenancy Context</strong>：Tenancy Context 要在請求進入 Edge Gateway 時就被附加上去，而且在其生命週期中都不再會被改變</p></li><li><p><strong>Context Propagation</strong>：必須讓請求發出時同時傳遞 Context，而大部分的服務可能不需要查看 Context，但是某些可能會需要透過評估 Context 來決定要不要繞過某些業務邏輯，譬如某些跟金流相關的請求，假如是發生在測試請求時，就不需要真的跟銀行要求轉移資金之類的，而且請求的 Context 有時也需要被傳遞到靜態跟動態的資料物件中</p></li><li><p><strong>Tenancy-Based Routing</strong>：一旦系統有能力可以把請求 Tag 成某一個 Tenancy，那就可以決定要將其導流到測試環境，上面提到用來做整合測試的錄製流量，Canary Deployment…等，一般來說在服務的 egress 和 ingress 都可以把 Tenancy-Based Routing 給實作進去，而且在選擇解決方案還滿重要的，目前有一些 Service Mesh 的開源專案，例如 Envoy 或是 Istio 就可以考慮看看，因為可以利用 Side Car 的特性來幫忙導流請求</p></li><li><p><strong>Data Isolation</strong>：必須要有辦法根據不同的 Tenancy 將 Logging, Metrics, Storage, Message Queues, Caches 跟 Configuration 給切開來</p></li></ul></li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 19 期 - 用超萌的汪與喵來理解 HTTP Status Code！</title>
      <link href="/2020/03/10/19-dogs-and-cats-with-http-status-code/"/>
      <url>/2020/03/10/19-dogs-and-cats-with-http-status-code/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Kubernetes-教學-02-—在-Minikube-上部屬-Python-Flask-應用程式"><a href="#Kubernetes-教學-02-—在-Minikube-上部屬-Python-Flask-應用程式" class="headerlink" title="Kubernetes 教學 02 —在 Minikube 上部屬 Python Flask 應用程式"></a><a href="https://medium.com/starbugs/e7a3b9448f2c" target="_blank" rel="noopener">Kubernetes 教學 02 —在 Minikube 上部屬 Python Flask 應用程式</a></h3><p>在前一篇中我們弄懂了 K8S Cluster、Node、Pod 與 Container 的關係，並且在文章末段介紹了能夠與 kubectl -「能夠與 K8S 溝通的命令列工具」。這次我們用實際的操作，來認識容器化的實際過程，並把它部屬到本地的 Kubernetes 上面。</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Dear-New-Front-End-Developer"><a href="#Dear-New-Front-End-Developer" class="headerlink" title="Dear New Front-End Developer"></a><a href="https://dev.to/lasertuskey/dear-new-front-end-developer-2d2c" target="_blank" rel="noopener">Dear New Front-End Developer</a></h3><p>近年來常常看到許多人想轉職為前端工程師，也有一些人因為挫敗無法繼續學習而放棄了這條路，不過我覺得就像作者說的「In your first few years, it can feel like you will NEVER catch up to your knowledgable peers. It’s scary and hard and intimidating. But you WILL get there.」。</p><p>也許剛開始會感到困惑以及害怕接下來要學習的龐大知識，但是請相信努力是不會騙人的：）</p><h3 id="How-to-Implement-Redux-in-24-Lines-of-JavaScript"><a href="#How-to-Implement-Redux-in-24-Lines-of-JavaScript" class="headerlink" title="How to Implement Redux in 24 Lines of JavaScript"></a><a href="https://www.freecodecamp.org/news/redux-in-24-lines-of-code/" target="_blank" rel="noopener">How to Implement Redux in 24 Lines of JavaScript</a></h3><p>Redux 是很棒的全域狀態管理套件，如果你曾經看過 14 行解析 <a href="https://github.com/reduxjs/redux-thunk/blob/master/src/index.js" target="_blank" rel="noopener">redux-thunk</a>，那就不能錯過這篇用 24 行實現 Redux 的原理！</p><h3 id="A-modern-‘Hello-World’-program-needs-more-than-just-code"><a href="#A-modern-‘Hello-World’-program-needs-more-than-just-code" class="headerlink" title="A modern ‘Hello, World’ program needs more than just code"></a><a href="https://stackoverflow.blog/2020/03/05/a-modern-hello-world-program-needs-more-than-just-code/" target="_blank" rel="noopener">A modern ‘Hello, World’ program needs more than just code</a></h3><p>大家有想過 <code>Hello World</code> 的背後有什麼含義嗎？其實還真的沒有（很怕當上標題黨 😂），只是 <code>Hello World</code> 其實遠遠比你想得更多，要完成 <code>Hello World</code> 不只需要那幾行 Code，還有更多的是其實你已經把一個可執行的環境建立起來了 🙌</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="初學者學演算法｜談什麼是演算法和時間複雜度"><a href="#初學者學演算法｜談什麼是演算法和時間複雜度" class="headerlink" title="初學者學演算法｜談什麼是演算法和時間複雜度"></a><a href="https://link.medium.com/d2uILKXrG4" target="_blank" rel="noopener">初學者學演算法｜談什麼是演算法和時間複雜度</a></h3><p>初學者剛開始學習演算法時常會卡在時間複雜度，搞不懂 O(1) 跟 O(n) 的速度到底差多少。這篇用租電影的例子來講什麼是演算法還有複雜度，對演算法有興趣的初學者很建議看看</p><h3 id="Want-to-know-how-Deep-Learning-works-Here’s-a-quick-guide-for-everyone"><a href="#Want-to-know-how-Deep-Learning-works-Here’s-a-quick-guide-for-everyone" class="headerlink" title="Want to know how Deep Learning works? Here’s a quick guide for everyone."></a><a href="https://link.medium.com/K3XAI8WxG4" target="_blank" rel="noopener">Want to know how Deep Learning works? Here’s a quick guide for everyone.</a></h3><p>最近很紅的 Deep Learning(DL) 跟 Machine Learning(ML) 有什麼不一樣？跟 AI(Artificial Intelligence) 又是什麼關係？這篇科普文沒有太深的技術細節，只是簡單介紹 DL、neural network 跟 cost function 的概念，不管對 AI 有沒有興趣都可以看一看長知識</p><h3 id="Cheap-tricks-for-high-performance-Rust"><a href="#Cheap-tricks-for-high-performance-Rust" class="headerlink" title="Cheap tricks for high-performance Rust"></a><a href="https://deterministic.space/high-performance-rust.html" target="_blank" rel="noopener">Cheap tricks for high-performance Rust</a></h3><p>覺得你寫的 Rust 程式跑起來還不夠快嗎？這邊有幾個在 release 時可以設定的 option，包括最佳化 link time、降低 codegen unit 等等，雖然可能會讓原本就已經夠慢的編譯變得更慢，但也可以讓你編譯出來的程式跑得更快哦～</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="The-Complete-Guide-to-Status-Codes-for-Meaningful-ReST-APIs-Let’s-start"><a href="#The-Complete-Guide-to-Status-Codes-for-Meaningful-ReST-APIs-Let’s-start" class="headerlink" title="The Complete Guide to Status Codes for Meaningful ReST APIs - Let’s start!"></a><a href="https://dev.to/khaosdoctor/the-complete-guide-to-status-codes-for-meaningful-rest-apis-1-5c5" target="_blank" rel="noopener">The Complete Guide to Status Codes for Meaningful ReST APIs - Let’s start!</a></h3><p>用最生動的方式，教你如何使用適合的 Status Code 用在 REST API 上。內有貓咪與小狗的圖片，太萌、太好笑了，趕緊來學習！</p><h3 id="Coffee-chat-with-CTO"><a href="#Coffee-chat-with-CTO" class="headerlink" title="Coffee chat with CTO"></a><a href="https://medium.com/tds-note/coffee-with-cto-7c790b3aa59" target="_blank" rel="noopener">Coffee chat with CTO</a></h3><p>跟 CTO 喝杯咖啡。文章開始：昨天有機會和一位前輩喝咖啡，他目前是一間新加坡軟體開發公司的 CTO，和我分享了許多工作、學習上的想法與經驗。 在見面之前，我嘗試上網搜尋該公司的相關資料，發現幾乎找不到，而公司的網站首頁是個 console，應該說，長得像 console 的頁面，想要看到任何資料都需要下 command line 的指令，非常 geek（這裡我想表達的是稱讚的意味）</p><h3 id="A-Guide-for-Everyone-Who-Wants-to-Give-Technical-Presentations"><a href="#A-Guide-for-Everyone-Who-Wants-to-Give-Technical-Presentations" class="headerlink" title="A Guide for Everyone Who Wants to Give Technical Presentations"></a><a href="https://dev.to/azure/a-guide-for-everyone-who-wants-to-give-technical-presentations-53bo" target="_blank" rel="noopener">A Guide for Everyone Who Wants to Give Technical Presentations</a></h3><p>今天來分享一份乾貨，如何練習技術型的演講。為什麼要演講？如何選擇地方發表你的技術演講？如何做一個好的技術演講的投稿。時候到了，你上台了，該注意些什麼？很完整的文章系列，很棒。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Spotify-Open-Sources-Terraform-Module-for-Kubeflow-ML-Pipelines"><a href="#Spotify-Open-Sources-Terraform-Module-for-Kubeflow-ML-Pipelines" class="headerlink" title="Spotify Open-Sources Terraform Module for Kubeflow ML Pipelines"></a><a href="https://www.infoq.com/news/2020/03/spotify-terraform-kubeflow/" target="_blank" rel="noopener">Spotify Open-Sources Terraform Module for Kubeflow ML Pipelines</a></h3><p>Spotify 開源了他們用來運行 Ｍachine-Ｌearning Pipeline 的 Terraform，而且分享如何透過 Kubeflow 讓運算結果可以更快讓 Production 環境使用，甚至可以比以前多做七十幾倍的試驗@@</p><h3 id="The-10-Best-IP-Address-Management-Tools-for-Linux"><a href="#The-10-Best-IP-Address-Management-Tools-for-Linux" class="headerlink" title="The 10 Best IP Address Management Tools for Linux"></a><a href="https://www.ubuntupit.com/best-ip-address-management-tools-for-linux/" target="_blank" rel="noopener">The 10 Best IP Address Management Tools for Linux</a></h3><p>十個好用的 Linux IP 管理工具：<br>01. Solarwinds IPAM<br>02. ManageEngine OpUtils<br>03. GestióIP IPAM<br>04. Infoblox DDI<br>05. BlueCat DDI<br>06. IPplan<br>07. LightMesh IPAM<br>08. phpIPAM<br>09. NetBox<br>10. TeemIp</p><h3 id="How-We’re-Ab-using-Hashicorp’s-Consul-at-Grafana-Labs"><a href="#How-We’re-Ab-using-Hashicorp’s-Consul-at-Grafana-Labs" class="headerlink" title="How We’re (Ab)using Hashicorp’s Consul at Grafana Labs"></a><a href="https://grafana.com/blog/2020/02/11/how-were-abusing-hashicorps-consul-at-grafana-labs/" target="_blank" rel="noopener">How We’re (Ab)using Hashicorp’s Consul at Grafana Labs</a></h3><p>Cortex 利用 Consul 儲存 Key/Value 來分享資訊給其他的元件，一開始一切都運行的很美好，但是隨著使用量的上升，問題也接踵而來，來看看 Grafana 如何解決問題來讓效率提升，並且有更好的擴展性</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 18 期 - 學新技術霧裡看花，我整個就不爽了！</title>
      <link href="/2020/03/03/18-do-not-understand-the-principle-I-pisses-me-off/"/>
      <url>/2020/03/03/18-do-not-understand-the-principle-I-pisses-me-off/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="React-用實作了解-Server-Side-Rendering-的運作原理"><a href="#React-用實作了解-Server-Side-Rendering-的運作原理" class="headerlink" title="React | 用實作了解 Server-Side Rendering 的運作原理"></a><a href="https://medium.com/@GQSM/react-%E7%94%A8%E5%AF%A6%E4%BD%9C%E4%BA%86%E8%A7%A3-server-side-rendering-%E7%9A%84%E9%81%8B%E4%BD%9C%E5%8E%9F%E7%90%86-c6133d9fb30d" target="_blank" rel="noopener">React | 用實作了解 Server-Side Rendering 的運作原理</a></h3><p>SSR 一直都是我滿想要了解的技術之一，於是在過年的時候我就找了幾天來玩一下 React 的 SSR 框架 Next.js，一開始覺得很有趣，但做到一半的時候我整個就不爽了！難道說使用 SSR 就一定得靠 Next.js 嗎？這樣就算把教學文件全都看完，我也還是不曉得 SSR 是怎麼辦到的，我的 SSR 裡面沒有靈魂。所以就想說，不如再多花一點時間，重頭了解在 React 中如何實現 SSR！</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Need-a-hug-There’s-a-bot-for-that"><a href="#Need-a-hug-There’s-a-bot-for-that" class="headerlink" title="Need a hug? There’s a bot for that!"></a><a href="https://dev.to/yechielk/need-a-hug-there-s-a-bot-for-that-4bim" target="_blank" rel="noopener">Need a hug? There’s a bot for that!</a></h3><p>Side Project 不需要是能夠拯救世界或毀天滅地的想法，暖暖的一個擁抱，也會是很棒的 Side Project：）</p><h3 id="4-attributes-of-a-good-programmer"><a href="#4-attributes-of-a-good-programmer" class="headerlink" title="4 attributes of a good programmer"></a><a href="https://anjandutta.com/attributes-of-a-good-programmer/?fbclid=IwAR23iVILbEdspFS-xJdaWNuGbJ099oaF8c8diki0HHIDuPjwrZQr7-Aa8Ho" target="_blank" rel="noopener">4 attributes of a good programmer</a></h3><p>與其說這是優秀的工程師才有的四個屬性，不如說這是為了成為優秀的工程師我們該學習的，這四個方法分別對應了一些開發上的問題，推薦花一點時間閱讀它！</p><h3 id="How-to-become-super-saiyan-with-code-用程式變成超級賽亞人）"><a href="#How-to-become-super-saiyan-with-code-用程式變成超級賽亞人）" class="headerlink" title="How to become super saiyan with code? (用程式變成超級賽亞人）"></a><a href="https://www.youtube.com/watch?v=QUgSKepY0Us&fbclid=IwAR0cGEh-fGn-bgYNvyv-_SQk3uChK25tC_zIZmznQzrArmFm98pob5K0SgY" target="_blank" rel="noopener">How to become super saiyan with code? (用程式變成超級賽亞人）</a></h3><p>雖然這則推薦是影片，但拜託求求你們一定要看一下。一開始會覺得很搞笑，但作者在影片最後講到說「也許我們小時候都夢想過某些事情，然後長大了聽到只會覺得是瘋了，但我們仍然可以用其它方式達成不可能的夢想。也許還是會有人說你瘋了，但至少你享受這個過程」，為什麼可以那麼平凡地說出那麼感動的話 😭</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="如何学会所有的编程语言？"><a href="#如何学会所有的编程语言？" class="headerlink" title="如何学会所有的编程语言？"></a><a href="https://www.infoq.cn/article/8STbPDW9M9xVGVc2eVIP" target="_blank" rel="noopener">如何学会所有的编程语言？</a></h3><p>文中有一段以汽車來比喻程式語言我覺得很妙：「這世界上有很多牌子的車：有些車小但動力十足，有些車則是笨重而且慢，不同牌子的車有不同的駕駛體驗。但如果你知道怎麼開其中一種車，也就知道怎麼開其他大部分的車，儘管他們的牌子不一樣」，所以重點不在於你會哪些語言的語法，而是你有沒有掌握語法背後的概念，並且能快速學習新的語言</p><h3 id="HTTPS-原理分析——带着疑问层层深入"><a href="#HTTPS-原理分析——带着疑问层层深入" class="headerlink" title="HTTPS 原理分析——带着疑问层层深入"></a><a href="https://blog.leapmie.com/archives/418/" target="_blank" rel="noopener">HTTPS 原理分析——带着疑问层层深入</a></h3><p>這篇 HTTPS 原理有別於大部分教科書式的教學，他用 QA 的方式讓你知道為什麼 HTTPS 要設計成這個樣子，理解之後就不需要再硬背</p><h3 id="Rust-parallelism-for-non-C-C-developers"><a href="#Rust-parallelism-for-non-C-C-developers" class="headerlink" title="Rust parallelism for non-C/C++ developers"></a><a href="https://link.medium.com/tqTM0lh2u4" target="_blank" rel="noopener">Rust parallelism for non-C/C++ developers</a></h3><p>因為 Rust 有滿多概念如 pointer、reference、namespace 都跟 C/C++ 很像，所以寫過 C/C++ 的人會比較容易上手 Rust，雖然如此，其他語言的開發者也不用太擔心，這邊就有一篇寫給非 C/C++ 開發者的指南，教你怎麼在 Rust 中寫出 parallel 的程式</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="待在-LINE-Fukuoka-兩年間的二十七歲"><a href="#待在-LINE-Fukuoka-兩年間的二十七歲" class="headerlink" title="待在 LINE Fukuoka 兩年間的二十七歲"></a><a href="https://medium.com/the-bayesian-trap/line-fukuoka-front-end-engineer-3ee361f7137c" target="_blank" rel="noopener">待在 LINE Fukuoka 兩年間的二十七歲</a></h3><p>本週推薦文章，Denny 分享 LINE 福岡的生活。為什麼要來 LINE 福岡？面試該準備和注意什麼？剛到日本時的不適應，辦公室內的一天，辦公室以外的生活，來日本的優缺點 … 等日本職涯的體驗分享。</p><h3 id="Chrome-80-後針對第三方-Cookie-的規則調整-default-SameSite-Lax"><a href="#Chrome-80-後針對第三方-Cookie-的規則調整-default-SameSite-Lax" class="headerlink" title="Chrome 80 後針對第三方 Cookie 的規則調整 (default SameSite=Lax)"></a><a href="https://medium.com/@azure820529/chrome-80-%E5%BE%8C%E9%87%9D%E5%B0%8D%E7%AC%AC%E4%B8%89%E6%96%B9-cookie-%E7%9A%84%E8%A6%8F%E5%89%87%E8%AA%BF%E6%95%B4-default-samesite-lax-aaba0bc785a3" target="_blank" rel="noopener">Chrome 80 後針對第三方 Cookie 的規則調整 (default SameSite=Lax)</a></h3><p>TL;DR: Chrome 80 (released in Feb, 2020) 將針對 cookie 的發送機制有一些新的調整，將影響現有網站上仰賴第三方 cookie 實作的功能與使用者體驗。本篇文章將解釋規則調整的技術細節(SameSite)，造成的影響以及建議的修正方向。 by Ian Hung.</p><h3 id="Myth-of-Structured-Data-—-description"><a href="#Myth-of-Structured-Data-—-description" class="headerlink" title="Myth of Structured Data — description"></a><a href="https://medium.com/@meistudio/myth-of-structured-data-description-ae3a3163ca0" target="_blank" rel="noopener">Myth of Structured Data — description</a></h3><p>Paul 大師帶給我們精采的文章，如何透過 Structured Data 的注入，讓 Google 搜尋結果變得多采多姿。不僅大大的增加搜尋結果的可讀性，更讓 使用者可以透過這些資訊的呈現可以快速的了解該搜尋結果是否為自己所需要的資訊。對於整體的搜尋體驗來說有著絕對的加分效果。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="13-Web-Design-Trends-to-Watch-in-2020"><a href="#13-Web-Design-Trends-to-Watch-in-2020" class="headerlink" title="13 Web Design Trends to Watch in 2020"></a><a href="https://www.shopify.com/partners/blog/web-design-trends" target="_blank" rel="noopener">13 Web Design Trends to Watch in 2020</a></h3><p>電子商務平台 Shopify 覺得在 2020 的 Web Design 會有底下 13 個趨勢，不知道在這短短的一年內會被他們猜中幾個呢？！</p><ol><li>Algorithmic design</li><li>Speculative design</li><li>Machine learning in the browser</li><li>Make websites respond to the user’s situation</li><li>Design for sustainability</li><li>Design for immediacy and the rise of user research</li><li>Accessibility goes mainstream</li><li>Design with cognitive differences in mind</li><li>Privacy protection</li><li>Less JavaScript</li><li>Static sites</li><li>Headless architecture</li><li>Interaction with big tech</li></ol><h3 id="Terrier-An-Open-Source-Tool-for-Identifying-and-Analyzing-Container-and-Image-Components"><a href="#Terrier-An-Open-Source-Tool-for-Identifying-and-Analyzing-Container-and-Image-Components" class="headerlink" title="Terrier: An Open-Source Tool for Identifying and Analyzing Container and Image Components"></a><a href="https://blog.heroku.com/terrier-open-source-identifying-analyzing-containers" target="_blank" rel="noopener">Terrier: An Open-Source Tool for Identifying and Analyzing Container and Image Components</a></h3><p><strong>Ｈeroku</strong> 在日前釋出針對 Container 的弱掃工具 <strong>Terrier</strong>，他可以識別出 OCI Image 中的特定檔案，藉此來查找有問題的檔案，除此之外同時也能找出運行中 Container 有問題的檔案，並且可以將其和 CI/CD Pipeline 整合在一起，如此便可以在 Container 一開始建置的時候就發現有問題的地方，避免供應鏈式的攻擊手法</p><h3 id="EC2-Instances-2-0-Time-to-Update-Your-Toolbox"><a href="#EC2-Instances-2-0-Time-to-Update-Your-Toolbox" class="headerlink" title="EC2 Instances 2.0 - Time to Update Your Toolbox"></a><a href="https://cloudonaut.io/ec2-instances-2-0-time-to-update-your-toolbox/" target="_blank" rel="noopener">EC2 Instances 2.0 - Time to Update Your Toolbox</a></h3><p>AWS EC2 這個服務已經陪伴 IT 人度過 13 個年頭了，在這期間中，他也一直在進化著，這篇文章想要分享的是如何管理 Mutable 的 EC2 Instance，提到的重點有…</p><ul><li>Patching</li><li>Backup and Restore</li><li>Remote Access</li><li>Software Deployments</li><li>Monitoring</li><li>Logs</li><li>Single Point of Failure</li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 17 期 - 跑了 git blame 才發現爛 code 是自己寫的</title>
      <link href="/2020/02/27/17-bad-code-was-written-by-myself/"/>
      <url>/2020/02/27/17-bad-code-was-written-by-myself/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="下面一位～以-Rust-為例，聊聊-Iterator-Pattern"><a href="#下面一位～以-Rust-為例，聊聊-Iterator-Pattern" class="headerlink" title="下面一位～以 Rust 為例，聊聊 Iterator Pattern"></a><a href="https://medium.com/starbugs/talk-about-iterator-pattern-in-rust-33ed822bdea7" target="_blank" rel="noopener">下面一位～以 Rust 為例，聊聊 Iterator Pattern</a></h3><p>在適當的時機使用對的設計模式，可以讓你的程式碼更簡潔易懂。為了讓大家寫出更好的 code，不要只是會動就好，本週的專欄要來講講什麼是 Iterator Pattern。雖然是以 Rust 為例，但範例都很簡單，沒寫過 Rust 也可以讀</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="25-Free-Productivity-Tools-for-Developers"><a href="#25-Free-Productivity-Tools-for-Developers" class="headerlink" title="25+ Free Productivity Tools for Developers"></a><a href="https://dev.to/creativetim_official/25-free-productivity-tools-for-developers-3dif" target="_blank" rel="noopener">25+ Free Productivity Tools for Developers</a></h3><p>在這個數據大轟炸的時代，每次在找問題的時候，都會不小心被某些新的技術或名詞所吸引，然後又花費了一大堆時間XD，因此了解自己在工作上的專注力非常重要，而文章中就介紹了 25 個免費的生產力工具可以 support，選對工具還能讓你具有更好的自我管理能力。</p><h3 id="How-to-Improve-Your-Programming-Skills"><a href="#How-to-Improve-Your-Programming-Skills" class="headerlink" title="How to Improve Your Programming Skills?"></a><a href="https://www.decipherzone.com/blog-detail/how-improve-programming-skills" target="_blank" rel="noopener">How to Improve Your Programming Skills?</a></h3><p>該怎麼讓自己在程式之路中不斷精進，變成更好的工程師？文中提供了 15 個方式，可以使我們持續進步 😃。</p><h3 id="Trying-to-find-your-first-dev-job-Here’s-what-employers-are-actually-looking-for"><a href="#Trying-to-find-your-first-dev-job-Here’s-what-employers-are-actually-looking-for" class="headerlink" title="Trying to find your first dev job? Here’s what employers are actually looking for."></a><a href="https://stackoverflow.blog/2020/02/18/trying-to-find-your-first-dev-job-heres-what-employers-are-actually-looking-for/" target="_blank" rel="noopener">Trying to find your first dev job? Here’s what employers are actually looking for.</a></h3><p>在面試的時候，雇主看著你到底都在想什麼事情？我該是什麼樣子才有機會獲得這次的機會？本篇文章的作者是 <a href="https://flatironschool.com/?utm_source=coursereport&utm_medium=schoolpage" target="_blank" rel="noopener">Flatiron School</a> 的創辦者，在過去的日子他已經協助了 10,000 以上的人面試就業了！也在文章中指出了招聘團隊想在你身上弄懂的 3 件事情，一起看看他怎麼說！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="從-V8-bytecode-探討-let-與-var-的效能問題"><a href="#從-V8-bytecode-探討-let-與-var-的效能問題" class="headerlink" title="從 V8 bytecode 探討 let 與 var 的效能問題"></a><a href="https://blog.huli.tw/2020/02/20/let-vs-var-bytecode/" target="_blank" rel="noopener">從 V8 bytecode 探討 let 與 var 的效能問題</a></h3><p>這篇是隔壁 TechBridge 週刊的本週專欄，在看到這篇之前我從沒想過可以看到 JS 轉出來的 bytecode，也不知道 let 跟 var 到底是怎麼實作的，雖然看完之後不見得會讓你 JS 寫得更好，但這種追根究底的精神還是很令人敬佩！</p><h3 id="Docker-anti-patterns"><a href="#Docker-anti-patterns" class="headerlink" title="Docker anti-patterns"></a><a href="https://codefresh.io/containers/docker-anti-patterns/" target="_blank" rel="noopener">Docker anti-patterns</a></h3><p>你是不是曾經把 docker 當成 VM 在用呢？又或是直接把 secret 跟設定檔 hardcode 在 docker image 裡面？這篇文列出了十個使用 docker 的 anti-pattern，並且告訴你應該要怎麼改會比較好</p><h3 id="A-guide-to-understanding-database-scaling-patterns"><a href="#A-guide-to-understanding-database-scaling-patterns" class="headerlink" title="A guide to understanding database scaling patterns"></a><a href="https://www.freecodecamp.org/news/understanding-database-scaling-patterns/" target="_blank" rel="noopener">A guide to understanding database scaling patterns</a></h3><p>網路上有很多文章都是在講如何擴展 (scaling) 你的資料庫，但大多沒有情境跟範例，所以看完之後還是不知道該怎麼從眾多方法中選出一個。但這篇文章正好相反，他裡面講了好幾個擴展的 pattern 之外還舉了時間的例子，並告訴你各個方法有什麼優缺點</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="JavaScript-Ruby-and-C-are-not-call-by-reference"><a href="#JavaScript-Ruby-and-C-are-not-call-by-reference" class="headerlink" title="JavaScript, Ruby and C are not call by reference"></a><a href="https://dev.to/xpbytes/javascript-ruby-and-c-are-not-call-by-reference-23f7" target="_blank" rel="noopener">JavaScript, Ruby and C are not call by reference</a></h3><p>這次來比較 javascript、Ruby 和 C 三個語言是不是 call by reference。更加釐清 call by reference、call by value 與 call by sharing 的不同之處。</p><h3 id="Idiomatic-Ruby-writing-beautiful-code"><a href="#Idiomatic-Ruby-writing-beautiful-code" class="headerlink" title="Idiomatic Ruby: writing beautiful code"></a><a href="https://dev.to/teekay/idiomatic-ruby-writing-beautiful-code-56ef" target="_blank" rel="noopener">Idiomatic Ruby: writing beautiful code</a></h3><p>來看看經典的、慣用的 Ruby 寫法，如何寫出漂亮的程式碼，如果你是 Rubyist 會喜歡這篇文章的:D如果你是 JS 開發者，也有許多 Library 寫法很相似，可交互參考。</p><h3 id="Ruby-on-Rails-API-with-Vue-js"><a href="#Ruby-on-Rails-API-with-Vue-js" class="headerlink" title="Ruby on Rails API with Vue.js"></a><a href="https://dev.to/justalever/ruby-on-rails-api-with-vue-js-46k8" target="_blank" rel="noopener">Ruby on Rails API with Vue.js</a></h3><p>Ruby on Rails 如何跟 Vue.js 做結合，這篇很全面、範例豐富。如果你有前後端分離的需要，這篇的邏輯滿清晰，適合入門。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="到底要把全部的應用服務放到少數幾個-Kubernetes-Cluster-中，還是要分成很多個呢？！"><a href="#到底要把全部的應用服務放到少數幾個-Kubernetes-Cluster-中，還是要分成很多個呢？！" class="headerlink" title="到底要把全部的應用服務放到少數幾個 Kubernetes Cluster 中，還是要分成很多個呢？！"></a><a href="https://learnk8s.io/how-many-clusters" target="_blank" rel="noopener">到底要把全部的應用服務放到少數幾個 Kubernetes Cluster 中，還是要分成很多個呢？！</a></h3><p>假如有在負責建構 K8S 環境的人應該總是會遭遇到 Cluster 要如何安排的問題，例如：該有多少的 Cluster 才夠用？Cluster 要多大的才夠撐得住應用服務？每個 Cluster 裡面該含有哪一些應用服務？這篇分享文章覺得可能會有以下的分法，並提出 Pros and Cons 讓大家在思考的時候比較有個概念</p><p>💡 一個很大的 Cluster 給大家一起用<br>👍 資源最有效利用<br>👍 便宜<br>👍 只需要管理一個 Cluster<br>👎 單點失敗<br>👎 沒有隔離性 = 不安全<br>👎 自己的應用程式會被其他人影響到<br>👎 要管理很多使用者<br>👎 單一 Cluster 不可能無限擴張</p><p>💡 根據環境 X 應用服務拆分成很多小 Cluster<br>👍 假如 Cluster 壞掉了，影響的範圍有限<br>👍 隔離性佳 = 安全<br>👍 單一 Cluster 管理較少的使用者<br>👎 資源利用率低落<br>👎 成本高<br>👎 要管理多個 Cluster</p><p>💡 把單一個應用服務的所有環境塞進一個 Cluster<br>👍 Cluster 可以根據應用服務去特製化<br>👎 開發環境的應用服務可能會影響到 Production 環境</p><p>💡 每個開發環境只有一個 Cluster：<br>👍 Production 環境不會被其他環境影響到<br>👍 Cluster 可以根據環境去做特製化<br>👍 Production 可以嚴格限縮存取權限<br>👎 應用服務間的隔離性差造成互相影響<br>👎 比較沒有辦法幫特定應用服務做 Cluster 層級的特製化</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 16 期 - 這麼好睡的天氣，要是服務出問題我也睡死了該怎麼辦？！</title>
      <link href="/2020/02/18/16-take-care-monitoring-system/"/>
      <url>/2020/02/18/16-take-care-monitoring-system/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="照顧-Prometheus-的生活起居-一段把屎把尿的故事"><a href="#照顧-Prometheus-的生活起居-一段把屎把尿的故事" class="headerlink" title="照顧 Prometheus 的生活起居 - 一段把屎把尿的故事"></a><a href="https://medium.com/starbugs/%E7%85%A7%E9%A1%A7-prometheus-%E7%9A%84%E7%94%9F%E6%B4%BB%E8%B5%B7%E5%B1%85-e2d7a8997b86" target="_blank" rel="noopener">照顧 Prometheus 的生活起居 - 一段把屎把尿的故事</a></h3><p>本週專欄想要來探討每天維運 Prometheus 的小小經驗，到底該怎麼好好地照顧 Prometheus，才能讓系統發生不預期的事件時，他會乖乖地發出通知呢？在此篇分享文章中會談到的主題如下：</p><ul><li>Prometheus Storage &amp; Scalability</li><li>Incident Management</li><li>Architecture in Production Environment</li><li>Who Monitor Prometheus?</li></ul><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="UI-UX｜下次主管問你為什麼-UI-要用圓角的時候"><a href="#UI-UX｜下次主管問你為什麼-UI-要用圓角的時候" class="headerlink" title="UI/UX｜下次主管問你為什麼 UI 要用圓角的時候"></a><a href="https://medium.com/as-a-product-designer/ui-ux-%E4%B8%8B%E6%AC%A1%E4%B8%BB%E7%AE%A1%E5%95%8F%E4%BD%A0%E7%82%BA%E4%BB%80%E9%BA%BC-ui-%E8%A6%81%E7%94%A8%E5%9C%93%E8%A7%92%E7%9A%84%E6%99%82%E5%80%99-a5bf52cfdc1c" target="_blank" rel="noopener">UI/UX｜下次主管問你為什麼 UI 要用圓角的時候</a></h3><p>各位有想過為什麼前端框架，包含 Bootstrap、Material-ui 或是 Antd 通常都將 Button 或是 Input 等角角都是設計圓的嗎？身為一個前端設計師或工程師，如果從來沒想過這件事情，那趕緊朝聖這篇文章，一起來看看到底是什麼原理，讓大家都這麼做 🙌</p><h3 id="I-Built-a-Game-in-Vanilla-JS-And-I-Don’t-Know-How-to-Code-3-Months-Ago"><a href="#I-Built-a-Game-in-Vanilla-JS-And-I-Don’t-Know-How-to-Code-3-Months-Ago" class="headerlink" title="I Built a Game in Vanilla JS And I Don’t Know How to Code 3 Months Ago"></a><a href="https://hackernoon.com/i-built-a-game-in-vanilla-js-and-i-dont-know-how-to-code-3-months-ago-pi3136ik" target="_blank" rel="noopener">I Built a Game in Vanilla JS And I Don’t Know How to Code 3 Months Ago</a></h3><p>寫程式最大的成就感除了能夠幫助到人外，就是經從無到有，一步步將他們創造出來的這個過程，其實自己身為前端工程師在切版時一直有這種感覺，每一次加上一些 Code 都能夠讓整個網站變得更完整或是特別，這種手作的感動（好文青XD）就如同作者最後提到的「In the past, I created a few webpages, but all of them where using Wordpress and the sensation is not the same. This is a thousand times more exciting!」，建議大家可以看看這篇文章，找回初學的感動XD</p><h3 id="10-Tips-For-Writing-Better-Tests"><a href="#10-Tips-For-Writing-Better-Tests" class="headerlink" title="10 Tips For Writing Better Tests"></a><a href="https://dev.to/maxpou/10-tips-for-writing-better-tests-95j" target="_blank" rel="noopener">10 Tips For Writing Better Tests</a></h3><p>如果有玩過單元測試，並覺得測試在前端非常非常難寫且容易出錯，那也許是不小心踩到單元測試的誤區了，文章中講解了 10 個可以讓單元測試變得更好的技巧！更棒的是作者在每一個技巧都有加上為什麼要這麼做，文章也不會很長，非常值得一看！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="淺談-DevOps-心得及應用工具"><a href="#淺談-DevOps-心得及應用工具" class="headerlink" title="淺談 DevOps 心得及應用工具"></a><a href="https://link.medium.com/DYBJtqrz73" target="_blank" rel="noopener">淺談 DevOps 心得及應用工具</a></h3><p>近幾年來 DevOps 這個領域越來越紅，但我們為什麼需要 DevOps？知道目的之後又該如何達到？這篇文章把這兩個問題回答得很清楚，不管你是已經熟悉 DevOps、想入門或是根本沒聽過 DevOps，這篇文章都很適合你讀</p><h3 id="Gradually-using-TypeScript-in-Your-React-Project"><a href="#Gradually-using-TypeScript-in-Your-React-Project" class="headerlink" title="Gradually using TypeScript in Your React Project"></a><a href="https://link.medium.com/3Ri6xFCy73" target="_blank" rel="noopener">Gradually using TypeScript in Your React Project</a></h3><p>跟 JavaScript 比起來，強型別的 TypeScript 可以幫你找出型別寫錯的低級錯誤，而且也提供 interface 跟 module 語法讓你更好設計大型應用，所以現在很多前端應用也開始用 TypeScript 寫。如果你最近正好想把 JS 寫的 React 專案換到 TS，可以參考看看這篇文章的做法</p><h3 id="Building-a-Continuous-Integration-amp-Deployment-Pipeline-Using-Docker"><a href="#Building-a-Continuous-Integration-amp-Deployment-Pipeline-Using-Docker" class="headerlink" title="Building a Continuous Integration &amp; Deployment Pipeline Using Docker"></a><a href="https://www.taniarascia.com/continuous-integration-pipeline-docker/" target="_blank" rel="noopener">Building a Continuous Integration &amp; Deployment Pipeline Using Docker</a></h3><p>雲端平台除了 AWS 跟 GCP 之外，最近也越來越多人開始用 DigitalOcean，這篇文章就教你怎麼從零開始建一個 pipeline，讓你的應用經過 TravisCI 測試之後自動部署到 DigitalOcean，如果你也是 DO 的使用者的話可以跟著做做看</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Netflix-Android-應用程式現可用AV1格式串流影片"><a href="#Netflix-Android-應用程式現可用AV1格式串流影片" class="headerlink" title="Netflix Android 應用程式現可用AV1格式串流影片"></a><a href="https://www.ithome.com.tw/news/135689" target="_blank" rel="noopener">Netflix Android 應用程式現可用AV1格式串流影片</a></h3><p>Netflix 現在於 Android 應用程式，開始以 AV1 格式串流影片，AV1 是一個由 Netflix、Google、Apple、Facebook 和 Microsoft 等開放媒體聯盟所發佈的開放格式，追求的更少的頻寬跟更告的品質。AV1 壓縮率提高了 20%，更適合行動裝置。</p><h3 id="CS50’s-Web-Programming-with-Python-and-JavaScript-2020-—-Review-JavaScript-SPA-and-CSS-animation"><a href="#CS50’s-Web-Programming-with-Python-and-JavaScript-2020-—-Review-JavaScript-SPA-and-CSS-animation" class="headerlink" title="CS50’s Web Programming with Python and JavaScript 2020 — Review JavaScript, SPA, and CSS animation"></a><a href="https://medium.com/a-layman/cs50s-web-programming-with-python-and-javascript-2020-review-javascript-spa-and-css-animation-7f098fdf7419" target="_blank" rel="noopener">CS50’s Web Programming with Python and JavaScript 2020 — Review JavaScript, SPA, and CSS animation</a></h3><p>CS50 網路程式課程 2020 版由 Python + JS 所組成，看了一下，這篇是筆記 JS、SPA、與 CSS 動畫的筆記，光是 JS 就講的好詳細好多基礎知識，好像應該要來上一下。</p><h3 id="Closing-the-Kubernetes-Skills-Gap-with-Developer-First-Learning"><a href="#Closing-the-Kubernetes-Skills-Gap-with-Developer-First-Learning" class="headerlink" title="Closing the Kubernetes Skills Gap with Developer-First Learning"></a><a href="https://dev.to/digitalocean/closing-the-kubernetes-skills-gap-with-developer-first-learning-5aa7" target="_blank" rel="noopener">Closing the Kubernetes Skills Gap with Developer-First Learning</a></h3><p>你該如何開始學習 Kubernetes 呢？對於 2018 年開始提供 Kubernetes 的產品的 DigitalOcean，這是必要的。在 DigitalOcean 的<a href="https://www.digitalocean.com/currents/june-2018/" target="_blank" rel="noopener">研究報告</a>中，2018 年用 Kubernetes 的開發者，只佔使用容器開發者的 42% 。因此 DO 想要提供更直覺的教學與社群，讓大家快速上手 Kubernetes。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Prometheus-很棒，但是…"><a href="#Prometheus-很棒，但是…" class="headerlink" title="Prometheus 很棒，但是…"></a><a href="https://timber.io/blog/promql-for-humans/" target="_blank" rel="noopener">Prometheus 很棒，但是…</a></h3><p><strong>PromQL</strong> 沒有那麼地輕易上手，所以最近官方又特別發文來介紹一下，包含 Data Types，Labels, Metric Types, Functions 跟 Operators，不過看一看，還是覺得 Timber 在 PromQL for Humans 文內的 PromQL Cheatsheet 最明瞭易懂！分享給正準備探索 Prometheus 的人！最後也在順便加碼由社群大大 <a href="https://www.facebook.com/kkcliu" target="_blank" rel="noopener"><strong>Kakashi Liu</strong></a> 所分享有關於 <a href="https://awesome-prometheus-alerts.grep.to/rules.html" target="_blank" rel="noopener"><strong>Alert Rule 的好文</strong></a></p><h3 id="連-Kubernetes-Cluster-的-Provision-都直接採用-GitOps-Pattern-了！"><a href="#連-Kubernetes-Cluster-的-Provision-都直接採用-GitOps-Pattern-了！" class="headerlink" title="連 Kubernetes Cluster 的 Provision 都直接採用 GitOps Pattern 了！"></a><a href="https://www.infoq.com/news/2020/02/wksctl-kubernetes-gitops/" target="_blank" rel="noopener">連 Kubernetes Cluster 的 Provision 都直接採用 GitOps Pattern 了！</a></h3><ul><li><p><strong>WKSctl</strong> 為 <strong>Weaveworks</strong> 的新開源專案，透過 SSH 來幫忙設定跟管理 K8S Cluster 還有其各種 Add-Ons，他把 Cluster API (#CAPI) 與 GitOps 結合再起，可以將 K8S Cluster 的各種組態以 YAML 檔案來定義，然後 WKSctl 就可以根據每次的 Git Push 來幫忙設定 K8S Cluster，既然已經把一切都定義成 YAML 檔案了，所以也可以很輕鬆的隨時重複建立新的 K8S Cluster (自己感覺有點像是 #Ansible 在 Provision 機器一樣XD)</p></li><li><p>WKSctl 是 <a href="https://cluster-api.sigs.k8s.io/" target="_blank" rel="noopener"><strong>CAPI</strong></a> 的開源實作專案，而不是一種 K8S Distribution，他也不會幫忙 Provision 機器，他只負責安裝和設定 K8S Cluster；WKSctl 一開始會先透過 CLI 建立 K8S Cluster 中的第一個節點，接著安裝 WKSctl Controller 來幫忙搞定剩下的 Master 和 Worker 節點</p></li><li><p>達成 GitOps 的方式主要是靠兩個 Controller 1) <strong>Flux Controller</strong> 會一直去監看 Git Repository，一旦有任何的變化，就會將其同步到 ETCD 中 2) WKSctl Controller 負責監看 ETCD 的狀況有任何變化時幫忙施行，其實就像是 K8S 裡面 Replication Controller 的行為一樣</p></li><li><p>為什麼會有這個工具的誕生，是因為其實有很多測試或是開發環境的 K8S Cluster 需要隨時被建立起來，但用完又需要馬上被砍掉；除此之外，他們看到很多的大企業客戶，因為權限和安全考量，都不傾向只使用一個大 K8S Cluster，而是根據不同的需求開很多比較小的 K8S Cluster，而且要水平擴展多個 Cluster，比建立一個大 Cluster 要來得簡單許多</p></li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 15 期 - 值得紀念的時刻，全台最大的口罩駭客松，Respect!</title>
      <link href="/2020/02/11/15-mask-hackathon/"/>
      <url>/2020/02/11/15-mask-hackathon/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Kubernetes-教學-一-概念與架構-為什麼該學-K8S-？Pod？Node？搞的我好亂呀"><a href="#Kubernetes-教學-一-概念與架構-為什麼該學-K8S-？Pod？Node？搞的我好亂呀" class="headerlink" title="Kubernetes 教學 (一) 概念與架構 - 為什麼該學 K8S ？Pod？Node？搞的我好亂呀"></a><a href="https://medium.com/starbugs/kubernetes-%E6%95%99%E5%AD%B8-%E4%B8%80-%E6%A6%82%E5%BF%B5%E8%88%87%E6%9E%B6%E6%A7%8B-954caa9b1558" target="_blank" rel="noopener">Kubernetes 教學 (一) 概念與架構 - 為什麼該學 K8S ？Pod？Node？搞的我好亂呀</a></h3><p>為什麼該用 Kubernetes? 使用 K8S 的概念可以有哪些好處？真的值得我們一用嘛？好，我們知道為什麼要用了，那接下來，開從哪裡開始，我們從 K8S 的架構開始認識，了解一些重要名詞，開始我們的 K8S 之旅。</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Improve-Your-Algorithms-with-this-Simple-Equation"><a href="#Improve-Your-Algorithms-with-this-Simple-Equation" class="headerlink" title="Improve Your Algorithms with this Simple Equation"></a><a href="https://dev.to/nielsenjared/improve-your-algorithms-with-this-simple-equation-3g1c" target="_blank" rel="noopener">Improve Your Algorithms with this Simple Equation</a></h3><p>這篇是關於如何改進演算法的文章，一開始看作者的解說可能會不知道他在講什麼，但是看完第一則回覆的內容後，整個人突然恍然大悟 XD，在重看一次以後覺得相當精彩！推薦各位可以看看文章裡作者如何思考問題：）</p><h3 id="How-to-get-your-first-job-as-a-self-taught-developer"><a href="#How-to-get-your-first-job-as-a-self-taught-developer" class="headerlink" title="How to get your first job as a self-taught developer"></a><a href="https://www.freecodecamp.org/news/how-to-get-your-first-job-in-tech/amp/" target="_blank" rel="noopener">How to get your first job as a self-taught developer</a></h3><p>文章中有給出幾個自學程式的夥伴該如何找到第一份工作？其中比較深刻的是第三點提到的「Start interviewing as soon as possible」，有許多剛開始學習程式的工程師，會對自己感到沒有方向以及徬徨，不曉得到底要到什麼時候才夠格開始投履歷面試，但其實如果你從未投出履歷，並且開始第一次面試，這個問題才會永遠得不到答案。</p><h3 id="How-does-your-code-sound"><a href="#How-does-your-code-sound" class="headerlink" title="How does your code sound?"></a><a href="https://hackernoon.com/how-does-your-code-sound-em45338j" target="_blank" rel="noopener">How does your code sound?</a></h3><p>姑且不論 Coding 時的狀態如何，但你曾經想過自己創造的 Code 有什麼樣的聲音嗎？雖然文章中沒有太仔細描述這個 Side Project 是如何產生的（文中有附 GitHub），但是我第一眼就覺得太有趣，直接迷上！大家快一起去看你們的 Code 聽起來是快樂還悲傷！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="語音通訊軟體-Discord-開發語言以-Rust-代替-Go"><a href="#語音通訊軟體-Discord-開發語言以-Rust-代替-Go" class="headerlink" title="語音通訊軟體 Discord 開發語言以 Rust 代替 Go"></a><a href="https://www.ithome.com.tw/news/135659" target="_blank" rel="noopener">語音通訊軟體 Discord 開發語言以 Rust 代替 Go</a></h3><p>最近很熱門的語音通訊軟體 Discord 把內部的一些服務從 Go 換到 Rust，原因是 Go 的垃圾收集器會造成一些延遲，而 Rust 用所有權的方式來管理記憶體所以沒有這個問題<br>身為這兩個語言的愛好者，我覺得 Discord 這麼做並不代表 Rust 比 Go 更好，Rust 在記憶體管理方面確實略勝一籌，但 Rust 也因此變得難學，間接導致了生態系不如 Go 豐富。所以真要說的話每個語言都有他的優缺點，不需要去戰語言，找到最適合自己的那個就可以了</p><h3 id="發佈-npm-套件-從手動到自動-系列"><a href="#發佈-npm-套件-從手動到自動-系列" class="headerlink" title="發佈 npm 套件 - 從手動到自動 系列"></a><a href="https://pjchender.blogspot.com/2020/02/guide-npm-0.html" target="_blank" rel="noopener">發佈 npm 套件 - 從手動到自動 系列</a></h3><p>這一系列文章目前已經寫到第四篇，他從頭教你怎麼發佈 npm package，並  且一步一步把很多事情都自動化掉。內容包括 rollupjs、自動化測試、Travis CI 等等，如果你對於 CI 有興趣的話我覺得這一系列很不錯</p><h3 id="Performance-Best-Practices-Query-Patterns-and-Profiling"><a href="#Performance-Best-Practices-Query-Patterns-and-Profiling" class="headerlink" title="Performance Best Practices: Query Patterns and Profiling"></a><a href="https://www.mongodb.com/blog/post/performance-best-practices-query-patterns-and-profiling" target="_blank" rel="noopener">Performance Best Practices: Query Patterns and Profiling</a></h3><p>近年來使用 mongoDB 的專案越來越多，但很多人可能不知道怎麼用好他，這邊分享一篇官方發佈的 best practice，如果你也有在用 mongoDB 的話一定要讀一讀</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="100-days-practicing-TDD"><a href="#100-days-practicing-TDD" class="headerlink" title="100 days practicing TDD"></a><a href="https://dev.to/gonedark/100-days-practicing-tdd-4d5m?utm_source=additional_box&utm_medium=internal&utm_campaign=regular&booster_org=" target="_blank" rel="noopener">100 days practicing TDD</a></h3><p>用一百天的時間來練習 TTD。出於尊敬 TDD 的三個法則之下，這裡是我的幾個建議 1. 你不需要測試任何的東西 2. 你可以寫多個測試錯誤的案例 3. 你不需要在你看不見錯誤的狀況下練習 TDD。還有更多內容是想要寫出好的程式碼的你會想要看的。</p><h3 id="Learn-Kubernetes-Part-I-Basics-Deployment-and-Minikube"><a href="#Learn-Kubernetes-Part-I-Basics-Deployment-and-Minikube" class="headerlink" title="Learn Kubernetes, Part I, Basics, Deployment and Minikube"></a><a href="https://dev.to/azure/kubernetes-from-the-beginning-part-i-4ifd" target="_blank" rel="noopener">Learn Kubernetes, Part I, Basics, Deployment and Minikube</a></h3><p>這是一個 K8S 教學的系列文，從基礎開始，逐一介紹各種概念與實作演練。</p><h3 id="電影欣賞《OAuth-2-0-and-OpenID-Connect-in-plain-English-》"><a href="#電影欣賞《OAuth-2-0-and-OpenID-Connect-in-plain-English-》" class="headerlink" title="電影欣賞《OAuth 2.0 and OpenID Connect (in plain English)》"></a><a href="https://medium.com/@qrtt1/%E9%9B%BB%E5%BD%B1%E6%AC%A3%E8%B3%9E-oauth-2-0-and-openid-connect-in-plain-english-787d0937e442" target="_blank" rel="noopener">電影欣賞《OAuth 2.0 and OpenID Connect (in plain English)》</a></h3><p>Oauth 大家很常用，但是真的懂了嘛，今天 qrtt1 帶來一段非常好的 Oauth 解說影片，並且將影片內容摘要成一篇文章。推！</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="被-RedHat-收購後神隱多時的-CoreOS-的第一個消息是…"><a href="#被-RedHat-收購後神隱多時的-CoreOS-的第一個消息是…" class="headerlink" title="被 RedHat 收購後神隱多時的 CoreOS 的第一個消息是…"></a><a href="https://coreos.com/os/eol/" target="_blank" rel="noopener">被 RedHat 收購後神隱多時的 CoreOS 的第一個消息是…</a></h3><p><strong>正式宣佈 CoreOS 要 EOL 了XD</strong> 時間點會是在 2020/05/26，所以有用的人可以準備改成使用 Fedora CoreOS 了！自從被收購之後 CoreOS 跟以前在社群的活躍程度差好多喔，感覺有點可惜…</p><h3 id="Packer-支援-HCL-了！"><a href="#Packer-支援-HCL-了！" class="headerlink" title="Packer 支援 HCL 了！"></a><a href="https://www.hashicorp.com/blog/announcing-hashicorp-packer-1-5-with-hcl2-support/" target="_blank" rel="noopener">Packer 支援 HCL 了！</a></h3><p>這次 Packer 1.5 真的是大改版，主要的兩個大更新如下：</p><ul><li><p><strong>總算支援 HCL</strong>: 此格式一開始主要是 Terraform 在使用的，Packer 這邊一直是使用 JSON 格式，現在總算也可以用 HCL 來撰寫了，這樣寫起來順手很多，不知道之後所有的 HashiCorp 工具是不是都會往這個方向發展；不過這算是大改，所以官方希望大家先當成 Beta Feature 就好，因為 Packer 目前總共支援 33 builders, 21 provisioners, 和 20 post-processors 所以不可能一次到位，應該需要一點時間讓社群反應與發酵</p></li><li><p><strong>變數的傳遞方式</strong>：變數可以在 Builder 和 Provisioner 間共享了，目前支援的變數有: ID, Host, Port, User, Password, ConnType, PackerRunUUID, SSHPublicKey, 和 SSHPrivateKey，假如還是不夠用的話，可以到官方的 GitHub 開個 Feature Request</p></li></ul><h3 id="Microservices-的缺點是什麼"><a href="#Microservices-的缺點是什麼" class="headerlink" title="Microservices 的缺點是什麼?!"></a><a href="https://kelda.io/blog/the-dark-side-of-microservices/" target="_blank" rel="noopener">Microservices 的缺點是什麼?!</a></h3><p>近年來有很多的部落格文章，白皮書，投影片，傳教士都在宣揚微服務有多好，用了之後就會有多麼的敏捷，服務多容易擴展，只要一把架構轉換成微服務，就會有工程師來敲門說要應徵工作XD 在某些情況下，它的確有其優點，特別是在大型組織而且團隊數目眾多時，然而微服務並不是萬靈丹，它也有一些嚴重的缺點…</p><ul><li><p><strong>分散式系統其實不容易…</strong></p><ul><li><strong>Consensus</strong>: 所有分散式系統研究都嘗試在解決共識性的問題，例如: Paxos, Raft, Vector Clocks, ACID, Eventual Consistency, Map Reduce, Spark, Spanner…等，而所有解決方案都嘗試在共識性與效能間作取捨</li><li><strong>Partial Failure</strong>: 在單體式服務的架構下，假如今天一個 HTTP 請求失敗了，要嘛是這個服務有 Bug 或是 硬體壞掉之類的，導致這個服務有問題；不過假如當 HTTP 請求的背後是一個微服務架構，此請求將會在多個服務間傳遞，那假如在中間某個服務失敗了，那要怎麼辦？</li></ul></li><li><p><strong>更多有的沒的要注意…</strong></p><ul><li><strong>Development</strong>: 單體是服務可以很簡單的在本地端運行起來，不過假如是微服務的話，就要使用一堆工具來跑一堆東西才可以開始開發，例如 docker-compose 跟 minikube</li><li><strong>Debugging</strong>: 對於微服務來說，一個小小的請求也可能會牽涉到很多不同的服務，要除錯的時候就會很麻煩，雖然可以使用類似 Jaeger 的工具來幫忙，不過還是很煩XD</li><li><strong>Logging</strong>: 一定要有 ELK 或是 Splunk 這種 Log Management 系統，不然根本沒有戲唱</li><li><strong>Monitoring</strong>: 一堆東西要監控，上一個世代的監控工具，例如: Nagios 已經不敷使用，所以要改採用新一代的監控工具，例如：Prometheus, Datadog, Sysdig… 等</li><li><strong>Deployment</strong>: Chef 跟 Puppet 對於單體式架構來說還滿好用的，不過以微服務來說，可能就要使用 Kubernetes 來管理會比較明智一些</li><li><strong>Networking</strong>: 微服務有一大堆的 Endpiont，每一個都需要 Load Balancing, Service Discovery, Consistent Security Policy…等，光想到頭是不是就很大了XD 目前的趨勢是使用 Service Mesh 來解決類似的問題，不過好像還有一段路要走</li></ul></li></ul><p>所以從某些技術觀點來說，微服務比單體式服務來得難解決，不過從人類的觀點來看，微服務可以增進大型組織的效率，允許大公司的不同團隊可以獨立部署各自的服務；不過就像所有在資訊工程領域的事物都會有 tradeoffs 一樣，有時候你必須在組織效率和技術挑戰之間做選擇，而且最好很清楚，當你想要組織具有效率時，所面臨的技術挑戰是值得的</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 14 期 - 一起擺脫開工倦怠期</title>
      <link href="/2020/02/04/14-performance-of-react/"/>
      <url>/2020/02/04/14-performance-of-react/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Kubernetes-教學-一-概念與架構-為什麼該學-K8S-？Pod？Node？搞的我好亂呀"><a href="#Kubernetes-教學-一-概念與架構-為什麼該學-K8S-？Pod？Node？搞的我好亂呀" class="headerlink" title="Kubernetes 教學 (一) 概念與架構 - 為什麼該學 K8S ？Pod？Node？搞的我好亂呀"></a><a href="https://medium.com/starbugs/kubernetes-%E6%95%99%E5%AD%B8-%E4%B8%80-%E6%A6%82%E5%BF%B5%E8%88%87%E6%9E%B6%E6%A7%8B-954caa9b1558" target="_blank" rel="noopener">Kubernetes 教學 (一) 概念與架構 - 為什麼該學 K8S ？Pod？Node？搞的我好亂呀</a></h3><p>為什麼該用 Kubernetes? 使用 K8S 的概念可以有哪些好處？真的值得我們一用嘛？好，我們知道為什麼要用了，那接下來，開從哪裡開始，我們從 K8S 的架構開始認識，了解一些重要名詞，開始我們的 K8S 之旅。</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="如果你想成為產品經理，我的8個建議"><a href="#如果你想成為產品經理，我的8個建議" class="headerlink" title="如果你想成為產品經理，我的8個建議"></a><a href="https://medium.com/how-gipi-learn/8-suggestions-about-product-manager-552f613641fa" target="_blank" rel="noopener">如果你想成為產品經理，我的8個建議</a></h3><p>在職涯規劃中，要不要轉為 PM 一直都是工程師選擇的路之一，但是誰也不曉得這個決定到底是不是正確的，如果各位朋友在新的一年中，也剛好想嘗試看看自己是否踏上「產品經理」這層階梯，但又對這職位感到高度沒安全感，不如先看看文章內給出的幾點建議。</p><h3 id="A-JavaScript-interview-question-asked-at-Google"><a href="#A-JavaScript-interview-question-asked-at-Google" class="headerlink" title="A JavaScript interview question asked at Google"></a><a href="https://dev.to/coderbyte/a-javascript-interview-question-asked-at-google-19f1" target="_blank" rel="noopener">A JavaScript interview question asked at Google</a></h3><p>我很喜歡看一些面試題，尤其是剛好看見之前被問過的題目，那就更棒了！這篇文章中分享的問題是如何以 JavaScrip 實現類似 Listener 功能的 Class，大家也不妨照著文章一開始描述的題目內容試著實作一遍吧！</p><h3 id="How-to-Write-Beautiful-and-Meaningful-README-md"><a href="#How-to-Write-Beautiful-and-Meaningful-README-md" class="headerlink" title="How to Write Beautiful and Meaningful README.md"></a><a href="https://blog.bitsrc.io/how-to-write-beautiful-and-meaningful-readme-md-for-your-next-project-897045e3f991" target="_blank" rel="noopener">How to Write Beautiful and Meaningful README.md</a></h3><p>製作一個 SideProject 雖然很困難，但是要寫出漂亮的 README.md 更讓人傷透腦筋，就像文章內提到的「有些開發者會花一個小時來調整按鈕的邊距，但卻無法用十五分鐘好好描述這個 Project 的內容」，如果你也有相同的困擾，或是 README.md 上永遠都只有 Project 的名稱，立馬一起學學 🙌</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="瀏覽器的時光機—歷史堆疊、-pushState-與-replaceState-API"><a href="#瀏覽器的時光機—歷史堆疊、-pushState-與-replaceState-API" class="headerlink" title="瀏覽器的時光機—歷史堆疊、 pushState 與 replaceState API"></a><a href="https://medium.com/@moojing/%E7%80%8F%E8%A6%BD%E5%99%A8%E7%9A%84%E6%99%82%E5%85%89%E6%A9%9F-pushstate-replacestate-api-fa1d909c82b0" target="_blank" rel="noopener">瀏覽器的時光機—歷史堆疊、 pushState 與 replaceState API</a></h3><p>隨著現在的前端日漸複雜、前端也有自己的路由系統，有時候瀏覽器預設的上一頁、下一頁功能不見得是開發者想要的，為了讓上下頁能達到預期的效果，這時候只好用 <code>pushState</code> 跟 <code>replaceState</code> 來操作歷史紀錄</p><h3 id="多想三分鐘，你可以少欠很多技術債"><a href="#多想三分鐘，你可以少欠很多技術債" class="headerlink" title="多想三分鐘，你可以少欠很多技術債"></a><a href="https://link.medium.com/Oe3xv9HLI3" target="_blank" rel="noopener">多想三分鐘，你可以少欠很多技術債</a></h3><p>在進行軟體開發時難免都會產生技術債，不可能完全避免，但如果能在事前做好規劃就能少欠很多債，這篇文章用實際例子教你怎麼分析系統，讓你的系統往一個正確的方向前進</p><h3 id="React-Performance-Fixes-on-Airbnb-Listing-Pages"><a href="#React-Performance-Fixes-on-Airbnb-Listing-Pages" class="headerlink" title="React Performance Fixes on Airbnb Listing Pages"></a><a href="https://link.medium.com/nr5bopHMI3" target="_blank" rel="noopener">React Performance Fixes on Airbnb Listing Pages</a></h3><p>Airbnb 的前端是出名的強，這篇是由他們團隊分享怎麼做 React 的效能測試、還有講解怎麼看火焰圖，讀完這篇保證可以讓你變成更強的 React developer</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="REST-API-Guide"><a href="#REST-API-Guide" class="headerlink" title="REST API Guide"></a><a href="https://dev.to/drminnaar/rest-api-guide-14n2" target="_blank" rel="noopener">REST API Guide</a></h3><p>深度了解 REST API 指南，非常完整到位解釋了 REST 的重點。為什麼要使用 REST？ 六個 REST 架構的限制分別是哪些？又為什麼要設計這些限制？ 理查德森成熟度模型又是什麼？怎麼實踐 REST？然後還附上範例，真是太補了。</p><h3 id="71-Python-Code-Snippets-for-Everyday-Problems"><a href="#71-Python-Code-Snippets-for-Everyday-Problems" class="headerlink" title="71 Python Code Snippets for Everyday Problems"></a><a href="https://dev.to/renegadecoder94/71-python-code-snippets-for-everyday-problems-1mep" target="_blank" rel="noopener">71 Python Code Snippets for Everyday Problems</a></h3><p>用問題來分類，用 16 個分類，分類各種需要處理的情況，71 個程式碼片段，來幫助你高效率的腳絕 Python 問題。真實用，作者的網站經營的也很出色，值得一看。</p><h3 id="Top-10-errors-from-1000-Ruby-on-Rails-projects"><a href="#Top-10-errors-from-1000-Ruby-on-Rails-projects" class="headerlink" title="Top 10 errors from 1000+ Ruby on Rails projects"></a><a href="https://dev.to/philnash/top-10-errors-from-1000-ruby-on-rails-projects-and-how-to-avoid-them-24m" target="_blank" rel="noopener">Top 10 errors from 1000+ Ruby on Rails projects</a></h3><p>10 個最常見的 Ruby on Rails 錯誤與解決他們的方法。雖然在 2020 年 Ruby on Rails 又死了一次，但是還是可以藉由這篇來幫助還沒有死掉的 Rails 專案更快速的除錯。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Kubernetes-Pod-的-Resource-Request-amp-Limit-到底要怎麼設定？！"><a href="#Kubernetes-Pod-的-Resource-Request-amp-Limit-到底要怎麼設定？！" class="headerlink" title="Kubernetes Pod 的 Resource Request &amp; Limit 到底要怎麼設定？！"></a><a href="https://sysdig.com/blog/kubernetes-pod-evicted/" target="_blank" rel="noopener">Kubernetes Pod 的 Resource Request &amp; Limit 到底要怎麼設定？！</a></h3><p>常常會被問這個問題，但其實自己無法回答，當然不是因為很小氣不肯說XD 而是因為每個人所撰寫出來的應用程式所需要的 CPU 和 Memory 最低限度需要多少必須要經過壓測才有辦法得知，也才有信心知道自己的應用程式在目前的資源底下可以服務多少的使用者，這篇文章就 K8S Pod 設定 Limit &amp; Request 時可能會被怎樣對待給出清楚的說明</p><ul><li><p>首先將 Pod 分成三種類型</p><ul><li>Guaranteed: Pod 裡面的所有 Container 都有設定 Request &amp; Limit，而且值都一樣</li><li>Burstable: 沒有任何一個 Container 在 Pod 裡面的 CPU 或是 Memory 設定為 Guaranteed</li><li>Best Effort: Pod 沒有設定 Request 或是 Limit</li></ul></li><li><p>K8S Cluster 就是根據設定的 Request &amp; Limit 來將 Pod 分配到適合的 Node 中，所以假如某一個 Pod 設定的 Request 大於目前 Node 可以承擔的資源時，那這個 Pod 就會找不到 Node 可以去，導致一直處於 Pending 的狀態；當 Request 設定的值太大時將無法被分配到任何的 Node，除此之外也可能會導致被霸佔但沒有使用到的資源無法被其他的 Pod 使用，這時候管理 K8S Cluster 的同事可能會站到你座位的後面看著你…</p></li><li><p>K8S Cluster 在分配 Pod 到適宜的 Node 上時，並不是那麼地直覺，是以底下這兩個值的較大值為主：</p><ul><li>Pod 裡面所有 Container Request 的總和</li><li>Pod 裡面任一個 Init Container 的 Request</li></ul></li><li><p>當 K8S Cluster 資源不敷使用時，Kubelet 便會變成劊子手，開始將一些 Pod 給砍掉，而砍掉的順序會是如何呢？</p><ul><li>首先砍掉已經死掉的 Pod，沒有在用的 Container Image 將 Disk 空間給釋放出來</li><li>接下來就是把沒有設定 Request 或是 Limit 的 Best Effort Pod 給砍掉</li><li>然後把使用到的資源比 Request 來得多的 Burstable Pod 給砍掉</li><li>最後再把使用到的資源比 Request 來得少的 Burstable Pod 給砍掉</li></ul></li><li><p>所以可以得知，假如某個 Pod 相當重要的話，那就一定要將其設定成 Guaranteed Pod，避免它在 Node 資源不充足的時候被砍掉；不過有一個例外，就是當 K8S 本身的系統服務需要更多運算資源才得以正常運行時，這種情況之下 Guaranteed Pod 才會被 Kubelet 給砍掉</p></li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 13 期 - 恭喜呀恭喜～發呀發大財～</title>
      <link href="/2020/01/28/13-congratulate-and-wish-you-wealth/"/>
      <url>/2020/01/28/13-congratulate-and-wish-you-wealth/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="站在-Docker-的肩膀上，部署任何語言的-Web-應用到-Heroku"><a href="#站在-Docker-的肩膀上，部署任何語言的-Web-應用到-Heroku" class="headerlink" title="站在 Docker 的肩膀上，部署任何語言的 Web 應用到 Heroku"></a><a href="https://medium.com/@larry850806/deploy-any-web-application-to-heroku-with-docker-b64b9b0eb93" target="_blank" rel="noopener">站在 Docker 的肩膀上，部署任何語言的 Web 應用到 Heroku</a></h3><p>Docker 跟 K8s 在這幾年迅速竄紅，許多服務也是直接建立在 Docker 之上。但因為要學的東西太多了，很多人可能根本不知道怎麼入門。這週的專欄從 Docker 的基本概念開始講起，帶大家把 Node.js 應用打包成 Docker Image，並且部署到 Heroku 雲端平台，如果你最近剛好想學 Docker 的話這篇很適合新手入門</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="The-React-Cheatsheet-for-2020-real-world-examples"><a href="#The-React-Cheatsheet-for-2020-real-world-examples" class="headerlink" title="The React Cheatsheet for 2020 (+ real-world examples)"></a><a href="https://www.freecodecamp.org/news/the-react-cheatsheet-for-2020/amp/" target="_blank" rel="noopener">The React Cheatsheet for 2020 (+ real-world examples)</a></h3><p>新年假期的最後一天是該收心了，但如果你身為 React 的開發者，而又還不曉得如何帶著萬全的準備回到職場上，請閱讀這篇文章，作者整理了在 2020 年你不可不知的開發技巧，讀完後不管是溫故了知新或是換然一新，都準備返回辦公室 Coding 爆全場！</p><h3 id="12-JavaScript-Concepts-That-Will-Level-Up-Your-Development-Skills"><a href="#12-JavaScript-Concepts-That-Will-Level-Up-Your-Development-Skills" class="headerlink" title="12 JavaScript Concepts That Will Level Up Your Development Skills"></a><a href="https://hackernoon.com/12-javascript-concepts-that-will-level-up-your-development-skills-ha1a364w" target="_blank" rel="noopener">12 JavaScript Concepts That Will Level Up Your Development Skills</a></h3><p>千萬別想說如果不會 React 就只能失落的等待收假，這不就出現了 12 個提高你開發技能的小概念嗎？也許你已經在無數個文章中吸收並且瞭解了這些概念，但好的事情，總是值得你一再回味。</p><h3 id="How-to-Make-Programming-a-Daily-Habit"><a href="#How-to-Make-Programming-a-Daily-Habit" class="headerlink" title="How to Make Programming a Daily Habit"></a><a href="https://dev.to/gaelthomas/how-to-make-programming-a-daily-habit-4kol" target="_blank" rel="noopener">How to Make Programming a Daily Habit</a></h3><p>身為工程師持續進步真的是很重要的，所以額外的程式練習或是思考閱讀學習就會變成一件要利用下班時間來做的事情，但是打程式潛意識來說都會被認為是「工作」的一部份而對它感到抗拒，但反過來說，差距也是從這裡出現的，之前聽到一句讓人感到畏懼的話是「世上最可怕的事情是，比你厲害的人還比你更努力！」，於是為了能夠和那些很厲害的大神拉近一點距離，不如在 2020 年開始，試著讓 Coding 成為日常習慣之一吧！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="为什么-Go-语言没有泛型"><a href="#为什么-Go-语言没有泛型" class="headerlink" title="为什么 Go 语言没有泛型"></a><a href="https://draveness.me/whys-the-design-go-generics" target="_blank" rel="noopener">为什么 Go 语言没有泛型</a></h3><p>關於 Go 語言需不需要泛型（generics）從十年前就開始不斷被討論，但一直還沒有個確定的做法，泛型的各種實現方式也各有優缺。這篇文章分析了為什麼 Go 不趕快實現泛型，泛型的實作上又有什麼難題，很推薦對程式語言發展有興趣的人看看</p><h3 id="Introducing-Yarn-2"><a href="#Introducing-Yarn-2" class="headerlink" title="Introducing Yarn 2 !"></a><a href="https://dev.to/arcanis/introducing-yarn-2-4eh1" target="_blank" rel="noopener">Introducing Yarn 2 !</a></h3><p>前幾年 Yarn 靠著超快的下載速度轟動了 JS 圈，當時我也跟著放棄 npm 改用 yarn，但後來 npm 的速度也不輸給 yarn 了。如今 Yarn 發佈了第二個版本，除了加強訊息的可讀性之外還改了不少東西，想嚐鮮的朋友們可以照他們的 Migration Guide 試試看</p><h3 id="Anonymous-Web-Scraping-with-Node-js-Tor-Puppeteer-and-cheerio"><a href="#Anonymous-Web-Scraping-with-Node-js-Tor-Puppeteer-and-cheerio" class="headerlink" title="Anonymous Web Scraping with Node.js, Tor, Puppeteer and cheerio"></a><a href="https://link.medium.com/6PQU63Z1w3" target="_blank" rel="noopener">Anonymous Web Scraping with Node.js, Tor, Puppeteer and cheerio</a></h3><p>Tor 是一個用於匿名通訊的瀏覽器，除此之外也可以當作 Proxy 來用，這篇文章教你用 Node.js 跟 Tor 做一個匿名的爬蟲，不用再擔心 IP 被擋掉</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="英國-T1-簽證申請經驗分享-by-Stan-Lo"><a href="#英國-T1-簽證申請經驗分享-by-Stan-Lo" class="headerlink" title="英國 T1 簽證申請經驗分享 by Stan Lo"></a><a href="https://medium.com/@st0012/16f8f1fca067" target="_blank" rel="noopener">英國 T1 簽證申請經驗分享 by Stan Lo</a></h3><p>恭喜 Stan Lo 順利拿到英國 T1 簽證，英國 T1 簽證拿到之後在英國待滿三年即享有英國永居權，還可以自己開公司！是一個很強的簽證，Stan 在文中詳細分享了 T1 工作簽證的申請經驗，是不是很想要得到？趕快入內觀看需要具備什麼條件。</p><h3 id="Good-and-Bad-Practices-of-Coding-in-Python"><a href="#Good-and-Bad-Practices-of-Coding-in-Python" class="headerlink" title="Good and Bad Practices of Coding in Python"></a><a href="https://dev.to/duomly/the-best-practices-of-coding-in-python-and-what-to-avoid-3c65" target="_blank" rel="noopener">Good and Bad Practices of Coding in Python</a></h3><p>寫 Python 好的實踐與壞的實踐。本篇文章蒐集了 10 幾個範例，阿，我沒有仔細算過，也許有 20 個，滿滿的範例，讓你對照一下你是否有命中其中不好的實踐？</p><h3 id="Top-10-Web-Development-Trends-That-will-be-in-Demand-in-2020"><a href="#Top-10-Web-Development-Trends-That-will-be-in-Demand-in-2020" class="headerlink" title="Top 10 Web Development Trends That will be in Demand in 2020"></a><a href="https://www.decipherzone.com/blog-detail/top-10-web-development-trends-in-2020" target="_blank" rel="noopener">Top 10 Web Development Trends That will be in Demand in 2020</a></h3><p>2020 年十大 Web 趨勢揭曉，分別是：AI、自動化測試、JS 框架、無伺服器框架、Google 推出的功能詞語片段、手機裝置流量，擴充套件、PWA、語音搜尋、Cybersecurity。為什麼這十個會是趨勢呢？來看看原文的分析。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="過完年要找-DevOps-Engineer-的話，面試時該問什麼啊？！"><a href="#過完年要找-DevOps-Engineer-的話，面試時該問什麼啊？！" class="headerlink" title="過完年要找 DevOps Engineer 的話，面試時該問什麼啊？！"></a><a href="https://enterprisersproject.com/article/2020/1/devops-engineer-interview-questions-2020" target="_blank" rel="noopener">過完年要找 DevOps Engineer 的話，面試時該問什麼啊？！</a></h3><p>好的 DevOps Engineer 其實真的不好找 (不只是台灣，應該全球都有這個狀況)，目前在職缺排行榜上一直名列前茅，而且平均薪資也滿高的，通常 DevOps Engineer 都具有系統管理或是軟體開發的相關經驗，而且除了技術背景之外，善於跟不同團隊合作也很重要；而雖然有些人不喜歡這個職缺名稱，但不可諱言，DevOps 社群正是因為這群人才得以凝聚在一起，那麼假如要面試 DevOps Engineer 有什麼樣的問題可以問呢？此篇文章提供一些我看起來比較屬於軟性的情境面試問題，至於要怎麼回答，就請參考原文了 = =+</p><ol><li><p>請問你如何將 Security 這個要素嵌合進去組織內的 DevOps 流程？你曾經幫助過團隊建立起 Security 意識嗎？</p></li><li><p>可以舉出一些例子來說明哪些工作任務會被你自動化，哪些不會？除此之外，請告訴我自動化什麼樣的流程對你來說是很有挑戰性的？</p></li><li><p>請試著描述對於 DevOps 團隊來說，你覺得最理想的工作環境應該是什麼樣子的？從過往和維運團隊的合作中你學到了哪些事情？</p></li><li><p>告訴我一些你曾經開發過而且對於成功達成 DevOps 很重要的自動化腳本</p></li><li><p>在你過去的經驗中，當一個線上服務發佈新版本時，你如何得知它出事情了？而且你會做什麼事情保持服務的穩定性？而從這次的事件中你學到了什麼樣的經驗？</p></li><li><p>對於你自己以至於整個 DevOps 團隊來說，你如何衡量事情已經完成或是成功了？</p></li><li><p>告訴我你最喜歡哪一些 DevOps 工具，並且解釋是什麼樣的原因讓你選擇了他們？而最近又有哪一些新的工具或是技術還不在你的使用清單中，但你覺得應該要去好好研究的？</p></li></ol><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 12 期 - 有錢沒錢，發摟 StarBugs 好過年！</title>
      <link href="/2020/01/21/12-manage-your-credentials/"/>
      <url>/2020/01/21/12-manage-your-credentials/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="密碼都放-Vault-裡了，然後呢？！"><a href="#密碼都放-Vault-裡了，然後呢？！" class="headerlink" title="密碼都放 Vault 裡了，然後呢？！"></a><a href="https://medium.com/starbugs/%E5%AF%86%E7%A2%BC%E9%83%BD%E6%94%BE-vault-%E8%A3%A1%E4%BA%86-%E7%84%B6%E5%BE%8C%E5%91%A2-97c7832d59f" target="_blank" rel="noopener">密碼都放 Vault 裡了，然後呢？！</a></h3><p>HashiCorp 推廣 Vault 一直不餘遺力，自己也從兩年多前用到現在，畢竟撇開企業方案不談，開源專案好像也只有 Vault 可以用；而這塊市場自己覺得目前還算是在推廣階段吧，依然處於積極建立大家對於 Credential 保管應該要有的觀念和危機意識；所以網路上可以看到的教學都是把 Vault 用最危險的 Dev 模式跑起來，然後把重點擺在如何讓應用程式可以取得帳號，密碼或是 API Token…等敏感資料，但是對於 Vault 要如何管理跟保護的教學好像就不太常見了，所以此篇文章來野人獻曝自己兩年多來維運 Vault 的一些小經驗，分別從<strong>網路</strong>，<strong>日常維運</strong>，<strong>監控</strong>，<strong>日誌</strong>等不同層面來討論，但最後當然不免俗還是會提一下如何跟應用程式做結合</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="探討單元測試和整合測試的涵蓋範圍"><a href="#探討單元測試和整合測試的涵蓋範圍" class="headerlink" title="探討單元測試和整合測試的涵蓋範圍"></a><a href="https://ithelp.ithome.com.tw/articles/10229734" target="_blank" rel="noopener">探討單元測試和整合測試的涵蓋範圍</a></h3><p>剛開始接觸前端測試的時候，常常搞不清楚整合測試和單元測試的差別在哪裡，尤其是單元測試中對單一行為的描寫，更是讓人感到模糊，難到只要測試案例跨了類別就不算單元測試嗎？一起看看文章怎麼解釋這兩者之間的差異。</p><h3 id="A-Series-of-My-Unfortunate-Mistakes-When-Writing-Tests"><a href="#A-Series-of-My-Unfortunate-Mistakes-When-Writing-Tests" class="headerlink" title="A Series of My Unfortunate Mistakes (When Writing Tests)"></a><a href="https://dev.to/briwa/a-series-of-my-unfortunate-mistakes-when-writing-tests-h8m?utm_source=additional_box&utm_medium=internal&utm_campaign=regular&booster_org&fbclid=IwAR2Q7c_QmqYv6GXot_sR7yKCIyIgOwznwlIlo7nYBlG_zToibS7bFZk1Hhs" target="_blank" rel="noopener">A Series of My Unfortunate Mistakes (When Writing Tests)</a></h3><p>在做單元測試的時候，最怕寫出糟糕又脆弱的測試，導入測試已經要花上一筆時間了，如果又因為測試案例增加開發的成本那就太得不償失了，本篇文章用實戰的方式，一步一步告訴大家什麼 5 點不正確的單元測試。</p><h3 id="The-Best-Whiteboard-Interview-Advice-I-Ever-Received"><a href="#The-Best-Whiteboard-Interview-Advice-I-Ever-Received" class="headerlink" title="The Best Whiteboard Interview Advice I Ever Received"></a><a href="https://hackernoon.com/the-best-whiteboard-interview-advice-i-ever-received-3ebbfa72e4a" target="_blank" rel="noopener">The Best Whiteboard Interview Advice I Ever Received</a></h3><p>不曉得大家在各種面試的關卡中，都會如何應對白板題？也許你會緊張到不知所措（像我一樣），或是一時間腦袋空白不知道該如何是好（這也是我 😂），但除了尷尬地站在白板和面試官中間用力地在腦中思考外，你還能做更多的事情！本篇文章的作者給了幾點對於面對白板題的建議！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Speed-Up-JavaScript-Array-Processing"><a href="#Speed-Up-JavaScript-Array-Processing" class="headerlink" title="Speed Up JavaScript Array Processing"></a><a href="https://link.medium.com/6KbO4bpGl3" target="_blank" rel="noopener">Speed Up JavaScript Array Processing</a></h3><p>雖然原生 JS 提供的 <code>map</code>、<code>filter</code> 等等 method 很好用，但在 Array 太大時可能會造成效能大幅降低，如果不想降低可讀性但又想寫出高效能的程式碼，可以考慮用 RxJS 把 Array 轉成 Observable，再用 RxJS 的 method 來進行處理</p><h3 id="Go-tcha-When-nil-nil"><a href="#Go-tcha-When-nil-nil" class="headerlink" title="Go-tcha: When nil != nil"></a><a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic" target="_blank" rel="noopener">Go-tcha: When nil != nil</a></h3><p>這是我在 Golang 的 Telegram 群組看到的，想不到 Go 裡面的 <code>nil</code> 有可能不等於 <code>nil</code>，而且 <code>nil</code> 竟然還有分型別，這 feature(bug) 真的是很神奇</p><h3 id="Your-first-CLI-tool-with-Rust"><a href="#Your-first-CLI-tool-with-Rust" class="headerlink" title="Your first CLI tool with Rust"></a><a href="https://www.demainilpleut.fr/your-first-cli-tool-with-rust/" target="_blank" rel="noopener">Your first CLI tool with Rust</a></h3><p>Rust 是一個系統級的程式語言，本身沒有太過肥大的 runtime，所以很適合用來寫 command line tool。作者在這篇文章中用 Rust 寫了一個 <code>cat</code> 指令，想學 Rust 的話很建議看看，比看官方的語法教學有趣多了</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Code-it-Notes-Create-Your-Own"><a href="#Code-it-Notes-Create-Your-Own" class="headerlink" title="Code-it Notes: Create Your Own!"></a><a href="https://dev.to/danielharding/code-it-notes-create-your-own-1hj4" target="_blank" rel="noopener">Code-it Notes: Create Your Own!</a></h3><p>來建造你自己的 Code-it 程式小抄！幾個月前打造了一個原型，來幫助自己更好的理解一些我永遠會忘記的 JS 方法。這個概念很簡單，如果我需要他，我就會創造一個 Code-it 的小抄。用自己的話寫下來，可以讓你更了解程式內部是如何運作的。</p><h3 id="The-dangers-of-async-await"><a href="#The-dangers-of-async-await" class="headerlink" title="The dangers of async/await"></a><a href="https://dev.to/christopherkade/the-dangers-of-async-await-3p5g" target="_blank" rel="noopener">The dangers of async/await</a></h3><p>async / await 的危險。在幾個月前，我作為一個顧問，在重寫大型系統的時候，我體會到 <code>async / await</code> 事實上常常被很多不必要的非同步和和平行運算上，舉例來說這是一個 Vue Code Snipet …。</p><h3 id="Django-Admin-Dashboards-Open-Source-and-Free"><a href="#Django-Admin-Dashboards-Open-Source-and-Free" class="headerlink" title="Django Admin Dashboards - Open-Source and Free"></a><a href="https://dev.to/sm0ke/django-admin-dashboards-open-source-and-free-1o80" target="_blank" rel="noopener">Django Admin Dashboards - Open-Source and Free</a></h3><p>在這篇文章中我會展示一大堆的由自動化工具與 Django 所打造的免費 Web App。工作流程已經在我以前的文章提到。如果你是初次看到這篇文章，我用簡單的方式來說明這個 workflow …。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="YAML-工程師們！你還在用-Helm-產生-YAML-檔案嗎？！"><a href="#YAML-工程師們！你還在用-Helm-產生-YAML-檔案嗎？！" class="headerlink" title="YAML 工程師們！你還在用 Helm 產生 YAML 檔案嗎？！"></a><a href="https://learnk8s.io/templating-yaml-with-code" target="_blank" rel="noopener">YAML 工程師們！你還在用 Helm 產生 YAML 檔案嗎？！</a></h3><p>工程師們！你還在用 <strong>Helm</strong> 產生 YAML 檔案嗎？！此篇文章勸大家不要再使用 Helm 來產生管理 K8S 資源的 YAML 檔案，因為它只是借用 Go Templating Engine 來建立 YAML 檔案，所以產生的檔案是不是正確的，其實它不知道也完全不負責任，應該要另外用其他的工具來管理部署 K8S 應用程式的 YAML 檔案才對，大家覺得呢？！</p><ul><li>使用 sed (展示用，也不建議)</li><li>使用 yq</li><li>使用 Kustomize</li><li>直接寫程式碼引用 K8S 的相關函式庫產生</li><li>使用如 Cue, jk, jsonnet Dhall, Skycfg 等工具</li></ul><h3 id="給你滿滿的-Prometheus-大平台"><a href="#給你滿滿的-Prometheus-大平台" class="headerlink" title="給你滿滿的 Prometheus 大平台"></a><a href="https://monitoring2.substack.com/p/big-prometheus" target="_blank" rel="noopener">給你滿滿的 Prometheus 大平台</a></h3><p>根據 Google 日前的研究指出大型組織正面臨處理爆炸性數據量的問題，可以將其歸類為 Reporting 和 Dashboard 跟 Time Series Monitoring…等，而在處理這方面問題的開源專案中，又以 Prometheus 最為有名，而假如只是要將其部署在一個 K8S Cluster 內的話相當的簡單，可以使用 Prometheus Operator 就輕鬆辦到，但假如像是 Cloudflare 這種在 2017 年就運行了 177 個的情況，那管理起來就不太好玩了，所以要如何管理大規模的 Prometheus 呢？！這篇文章介紹了四個解決方案：</p><ul><li><strong>Thanos</strong> &amp; <strong>Cortex</strong>: 在解決問題的面向上，這兩個還滿雷同的，Cortex 的行為比較像一般傳統的 SaaS 監控系統將所有的資料往同一個地方丟；而 Thanos 則比較沒那麼集中化，主要是在幫忙每一個 Prometheus 去做資料處理，這兩種不同的做法會導致在查詢的時候必須要使用不同的技術實作方式，比較有趣的是這兩個解決方案都利用 Cloud Provider 提供的服務來儲存長期的資料 (Thanos 可以用  Amazon S3, Azure Blob Storage 跟 Google Cloud Storage…等，Cortex 則是使用比較昂貴的 NoSQL 服務如 AWS DynamoDB 或是 Google BigTable)</li><li><strong>M3DB</strong>: 架構上比較像是 Thanos，不過根據 Uber 的說明，他們頻繁地需要去抓取比較舊的歷史資料，在採用 Thanos 的情況下，去 object-store 拉取資料的速度太慢了，而且資料在 Public Cloud 跟他們的 Private Cloud 傳輸的過程中產生的成本也相當驚人，所以才會有這個專案的誕生，使用它來儲存 Prometheus 的資料</li><li><strong>VictoriaMetrics</strong>: 就像前面幾個解決方案一樣，VictoriaMetrics 的創造者一樣面臨了成本與效能問題，而這個解決方案的靈感來自於  ClickHouse (一個新的資料庫系統，擁有厲害到令人印象深刻的效能表現)，根據 VictoriaMetrics 團隊的 FAQ 可以發現，他們提供了低運行成本與良好的開發維運體驗，而且似乎有某些 Cloud Service 採用其服務</li></ul><h3 id="多麼痛的領悟～-從-Backend-轉成-Frontend-工程師"><a href="#多麼痛的領悟～-從-Backend-轉成-Frontend-工程師" class="headerlink" title="多麼痛的領悟～ 從 Backend 轉成 Frontend 工程師"></a><a href="https://blog.bitsrc.io/what-i-learned-by-transitioning-from-backend-to-frontend-development-2fc15ead30fe" target="_blank" rel="noopener">多麼痛的領悟～ 從 Backend 轉成 Frontend 工程師</a></h3><p>腦中有聽到歌聲的代表有一定年紀了👴👵😂 此篇文章的作者分享自己從很純的 Backend 轉職成 Frontend 的心路歷程 💪 🔥👊</p><ul><li>不像後端工程師聚焦在資料結構，資料庫的結構和效能，程式碼架構，強大的 API；而是會去注意使用者介面，衡量使用者體驗，嘗試去設計和改善 App 的流程來改善體驗</li><li>UI First！變成先從 UI 的層面去考量，譬如使用者會去按哪些按鍵，並且如何跟 UI 元件互動，然後再根據這些想法去設計合適的 Backend 結構和資料庫</li><li>開始思考 UI 開發的重複利用性，譬如有一些元件可以在多個頁面重複使用，推薦可以使用 <a href="https://bit.dev/" target="_blank" rel="noopener">https://bit.dev/</a></li><li>學會如何把想法轉換成 mockups</li><li>瀏覽器和 Client 端的效能調校，學會如何使用暫存，譬如：localStorage，最佳化 JavaScript 的壓縮，是要使用 webpack 或是動態載入 script</li><li>學會如何建立 Responsive 的網頁好讓在各種不同尺寸的裝置上顯示</li><li>體會到 SEO 的重要性</li><li>要把 CSS 學好，不然應該很難存活</li><li>不要過度依賴前端框架避免程式碼到後來很難維護</li><li>開始想要多學一點關於設計師的技能，譬如 Adobe Photoshop</li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 11 期 - 訂閱星巴哥，祝你尾牙中大獎！</title>
      <link href="/2020/01/14/11-you-subscribe-you-will-earn-a-big-prize/"/>
      <url>/2020/01/14/11-you-subscribe-you-will-earn-a-big-prize/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="從零開始學-DevOps-—-那就選擇最簡單的-Drone-CI-開始吧！"><a href="#從零開始學-DevOps-—-那就選擇最簡單的-Drone-CI-開始吧！" class="headerlink" title="從零開始學 DevOps — 那就選擇最簡單的 Drone CI 開始吧！"></a><a href="https://medium.com/starbugs/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B%E5%AD%B8-devops-%E9%82%A3%E5%B0%B1%E9%81%B8%E6%93%87%E6%9C%80%E7%B0%A1%E5%96%AE%E7%9A%84-drone-ci-%E9%96%8B%E5%A7%8B%E5%90%A7-931126671139" target="_blank" rel="noopener">從零開始學 DevOps — 那就選擇最簡單的 Drone CI 開始吧！</a></h3><p>目前 DevOps 已經是 Backend 或 Frontend 多多少少都會碰到的部份。而 Drone，正可以讓開發者專心開發自己的專案，每個專案獨立設定需要的 CI / CD 流程，解放前端、後端工程師的戰鬥力，將測試與部屬結合在開發流程中，降低手動測試需要的時間。話不多說，趕快開始架設第一個 Drone CI 伺服器吧。</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="前端工程師應該知道的-—-將組件截圖的小技巧"><a href="#前端工程師應該知道的-—-將組件截圖的小技巧" class="headerlink" title="前端工程師應該知道的 — 將組件截圖的小技巧"></a><a href="https://medium.com/@realdennis/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E6%87%89%E8%A9%B2%E7%9F%A5%E9%81%93%E7%9A%84-%E5%B0%87%E7%B5%84%E4%BB%B6%E6%88%AA%E5%9C%96%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7-4074bd132c8b" target="_blank" rel="noopener">前端工程師應該知道的 — 將組件截圖的小技巧</a></h3><p>有時候我們會不曉得該怎麼只截下網頁上某個 Element，再不然就是螢幕根本不夠高，每次都要分好幾次才能截出一整個畫面，但你知道 Chrome 的瀏覽器有個祕技能夠協助你更方便做到這些事嗎？</p><h3 id="8-HTML-tags-you-need-to-be-using-and-5-to-avoid"><a href="#8-HTML-tags-you-need-to-be-using-and-5-to-avoid" class="headerlink" title="8 HTML tags you need to be using (and 5 to avoid)"></a><a href="https://www.creativebloq.com/amp/advice/html-tags" target="_blank" rel="noopener">8 HTML tags you need to be using (and 5 to avoid)</a></h3><p>HTML5 擁有許多新的 Tag 可以使用，但因為種類真的太多，要全部記起來可不是一件簡單的事情，只好先來看看值得擁抱的 8 個 Tag，以及你該避免的 5 個 Tag。</p><h3 id="5-Things-I-Learned-From-Coding-with-Other-People-My-First-Web-Development-Team-Project"><a href="#5-Things-I-Learned-From-Coding-with-Other-People-My-First-Web-Development-Team-Project" class="headerlink" title="5 Things I Learned From Coding with Other People: My First Web Development Team Project"></a><a href="https://dev.to/sophia_wyl/5-things-i-learned-from-coding-with-other-people-my-first-web-development-team-project-48fk" target="_blank" rel="noopener">5 Things I Learned From Coding with Other People: My First Web Development Team Project</a></h3><p>文中講述了在第一個團隊裡學到的五件事情，其中最讓我感受深刻的是第五點的「Surround yourself with motivated and supportive people」，與有上進心的人一起工作真的是很棒的事情！經過互相討論解決出現在眼前的阻礙，並在這個過程中學習到解決問題的方法，是非常非常幸運的機會。如果你今天只有一個人，就是以加法變強，但若是有一群優秀的伙伴們一起，那會是乘法的變強！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Streams-and-Buffers-in-Node-js"><a href="#Streams-and-Buffers-in-Node-js" class="headerlink" title="Streams and Buffers in Node.js"></a><a href="https://link.medium.com/qRj12riCb3" target="_blank" rel="noopener">Streams and Buffers in Node.js</a></h3><p>平常用 Node.js 寫 API server 比較少有機會碰到 Stream 跟 Buffer，但也許有一天你會需要用到他來做處理影像、或是傳輸大檔案，所以趕快趁這個機會來了解一下 Stream 的概念吧！</p><h3 id="從被問到問人，那些我常問的面試問題"><a href="#從被問到問人，那些我常問的面試問題" class="headerlink" title="從被問到問人，那些我常問的面試問題"></a><a href="https://blog.niclin.tw/2020/01/07/interview-tips/" target="_blank" rel="noopener">從被問到問人，那些我常問的面試問題</a></h3><p>「我們很常被面試，但當角色轉換時，要如何成為那個自己不討厭的面試官呢？」。作者分享了自己的找人標準、面試流程、還有常問的題目，不管你是要去面試還是面試人，都可以參考看看</p><h3 id="PressPlay從AWS搬家到GCP一年的心得"><a href="#PressPlay從AWS搬家到GCP一年的心得" class="headerlink" title="PressPlay從AWS搬家到GCP一年的心得"></a><a href="https://link.medium.com/EFFAG9DGb3" target="_blank" rel="noopener">PressPlay從AWS搬家到GCP一年的心得</a></h3><p>老牌的 AWS 服務比較多，但 GCP 價格比較親民，所以也不一定哪個比較好。如果你有一個新專案還在考慮要用 AWS 還是 GCP 的話，可以先看看 PressPlay 搬家的原因，看看適不適合自己的專案</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="5-Kubernetes-trends-to-watch-in-2020"><a href="#5-Kubernetes-trends-to-watch-in-2020" class="headerlink" title="5 Kubernetes trends to watch in 2020"></a><a href="https://enterprisersproject.com/article/2020/1/kubernetes-trends-watch-2020" target="_blank" rel="noopener">5 Kubernetes trends to watch in 2020</a></h3><p>Kubernetes 的採用逐漸再升高當中，而且隨著 IT 領域使用 Container 的人越來越多，可以預期 K8S 在今年將會繼續大紅大紫，所以就讓我們來看看 2020 K8S 的五大趨勢是什麼？！</p><ol><li>越來越多 K8S 的原生軟體</li><li>Federation 在今年或許有機會到 Beta 階段或是 GA</li><li>K8S 的 Security 相關議題會持續被高度關注</li><li>擁有 K8S 的相關技術的人員短缺</li><li>隨著 K8S 運行的成本越來越低，類似於邊緣運算的相關領域將會有越來越多的使用案例</li></ol><h3 id="Jenkins-Happy-New-Year-2019-2020-edition"><a href="#Jenkins-Happy-New-Year-2019-2020-edition" class="headerlink" title="Jenkins: Happy New Year! 2019/2020 edition"></a><a href="https://jenkins.io/blog/2020/01/07/happy-new-year/" target="_blank" rel="noopener">Jenkins: Happy New Year! 2019/2020 edition</a></h3><p>2019 剛過，Jenkins 官方發表文章來回顧這一年來他們完成了什麼事情</p><ul><li>Jenkins 老爺爺歡慶 15 歲</li><li>擁有第一個治理委員會與選舉</li><li>Jenkins 專案加入 CDF (Continuous Delivery Foundation)</li><li>Jenkins 支援 Java 11</li><li>Jenkins X 從 Jenkins 的子專案獨立出來變成一個全新的專案加入到 CDF 中</li><li>貢獻者數量達到新高峰，在 2019 十月時有 915 個獨立的貢獻者，而且其中有 124 位是初次貢獻者</li><li>為了改善文件和使用者體驗成立新的族群</li><li>特別增加文件管理者這個新職位來強調文件在此專案中的重要性</li><li>運行多達 12 個受訓計畫</li></ul><h3 id="Falco-leaves-sandbox-steps-into-CNCF-Incubator"><a href="#Falco-leaves-sandbox-steps-into-CNCF-Incubator" class="headerlink" title="Falco leaves sandbox, steps into CNCF Incubator"></a><a href="https://devclass.com/2020/01/08/falco-leaves-sandbox-steps-into-cncf-incubator/" target="_blank" rel="noopener">Falco leaves sandbox, steps into CNCF Incubator</a></h3><p>Falco 是一個 Runtime Security 開源專案，他可以在應用程式運行時即時監控異常行為，並且透過通知來降低意外事件的風險，他是 Sysdig 所釋出的專案，而該公司目前仍然是主要推動者，該專案於在 2018 年十月加入 CNCF Sandbox，在歷經一年多後總算跑到 Incubator 中，官方對於這個專案寄與厚望，希望 Falco 可以成為一個加強 Security 的標準化組件，並且希望與 OPA (Open Policy Agent) 等預防工具，甚至是 Kubernetes RBAC 等授權機制整合，讓 Falco 變成一個 Cloud Native 的 Security 專案，並且預期在大家的採用之下，能夠讓團隊持續增加貢獻在這個專案的力量</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>#10 第十期 - 新的一年，從香草 JS 的單元測試開始</title>
      <link href="/2020/01/07/10-unit-test-of-vanilla-js/"/>
      <url>/2020/01/07/10-unit-test-of-vanilla-js/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Unit-Test-香草-JS-的單元測試-feat-testing-library-dom"><a href="#Unit-Test-香草-JS-的單元測試-feat-testing-library-dom" class="headerlink" title="Unit Test | 香草 JS 的單元測試 feat. @testing-library/dom"></a><a href="https://medium.com/@GQSM/unit-test-%E9%A6%99%E8%8D%89-js-%E7%9A%84%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6-feat-testing-library-dom-f8539137bec9" target="_blank" rel="noopener">Unit Test | 香草 JS 的單元測試 feat. @testing-library/dom</a></h3><p>相信大家應該都聽過單元測試，但如果把單元測試放到前端來，就會因為各種前端框架的關係，讓測試的寫法產生差異，例如寫 Vue 的話可能會使用 @vue/test-utils，React 的朋友們大概是 react-testing-library、enzyme，但如果不使用前端框架呢？在沒使用前端框架的情況下，就沒辦法直接載入 component 搞定一切，這時候該如何將對應的 HTML 載入為 JavaScript 進行測試？</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="70-JavaScript-Interview-Questions"><a href="#70-JavaScript-Interview-Questions" class="headerlink" title="70 JavaScript Interview Questions"></a><a href="https://dev.to/macmacky/70-javascript-interview-questions-5gfi" target="_blank" rel="noopener">70 JavaScript Interview Questions</a></h3><p>每年中最讓人蠢蠢欲動的跳槽期又要來了，但是準備面試不管過了多久都是一件很麻煩的事情，特別是對於 JavaScript 這種獨特性非常高的語言來說，能考的面試題更是千奇百怪，如果你還沒有方向該如何開始準備，那絕對不能錯過本篇文章挑選的 JavaScript 精選 70 題。</p><h3 id="暸解單元測試"><a href="#暸解單元測試" class="headerlink" title="暸解單元測試"></a><a href="http://otischou.tw/2019/08/02/unit-test.html" target="_blank" rel="noopener">暸解單元測試</a></h3><p>如果各位讀者覺得學習測試的文章都太過分散，很難有一篇可以從「為什麼我們要寫測試？」、「如何思考怎麼寫測試案例？」、「好的測試案例長什麼樣子？」到各種測試的方法解說，導致測試學習門檻太高無法消化。但是現在！非常幸運的這裡剛好就有一篇精華大匯集，能夠成為各位迷途時的最佳指南！</p><h3 id="Redux-VS-React-Context-Which-one-should-you-choose"><a href="#Redux-VS-React-Context-Which-one-should-you-choose" class="headerlink" title="Redux VS React Context: Which one should you choose?"></a><a href="https://dev.to/ibrahima92/redux-vs-react-context-which-one-should-you-choose-2hhh" target="_blank" rel="noopener">Redux VS React Context: Which one should you choose?</a></h3><p>這是一個從年初被提到年尾的議題，在去年隨著 Hooks 申裝上 React，讓 React Context 變得更方便使用的同時，到底該如何在 Redux 和 React Context 間做選擇？再客觀的做出抉擇前！我們得先來了解 React Context 和 Hooks 使用的正確姿勢！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Moving-beyond-console-log-—-8-Console-Methods-You-Should-Use-When-Debugging-JavaScript-and-Node"><a href="#Moving-beyond-console-log-—-8-Console-Methods-You-Should-Use-When-Debugging-JavaScript-and-Node" class="headerlink" title="Moving beyond console.log() — 8 Console Methods You Should Use When Debugging JavaScript and Node"></a><a href="https://levelup.gitconnected.com/moving-beyond-console-log-8-console-methods-you-should-use-when-debugging-javascript-and-node-25f6ac840ada" target="_blank" rel="noopener">Moving beyond console.log() — 8 Console Methods You Should Use When Debugging JavaScript and Node</a></h3><p>還在傻傻的用 <code>console.log</code> 找 bug 嗎？除了 log 之外其實 console 模組還有提供很多不同的 method，像是 <code>console.assert</code>、<code>console.table</code> 等等，善用這些 method 才能讓你事半功倍</p><h3 id="How-programming-languages-got-their-names"><a href="#How-programming-languages-got-their-names" class="headerlink" title="How programming languages got their names"></a><a href="https://dev.to/scottydocs/how-programming-languages-got-their-names-207e" target="_blank" rel="noopener">How programming languages got their names</a></h3><p>今天看到一篇很有趣的文章，在講 Python、Ruby、Perl 等等程式語言的名字是怎麼來的，沒什麼技術含量，當作冷知識來看看還不錯XD</p><h3 id="設計模式其實是程式語言的缺陷？"><a href="#設計模式其實是程式語言的缺陷？" class="headerlink" title="設計模式其實是程式語言的缺陷？"></a><a href="https://link.medium.com/dbnTOLK6Z2" target="_blank" rel="noopener">設計模式其實是程式語言的缺陷？</a></h3><p>設計模式是程式語言的缺陷嗎？每個人的想法可能不太一樣，但不管你認不認同都可以來讀讀這篇文章，裡面舉了一些例子在講不同模式在不同語言中的實作差異，很值得一讀</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="JavaScript-Visualized-the-JavaScript-Engine"><a href="#JavaScript-Visualized-the-JavaScript-Engine" class="headerlink" title="JavaScript Visualized: the JavaScript Engine"></a><a href="https://dev.to/lydiahallie/javascript-visualized-the-javascript-engine-4cdf" target="_blank" rel="noopener">JavaScript Visualized: the JavaScript Engine</a></h3><p>使用動畫的方式來解釋 JS 內部引擎的實作，Byte Stream 是什麼？Token 是什麼？Interpreter 如何走訪 AST 樹，並且產生 byte code。用看動畫的方式來學習感覺好清楚呀！</p><h3 id="JavaScript-Map-Method-Explained-by-Going-On-a-Hike"><a href="#JavaScript-Map-Method-Explained-by-Going-On-a-Hike" class="headerlink" title="JavaScript Map() Method Explained by Going On a Hike"></a><a href="https://dev.to/kbk0125/javascript-map-method-explained-by-going-on-a-hike--537i" target="_blank" rel="noopener">JavaScript Map() Method Explained by Going On a Hike</a></h3><p>用「遠足」來解釋 JS 中的 Map 方法，太有創意了！😆</p><h3 id="Vue-Testing-Crash-Course"><a href="#Vue-Testing-Crash-Course" class="headerlink" title="Vue Testing Crash Course"></a><a href="https://dev.to/blacksonic/vue-testing-crash-course-59kl" target="_blank" rel="noopener">Vue Testing Crash Course</a></h3><p>用十個範例入門 Vue.js 測試，從單元測試，到整合測試，到端對端測試 (E2E Test) 通通都有。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Chaos-Mesh-Cloud-Native-Chaos-Engineering-Platform"><a href="#Chaos-Mesh-Cloud-Native-Chaos-Engineering-Platform" class="headerlink" title="Chaos Mesh - Cloud Native Chaos Engineering Platform"></a><a href="https://github.com/pingcap/chaos-mesh" target="_blank" rel="noopener">Chaos Mesh - Cloud Native Chaos Engineering Platform</a></h3><p>Chaos Mesh 是一個 Cloud Native 的開源 Chaos Engineering 平台，主要是用來測試 Kubernetes 環境，開發到目前主要有兩個元件：</p><ul><li><p>Chaos Operator：為 Chaos Mesh 的主要核心元件，他會在可管理範圍內幫忙注入 Chaos 在 Application 和 K8S 內，主要透過 Controller-manager, Chaos-daemon 和 Sidecar 這三個元件的互相配合來達成在系統中製造 Chaos 的目標</p></li><li><p>Chaos Dashboard：用來呈現在 Chaos 實驗中，線上服務所受到的影響</p></li></ul><h3 id="Injecting-Vault-Secrets-into-Kubernetes-Pods-via-a-Sidecar-amp-Dynamic-Database-Credentials-with-Vault-and-Kubernetes"><a href="#Injecting-Vault-Secrets-into-Kubernetes-Pods-via-a-Sidecar-amp-Dynamic-Database-Credentials-with-Vault-and-Kubernetes" class="headerlink" title="Injecting Vault Secrets into Kubernetes Pods via a Sidecar &amp; Dynamic Database Credentials with Vault and Kubernetes"></a><a href="https://www.hashicorp.com/blog/injecting-vault-secrets-into-kubernetes-pods-via-a-sidecar/" target="_blank" rel="noopener">Injecting Vault Secrets into Kubernetes Pods via a Sidecar</a> &amp; <a href="https://www.hashicorp.com/blog/dynamic-database-credentials-with-vault-and-kubernetes/" target="_blank" rel="noopener">Dynamic Database Credentials with Vault and Kubernetes</a></h3><p>HashiCorp 在 2019 年底的時候發出了兩篇如何使用 Vault 來管理 Kubernetes 的文章，這次比較不一樣的地方在於，HashiCorp 開源了一個叫做 <a href="https://github.com/hashicorp/vault-k8s" target="_blank" rel="noopener">vault-k8s</a> 的專案，透過<a href="https://www.vaultproject.io/docs/platform/k8s/injector/index.html" target="_blank" rel="noopener">官方文件</a> 可以很清楚的看到它其實是透過 Kubernetes Mutation Webhook Controller 來協助作業，當 Pod 裡面的 annotation 帶有 <code>vault.hashicorp.com/agent-inject: true</code> 時，他就會根據使用者定義的其他 annotation 來更改這個 Pod (當然就是要如何將 Credentials 給注入進來)；這樣的做法其實在 K8S 的世界是目前很流行的正規方式，而且也不需要 Application 去改動到什麼邏輯，所以還在煩惱自己在 K8S 中的 Application 該怎麼整合 Vault 的話，趕緊來試試看 vault-k8s 就對了</p><h3 id="AWS-Open-Source-blog-in-review-2019"><a href="#AWS-Open-Source-blog-in-review-2019" class="headerlink" title="AWS Open Source blog in review: 2019"></a><a href="https://aws.amazon.com/blogs/opensource/open-source-blog-review-2019/" target="_blank" rel="noopener">AWS Open Source blog in review: 2019</a></h3><p>最近 AWS 與開源軟體圈好像越鬧越<a href="https://www.ithome.com.tw/news/134923" target="_blank" rel="noopener">不愉快</a>，不過 AWS 的態度跟立場都還滿強硬的，一直都透過公司的 PR 在表明他們做法的正確性，也在跨完年後，把自己對於 Open Source 的貢獻再次條列一番，尤其是把 2019 下半年爭議最大的 Open Distro for ElasticSearch 特別高光，真是看得心驚膽跳…</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>#9 第九期 - 今年的最後一天，星巴哥裡有你有我</title>
      <link href="/2019/12/31/09-starbugs-is-around-us/"/>
      <url>/2019/12/31/09-starbugs-is-around-us/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="從-IEEE-754-標準來看為什麼浮點誤差是無法避免的"><a href="#從-IEEE-754-標準來看為什麼浮點誤差是無法避免的" class="headerlink" title="從 IEEE 754 標準來看為什麼浮點誤差是無法避免的"></a><a href="https://medium.com/@larry850806/see-why-floating-point-error-can-not-be-avoided-from-ieee-754-809720b32175" target="_blank" rel="noopener">從 IEEE 754 標準來看為什麼浮點誤差是無法避免的</a></h3><p>為什麼浮點數運算會產生誤差而整數不會呢？ 如果誤差是無可避免的，那又該怎麼跟浮點誤差共處？<br>這週的專欄帶大家從 IEEE 754（二進位浮點數運算標準）出發，看看為什麼在小小 32 bit 的空間內有辦法表示那麼大範圍的浮點數，而浮點誤差又是從哪裡來的</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="【密技】台灣軟體業業界現況詳解、軟體工程師指南"><a href="#【密技】台灣軟體業業界現況詳解、軟體工程師指南" class="headerlink" title="【密技】台灣軟體業業界現況詳解、軟體工程師指南"></a><a href="https://m.gamer.com.tw/forum/C.php?bsn=60076&page=&snA=5444020&last=" target="_blank" rel="noopener">【密技】台灣軟體業業界現況詳解、軟體工程師指南</a></h3><p>又到了一整年的尾巴了，不曉得大家有沒有在考慮轉職？轉職一直是一件令人既期待又害怕的事情，常常好不容易下定決心，但又踏不出那一步，撇除掉同事問題，考慮的大概都會是「不曉得新公司文化適不適合我？」面對這個問題到底該怎麼辦？有沒有什麼經驗談？有的！本篇文章整理了台灣軟體業各種公司的現況，並將它們分成幾種種類加以說明！還有其他身為工程師該具備的重要能力！</p><h3 id="Why-amp-How-I-built-css-gg-A-life-story"><a href="#Why-amp-How-I-built-css-gg-A-life-story" class="headerlink" title="Why &amp; How I built css.gg - A life story."></a><a href="https://dev.to/astrit/why-how-did-i-build-500-css-only-icons-library-a-life-story-34on" target="_blank" rel="noopener">Why &amp; How I built css.gg - A life story.</a></h3><p>本篇文章講述完成一個 Project 背後的故事，作者因為喜歡，所以去做。他不會認為自己做的是很猛的東西，甚至認為這麼做是愚蠢的，但仍然完成了 <a href="https://css.gg/" target="_blank" rel="noopener">css.gg</a>，而且還發佈了文章向我們分享，為什麼？因為他真的很喜歡：）</p><p>有時候我們會慢慢變的像在被工作追著跑，然後忘記當初成為了這個職業的我們感到有多幸運，就像這篇文章吸引我的並不是 Project，而是作者熱愛 CSS 的精神，我很喜歡作者說的「I am trying to express how I felt on the beginning of the year and where I am now on the best just HAPPY」，瞬間起了一堆雞皮疙瘩！希望明年後年或大後年，我都仍然熱愛 JavaScript 技術！</p><h3 id="展望-JavaScript-的未來-2020-值得關注的-6-個新特性"><a href="#展望-JavaScript-的未來-2020-值得關注的-6-個新特性" class="headerlink" title="展望 JavaScript 的未來 - 2020 值得關注的 6 個新特性"></a><a href="https://www.linkedin.com/pulse/展望javascript的未來-2020值得關注的新特性-mike-huang-" target="_blank" rel="noopener">展望 JavaScript 的未來 - 2020 值得關注的 6 個新特性</a></h3><p>2020 年就要到了！一起來看看 JavaScript 會在明年釋出的版本中加入什麼樣的語法！不得不說，才看到第一個 Optional Chaining 就深深覺得可以省下很多判斷的功夫了 XD</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="一個資淺工程師年末的自我省視"><a href="#一個資淺工程師年末的自我省視" class="headerlink" title="一個資淺工程師年末的自我省視"></a><a href="https://blog.techbridge.cc/2016/12/31/review-2016/" target="_blank" rel="noopener">一個資淺工程師年末的自我省視</a></h3><p>不知不覺又到了年底，雖然已經是三年前的文章，但再看一次還是覺得很棒。新的一年，技術的廣度跟深度哪個重要？小公司跟大公司又該怎麼選？如果你也正在猶豫該往什麼方向前進的話，可以參考看看這篇文章的想法</p><h3 id="Stack-Overflow-Developer-Survey-2019"><a href="#Stack-Overflow-Developer-Survey-2019" class="headerlink" title="Stack Overflow Developer Survey 2019"></a><a href="https://insights.stackoverflow.com/survey/2019" target="_blank" rel="noopener">Stack Overflow Developer Survey 2019</a></h3><p>新的一年不知道該學什麼新技術嗎，快來看看 Stack Overflow 在今年做的調查：最熱門的語言是 JS、最受喜愛的語言是 Rust、最受喜愛的前端框架是 React，選個大家喜歡的學下去就對了</p><h3 id="A-Closer-Look-at-Go’s-sync-Package"><a href="#A-Closer-Look-at-Go’s-sync-Package" class="headerlink" title="A Closer Look at Go’s sync Package"></a><a href="https://link.medium.com/OPbIs9Q9P2" target="_blank" rel="noopener">A Closer Look at Go’s sync Package</a></h3><p>Goroutine 是 Go 最好用的 feature 之一，雖然用起來很方便，但只要 goroutine 一多就需要互相同步、溝通，這篇文章詳細介紹了 sync package 裡面的各種同步方式，包括 Mutex、WaitGroup 跟 Once 等等</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="A-Tour-of-the-Kubernetes-Source-Code-Part-One-From-kubectl-to-API-Server"><a href="#A-Tour-of-the-Kubernetes-Source-Code-Part-One-From-kubectl-to-API-Server" class="headerlink" title="A Tour of the Kubernetes Source Code Part One: From kubectl to API Server"></a><a href="https://developer.ibm.com/opentech/2017/06/21/tour-kubernetes-source-code-part-one-kubectl-api-server/" target="_blank" rel="noopener">A Tour of the Kubernetes Source Code Part One: From kubectl to API Server</a></h3><p>K8S 原始碼之旅第一部分，從 kubectl 到 API Server。 跑一個基本的 kubectl 指令，接著來追 kubectl 指令在 K8S 的原始碼如何實現作為起點，開始你的原始碼閱讀之旅。文中介紹了三個小技巧來追 K8S 原始碼，趕快來學習一下。</p><h3 id="Learning-Programming-Languages-with-Code-Challenges"><a href="#Learning-Programming-Languages-with-Code-Challenges" class="headerlink" title="Learning Programming Languages with Code Challenges"></a><a href="https://dev.to/jorge_rockr/learning-programming-languages-with-code-challenges-2gp4" target="_blank" rel="noopener">Learning Programming Languages with Code Challenges</a></h3><p>用  程式挑戰學程式語言，遵守五個原則：1. 選擇不是太簡單的挑戰。2. 使用 Cal Poly 的虛擬碼標準來寫下你的解法。3.用各種語言寫一遍。4.  上測試！用各種語言寫下單元測試。5. 解釋你學到了什麼。</p><h3 id="Computer-Science-from-the-Bottom-Up"><a href="#Computer-Science-from-the-Bottom-Up" class="headerlink" title="Computer Science from the Bottom Up"></a><a href="https://www.bottomupcs.com/index.xhtml" target="_blank" rel="noopener">Computer Science from the Bottom Up</a></h3><p>自下而上學計算機科學，一步一步學好滿滿的基礎知識。從二進位、計算機架構到作業系統。接著還有執行緒、記憶體、程式碼的編譯、在執行緒背後的知識 ，滿滿計算機科學知識的一本書，是不是應該收藏一下呢。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="How-Machine-Learning-Is-Used-by-Famous-Companies"><a href="#How-Machine-Learning-Is-Used-by-Famous-Companies" class="headerlink" title="How Machine Learning Is Used by Famous Companies?"></a><a href="https://www.geeksforgeeks.org/how-machine-learning-is-used-by-famous-companies/" target="_blank" rel="noopener">How Machine Learning Is Used by Famous Companies?</a></h3><p>Machine Learning 是當今炙手可熱的技術，甚至有人宣稱世界將因為他而毀滅，其他人則相信他可以讓生活更加的便利，而且不意外幾乎所有的公司都想要利用它來吸引更多的顧客，而事實上在過去四年採用 ML 的公司數目成長達到 270 %，而且不諱言只有科技公司有大量的資源來投資跟研究 ML 或是 AI，所以這篇文章主要想要聚焦於介紹如 Google，Facebook，Twitter，Baidu 跟 Pinterest 這類的大公司如何使用 ML</p><h3 id="4-DevOps-trends-to-watch-in-2020"><a href="#4-DevOps-trends-to-watch-in-2020" class="headerlink" title="4 DevOps trends to watch in 2020"></a><a href="https://enterprisersproject.com/article/2019/12/devops-trends-watch-2020" target="_blank" rel="noopener">4 DevOps trends to watch in 2020</a></h3><p>不管你才剛開始  往 DevOps 邁進或是已經是個老司機都無所謂，畢竟 DevOps 強調的就是持續的改善，所以趕緊來看看 2020 的 DevOps 四大趨勢吧！1) Cloud-Native 相關工具的採用 2) IT 領域的領導階層將會重新檢視 DevOps 的關鍵成功指標 3) DevOps 與 Security 間的關係將會越來越緊密 4) IT 領域的領導階層要去思考已經採用 DevOps 組織要如何再次進化</p><h3 id="Three-ways-to-reduce-the-costs-of-your-HTTP-S-API-on-AWS"><a href="#Three-ways-to-reduce-the-costs-of-your-HTTP-S-API-on-AWS" class="headerlink" title="Three ways to reduce the costs of your HTTP(S) API on AWS"></a><a href="https://gameanalytics.com/blog/reduce-costs-https-api-aws.html" target="_blank" rel="noopener">Three ways to reduce the costs of your HTTP(S) API on AWS</a></h3><p>三個可以幫助開發者節省運行在 AWS 內的 API 服務的小秘訣！1) 減少 HTTP Header 2) 減少 TLS Handshake 3) 檢查你的 Certificates，趕緊參考詳細文章來看看要怎麼實作與達成</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>#8 第八期 - 我的 ElasticSearch 進化之旅</title>
      <link href="/2019/12/24/08-elastic-evolution/"/>
      <url>/2019/12/24/08-elastic-evolution/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="我的-ElasticSearch-進化之旅"><a href="#我的-ElasticSearch-進化之旅" class="headerlink" title="我的 ElasticSearch 進化之旅"></a><a href="https://medium.com/starbugs/%E6%88%91%E7%9A%84-elasticsearch-log-%E6%94%B6%E9%9B%86%E4%B9%8B%E6%97%85-39016c3b9a29" target="_blank" rel="noopener">我的 ElasticSearch 進化之旅</a></h3><p>自己第一次接觸到 ElasticSearch 好像是六七年前了(遠目) 一路走來一直都是使用它來儲存 Log，畢竟 ELK 可是窮人版的 Splunk，這幾年來好像也沒有可以跟它匹敵的對手出現 (最近好像有個新的挑戰者受到不小的關注程度叫做 Grafana Loki)，而對他的印象從一開始到現在都沒有變過，就是…它相當地吃資源，不管是在 CPU, Memory 或是 Disk 上，而且隨著 Log 量級的成長會需要一直去升級和調整它，不然它一發起脾氣來可是很恐怖的，而今天這篇文章主要想要分享從我一開始架設 ElasticSearch 到目前為止的心得，並且會花比較多的篇幅講解目前的架設方式，總共有四個階段，用一句話來總結就是如何讓花費越來越低</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Make-Your-Own-create-react-app-Templates"><a href="#Make-Your-Own-create-react-app-Templates" class="headerlink" title="Make Your Own create-react-app Templates"></a><a href="https://dev.to/pallymore/make-your-own-create-react-app-templates-feo" target="_blank" rel="noopener">Make Your Own create-react-app Templates</a></h3><p>不曉得大家都怎麼創建一個新的 React 專案，以筆者來說都會先建立一個基本的專案，裡面有 package.json 和 webpack.config.js 等等，可以在 <code>npm i</code> 後直接 run 起來的那種，但每次也都還要再刪刪改改，把多餘的依賴 library 拿掉。而這些都只是過去式了！新版的 create-react-app 增加了 template 的功能！透過 template 的設置，你可以定義出自己的模板，還可以用 <code>publish</code> 和全世界分享你出色的 template！</p><h3 id="GraphQL-vs-REST-a-vending-machine-example"><a href="#GraphQL-vs-REST-a-vending-machine-example" class="headerlink" title="GraphQL vs REST - a vending machine example"></a><a href="https://dev.to/graphqleditor/graphql-vs-rest-a-vending-machine-example-1894" target="_blank" rel="noopener">GraphQL vs REST - a vending machine example</a></h3><p>記得兩個禮拜前的那篇 Gatsby 專欄嗎？在文章中有簡單解釋 GraphQL 是什麼和它的用法，如果大家覺得意猶未盡或是對 GraphQL 產生了什麼特別的情愫，那就可以參考這篇文章，看看如何從自動販賣機的使用角度解釋 GraphQL 和 REST 之間的不同！</p><h3 id="CSS-Grid-Layout-vs-CSS-Frameworks-When-To-Use-What"><a href="#CSS-Grid-Layout-vs-CSS-Frameworks-When-To-Use-What" class="headerlink" title="CSS Grid Layout vs CSS Frameworks: When To Use What"></a><a href="https://dzone.com/articles/css-grid-layout-vs-css-frameworks-when-to-use-what" target="_blank" rel="noopener">CSS Grid Layout vs CSS Frameworks: When To Use What</a></h3><p>Grid 的降臨，讓許多人都產生了「該不該繼續使用 CSS 的 Frameworks（例如：bootstrap）」的疑惑，因為撰寫原生的 CSS 能更將網頁玩轉在自己手裡，也不需要在使用上受限於 Frameworks 的 12 或 24 格，但是在放手之前又很捨不得 Frameworks 帶來的那些美好時光，到底要怎麼在兩者之間作出抉擇呢？</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Design-patterns-in-modern-JavaScript-development"><a href="#Design-patterns-in-modern-JavaScript-development" class="headerlink" title="Design patterns in modern JavaScript development"></a><a href="https://levelup.gitconnected.com/design-patterns-in-modern-javascript-development-ec84d8be06ca" target="_blank" rel="noopener">Design patterns in modern JavaScript development</a></h3><p>隨著程式越寫越久、專案越寫越大，一定都會遇到程式碼難以管理的情況，尤其身為團隊的一份子又要常常要接手同事的扣，這時候就需要 Design Pattern 了，這篇用圖解介紹了 Single、Observer、Facade 三種 pattern，因為設計模式這東西是不分語言的，所以即便不寫 JS 還是可以看看～</p><h3 id="Why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array"><a href="#Why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array" class="headerlink" title="Why is processing a sorted array faster than processing an unsorted array?"></a><a href="https://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array" target="_blank" rel="noopener">Why is processing a sorted array faster than processing an unsorted array?</a></h3><p>這篇 StackOverflow 上的回答講 Branch Prediction 講得超好！非常值得一讀。原發問者的問題是他寫了一個程式用來把 array 中大於 128 的數字加總，但他發現把陣列排序過後加總速度會快上許多，超神奇 der</p><h3 id="「管理開源專案最難的不是技術而是人。」Homebrew-十年開發故事"><a href="#「管理開源專案最難的不是技術而是人。」Homebrew-十年開發故事" class="headerlink" title="「管理開源專案最難的不是技術而是人。」Homebrew 十年開發故事"></a><a href="https://link.medium.com/EWBDrM69B2" target="_blank" rel="noopener">「管理開源專案最難的不是技術而是人。」Homebrew 十年開發故事</a></h3><p>如果你也是用 Mac 進行開發的話，一定有用過 Homebrew 這個 package manager，而且它也曾經是 Github 上貢獻者最多的專案，一起來看看 Homebrew 這十年是怎麼走過來的吧</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Node-js-是如何和-libuv-以及-v8-一起合作的"><a href="#Node-js-是如何和-libuv-以及-v8-一起合作的" class="headerlink" title="Node.js 是如何和 libuv 以及 v8 一起合作的"></a><a href="https://juejin.im/post/5dd0b1fff265da0bae519ed4" target="_blank" rel="noopener">Node.js 是如何和 libuv 以及 v8 一起合作的</a></h3><p>該文章當前使用的nodejs版本是 v13.1.0 (網上那些分析 nodejs 源碼的文章不寫清基於的版本都是耍流氓)，非常幹貨的一篇文章，請耐心閱讀，否則建議收藏。</p><h3 id="讀-Koa2-源碼後的一些思考與實現"><a href="#讀-Koa2-源碼後的一些思考與實現" class="headerlink" title="讀 Koa2 源碼後的一些思考與實現"></a><a href="https://juejin.im/post/5decf130f265da339565d40e" target="_blank" rel="noopener">讀 Koa2 源碼後的一些思考與實現</a></h3><p>本文目的主要是讓大家學到一個 koa2 的基本流程，簡單實現 koa2，再去讀源碼有一個清晰的思路。實際源碼中還有很多優秀的值得我們學習的點。</p><h3 id="What’s-New-for-Node-js-in-2020"><a href="#What’s-New-for-Node-js-in-2020" class="headerlink" title="What’s New for Node.js in 2020"></a><a href="https://juejin.im/post/5df7665ee51d455819022a17" target="_blank" rel="noopener">What’s New for Node.js in 2020</a></h3><p>NodeJS 13版本有哪些新東西? 一些亮點：ECMAScript模塊、WebAssembly支持、Diagnostic report 診斷報告、對日期, 時間, 數字與貨幣格式的完全本地化支持、QUIC協議支持、V8 JavaScript引擎性能更新。在我們一頭紮進這些特性的細節之前, 讓我們先從NodeJS的release計劃中看看有什麽值得期待的.</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="8-great-pytest-plugins"><a href="#8-great-pytest-plugins" class="headerlink" title="8 great pytest plugins"></a><a href="https://opensource.com/article/18/6/pytest-plugins" target="_blank" rel="noopener">8 great pytest plugins</a></h3><p>相信應該有不少人會使用 pytest 來撰寫自動化測試，本篇文章介紹八大好用的 Plugin，1) pytest-sugar 2) pytest-cov 3) pytest-picked 4) pytest-instafail 5) pytest-tldr 6) pytest-xdist 7) pytest-django 8) django-test-plus，有興趣的人趕緊點開來看詳細介紹！</p><h3 id="docker-compose-vim"><a href="#docker-compose-vim" class="headerlink" title="docker-compose.vim"></a><a href="https://github.com/skanehira/docker-compose.vim" target="_blank" rel="noopener">docker-compose.vim</a></h3><p>一個有趣的小專案，讓 vim 可以直接管理 docker compose 的 plubin，僅獻給離不開 vim 的開發人員們XD</p><h3 id="Deduping-HA-Prometheus-Samples-in-Cortex"><a href="#Deduping-HA-Prometheus-Samples-in-Cortex" class="headerlink" title="Deduping HA Prometheus Samples in Cortex"></a><a href="https://grafana.com/blog/2019/10/03/deduping-ha-prometheus-samples-in-cortex/" target="_blank" rel="noopener">Deduping HA Prometheus Samples in Cortex</a></h3><p>應該有不少人都有在使用 Prometheus，以往常常會被問到，假如監控者本身也掛掉那該怎麼辦呢？！所以監控者本身的 HA 也是不可忽視的，此篇文章介紹如何利用 Cortex 來讓 Prometheus 達成 HA</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，蹲得越久，腳就越酸。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>#7 第七期 - 開源專案的名模生死鬥</title>
      <link href="/2019/12/17/07-open-source-projects-fighting/"/>
      <url>/2019/12/17/07-open-source-projects-fighting/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="用-Harbor-架設-Private-Docker-Registry"><a href="#用-Harbor-架設-Private-Docker-Registry" class="headerlink" title="用 Harbor 架設 Private Docker Registry"></a><a href="https://medium.com/starbugs/4b8d9b57c824" target="_blank" rel="noopener">用 Harbor 架設 Private Docker Registry</a></h3><p>什麼是 Docker Registry ？ 顧名思義就是用來儲存鏡像檔 (Image) 的地方。例如：DockerHub 就是 Docker 官方提供的 Docker Registry，你可以把你自己編寫的 Dockerfile 編譯之後上傳到 Dockerhub ，讓網路上的其他人自由的下載，讓大家站在你的肩膀上寫程式。而 Harbor 可以讓你在公司內部自行架設</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="I-Built-A-Successful-Blog-In-One-Year-And-You-Can-Too-7-Tips-For-Enhancing-Readership"><a href="#I-Built-A-Successful-Blog-In-One-Year-And-You-Can-Too-7-Tips-For-Enhancing-Readership" class="headerlink" title="I Built A Successful Blog In One Year, And You Can Too; 7 Tips For Enhancing Readership"></a><a href="https://dev.to/emmawedekind/i-built-a-successful-blog-in-one-year-and-you-can-too-7-tips-for-enhancing-readership-5f8b" target="_blank" rel="noopener">I Built A Successful Blog In One Year, And You Can Too; 7 Tips For Enhancing Readership</a></h3><p>在資訊界走跳，每天都在接觸不同的東西，踩著不一樣的雷，填起一個個遇到的坑，是否會在某個時刻想要把自己的學習過程記錄下來，然後想著是不是有一天也能夠幫助到別人？但到底經營技術部落到底是一個什麼樣的感覺？或該怎麼做？如果你抱持著這些疑惑，那非常推薦閱讀這篇文章！我最喜歡裡面的一句「CREATE CONTENT YOU LOVE, NOT CONTENT YOU THINK OTHERS WANT TO ABSORB.」，那你們呢？快來告訴我：）</p><h3 id="Why-Your-Team-Needs-to-Start-Unit-Testing-Right-Now"><a href="#Why-Your-Team-Needs-to-Start-Unit-Testing-Right-Now" class="headerlink" title="Why Your Team Needs to Start Unit Testing Right Now"></a><a href="https://dzone.com/articles/why-your-team-needs-to-start-unit-testing-right-no" target="_blank" rel="noopener">Why Your Team Needs to Start Unit Testing Right Now</a></h3><p>為什麼需要替程式寫單元測試？不但要多花時間，而且就算不學也可以把事情做好，不是嗎？本篇作者不談程式，反而以一些生活上的簡單例子來點出為什麼該進行單元測試，很適合還在評估或是猶豫的朋友可以看一下！</p><h3 id="A-better-approach-for-testing-your-Redux-code"><a href="#A-better-approach-for-testing-your-Redux-code" class="headerlink" title="A better approach for testing your Redux code"></a><a href="https://blog-henriquebarcelos-dev.cdn.ampproject.org/c/s/blog.henriquebarcelos.dev/amp/a-better-approach-for-testing-your-redux-code-ck3dnpqnu00uro4s178b8aw3e" target="_blank" rel="noopener">A better approach for testing your Redux code</a></h3><p>該怎麼劃分一個單元的測試一直是很困擾人的問題，以 Redux 為例，要更新 store 內的資料就能劃分為 action 和 reducer 兩種，但是分別對 action 和 reducer 各自做測試並不會讓測試顯得有價值，還會導致每一個單元測試的內容都太破碎，完全無法透過閱讀單元測試發現錯誤在哪，以及如何使用或出錯。好的，那測試到底該怎麼做才好，一起來看看作者怎麼說！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="How-a-Go-Program-Compiles-down-to-Machine-Code"><a href="#How-a-Go-Program-Compiles-down-to-Machine-Code" class="headerlink" title="How a Go Program Compiles down to Machine Code"></a><a href="https://medium.com/better-programming/how-a-go-program-compiles-down-to-machine-code-e4532dc8b8ca" target="_blank" rel="noopener">How a Go Program Compiles down to Machine Code</a></h3><p>我幾乎不會推薦 Medium 付費牆上的文章，因為這樣很像在幫作者業配 XD，但這篇真的寫得太好了不得不推一下。這篇詳細講解了你寫的 Go 程式碼是怎麼被編譯成 machine code，過程包含切成 token、組成 AST、產生 SSA 等等步驟，而且還有範例可以跟著做，對於編譯器技術有興趣的朋友們真的不能不讀</p><h3 id="How-Medium-does-progressive-image-loading"><a href="#How-Medium-does-progressive-image-loading" class="headerlink" title="How Medium does progressive image loading"></a><a href="https://jmperezperez.com/medium-image-progressive-loading-placeholder/" target="_blank" rel="noopener">How Medium does progressive image loading</a></h3><p>如果你有常在看 Medium 上的文章，應該就會發現圖片都是漸進式的載入：先呈現一張模糊的圖片，接著等大圖下載好了再換成高解析度的圖，這樣就能給使用者一種圖片載入很快的錯覺，而 Google 跟 Facebook 也是用了類似的方法在加快圖片載入，滿有趣的</p><h3 id="The-Slowest-Quicksort"><a href="#The-Slowest-Quicksort" class="headerlink" title="The Slowest Quicksort"></a><a href="https://chasewilson.dev/blog/slowest-quicksort/" target="_blank" rel="noopener">The Slowest Quicksort</a></h3><p>作者先用 Rust 簡單寫了個 Quicksort，然後嘗試用 Box(Indirection)、Arc(Mutex)、Thread 等等進階技巧想辦法讓他變得超～級～慢，當然這個 Quicksort 是不可能真的拿來用的，只是藉這個例子告訴大家哪些功能不要亂用，除非你真的知道為什麼需要他</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Why-and-How-to-make-a-Requirements-txt"><a href="#Why-and-How-to-make-a-Requirements-txt" class="headerlink" title="Why and How to make a Requirements.txt"></a><a href="https://medium.com/@boscacci/why-and-how-to-make-a-requirements-txt-f329c685181e" target="_blank" rel="noopener">Why and How to make a Requirements.txt</a></h3><p>為什麼我們要使用 Requirements.txt，又該怎麼用呢？ 現在有了 <a href="https://pipenv.readthedocs.io/en/latest/" target="_blank" rel="noopener">Pipenv</a> 來管理開發環境很方便，但還是很想了解 Python 的各種歷史演進，因此本週就帶來一篇介紹 Requirements.txt 的文章。</p><h3 id="Computer-Science-vs-Software-Engineering-Which-Major-Is-Best-For-You"><a href="#Computer-Science-vs-Software-Engineering-Which-Major-Is-Best-For-You" class="headerlink" title="Computer Science vs. Software Engineering: Which Major Is Best For You?"></a><a href="https://medium.com/better-programming/computer-science-vs-software-engineering-which-one-is-a-better-major-88482c38446b" target="_blank" rel="noopener">Computer Science vs. Software Engineering: Which Major Is Best For You?</a></h3><p>資料科學和軟體開發，哪個一個更適合你呢？本文從工作前景、需要進修的課程…等等的角度，來探討你到底適合你一種呢？</p><h3 id="Understanding-Promises-in-JavaScript"><a href="#Understanding-Promises-in-JavaScript" class="headerlink" title="Understanding Promises in JavaScript"></a><a href="https://medium.com/better-programming/understanding-promises-in-javascript-13d99df067c1" target="_blank" rel="noopener">Understanding Promises in JavaScript</a></h3><p>史上最完整探討 JS 中的 Promise，從了解 Promise 開始，用圖片呈現 Promise 狀態的改變，並有多個範例解釋 Promise.All、Promise.race。最後歸納出幾個規則來使用 Promises，真是太豐富啦！</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="【Dev】開源專案的名模生死鬥"><a href="#【Dev】開源專案的名模生死鬥" class="headerlink" title="【Dev】開源專案的名模生死鬥"></a>【Dev】開源專案的名模生死鬥</h3><p>年終將近，越來越多的 2019 回顧或是 2020 展望的文章逐漸出爐，今天要來看的是十年來八大最糟，和 2019 年度九大開源專案，沒有想到 Ubuntu 就這樣被提了三次XD</p><p>★ 十年來最糟的八大開源專案：</p><ol><li>The Steam Machine</li><li>Ubuntu Unity</li><li>Ubuntu Phone</li><li>Ubuntu Edge</li><li>Apartheid Linux</li><li>Diaspora</li><li>RethinkDB</li><li>Samsung DeX for Linux</li></ol><p>★ 2019 年度九大開源專案：</p><ol><li>Kubernetes</li><li>Docker</li><li>System76 and coreboot</li><li>Linux phone</li><li>CentOS 8 and CentOS Stream</li><li>Debian 10</li><li>Migrate Android to the mainline Linux kernel</li><li>Linux Kernel 5.4</li><li>Microsoft Edge browser</li></ol><p>▍原文連結 1：<a href="https://www.techrepublic.com/article/8-of-the-worst-open-source-innovations-of-the-decade/" target="_blank" rel="noopener">https://www.techrepublic.com/article/8-of-the-worst-open-source-innovations-of-the-decade/</a><br>▍原文連結 2：<a href="https://www.techrepublic.com/article/9-of-the-biggest-open-source-stories-in-2019/" target="_blank" rel="noopener">https://www.techrepublic.com/article/9-of-the-biggest-open-source-stories-in-2019/</a></p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，蹲得越久，腳就越酸。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>#6 第六期 - 不是木村拓哉也能玩轉 Gatsby</title>
      <link href="/2019/12/10/06-this-gatsby-is-not-gatsby/"/>
      <url>/2019/12/10/06-this-gatsby-is-not-gatsby/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Gatsby-不是木村拓哉也能玩轉-Gatsby-—-feat-GitHub-Pages"><a href="#Gatsby-不是木村拓哉也能玩轉-Gatsby-—-feat-GitHub-Pages" class="headerlink" title="Gatsby | 不是木村拓哉也能玩轉 Gatsby — feat. GitHub Pages"></a><a href="https://medium.com/starbugs/gatsby-%E4%B8%8D%E6%98%AF%E6%9C%A8%E6%9D%91%E6%8B%93%E5%93%89%E4%B9%9F%E8%83%BD%E7%8E%A9%E8%BD%89-gatsby-feat-github-pages-fe2318a2e50d" target="_blank" rel="noopener">Gatsby | 不是木村拓哉也能玩轉 Gatsby — feat. GitHub Pages</a></h3><p>今天要介紹的 Gatsby 是一個網站的建構工具，不只是 React 的官網，還有其他多達七百多種的網站都是用 Gatsby 開發，而且更讓人興奮的是，這之中還包含兩百多個開源專案，Gatsby 到底擁有什麼魔力？就讓我開箱一波吧！</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Oh-the-Suspense"><a href="#Oh-the-Suspense" class="headerlink" title="Oh, the Suspense!"></a><a href="https://react.christmas/2019/4" target="_blank" rel="noopener">Oh, the Suspense!</a></h3><p>記得上禮拜說的 Suspense 嗎？隨著時間不斷推移，在 <a href="https://www.youtube.com/playlist?list=PLPxbbTqCLbGHPxZpw4xj_Wwg8-fdNxJRh" target="_blank" rel="noopener">React Conf 2019</a> 結束後每過一天，就更是期待它的出現！國外也有許多開發者開始研究、了解，甚至是分享 Suspense 的基礎知識，趁現在浪還沒衝到沙灘，大家快跟上啊！</p><h3 id="CSS-flexbox-cheat-sheet-with-examples"><a href="#CSS-flexbox-cheat-sheet-with-examples" class="headerlink" title="CSS flexbox cheat sheet (with examples)"></a><a href="https://dev.to/ibrahima92/css-flexbox-cheat-sheet-with-examples-3j20" target="_blank" rel="noopener">CSS flexbox cheat sheet (with examples)</a></h3><p>在一開始接觸前端的時候，切版和 RWD 真的是心中永遠的痛，但讓我浮誇又不失真誠地說一句，自從學了 Flex 後，前端技能樹就像簽了金手指，手起刀落就是一個版！最後加碼一個人人都愛的 <a href="https://flexboxfroggy.com/#zh-tw" target="_blank" rel="noopener">青蛙遊戲</a> 和 <a href="https://www.hexschool.com/" target="_blank" rel="noopener">六角學院</a> 學員所製作的 <a href="https://hexschool.github.io/flexbox-pirate/index.html?fbclid=IwAR1f4YqcyjubPKQpvsKpGqJ_j0qV_tpiQ0FGSam9TooOPyS_O4h9IDVbd1A#/" target="_blank" rel="noopener">Flex Pirate</a> 讓大家小試 Flex！</p><h3 id="💻⚒-Productivity-and-tracking-extensions-for-Visual-Studio-Code-⚒💻"><a href="#💻⚒-Productivity-and-tracking-extensions-for-Visual-Studio-Code-⚒💻" class="headerlink" title="💻⚒ Productivity and tracking extensions for Visual Studio Code ⚒💻"></a><a href="https://dev.to/lampewebdev/productivity-and-tracking-extensions-for-visual-studio-code-1h84" target="_blank" rel="noopener">💻⚒ Productivity and tracking extensions for Visual Studio Code ⚒💻</a></h3><p>不曉得大家在 coding 的時候，有沒有注意過自己的「生產力」？什麼時候會是自己精神最集中的時候，或是過了多久時間後注意力會開始渙散，文中推薦了幾個 VS Code 的擴充套件，讓你能夠認知到自己一天下來的「生產力」為何，並用更有效率的方式運用開發時間！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="为什么-Redis-选择单线程模型"><a href="#为什么-Redis-选择单线程模型" class="headerlink" title="为什么 Redis 选择单线程模型"></a><a href="https://draveness.me/whys-the-design-redis-single-thread" target="_blank" rel="noopener">为什么 Redis 选择单线程模型</a></h3><p>Redis 是一個廣為人知的 in-memory 資料庫，只要說到 cache 第一時間都是想到他。雖然 Redis 真的跑很快，但其實 Redis 在大部分時候都只用 Single Thread 在處理指令，而這篇文章就是在探討為什麼 Redis 根本不需要 Multi Thread，滿有趣的分析</p><h3 id="Don’t-use-Go’s-default-HTTP-client"><a href="#Don’t-use-Go’s-default-HTTP-client" class="headerlink" title="Don’t use Go’s default HTTP client"></a><a href="https://link.medium.com/fMcDU2Brf2" target="_blank" rel="noopener">Don’t use Go’s default HTTP client</a></h3><p>雖然 Go 預設的 HTTP client 很好用，但因為他沒有預設的 timeout，所以不建議使用在 Production 上，真的要發 HTTP 請求給外部服務的話還是建議自己建一個有 timeout 的 Client</p><h3 id="What’s-New-for-Node-js-in-2020"><a href="#What’s-New-for-Node-js-in-2020" class="headerlink" title="What’s New for Node.js in 2020"></a><a href="https://developer.okta.com/blog/2019/12/04/whats-new-nodejs-2020" target="_blank" rel="noopener">What’s New for Node.js in 2020</a></h3><p>今年 2019 是 Node.js 的十歲生日，這十年來 Node.js 以飛快的速度成長，npm 上的模組數量也已經突破一百萬。而在接下來的 2020 年 Node.js 也要繼續帶來新的 feature，包括正式支援 ES Module、Web Assembly、QUIC protocol 等等，身為 Node.js 的愛好者真的超期待的～</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Python-at-Netflix"><a href="#Python-at-Netflix" class="headerlink" title="Python at Netflix"></a><a href="https://medium.com/netflix-techblog/python-at-netflix-bba45dae649e" target="_blank" rel="noopener">Python at Netflix</a></h3><p>Python 在 Netflix 裡面扮演什麼樣的角色？CDN？監控系統？還是機器學習？讓我們來一探究竟！</p><h3 id="34-Amazing-Python-Open-Source-Libraries-for-the-Past-Year-v-2019"><a href="#34-Amazing-Python-Open-Source-Libraries-for-the-Past-Year-v-2019" class="headerlink" title="34 Amazing Python Open Source Libraries for the Past Year (v.2019)"></a><a href="https://medium.mybridge.co/34-amazing-python-open-source-libraries-for-the-past-year-v-2019-93d6ee11aceb" target="_blank" rel="noopener">34 Amazing Python Open Source Libraries for the Past Year (v.2019)</a></h3><p>本文比較了一萬個 Python 的開源專案，並且挑選出了 34 個最實用的工具（平均星星數 3293 個）來幫助你更有效率的開發。</p><h3 id="Intro-to-Threads-and-Processes-in-Python"><a href="#Intro-to-Threads-and-Processes-in-Python" class="headerlink" title="Intro to Threads and Processes in Python"></a><a href="https://medium.com/@bfortuner/python-multithreading-vs-multiprocessing-73072ce5600b" target="_blank" rel="noopener">Intro to Threads and Processes in Python</a></h3><p>Python 中的 Thread 和 Process 到底是怎麼回事？跟 CPU 密集與 IO 密集又有什麼關係？趕緊來惡補一下。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="【Security】雖然已經有點年紀，但還是很流行且危險度高的-SQL-Injection"><a href="#【Security】雖然已經有點年紀，但還是很流行且危險度高的-SQL-Injection" class="headerlink" title="【Security】雖然已經有點年紀，但還是很流行且危險度高的 SQL Injection"></a>【Security】雖然已經有點年紀，但還是很流行且危險度高的 SQL Injection</h3><p>★ SQL 是設計用來管理儲存在 RDBMS 的資料，因此它可以用來存取，修改以及刪除資料，而且 RDBMS 也能夠從 SQL Statement 執行作業系統指令；所以一旦攻擊者成功地 SQL Injection，他將能夠忽略認證甚至是假裝成特定的使用者，偷偷修改資料，刪除資料，而且有些資料庫會設定成可以執行作業系統指令，如此一來攻擊者便獲得一台可以無視防火牆去存取內部網路其他服務的跳板</p><p>★ SQL Injection 要成功必須要滿足兩個條件 1) 一個使用 SQL 的關聯式資料庫，2) 讓使用者可以自行輸入 SQL 查詢的地方 (這不是廢話嗎XD)，在開發的過程中，錯誤資訊對於開發者很有幫助，同理可證，攻擊者也可以透過這些錯誤資訊獲得資料庫的結構，在某些情況下甚至能藉其將整個資料庫給摸透，因此記得在正式環境要將資料庫顯示錯誤資訊的功能關掉；另一個常見的技巧則是透過 UNION 去結合兩個或是多個 SELECT 語法將許多的搜尋結果合併成一個，會介紹這篇文章當然不是想要大家去攻擊別人的網站，而是希望在開發或是設定的時候可以避免掉這些問題的發生</p><p>★ 底下將會使用簡單的例子把各種基本技巧演示一次，這邊僅列出大標題，詳細範例可以參考原文</p><ul><li>BLIND SQL INJECTION (THE HARDER PART)</li><li>BLIND SQL INJECTION</li><li>TEST IF SUBSELECT WORKS</li><li>CHECK TABLE AND COLUMN NAMES</li><li>EXTRACT DATA FROM DATABASE</li></ul><p>▍原文連結：<a href="https://headleaks.com/2019/08/16/sql-injection-tutorial-for-beginners-aTROdTZIS05DSXVlYzlLS0lIZlEvZz09" target="_blank" rel="noopener">https://headleaks.com/2019/08/16/sql-injection-tutorial-for-beginners-aTROdTZIS05DSXVlYzlLS0lIZlEvZz09</a></p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，蹲得越久，腳就越酸。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>#5 第五期 - 聽隔壁同事說 DDD 是 Deadline Driven Development 的意思</title>
      <link href="/2019/12/03/05-deadline-driven-development/"/>
      <url>/2019/12/03/05-deadline-driven-development/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="為什麼你應該幫-Rust-Vector-加上初始容量"><a href="#為什麼你應該幫-Rust-Vector-加上初始容量" class="headerlink" title="為什麼你應該幫 Rust Vector 加上初始容量"></a><a href="https://medium.com/starbugs/why-you-should-set-initial-capacity-for-rust-vector-4d68a9127abd" target="_blank" rel="noopener">為什麼你應該幫 Rust Vector 加上初始容量</a></h3><p>在比較高階的程式語言中通常都會提供 Growable Array 的型別，像 Rust 的 Vector、Go 的 Slice 還有 Java 的 ArrayList 就是很好的例子，這禮拜的文章會透過分析 Rust Vector 的擴充機制來告訴你為什麼應該要幫 Vector 加上初始容量。因為各個語言這種 Growable Array 的機制都差不多，所以就算你不是寫 Rust 的開發者還是可以來了解一下</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="理解-React-的下一步：Concurrent-Mode-與-Suspense"><a href="#理解-React-的下一步：Concurrent-Mode-與-Suspense" class="headerlink" title="理解 React 的下一步：Concurrent Mode 與 Suspense"></a><a href="https://medium.com/@chentsulin/%E7%90%86%E8%A7%A3-react-%E7%9A%84%E4%B8%8B%E4%B8%80%E6%AD%A5-concurrent-mode-%E8%88%87-suspense-327b8a3df0fe" target="_blank" rel="noopener">理解 React 的下一步：Concurrent Mode 與 Suspense</a></h3><p>作者精心整理了在 <a href="https://www.youtube.com/playlist?list=PLPxbbTqCLbGHPxZpw4xj_Wwg8-fdNxJRh" target="_blank" rel="noopener">React Conf 2019</a> 裡提到的許多未來會增加的功能！身為同是 React 的開發者，真的越看越興奮，就像去年期待 Hooks 發佈一樣，這次我最喜歡 Suspense 的使用，看完文章後快來告訴我你們最期待的是什麼！如果各位真的等不及，也可以先安裝 <a href="https://reactjs.org/docs/concurrent-mode-adoption.html" target="_blank" rel="noopener">experimental</a> 版本來玩玩看！</p><h3 id="React-SWR-取得遠端資料的殺手級函式庫"><a href="#React-SWR-取得遠端資料的殺手級函式庫" class="headerlink" title="React SWR | 取得遠端資料的殺手級函式庫"></a><a href="https://medium.com/%E6%89%8B%E5%AF%AB%E7%AD%86%E8%A8%98/react-swr-485b8e41ef78" target="_blank" rel="noopener">React SWR | 取得遠端資料的殺手級函式庫</a></h3><p>你也期待 Suspense 嗎？雖然 React 團隊還沒將它放進正式版（被歸納為實驗性質），但你仍然可以透過 <a href="https://swr.now.sh/" target="_blank" rel="noopener">SWR</a> 來搶先體會這強大的功能！SWR 是一個 Hooks，用來呼叫 API 來獲得資料。它能夠再 Render 時先從緩存取出舊資料顯示，並等 API 拿到最新的資料後更新畫面！簡單來說獲取到的資料就會先填好填滿，頁面不再經過等待 API 回應的空白，人生也從此跟著擁有色彩：）</p><h3 id="11-Best-JavaScript-Unit-Testing-Framework-and-Tools"><a href="#11-Best-JavaScript-Unit-Testing-Framework-and-Tools" class="headerlink" title="11 Best JavaScript Unit Testing Framework and Tools"></a><a href="https://geekflare.com/javascript-unit-testing/" target="_blank" rel="noopener">11 Best JavaScript Unit Testing Framework and Tools</a></h3><p>前端框架百百種，其中用來做測試的框架也不少，但該怎麼知道哪些測試框架用來做什麼？哪些又適合你目前需要的？作者精選出了 11 個最好的測試框架來介紹一番，看完後不管是喜歡功能或單純 Logo 的部分（本人覺得 <a href="https://github.com/puppeteer/puppeteer" target="_blank" rel="noopener">Puppeteer</a> 的 Logo 滿 Q 的 XD），相信一定能選出適合讓你捧在手心的 Library. Right！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Go-語言使用-Select-四大用法-AppleBOY"><a href="#Go-語言使用-Select-四大用法-AppleBOY" class="headerlink" title="Go 語言使用 Select 四大用法 | AppleBOY"></a><a href="https://blog.wu-boy.com/2019/11/four-tips-with-select-in-golang/" target="_blank" rel="noopener">Go 語言使用 Select 四大用法 | AppleBOY</a></h3><p>select 是 Go 裡面用來選取 channel 的語法，他可以用來做到隨機選取、超時處理等等功能，如果你是 Golang 初學者的話不妨來看看這些 select 的小技巧</p><h3 id="Announcing-core-Node-js-support-for-ECMAScript-modules"><a href="#Announcing-core-Node-js-support-for-ECMAScript-modules" class="headerlink" title="Announcing core Node.js support for ECMAScript modules"></a><a href="https://medium.com/@nodejs/announcing-core-node-js-support-for-ecmascript-modules-c5d6dc29b663" target="_blank" rel="noopener">Announcing core Node.js support for ECMAScript modules</a></h3><p>以前若要在 Node.js 裡面使用 ES module 的話要加上 <code>--experimental-module</code> flag 才行，而且副檔名還必須是 <code>.mjs</code>，用起來很不順手。但從 Node 13.2.0 開始終於正式支援 ES Module 了，而且還支援以 <code>.js</code> 作為副檔名，這代表前後端的 JS 模組系統終於要統一了，而曾經紅極一時的的 Common JS 也將慢慢走入歷史</p><h3 id="My-Favorite-Algorithm-Linear-Time-Median-Finding"><a href="#My-Favorite-Algorithm-Linear-Time-Median-Finding" class="headerlink" title="My Favorite Algorithm: Linear Time Median Finding"></a><a href="https://rcoh.me/posts/linear-time-median-finding/" target="_blank" rel="noopener">My Favorite Algorithm: Linear Time Median Finding</a></h3><p>很多人求中位數的方法應該都是把 Array 排序之後選中間的那個 element，這樣做的時間複雜度是 O(nlogn) 也不算差，但其實善用 Divide and Conquer 的話可以做到 O(n)，如果有天你需要求一個巨大 Array 的中位數可能就會用到這個演算法</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="DevOps-Is-Dead-Long-Live-NoOps"><a href="#DevOps-Is-Dead-Long-Live-NoOps" class="headerlink" title="DevOps Is Dead, Long Live NoOps"></a><a href="https://medium.com/better-programming/devop-noops-difference-504dfc4e9faa" target="_blank" rel="noopener">DevOps Is Dead, Long Live NoOps</a></h3><p>DevOps 已死，NoOps 長存。DevOps 和 NoOps 有什麼不一樣？DevOps 意思是開發人員和運維人員合作，從設計到交付，定義服務的生命週期。而 NoOps 意思是沒有運維。它的哲學「去除所有平台的管理」和「減少在開發者和架構中」的摩擦 – 節錄翻譯自原文。</p><h3 id="AsyncIO-for-the-Working-Python-Developer"><a href="#AsyncIO-for-the-Working-Python-Developer" class="headerlink" title="AsyncIO for the Working Python Developer"></a><a href="https://hackernoon.com/asyncio-for-the-working-python-developer-5c468e6e2e8e" target="_blank" rel="noopener">AsyncIO for the Working Python Developer</a></h3><p>asyncio 是在 Python 3.4 中被介紹的新併發 (concurrency) 模組。它設計用於協程 (coroutines) 和 Python 中的 futures，以簡化非同步的程式碼，讓非同步的程式碼也可以像同步的程式碼一樣可讀 – 節錄翻譯自原文。</p><h3 id="What-the-mock-—-A-cheatsheet-for-mocking-in-Python"><a href="#What-the-mock-—-A-cheatsheet-for-mocking-in-Python" class="headerlink" title="What the mock? — A cheatsheet for mocking in Python"></a><a href="https://medium.com/@yeraydiazdiaz/what-the-mock-cheatsheet-mocking-in-python-6a71db997832" target="_blank" rel="noopener">What the mock? — A cheatsheet for mocking in Python</a></h3><p>測試中 Mock 是不可或缺的一部分，那麼在 Python 中的 Mock 又該如何寫呢？來看看這篇豐富的小抄吧。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="【Kubernetes】Service-Catalog-是什麼？它可以吃嗎？"><a href="#【Kubernetes】Service-Catalog-是什麼？它可以吃嗎？" class="headerlink" title="【Kubernetes】Service Catalog 是什麼？它可以吃嗎？"></a>【Kubernetes】Service Catalog 是什麼？它可以吃嗎？</h3><p>★ 身為 K8S 的使用者或是維護人員，常常必須要負責在整個架構中配置各式各樣的資源，雖然已經使用了像是 Service, ConfigMap 和 Secret…等 K8S 內部資源，但是有時候需要使用到由 Cloud Provider 所提供的外部服務，以 AWS 提供的 RDS 為例，他讓使用者可以抽象地存取關聯式資料庫服務，但是當想要把 RDS 整合到既有的 K8S 叢集中，讓他可以像是 K8S 內部資源一樣來使用的話，還是有不少的手工需要完成，例如怎麼把 Authentication 搞定…</p><p>★ 而 Service Catalog 用一句話來說，就是一個讓在叢集內的運行的應用程式可以簡單地去使用外部資源和應用的擴展 API，譬如幫忙去處理配置資料庫，管理 Queue 的服務或是 Object Storage…等，而且只要 Client 端的實作有符合 Open Service Broker API 就能達成；可以將 K8S Service Catalog 視為是另外一個運行在原本 K8S 中的 K8S 叢集，雖然 K8S 有很多種資源類型 (Pod, Deployment, ReplicaSet…等)，不過 K8S Service Catalog 只有四種</p><ol><li>ClusterServiceBroker：負責提供外部服務的系統</li><li>CluserServiceClass：外部系統所能提供的服務</li><li>ServiceInstance：代表外部已經配置完成的服務</li><li>ServiceBinding：一個或是多個 Pod 與 ServiceInstance 的 Binding</li></ol><p>★ 而就像剛剛提到的要將 K8S Service Catalog 視為是另外一個 K8S 叢集，他只是為了特定目的設計而成，而組成它的元件有底下三個，Controller 會一直監視 API Server，當檢查到有任何變更時 (例如添加新資源需要創建)，對應的 Service Broker 就會負責去建立跟配置此資源，Controller 本身並不會自己動手去做</p><ol><li>API Server</li><li>etcd Datastore</li><li>Controller Manager</li></ol><p>★ 講了那麼多理論，有沒有覺得可以永遠躲在 K8S 裡面，不用再管外面世界的紛紛擾擾了XD 有興趣的人可以趕緊根據文章內的 Demo 嘗試看看</p><p>▍原文連結：<a href="https://www-magalix-com.cdn.ampproject.org/v/s/www.magalix.com/blog/kubernetes-service-catalog-101?hs_amp=true&amp;usqp=mq331AQCKAE%3D&amp;amp_js_v=0.1" target="_blank" rel="noopener">https://www-magalix-com.cdn.ampproject.org/v/s/www.magalix.com/blog/kubernetes-service-catalog-101?hs_amp=true&amp;usqp=mq331AQCKAE%3D&amp;amp_js_v=0.1</a></p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - 82 年次，單純相信努力不會騙人</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>#4 第四期 - Wow 現在連 Policy 也可以寫成 Code 了！</title>
      <link href="/2019/11/26/04-policy-as-code/"/>
      <url>/2019/11/26/04-policy-as-code/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Policy-as-Code-Introduction-—-Shift-Left-Testing-Cloud-Infrastructure-StarBugs-星巴哥技術週刊"><a href="#Policy-as-Code-Introduction-—-Shift-Left-Testing-Cloud-Infrastructure-StarBugs-星巴哥技術週刊" class="headerlink" title="Policy as Code Introduction — Shift-Left Testing Cloud Infrastructure | StarBugs 星巴哥技術週刊"></a><a href="https://medium.com/starbugs/policy-as-code-introduction-43332748aa4a" target="_blank" rel="noopener">Policy as Code Introduction — Shift-Left Testing Cloud Infrastructure | StarBugs 星巴哥技術週刊</a></h3><p>常常可以看到科技新聞提到誰家的資料庫或是搜尋引擎可以被公開存取，某間大公司的 AWS S3 含有的客戶資料外洩了…等；Security 在未來的世界中所佔的重要性將越來越重要，希望透過此文章介紹在 Policy As Code 領域逐漸崛起的 Open Policy Agent，並進一步透過實際案例示範如何使用其撰寫的程式碼來測試 Cloud Infrastructure，確保企業內的應用服務遵守 Compliance Policy 和 Security Policy，並且達成最佳的維運方式！</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="軟體開發中的“無緒”"><a href="#軟體開發中的“無緒”" class="headerlink" title="軟體開發中的“無緒”"></a><a href="https://wadehuang1993.github.io/blog/2019/11/21/Cluelessness/" target="_blank" rel="noopener">軟體開發中的“無緒”</a></h3><p>看過網球王子都知道什麼叫做「無我的境界」，但當了那麼久的工程師還沒有聽過「無緒」這東西。無緒 (Cluelessness) 由 Martin Rinard 提出，指的是在開發和維護軟體系統時，應該避免讓開發人員深入了解系統！</p><h3 id="Angular-Unit-Test-學習Jasmine的使用技巧-測試異步的四種方式"><a href="#Angular-Unit-Test-學習Jasmine的使用技巧-測試異步的四種方式" class="headerlink" title="[ Angular Unit Test ] 學習Jasmine的使用技巧 + 測試異步的四種方式"></a><a href="https://jhlstudy.blogspot.com/2019/10/angular-unit-test-jasmine.html?fbclid=IwAR3AbDCVO5cAX_rLRhxEE1gMzI3x-AQWBngXXuPdsUKHjQ5i826-si0Lpuc" target="_blank" rel="noopener">[ Angular Unit Test ] 學習Jasmine的使用技巧 + 測試異步的四種方式</a></h3><p>在剛開始寫單元測試的時候，都會遇到『知道想寫哪些驗證，卻不知道要怎麼把這些驗證寫出來』，然後會開始去看官網的各式範例，但卻發現看不懂在做些什麼事，而這其實只是沒先去了解如何使用 Jasmine，讓我們和作者一起踏入前端的單元測試！</p><h3 id="11-Top-React-Developer-Tools-for-2020"><a href="#11-Top-React-Developer-Tools-for-2020" class="headerlink" title="11 Top React Developer Tools for 2020"></a><a href="https://blog.bitsrc.io/11-top-react-developer-tools-for-2020-3860f734030b" target="_blank" rel="noopener">11 Top React Developer Tools for 2020</a></h3><p>最後還是不忘本的來一個 React 的選讀XD，雖然 2019 年還沒有過完，但作者還是精選出了 2020 年推薦各位擁有的 11 個 React 頂級開發工具，千萬不要懷疑為什麼是 2020 年，只需要記得你值得擁有這一切：）</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Git-怎麼這麼難用？Git-Flow-好習慣-不再苦惱"><a href="#Git-怎麼這麼難用？Git-Flow-好習慣-不再苦惱" class="headerlink" title="Git 怎麼這麼難用？Git Flow + 好習慣 = 不再苦惱"></a><a href="https://medium.com/kuma%E8%80%81%E5%B8%AB%E7%9A%84%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E6%95%99%E5%AE%A4/%E5%9F%BA%E7%A4%8E-git-flow-%E5%B7%A5%E4%BD%9C%E6%B3%95-fa50b1dddc4f" target="_blank" rel="noopener">Git 怎麼這麼難用？Git Flow + 好習慣 = 不再苦惱</a></h3><p>自從 Linus Torvald 發明了新一代的版本控制工具 Git 之後，Git 就逐漸成為開發人員的標準配備。但如果你才剛開始學習 Git，你可能會覺得 Git 真的超難用，因為三不五時就 push 不上去、或是要幫同事修各種 conflict 搞得自己灰頭土臉。而這篇文章介紹了 Git Flow，告訴你什麼時後該開 branch，各種 branch 又有什麼不同的功能，很適合剛接觸 Git 的新手</p><h3 id="Clean-Architecture-in-Go"><a href="#Clean-Architecture-in-Go" class="headerlink" title="Clean Architecture in Go"></a><a href="https://medium.com/@hatajoe/clean-architecture-in-go-4030f11ec1b1" target="_blank" rel="noopener">Clean Architecture in Go</a></h3><p>如果說 <a href="https://www.tenlong.com.tw/products/9789862017050" target="_blank" rel="noopener">Clean Code</a> 是教你做出精美的磚頭，那 <a href="https://www.tenlong.com.tw/products/9789864342945" target="_blank" rel="noopener">Clean Architecture</a> 就是教你如何把房子蓋好。在 Clean Architecture 的架構中你的應用程式可以被拆分為 Entities、Use Cases 等等好幾層，其中每層都負責不同的功能。但你知道的，理論跟實務間總是有一段不小的落差，所以推薦這篇文章用實際的例子告訴你，Go 的程式應該要怎麼拆分才能符合 Clean Architecture 的精神，非常受用的一篇文章</p><h3 id="如何為自己的-podcast-寫一個網站"><a href="#如何為自己的-podcast-寫一個網站" class="headerlink" title="如何為自己的 podcast 寫一個網站"></a><a href="https://medium.com/the-bayesian-trap/intro-to-overbuild-podcast-3d3ff725beba" target="_blank" rel="noopener">如何為自己的 podcast 寫一個網站</a></h3><p>不知道大家有沒有在聽 Podcast 的習慣，我自己是滿喜歡在上學途中或是搭車時聽，用 Podcast 開啟新的一天總覺得心情特別好。這邊我要跟大家推薦最近無意間發現的新 Podcast - Overbuild 頂樓加蓋，主講人 Denny 跟 Affe 分別是工程師跟 PM，雖然 Podcast 的內容跟技術沒有很直接相關，但他們會分享一些在工作上或是人生道路上的想法，如果你也有在聽 Podcast 的話我個人很推～</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="英國／我的英國求職故事"><a href="#英國／我的英國求職故事" class="headerlink" title="英國／我的英國求職故事"></a><a href="https://bugtender.com/blog/about_find_an_engineer_job_in_uk" target="_blank" rel="noopener">英國／我的英國求職故事</a></h3><p>台灣土生土長工程師 Bugtender，1x Developer 一倍工程師，如何飄洋過海？面臨著存款一天一天的燃燒的囧境，究竟，Bugtender 是否可以找到工作呢？</p><h3 id="浪漫潛逃至歐洲工作不是一場夢"><a href="#浪漫潛逃至歐洲工作不是一場夢" class="headerlink" title="浪漫潛逃至歐洲工作不是一場夢"></a><a href="https://column.meet.jobs/how-to-work-in-europe-part1/" target="_blank" rel="noopener">浪漫潛逃至歐洲工作不是一場夢</a></h3><p>Work Life Balance 是每個人嚮往的生活，那麼到歐洲生活是不是真的有想像的這麼美好?又有哪些求職策略又有可以採用呢？讓我們繼續看下去。</p><h3 id="在英國職場文化，「After-Work-Social」是人際溝通的重要一環"><a href="#在英國職場文化，「After-Work-Social」是人際溝通的重要一環" class="headerlink" title="在英國職場文化，「After Work Social」是人際溝通的重要一環"></a><a href="https://www.thenewslens.com/article/121312" target="_blank" rel="noopener">在英國職場文化，「After Work Social」是人際溝通的重要一環</a></h3><p>英國人講話注重禮貌以不說死為原則，即便英國腔聽起來再性感，講話迂迴偶而會想把彼此都掐死。但在這邊學習到最多的，也正是因為這邊的複雜度與挑戰性。每天在有限的的工時內規劃、斡旋、執行，推銷成果，也是筆者在這邊覺得偶而充滿挫折，想買張機票飛回台灣吃滷肉飯一了百了，最後還是心甘情願吃著英國臭豬和炸魚薯條的原因。 by Wei Chen Lee</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Welcome-to-the-Matrix"><a href="#Welcome-to-the-Matrix" class="headerlink" title="Welcome to the Matrix"></a><a href="https://jenkins.io/blog/2019/11/22/welcome-to-the-matrix/" target="_blank" rel="noopener">Welcome to the Matrix</a></h3><p>使用 Jenkins Pipeline 時覺得一樣的動作常常重複在做嗎？這意味著在 Pipeline 中必須一直複製相同的 Stage，所以假如要修改的話，複製的 Stage 通通都要改一次 T_T 維護這樣的 Pipeline 檔案是很累人的一件事情，因此在 Declarative Pipeline 1.5.0-beta1 推出了 matrix 功能，讓使用者可以列舉出一個類似陣列的變數，然後讓 stage 可以類似像是 Foreach 一樣平行執行所有的內容</p><h3 id="Loki-Reaches-GA-with-v1-0-0-Release"><a href="#Loki-Reaches-GA-with-v1-0-0-Release" class="headerlink" title="Loki Reaches GA with v1.0.0 Release"></a><a href="https://grafana.com/blog/2019/11/20/loki-reaches-ga-with-v1.0.0-release/" target="_blank" rel="noopener">Loki Reaches GA with v1.0.0 Release</a></h3><p>號稱 ELK 的最大對手 A.K.A. Loki 在日前總算推出 1.0.0 GA 版本，跟之前的版本相比，大大的增加了其穩定性，官方很有自信地表示已經在 Production 環境運行 Loki 在收集 Log，也推薦大家跑在自己的 Production 環境中 (偷笑)</p><h3 id="10-simple-Linux-tips-which-save-50-of-my-time-in-the-command-line"><a href="#10-simple-Linux-tips-which-save-50-of-my-time-in-the-command-line" class="headerlink" title="10 simple Linux tips which save 50% of my time in the command line"></a><a href="https://dev.to/javinpaul/10-simple-linux-tips-which-save-50-of-my-time-in-the-command-line-4moo" target="_blank" rel="noopener">10 simple Linux tips which save 50% of my time in the command line</a></h3><p>工作上會接觸到 Linux 環境的人，應該或多或少會使用到 Terminal 來運行指令，處理工作項目；每次看到用起來很順暢的神人同事時，是不是會一直感到很羨慕呢？這篇文章的作者推薦能夠讓他節省 50% 時間的 10 個簡單的 Linux Tips，趕快學起來，讓自己變成別人羨慕的對象！</p><h3 id="Termd"><a href="#Termd" class="headerlink" title="Termd"></a><a href="https://github.com/tj/go-termd" target="_blank" rel="noopener">Termd</a></h3><p>Termd 是一個可以讓 Terminal Render 出 Markdown 格式文件的小工具 (包含 Code Block 和 Syntax Highlighting)，推薦給離不開 Termainal 的深度中毒者 = =+</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - 82 年次，單純相信努力不會騙人</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>#3 第三期 - 歡迎進入駭客的思考領域</title>
      <link href="/2019/11/19/03-learning-hacker-thinking/"/>
      <url>/2019/11/19/03-learning-hacker-thinking/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="進入駭客的思考領域-—-從-DEVCORE-CONF-學駭客思維-StarBugs-星巴哥技術週刊"><a href="#進入駭客的思考領域-—-從-DEVCORE-CONF-學駭客思維-StarBugs-星巴哥技術週刊" class="headerlink" title="進入駭客的思考領域 — 從 DEVCORE CONF 學駭客思維 | StarBugs 星巴哥技術週刊"></a><a href="https://medium.com/@LukaTW/learn-hacker-thinking-b6bb4f189e3a" target="_blank" rel="noopener">進入駭客的思考領域 — 從 DEVCORE CONF 學駭客思維 | StarBugs 星巴哥技術週刊</a></h3><p>什麼是駭客思維？讓我們跟著 DEVCORE 舉辦的頂級資安研討會學習駭客是如何規劃攻擊，進一步提昇資訊安全的意識。</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="如何讓自己成為失敗的軟體工程師"><a href="#如何讓自己成為失敗的軟體工程師" class="headerlink" title="如何讓自己成為失敗的軟體工程師"></a><a href="https://blog.niclin.tw/2019/08/26/how-to-be-a-bad-developer/?fbclid=IwAR2u7deyJ5exEKD_NToqhpBgUJS_Me7kyodEmC1loTzwyFK6mHbYgqkH3EE" target="_blank" rel="noopener">如何讓自己成為失敗的軟體工程師</a></h3><p>所有的文章都在告訴你如何成為一位好工程師，怎麼寫好程式碼才不造成別人的困擾，但知己知彼敗戰百勝，與其盲目追求完美的程式，不如先來確認自己有沒有不小心踩到「失敗的工程師」那條線。</p><h3 id="忍者程式碼（Ninja-Code）"><a href="#忍者程式碼（Ninja-Code）" class="headerlink" title="忍者程式碼（Ninja Code）"></a><a href="https://medium.com/@lenchen/忍者程式碼-ninja-code-cc5e4a70bafc" target="_blank" rel="noopener">忍者程式碼（Ninja Code）</a></h3><p>本篇文章的作者翻開覆蓋的魔法卡「傑出的反串之手」，以忍者為例子重新詮釋何謂程式碼，讓程式中的每一段都像真正的忍者一樣輕鬆、迅速、暢快、無負擔，最後千萬別忘了還要像秘密捲軸一樣讓人讀不懂看不明白！</p><h3 id="工程師應該放心大膽地創造技術負債"><a href="#工程師應該放心大膽地創造技術負債" class="headerlink" title="工程師應該放心大膽地創造技術負債"></a><a href="https://medium.com/@p5d12000/工程師應該放心大膽地創造技術負債-a8022d85810" target="_blank" rel="noopener">工程師應該放心大膽地創造技術負債</a></h3><p>歡迎來到本週最幹話之首，文中闡述了現今資訊業最黑暗的一面，我想只有看破一切的工程師才有辦法將技術負債闡述得如此透徹。不過記得有些人走著走著就散了，有些文章看著看著也笑一下就好，但各位身邊的環境如有雷同，就純屬巧合了！我們下週見：）</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="A-journey-from-containerization-to-orchestration-and-beyond"><a href="#A-journey-from-containerization-to-orchestration-and-beyond" class="headerlink" title="A journey from containerization to orchestration and beyond"></a><a href="https://iximiuz.com/en/posts/journey-from-containerization-to-orchestration-and-beyond/" target="_blank" rel="noopener">A journey from containerization to orchestration and beyond</a></h3><p>這幾年 container 相關的技術逐漸成熟，也越來越多公司導入 Docker 及 K8s。當然，這些技術的最底層還是 Linux 提供的基本功能：namespace 跟 cgroups，本文從這些底層的技術慢慢講到最 High Level 的容器編排，看完之後也更能了解 runc、docker、K8s 這些技術的定位</p><h3 id="用傳紙條理解-WebSocket"><a href="#用傳紙條理解-WebSocket" class="headerlink" title="用傳紙條理解 WebSocket"></a><a href="https://medium.com/dezchuang/rookie-to-learn-websocket-cfc7b172daa3" target="_blank" rel="noopener">用傳紙條理解 WebSocket</a></h3><p>一直以來都滿喜歡這種用故事來講解技術的文章，如果你不太清楚 WebSocket 相對於傳統的 Polling 有什麼優點，那這篇文章就是給你看的！而且文末也有一個 Node.js 小範例可以自己寫來玩玩看</p><h3 id="Understanding-Rust-Lifetimes"><a href="#Understanding-Rust-Lifetimes" class="headerlink" title="Understanding Rust Lifetimes"></a><a href="https://medium.com/nearprotocol/understanding-rust-lifetimes-e813bcd405fa" target="_blank" rel="noopener">Understanding Rust Lifetimes</a></h3><p>變數的生命週期是 Rust 最重要但也最複雜的 feature，我本人剛寫 Rust 時也常被他搞得暈頭轉向，所以推薦這篇文章給搞不清楚變數所有權的 Rust 苦手們，希望各位在看了之後能有如醍醐灌頂、發現 Rust 生命週期的美好</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Learn-by-Contributing"><a href="#Learn-by-Contributing" class="headerlink" title="Learn by Contributing"></a><a href="https://dev.to/agoldis/learn-by-contributing-27g6" target="_blank" rel="noopener">Learn by Contributing</a></h3><p>貢獻開源軟體可以讓你學到什麼？其中最重要的幾點分別是：你可以跟專家合作，你可以見識到專業的軟體開發方式，並且證明你的專業技術是實打實的。這篇文章提供非常具體的作法讓你跟著實踐，推薦一讀。</p><h3 id="JavaScript-The-prototype-chain-in-depth"><a href="#JavaScript-The-prototype-chain-in-depth" class="headerlink" title="JavaScript - The prototype chain in depth"></a><a href="https://www.debuggr.io/js-prototype-in-depth/" target="_blank" rel="noopener">JavaScript - The prototype chain in depth</a></h3><p>深入 JS 原型鏈 - 從 JS 原型鏈學習物件繼承的概念。</p><h3 id="Common-Node-js-mistakes-in-Lambda"><a href="#Common-Node-js-mistakes-in-Lambda" class="headerlink" title="Common Node.js mistakes in Lambda"></a><a href="https://dev.to/theburningmonk/common-node-js-mistakes-in-lambda-4a4j" target="_blank" rel="noopener">Common Node.js mistakes in Lambda</a></h3><p>在 AWS Lambda 上寫 Node.js 時，幾個常犯的錯誤。由 AWS Serverless Hero @theburningmonk 帶給大家的開發經驗談。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="【Dev】究竟為什麼升級到-Python3-需要花這麼久的時間？"><a href="#【Dev】究竟為什麼升級到-Python3-需要花這麼久的時間？" class="headerlink" title="【Dev】究竟為什麼升級到 Python3 需要花這麼久的時間？"></a>【Dev】究竟為什麼升級到 Python3 需要花這麼久的時間？</h3><p>★ 在 2014 年的 Pycon，Python 的父親 Guido van Rossum 告訴大家是該時候往 Python 3 邁進了，在日常的工作中採用它 ；在經過了多年的努力之後，終於決定在 2020/01/01 停止支援 Python 2，有些公司已經升級完畢，，然而應該還有很多的公司不會馬上動手，究竟這 Python 3 到底是命運的安排，還是情感的糾結，或是另有隱情，真相到底是什麼 讓我們繼續看下去。</p><p>★ Python 3 最主要的目的是要將舊版最大的問題給移除掉 (將所有的 String Render 成 Unicode)， 開發團隊認為大家應該會馬上大刀闊斧進行升級，所以讓 Python 3 不向下相容，然而大家卻都不買單，因為認為改進的東西不多，結果導致 Python 2 還是持續地開發下去，新版的採用速度究竟有多慢呢？雖然 Python 3 主要版本在 2008 就發布了，但一直拖到現在XD</p><p>★ 在一開始有很多不要採用 Python 3 的好理由，最主要的理由當然就是其不向下相容，這點導致很多主要的 Library 都很猶豫升級，而且一開始其實要 Porting 過去也不簡單，但隨著 2016 Python 3.5 推出許多重大功能 (Matrix Multiplication, Asyncio, OrderedDict 的加速)，而且後續版本的持續推出 (Pathlib, f-string manipulation)，隨著這些改變，還有人們主要使用的 Library 也都升級，這才讓結束支援 Python 2 成為可能，</p><p>★ 雖然 Python 3 是目前的主要版本，但是根據 Package 下載數據顯示，截至 2019/09 仍然至少有 40% 的下載量來自 2.7，目前大部分 Flask 的下載都已經是 3 了，但是 botocore (AWS Python SDK) 只有 26% 下載的下載量是 3，不過雖然 2 即將結束支援，但既有的程式還是可以動，只是假如後續有資安漏洞或是有什麼 Bug 不會再繼續維護了，不過還有很多周邊的廠商也要跟著更新，所以可以預期可能還需要數年之久</p><p>★ 而究竟為什麼採用的速度會這麼的慢呢？為什麼不要等到採用率更高才停止支援 2 呢？其實大多數的大型組織，他們採用新技術的速度比你我想像的還要慢很多很多，例如許多銀行還是在使用 FORTRAN 跟 COBOL；儘管有許多公司描述他們如何升級，但有更多的公司應該會長期保留在 Python 2 上面，為什麼會這樣呢？因為升級要花很多的時間，而且這是一個高度的政治決策，再加上人都有慣性，即使是在高技術含量的公司內，例如 Facebook 為了採用 Python 3，Jason Fried 從 2014 年開始重寫服務，一路走來，他犯了很多的錯誤，也改了很多的代碼，還需要做新開發人員的培訓，後來他又跑去跟 ŁukaszLanga合作將Instagram 轉換為Python 3，花了差不多十個月；</p><p>★ 其次是安全問題，最諷刺的點在於，正在看這篇文章的你，可能會認為不升級的風險比較大，但是在較大的組織中，並不允許內部人員自己升級 Python，必須要由管理員或是安全團隊來負責推送更新，所以如果 Python 2 是安全團隊認可使用的版本，那麼可能需要做出重大的努力才能說服人們將其切換到 3，這種情況尤其可能發生在到嚴格監管和政府的環境中；Python 經歷了從 2 到 3 的漫漫長路，個人和一些新創公司都已經採用新版了，第二次的大遷移即將發生在大型企業開始遷移的時候，所以在 2020 應該可以看到剛剛提到的 40% 繼續下降，但變化應該是慢慢地遞減，而且也還會有許多的公司繼續運行 2.7 跟大家一起迎向未來</p><p>▍原文連結：<a href="https://stackoverflow.blog/2019/11/14/why-is-the-migration-to-python-3-taking-so-long/" target="_blank" rel="noopener">https://stackoverflow.blog/2019/11/14/why-is-the-migration-to-python-3-taking-so-long/</a></p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - 82 年次，單純相信努力不會騙人</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>#2 第二期 - 還好沒有第二期就富奸</title>
      <link href="/2019/11/12/02-from-A-to-Z-side-project/"/>
      <url>/2019/11/12/02-from-A-to-Z-side-project/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Side-Project-從無到有-Medium-轉-Markdown-feat-NodeJS-StarBugs-星巴哥技術週刊"><a href="#Side-Project-從無到有-Medium-轉-Markdown-feat-NodeJS-StarBugs-星巴哥技術週刊" class="headerlink" title="Side Project 從無到有-Medium 轉 Markdown feat. NodeJS | StarBugs 星巴哥技術週刊"></a><a href="https://medium.com/starbugs/side-project-%E5%BE%9E%E7%84%A1%E5%88%B0%E6%9C%89-medium-%E8%BD%89-markdown-feat-nodejs-732acd68a7cb" target="_blank" rel="noopener">Side Project 從無到有-Medium 轉 Markdown feat. NodeJS | StarBugs 星巴哥技術週刊</a></h3><p>Hi！大家好，我是神 Q 超人，不曉得大家都怎麼面對自己想做的 Side Project，有時候想了很久還沒開始，有時候好不容易開始了卻失敗，但就我而言無論是否開始、失敗或成功，都會在整段旅程中享受與思考的拉扯拔河，並從這個過程中感到滿足，我想工程師的生活就是那麼樸實無華且枯燥 - 本週專欄作者 <a href="https://medium.com/@GQSM" target="_blank" rel="noopener">@GQSM</a></p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Slow-down-your-code-with-goroutines"><a href="#Slow-down-your-code-with-goroutines" class="headerlink" title="Slow down your code with goroutines"></a><a href="https://appliedgo.net/concurrencyslower/" target="_blank" rel="noopener">Slow down your code with goroutines</a></h3><p>Goroutine 是 Go 最廣為人知的 feature，善用 Goroutine 可以提高程式的效能，但若不小心誤用了，也可能使你的程式比原本還慢</p><h3 id="The-Twelve-Factor-App"><a href="#The-Twelve-Factor-App" class="headerlink" title="The Twelve-Factor App"></a><a href="https://12factor.net/" target="_blank" rel="noopener">The Twelve-Factor App</a></h3><p>12-Factor App 是一種建立軟體服務的方法，裡面講到了該怎麼設計你的服務才能易於擴充、部署但又不會使你的 Codebase 太肥，我自己看完這一系列也覺得收穫很多，所以在這邊分享給大家</p><h3 id="編譯器-LLVM-淺淺玩"><a href="#編譯器-LLVM-淺淺玩" class="headerlink" title="編譯器 LLVM 淺淺玩"></a><a href="https://medium.com/@zetavg/%E7%B7%A8%E8%AD%AF%E5%99%A8-llvm-%E6%B7%BA%E6%B7%BA%E7%8E%A9-42a58c7a7309" target="_blank" rel="noopener">編譯器 LLVM 淺淺玩</a></h3><p>也許你聽過 LLVM、知道他跟編譯器有點關係，但你知道他到底在紅什麼嗎？而編譯器又是如何把程式碼 Compile 成 Machine Code？如果不知道的話快來看看這篇～惡補一下編譯器的基礎知識</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Bulletproof-node-js-project-architecture"><a href="#Bulletproof-node-js-project-architecture" class="headerlink" title="Bulletproof node.js project architecture"></a><a href="https://dev.to/santypk4/bulletproof-node-js-project-architecture-4epf" target="_blank" rel="noopener">Bulletproof node.js project architecture</a></h3><p>Express 是個很棒的 node.js 框架，但是它沒有給你任何的線索，讓你知道如何組織你的 node.js 專案，這確實是個需要解決的問題。本文將帶給你一套可以依循的方法，讓你知道如何組織你的資料夾結構，如何使用三層架構，又如何使用服務層、發佈/訂閱層、依賴注入、單元測試…等等的方法來組織你的專案。</p><h3 id="The-perfect-architecture-flow-for-your-next-Node-js-project"><a href="#The-perfect-architecture-flow-for-your-next-Node-js-project" class="headerlink" title="The perfect architecture flow for your next Node.js project"></a><a href="https://dev.to/bnevilleoneill/the-perfect-architecture-flow-for-your-next-node-js-project-1ail" target="_blank" rel="noopener">The perfect architecture flow for your next Node.js project</a></h3><p>你的下一個 Node.js 專案可以考慮的完美的架構流程。本篇文章指出了「不好的」專案架構導致了哪些問題，並進一步的歸納出我們可以採用的開發流程，讓 Node.js 專案變得程式碼更可讀、更乾淨，能夠重複使用程式碼，避免重複，這樣我們可以更簡單地在專案中加上新的功能。聽起來是不是很棒呢 :)</p><h3 id="Everything-you-need-to-know-about-Node-js"><a href="#Everything-you-need-to-know-about-Node-js" class="headerlink" title="Everything you need to know about Node.js"></a><a href="https://dev.to/jorge_rockr/everything-you-need-to-know-about-node-js-lnc" target="_blank" rel="noopener">Everything you need to know about Node.js</a></h3><p>本文列出了幾個不錯的思考點：1. 這個世界在 Node.js 出現之前是什麼樣子？ 2. C10k  問題的探討 3. Nodejs 與 Event Loop 4. CPU 計算密集型的問題 5.Worker Threads 是什麼，能吃嘛？ (本文有很高的自 high 成分請酌量服用 XD)</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="【Kubernetes】Skaffold-是什麼？他可以吃嗎？"><a href="#【Kubernetes】Skaffold-是什麼？他可以吃嗎？" class="headerlink" title="【Kubernetes】Skaffold 是什麼？他可以吃嗎？"></a>【Kubernetes】Skaffold 是什麼？他可以吃嗎？</h3><p>★ Skaffold 最近 GA 了，他究竟是一個什麼樣的專案呢？在 2017 年時 Google 觀察到當開發者在開發原生 K8S 應用程式時，花了相當多的時間在建置和管理 Container Images，而且必須手動更新 K8S 的 Manifests，就算每次只改了一點點程式碼也要重新 Deploy，所以決定要開發一個工具來將這些任務給自動化，幫助開發者集中他們的注意力在撰寫和維護程式碼上，而不是深陷 “編輯-&gt;除錯-&gt;部署” 這重複性的泥淖當中，Skaffold 也因此應運而生</p><p>★ Skaffold 最主要的指令為 <code>skaffold dev</code>，他會去監視本地端的程式碼，一旦有改變被偵測到，應用程式就會自動即時的重新 Build 和 Deploy 到你的 K8S Cluster 中；而且 Skaffold 已經不再只是 Build 和 Deploy 的工具而已，他已經成為可以增加開發者速度和生產力的工具</p><p>★ 除了本地端開發之外，Skaffold 也很適合跟 CI/CD 框架整合在一起，例如單一個指令 <code>skaffold run</code> 運行在 Pipeline 中的話，就可以輕易的將應用程式 Build 跟 Deploy 完成，而其實他是由 <code>skaffold build</code> 跟 <code>skaffold deploy</code> 兩個指令所組成，有需要的人也可以分開使用；<code>skaffold render</code> 可以用來先建立應用程式的 Image 並且輸出 K8S 的 Template Manifest, 而不是真的部屬到 K8S Cluster 中，可以用來跟 GitOps 流程整合在一起</p><p>★ 他的 Profile 功能可以讓開發者使用同樣的 Skaffold 組態 Deploy 應用程式到不同的 K8S Cluster 中，而不需要修改任何的東西；另外還有一個強大的指令叫做 <code>skaffold debug</code>，除了可以持續不斷地 Build 和 Deploy 應用程式之外，還會幫忙 Forward 任何需要的 Debugging Port 到你的本地端機器，反正就是要盡可能地讓開發者省時省事專心地開發程式就對了，說了那麼多，有沒有想要心動手癢想要嘗試了呢？</p><p>▍相關連結 1：<a href="https://cloud.google.com/blog/products/application-development/kubernetes-development-simplified-skaffold-is-now-ga" target="_blank" rel="noopener">https://cloud.google.com/blog/products/application-development/kubernetes-development-simplified-skaffold-is-now-ga</a></p><p>▍相關連結 2：<a href="https://devclass.com/2019/11/08/google-releases-skaffold-to-simplify-kubernetes-app-lifecycle-management/" target="_blank" rel="noopener">https://devclass.com/2019/11/08/google-releases-skaffold-to-simplify-kubernetes-app-lifecycle-management/</a></p><p>▍相關連結 3：<a href="https://www.cbronline.com/news/skaffold-kubernetes-istio" target="_blank" rel="noopener">https://www.cbronline.com/news/skaffold-kubernetes-istio</a></p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - 82 年次，單純相信努力不會騙人</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>#1 創刊號 - 我就是要寫技術週刊</title>
      <link href="/2019/11/05/01-starbugs-weekly/"/>
      <url>/2019/11/05/01-starbugs-weekly/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="WebAssembly-實戰-–-讓-Go-與-JS-在瀏覽器上共舞-StarBugs-星巴哥技術週刊"><a href="#WebAssembly-實戰-–-讓-Go-與-JS-在瀏覽器上共舞-StarBugs-星巴哥技術週刊" class="headerlink" title="WebAssembly 實戰 – 讓 Go 與 JS 在瀏覽器上共舞 | StarBugs 星巴哥技術週刊"></a><a href="https://medium.com/starbugs/run-golang-on-browser-using-wasm-c0db53d89775" target="_blank" rel="noopener">WebAssembly 實戰 – 讓 Go 與 JS 在瀏覽器上共舞 | StarBugs 星巴哥技術週刊</a></h3><p>如果你有在關注前端的話應該會聽過 WebAssembly 這東西，WebAssembly 是一種跑在瀏覽器上的低階語言，他在瀏覽器上能以接近原生應用的效能執行，所以以前受限於效能而比較難做到的那些應用（遊戲、繪圖軟體等），以後很有可能在網頁上就可以做到，光想到就覺得好興奮啊啊啊 - 本週專欄作者 <a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a></p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Making-your-UI-tests-resilient-to-change"><a href="#Making-your-UI-tests-resilient-to-change" class="headerlink" title="Making your UI tests resilient to change"></a><a href="https://kentcdodds.com/blog/making-your-ui-tests-resilient-to-change/?fbclid=IwAR3vvhHhFzsiwp9P9SrH7Gv-x5MdstQLR2wWUq9Ta5C1jqTUsYfhlaakl8c" target="_blank" rel="noopener">Making your UI tests resilient to change</a></h3><p>身為前端工程師，寫下單元測試一定很帥，但是如果這種帥度被客戶要求改個什麼 UI，明明行為沒變測試案例卻爆掉我就覺得不行，還在用 ClassName 或 children 找 DOM 嗎？該是時候拯救那脆弱的測試案例了！</p><h3 id="務實的react-component-unit-test"><a href="#務實的react-component-unit-test" class="headerlink" title="務實的react component unit test"></a><a href="https://www.morrisctech.com/2019/07/03/react_render_test/?fbclid=IwAR2e8ihe2Lfy9OcCNiU9Ah7XkzcgWpRZA-hieK5IAGpeFyNS1LyKm1Iieu8" target="_blank" rel="noopener">務實的react component unit test</a></h3><p>你知道 React 該怎麼做測試嗎？來來來！有些事情就是得從實務開始，寫下最務實的 Component Unit Test！</p><h3 id="Atomic-Design"><a href="#Atomic-Design" class="headerlink" title="Atomic Design"></a><a href="http://atomicdesign.bradfrost.com/table-of-contents/" target="_blank" rel="noopener">Atomic Design</a></h3><p>雖然 Luka 說要推薦文章，但我無法控制我的手貼上這本「Atomic Design（原子設計）」，因為我只給大家最好的。本書的作者利用「原子」來提設計，意思是將每個元素切割成原子，並透過不同的原子互相組合成分子、物件、模板一直到建構出整個頁面，是一種以分層的方式創建介面的設計方法。不學不會怎樣，學了很不一樣。</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Understanding-Worker-Threads-in-Node-js"><a href="#Understanding-Worker-Threads-in-Node-js" class="headerlink" title="Understanding Worker Threads in Node.js"></a><a href="https://nodesource.com/blog/worker-threads-nodejs/" target="_blank" rel="noopener">Understanding Worker Threads in Node.js</a></h3><p>Node.js 從 v10.5 開始支援 Worker Thread，也就是說 Node.js 終於可以寫多核心程式，以後再也不能嘴 Node.js 只能跑 Single Thread 了</p><h3 id="Kubernetes-Comic"><a href="#Kubernetes-Comic" class="headerlink" title="Kubernetes Comic"></a><a href="https://cloud.google.com/kubernetes-engine/kubernetes-comic/" target="_blank" rel="noopener">Kubernetes Comic</a></h3><p>常常聽到 Kubernetes(K8s) 但卻不知道那是什麼嗎，那不妨看看這篇漫畫，裡面有講到 k8s 的設計理念和目標，看完之後應該會比較知道 K8s 在夯什麼</p><h3 id="VSCode-批踢踢"><a href="#VSCode-批踢踢" class="headerlink" title="VSCode 批踢踢"></a><a href="https://marketplace.visualstudio.com/items?itemName=Yukai.vscode-ptt" target="_blank" rel="noopener">VSCode 批踢踢</a></h3><p>有在用 VSCode 而且又喜歡在上班時間偷逛 PTT 的各位有福啦，VSCode PTT 能讓你直接在 VSCode 裡逛 PTT，老闆你以為我在寫扣嗎？我其實在上批踢踢啊！！</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="What-happened-when-I-turned-on-notifications-for-every-app-site-and-tool-for-a-month"><a href="#What-happened-when-I-turned-on-notifications-for-every-app-site-and-tool-for-a-month" class="headerlink" title="What happened when I turned on notifications for every app, site, and tool for a month"></a><a href="https://blog.rescuetime.com/notification-madness-focus-experiment/" target="_blank" rel="noopener">What happened when I turned on notifications for every app, site, and tool for a month</a></h3><p>Daniel 把手機上的所有通知關掉，進行了一個月的實驗，赫然發現手機通知不僅僅在打擾我們，同時也在摧毀我們的生產力。</p><h3 id="Killed-by-Google"><a href="#Killed-by-Google" class="headerlink" title="Killed by Google"></a><a href="https://killedbygoogle.com/" target="_blank" rel="noopener">Killed by Google</a></h3><p>多少的服務被 Google 給滅了？我們懷念它。</p><h3 id="The-next-career-step-for-Senior-Software-Engineers"><a href="#The-next-career-step-for-Senior-Software-Engineers" class="headerlink" title="The next career step for Senior Software Engineers"></a><a href="https://codewithoutrules.com/2018/10/10/beyond-senior-software-engineer/?utm_source=wanqu.co&utm_campaign=Wanqu+Daily&utm_medium=website" target="_blank" rel="noopener">The next career step for Senior Software Engineers</a></h3><p>你已經工作了好幾年，也被升職了好幾次，但此時卻不禁有點徬徨，下一步該何去何從？</p><h3 id="How-to-Build-Good-Software"><a href="#How-to-Build-Good-Software" class="headerlink" title="How to Build Good Software"></a><a href="https://www.csc.gov.sg/articles/how-to-build-good-software" target="_blank" rel="noopener">How to Build Good Software</a></h3><p>爛軟體是怎麼被做出來的？又該如何做一個好的軟體呢？三個原則：從簡單開始，持續尋找問題並解決，儘可能雇用最好的工程師。看到亮點了嘛？趕快跟你老闆講，嘿！</p><h3 id="AWS-costs-every-programmer-should-know"><a href="#AWS-costs-every-programmer-should-know" class="headerlink" title="AWS costs every programmer should know"></a><a href="https://david-codes.hatanian.com/2019/06/09/aws-costs-every-programmer-should-now.html" target="_blank" rel="noopener">AWS costs every programmer should know</a></h3><p>AWS 的計費方式很複雜對吧？David 用一個簡單易懂的方式，讓我們可以快速的估計 AWS 到底花了我們多少錢。是不是很棒呢？</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="【Web】HTTP3-的前世今生與未來"><a href="#【Web】HTTP3-的前世今生與未來" class="headerlink" title="【Web】HTTP3 的前世今生與未來"></a>【Web】HTTP3 的前世今生與未來</h3><p>★ 從 Cloudflare 宣布要支援 QUIC 與 HTTP/3 已經過去一年了，新的協定旨在建立更快，更可靠與更安全的網路世界，而在這一年之間，Cloudflare 與網路界的巨頭包含 Google Chrome 和 Mozilla Firefox 一起撰寫 HTTP/3 與 QUIC 的標準文件，而在一年後，Cloudflare 終於宣佈其 Edge Network 已經可以支援 QUIC 與 HTTP/3 了！接著來看看為什麼需要它！</p><p>★ HTTP/1.0 是在 1996 年出現的，它定義了今天我們所熟知的 HTTP 基礎，在 Client 與 Server 當中，每一個 HTTP 的 Request/Response 都會建立一個 TCP 連線，所以在每個請求結束之前，都必須完成 TCP 與 TLS 的 Handshakes，最慘的在於 TCP 開始傳輸資料之前會有一段暖身的時間，稱之為 Slow Start，他會避免傳輸網路所無法負載的封包，但也造成無法立即使用所有的網路頻寬</p><p>★ 幾年後 HTTP/1.1 嘗試提出 keep-alive 來解決這個問題，讓 Client 端可以重複利用 TCP 連線，不過有一好沒兩好，當多個 Request 共用相同的連線時，他們必須要排隊一個一個來；隨著 Web 技術的發展，瀏覽器發現在同一時間其需要更多的連線，而 HTTP/1.1 只允許 Client 端同一時間進行一次的 Request/Response 交換，並無法達成同一時間有多個連線</p><p>★ 因此又有了 HTTP/2，其引進了 HTTP Streams 的概念，讓 HTTP 可以在同一個 TCP 連線內實作多個不同的 HTTP 資料交換，讓瀏覽器可以更有效率地重複利用 TCP 連線，有一好沒兩好再次發生…由於網路壅塞的關係，所有共用同一個連線的請求都一起可能造成封包的遺失…</p><p>★ 所以救世主 HTTP/3 就登場了！其捨棄使用 TCP 來當作 Session 的傳輸層，而是使用一種稱為 QUIC 的新通訊協定來解決上面提到的所有問題，更詳細的內容就請參閱詳細原文了！</p><p>▍原文連結：<a href="https://blog.cloudflare.com/http3-the-past-present-and-future/" target="_blank" rel="noopener">https://blog.cloudflare.com/http3-the-past-present-and-future/</a></p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - 82 年次，單純相信努力不會騙人</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
